
USB_CAN_H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5ac  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800c844  0800c844  0001c844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c910  0800c910  0001c910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c918  0800c918  0001c918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c91c  0800c91c  0001c91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  24000000  0800c920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f7c  24000104  0800ca24  00020104  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002080  0800ca24  00022080  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020132  2**0
                  CONTENTS, READONLY
 11 .debug_info   00022e1d  00000000  00000000  00020175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000461e  00000000  00000000  00042f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001ac8  00000000  00000000  000475b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000014b3  00000000  00000000  00049078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003bc26  00000000  00000000  0004a52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024524  00000000  00000000  00086151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00170074  00000000  00000000  000aa675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007244  00000000  00000000  0021a6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  00221930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000104 	.word	0x24000104
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c82c 	.word	0x0800c82c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000108 	.word	0x24000108
 80002d4:	0800c82c 	.word	0x0800c82c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005d8:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 80005da:	4a2f      	ldr	r2, [pc, #188]	; (8000698 <MX_FDCAN1_Init+0xc4>)
 80005dc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005de:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005e4:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80005ea:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80005f0:	4b28      	ldr	r3, [pc, #160]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80005f6:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 80005fe:	2208      	movs	r2, #8
 8000600:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000602:	4b24      	ldr	r3, [pc, #144]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000604:	2201      	movs	r2, #1
 8000606:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800060a:	2205      	movs	r2, #5
 800060c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000610:	2202      	movs	r2, #2
 8000612:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000616:	2201      	movs	r2, #1
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800061a:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800061c:	2201      	movs	r2, #1
 800061e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000622:	2201      	movs	r2, #1
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000628:	2201      	movs	r2, #1
 800062a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800062e:	2200      	movs	r2, #0
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000634:	2200      	movs	r2, #0
 8000636:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800063a:	2200      	movs	r2, #0
 800063c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000640:	2200      	movs	r2, #0
 8000642:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000646:	2204      	movs	r2, #4
 8000648:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800064c:	2200      	movs	r2, #0
 800064e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000652:	2204      	movs	r2, #4
 8000654:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000658:	2200      	movs	r2, #0
 800065a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800065e:	2204      	movs	r2, #4
 8000660:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000664:	2200      	movs	r2, #0
 8000666:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800066a:	2200      	movs	r2, #0
 800066c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000670:	2200      	movs	r2, #0
 8000672:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000676:	2200      	movs	r2, #0
 8000678:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800067c:	2204      	movs	r2, #4
 800067e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000682:	f001 f989 	bl	8001998 <HAL_FDCAN_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800068c:	f000 fa82 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	24000120 	.word	0x24000120
 8000698:	4000a000 	.word	0x4000a000

0800069c <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80006a0:	4b2e      	ldr	r3, [pc, #184]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006a2:	4a2f      	ldr	r2, [pc, #188]	; (8000760 <MX_FDCAN2_Init+0xc4>)
 80006a4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006a6:	4b2d      	ldr	r3, [pc, #180]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80006ac:	4b2b      	ldr	r3, [pc, #172]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80006b2:	4b2a      	ldr	r3, [pc, #168]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80006be:	4b27      	ldr	r3, [pc, #156]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 8;
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006c6:	2208      	movs	r2, #8
 80006c8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80006ca:	4b24      	ldr	r3, [pc, #144]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 5;
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006d2:	2205      	movs	r2, #5
 80006d4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006d8:	2202      	movs	r2, #2
 80006da:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006de:	2201      	movs	r2, #1
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80006e2:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000702:	2200      	movs	r2, #0
 8000704:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000708:	2200      	movs	r2, #0
 800070a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_FDCAN2_Init+0xc0>)
 800070e:	2204      	movs	r2, #4
 8000710:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_FDCAN2_Init+0xc0>)
 800071a:	2204      	movs	r2, #4
 800071c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000726:	2204      	movs	r2, #4
 8000728:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_FDCAN2_Init+0xc0>)
 800072c:	2200      	movs	r2, #0
 800072e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000732:	2200      	movs	r2, #0
 8000734:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000738:	2200      	movs	r2, #0
 800073a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_FDCAN2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000744:	2204      	movs	r2, #4
 8000746:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_FDCAN2_Init+0xc0>)
 800074a:	f001 f925 	bl	8001998 <HAL_FDCAN_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000754:	f000 fa1e 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	240001c0 	.word	0x240001c0
 8000760:	4000a400 	.word	0x4000a400

08000764 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b0bc      	sub	sp, #240	; 0xf0
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	22c0      	movs	r2, #192	; 0xc0
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f00c f817 	bl	800c7b8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a56      	ldr	r2, [pc, #344]	; (80008e8 <HAL_FDCAN_MspInit+0x184>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d150      	bne.n	8000836 <HAL_FDCAN_MspInit+0xd2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000794:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000798:	f04f 0300 	mov.w	r3, #0
 800079c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80007a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a8:	f107 0318 	add.w	r3, r7, #24
 80007ac:	4618      	mov	r0, r3
 80007ae:	f004 f8f1 	bl	8004994 <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80007b8:	f000 f9ec 	bl	8000b94 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80007bc:	4b4b      	ldr	r3, [pc, #300]	; (80008ec <HAL_FDCAN_MspInit+0x188>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	4a4a      	ldr	r2, [pc, #296]	; (80008ec <HAL_FDCAN_MspInit+0x188>)
 80007c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80007c6:	4b49      	ldr	r3, [pc, #292]	; (80008ec <HAL_FDCAN_MspInit+0x188>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d10e      	bne.n	80007ec <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80007ce:	4b48      	ldr	r3, [pc, #288]	; (80008f0 <HAL_FDCAN_MspInit+0x18c>)
 80007d0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80007d4:	4a46      	ldr	r2, [pc, #280]	; (80008f0 <HAL_FDCAN_MspInit+0x18c>)
 80007d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007da:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80007de:	4b44      	ldr	r3, [pc, #272]	; (80008f0 <HAL_FDCAN_MspInit+0x18c>)
 80007e0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80007e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ec:	4b40      	ldr	r3, [pc, #256]	; (80008f0 <HAL_FDCAN_MspInit+0x18c>)
 80007ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f2:	4a3f      	ldr	r2, [pc, #252]	; (80008f0 <HAL_FDCAN_MspInit+0x18c>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fc:	4b3c      	ldr	r3, [pc, #240]	; (80008f0 <HAL_FDCAN_MspInit+0x18c>)
 80007fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000802:	f003 0308 	and.w	r3, r3, #8
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800080a:	2303      	movs	r3, #3
 800080c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000822:	2309      	movs	r3, #9
 8000824:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000828:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800082c:	4619      	mov	r1, r3
 800082e:	4831      	ldr	r0, [pc, #196]	; (80008f4 <HAL_FDCAN_MspInit+0x190>)
 8000830:	f001 fc16 	bl	8002060 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000834:	e054      	b.n	80008e0 <HAL_FDCAN_MspInit+0x17c>
  else if(fdcanHandle->Instance==FDCAN2)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a2f      	ldr	r2, [pc, #188]	; (80008f8 <HAL_FDCAN_MspInit+0x194>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d14f      	bne.n	80008e0 <HAL_FDCAN_MspInit+0x17c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000840:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000844:	f04f 0300 	mov.w	r3, #0
 8000848:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800084c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	4618      	mov	r0, r3
 800085a:	f004 f89b 	bl	8004994 <HAL_RCCEx_PeriphCLKConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <HAL_FDCAN_MspInit+0x104>
      Error_Handler();
 8000864:	f000 f996 	bl	8000b94 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000868:	4b20      	ldr	r3, [pc, #128]	; (80008ec <HAL_FDCAN_MspInit+0x188>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3301      	adds	r3, #1
 800086e:	4a1f      	ldr	r2, [pc, #124]	; (80008ec <HAL_FDCAN_MspInit+0x188>)
 8000870:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <HAL_FDCAN_MspInit+0x188>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d10e      	bne.n	8000898 <HAL_FDCAN_MspInit+0x134>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <HAL_FDCAN_MspInit+0x18c>)
 800087c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <HAL_FDCAN_MspInit+0x18c>)
 8000882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000886:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <HAL_FDCAN_MspInit+0x18c>)
 800088c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_FDCAN_MspInit+0x18c>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <HAL_FDCAN_MspInit+0x18c>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <HAL_FDCAN_MspInit+0x18c>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80008b6:	2360      	movs	r3, #96	; 0x60
 80008b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80008ce:	2309      	movs	r3, #9
 80008d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80008d8:	4619      	mov	r1, r3
 80008da:	4808      	ldr	r0, [pc, #32]	; (80008fc <HAL_FDCAN_MspInit+0x198>)
 80008dc:	f001 fbc0 	bl	8002060 <HAL_GPIO_Init>
}
 80008e0:	bf00      	nop
 80008e2:	37f0      	adds	r7, #240	; 0xf0
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	4000a000 	.word	0x4000a000
 80008ec:	24000260 	.word	0x24000260
 80008f0:	58024400 	.word	0x58024400
 80008f4:	58020c00 	.word	0x58020c00
 80008f8:	4000a400 	.word	0x4000a400
 80008fc:	58020400 	.word	0x58020400

08000900 <MX_GPIO_Init>:
     PB11   ------> USART3_RX
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	4b38      	ldr	r3, [pc, #224]	; (80009f8 <MX_GPIO_Init+0xf8>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091c:	4a36      	ldr	r2, [pc, #216]	; (80009f8 <MX_GPIO_Init+0xf8>)
 800091e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000922:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000926:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <MX_GPIO_Init+0xf8>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b30      	ldr	r3, [pc, #192]	; (80009f8 <MX_GPIO_Init+0xf8>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093a:	4a2f      	ldr	r2, [pc, #188]	; (80009f8 <MX_GPIO_Init+0xf8>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000944:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <MX_GPIO_Init+0xf8>)
 8000946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <MX_GPIO_Init+0xf8>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000958:	4a27      	ldr	r2, [pc, #156]	; (80009f8 <MX_GPIO_Init+0xf8>)
 800095a:	f043 0302 	orr.w	r3, r3, #2
 800095e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <MX_GPIO_Init+0xf8>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000968:	f003 0302 	and.w	r3, r3, #2
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_GPIO_Init+0xf8>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000976:	4a20      	ldr	r2, [pc, #128]	; (80009f8 <MX_GPIO_Init+0xf8>)
 8000978:	f043 0310 	orr.w	r3, r3, #16
 800097c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_GPIO_Init+0xf8>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000986:	f003 0310 	and.w	r3, r3, #16
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_GPIO_Init+0xf8>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a18      	ldr	r2, [pc, #96]	; (80009f8 <MX_GPIO_Init+0xf8>)
 8000996:	f043 0308 	orr.w	r3, r3, #8
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_GPIO_Init+0xf8>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0308 	and.w	r3, r3, #8
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ac:	230c      	movs	r3, #12
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009bc:	2307      	movs	r3, #7
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_GPIO_Init+0xfc>)
 80009c8:	f001 fb4a 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009de:	2307      	movs	r3, #7
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_GPIO_Init+0x100>)
 80009ea:	f001 fb39 	bl	8002060 <HAL_GPIO_Init>

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	58024400 	.word	0x58024400
 80009fc:	58020000 	.word	0x58020000
 8000a00:	58020400 	.word	0x58020400

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a08:	f000 fdf4 	bl	80015f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0c:	f000 f814 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a10:	f7ff ff76 	bl	8000900 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000a14:	f7ff fdde 	bl	80005d4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000a18:	f7ff fe40 	bl	800069c <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000a1c:	f000 f9aa 	bl	8000d74 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a20:	f000 fa6c 	bl	8000efc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a24:	f000 fae0 	bl	8000fe8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000a28:	f00b f99c 	bl	800bd64 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000a2c:	f000 fc62 	bl	80012f4 <MX_UART4_Init>
  MX_UART8_Init();
 8000a30:	f000 fcae 	bl	8001390 <MX_UART8_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <main+0x30>
	...

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09e      	sub	sp, #120	; 0x78
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a42:	224c      	movs	r2, #76	; 0x4c
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f00b feb6 	bl	800c7b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2220      	movs	r2, #32
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00b feaf 	bl	800c7b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f002 ff6a 	bl	8003934 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	4b48      	ldr	r3, [pc, #288]	; (8000b88 <SystemClock_Config+0x150>)
 8000a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a68:	4a47      	ldr	r2, [pc, #284]	; (8000b88 <SystemClock_Config+0x150>)
 8000a6a:	f023 0301 	bic.w	r3, r3, #1
 8000a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a70:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <SystemClock_Config+0x150>)
 8000a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b44      	ldr	r3, [pc, #272]	; (8000b8c <SystemClock_Config+0x154>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4a43      	ldr	r2, [pc, #268]	; (8000b8c <SystemClock_Config+0x154>)
 8000a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a84:	6193      	str	r3, [r2, #24]
 8000a86:	4b41      	ldr	r3, [pc, #260]	; (8000b8c <SystemClock_Config+0x154>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a92:	bf00      	nop
 8000a94:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <SystemClock_Config+0x154>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa0:	d1f8      	bne.n	8000a94 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <SystemClock_Config+0x158>)
 8000aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aa8:	4a39      	ldr	r2, [pc, #228]	; (8000b90 <SystemClock_Config+0x158>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ab2:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <SystemClock_Config+0x158>)
 8000ab4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <SystemClock_Config+0x154>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a30      	ldr	r2, [pc, #192]	; (8000b8c <SystemClock_Config+0x154>)
 8000aca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <SystemClock_Config+0x154>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <SystemClock_Config+0x150>)
 8000adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ade:	4a2a      	ldr	r2, [pc, #168]	; (8000b88 <SystemClock_Config+0x150>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <SystemClock_Config+0x150>)
 8000ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000af2:	bf00      	nop
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <SystemClock_Config+0x154>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b00:	d1f8      	bne.n	8000af4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b02:	2301      	movs	r3, #1
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b10:	2302      	movs	r3, #2
 8000b12:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000b18:	233c      	movs	r3, #60	; 0x3c
 8000b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000b20:	230f      	movs	r3, #15
 8000b22:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b28:	230c      	movs	r3, #12
 8000b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f002 ff45 	bl	80039c8 <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000b44:	f000 f826 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	233f      	movs	r3, #63	; 0x3f
 8000b4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b54:	2308      	movs	r3, #8
 8000b56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b58:	2340      	movs	r3, #64	; 0x40
 8000b5a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b5c:	2340      	movs	r3, #64	; 0x40
 8000b5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b66:	2340      	movs	r3, #64	; 0x40
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	2104      	movs	r1, #4
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 fb83 	bl	800427c <HAL_RCC_ClockConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000b7c:	f000 f80a 	bl	8000b94 <Error_Handler>
  }
}
 8000b80:	bf00      	nop
 8000b82:	3778      	adds	r7, #120	; 0x78
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	58000400 	.word	0x58000400
 8000b8c:	58024800 	.word	0x58024800
 8000b90:	58024400 	.word	0x58024400

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_MspInit+0x30>)
 8000ba8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bac:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x30>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x30>)
 8000bb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	58024400 	.word	0x58024400

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 fd5a 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8000c2e:	f001 fd20 	bl	8002672 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	24001954 	.word	0x24001954

08000c3c <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8000c42:	f001 fd16 	bl	8002672 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	24001954 	.word	0x24001954

08000c50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <OTG_FS_IRQHandler+0x10>)
 8000c56:	f001 fd0c 	bl	8002672 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	24001954 	.word	0x24001954

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c68:	4b37      	ldr	r3, [pc, #220]	; (8000d48 <SystemInit+0xe4>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a36      	ldr	r2, [pc, #216]	; (8000d48 <SystemInit+0xe4>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c78:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <SystemInit+0xe8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 030f 	and.w	r3, r3, #15
 8000c80:	2b06      	cmp	r3, #6
 8000c82:	d807      	bhi.n	8000c94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c84:	4b31      	ldr	r3, [pc, #196]	; (8000d4c <SystemInit+0xe8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f023 030f 	bic.w	r3, r3, #15
 8000c8c:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <SystemInit+0xe8>)
 8000c8e:	f043 0307 	orr.w	r3, r3, #7
 8000c92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c94:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <SystemInit+0xec>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a2d      	ldr	r2, [pc, #180]	; (8000d50 <SystemInit+0xec>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <SystemInit+0xec>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ca6:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <SystemInit+0xec>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4929      	ldr	r1, [pc, #164]	; (8000d50 <SystemInit+0xec>)
 8000cac:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <SystemInit+0xf0>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <SystemInit+0xe8>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d007      	beq.n	8000cce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cbe:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <SystemInit+0xe8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f023 030f 	bic.w	r3, r3, #15
 8000cc6:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <SystemInit+0xe8>)
 8000cc8:	f043 0307 	orr.w	r3, r3, #7
 8000ccc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000cce:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <SystemInit+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <SystemInit+0xec>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <SystemInit+0xec>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <SystemInit+0xec>)
 8000ce2:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <SystemInit+0xf4>)
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <SystemInit+0xec>)
 8000ce8:	4a1c      	ldr	r2, [pc, #112]	; (8000d5c <SystemInit+0xf8>)
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <SystemInit+0xec>)
 8000cee:	4a1c      	ldr	r2, [pc, #112]	; (8000d60 <SystemInit+0xfc>)
 8000cf0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <SystemInit+0xec>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <SystemInit+0xec>)
 8000cfa:	4a19      	ldr	r2, [pc, #100]	; (8000d60 <SystemInit+0xfc>)
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <SystemInit+0xec>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <SystemInit+0xec>)
 8000d06:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <SystemInit+0xfc>)
 8000d08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <SystemInit+0xec>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <SystemInit+0xec>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <SystemInit+0xec>)
 8000d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <SystemInit+0xec>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <SystemInit+0x100>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <SystemInit+0x104>)
 8000d28:	4013      	ands	r3, r2
 8000d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d2e:	d202      	bcs.n	8000d36 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <SystemInit+0x108>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <SystemInit+0x10c>)
 8000d38:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00
 8000d4c:	52002000 	.word	0x52002000
 8000d50:	58024400 	.word	0x58024400
 8000d54:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d58:	02020200 	.word	0x02020200
 8000d5c:	01ff0000 	.word	0x01ff0000
 8000d60:	01010280 	.word	0x01010280
 8000d64:	5c001000 	.word	0x5c001000
 8000d68:	ffff0000 	.word	0xffff0000
 8000d6c:	51008108 	.word	0x51008108
 8000d70:	52004000 	.word	0x52004000

08000d74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b09a      	sub	sp, #104	; 0x68
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	615a      	str	r2, [r3, #20]
 8000da6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	222c      	movs	r2, #44	; 0x2c
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f00b fd02 	bl	800c7b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000db4:	4b4f      	ldr	r3, [pc, #316]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000db6:	4a50      	ldr	r2, [pc, #320]	; (8000ef8 <MX_TIM1_Init+0x184>)
 8000db8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dba:	4b4e      	ldr	r3, [pc, #312]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b4c      	ldr	r3, [pc, #304]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dc6:	4b4b      	ldr	r3, [pc, #300]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dcc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b49      	ldr	r3, [pc, #292]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dd4:	4b47      	ldr	r3, [pc, #284]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dda:	4b46      	ldr	r3, [pc, #280]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000de0:	4844      	ldr	r0, [pc, #272]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000de2:	f005 fc03 	bl	80065ec <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000dec:	f7ff fed2 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000df6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	483d      	ldr	r0, [pc, #244]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000dfe:	f005 fdc1 	bl	8006984 <HAL_TIM_ConfigClockSource>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e08:	f7ff fec4 	bl	8000b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e0c:	4839      	ldr	r0, [pc, #228]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000e0e:	f005 fc44 	bl	800669a <HAL_TIM_PWM_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000e18:	f7ff febc 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4831      	ldr	r0, [pc, #196]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000e30:	f006 faae 	bl	8007390 <HAL_TIMEx_MasterConfigSynchronization>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e3a:	f7ff feab 	bl	8000b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e3e:	2360      	movs	r3, #96	; 0x60
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e46:	2302      	movs	r3, #2
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4619      	mov	r1, r3
 8000e62:	4824      	ldr	r0, [pc, #144]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000e64:	f005 fc7a 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000e6e:	f7ff fe91 	bl	8000b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e76:	2204      	movs	r2, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	481e      	ldr	r0, [pc, #120]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000e7c:	f005 fc6e 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000e86:	f7ff fe85 	bl	8000b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e8e:	220c      	movs	r2, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	4818      	ldr	r0, [pc, #96]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000e94:	f005 fc62 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000e9e:	f7ff fe79 	bl	8000b94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000ed8:	f006 fae8 	bl	80074ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000ee2:	f7ff fe57 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ee6:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <MX_TIM1_Init+0x180>)
 8000ee8:	f000 f95a 	bl	80011a0 <HAL_TIM_MspPostInit>

}
 8000eec:	bf00      	nop
 8000eee:	3768      	adds	r7, #104	; 0x68
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	24000264 	.word	0x24000264
 8000ef8:	40010000 	.word	0x40010000

08000efc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08e      	sub	sp, #56	; 0x38
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]
 8000f2a:	615a      	str	r2, [r3, #20]
 8000f2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f2e:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <MX_TIM2_Init+0xe8>)
 8000f30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f36:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <MX_TIM2_Init+0xe8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <MX_TIM2_Init+0xe8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f42:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <MX_TIM2_Init+0xe8>)
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4a:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <MX_TIM2_Init+0xe8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <MX_TIM2_Init+0xe8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f56:	4823      	ldr	r0, [pc, #140]	; (8000fe4 <MX_TIM2_Init+0xe8>)
 8000f58:	f005 fb48 	bl	80065ec <HAL_TIM_Base_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f62:	f7ff fe17 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f70:	4619      	mov	r1, r3
 8000f72:	481c      	ldr	r0, [pc, #112]	; (8000fe4 <MX_TIM2_Init+0xe8>)
 8000f74:	f005 fd06 	bl	8006984 <HAL_TIM_ConfigClockSource>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f7e:	f7ff fe09 	bl	8000b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f82:	4818      	ldr	r0, [pc, #96]	; (8000fe4 <MX_TIM2_Init+0xe8>)
 8000f84:	f005 fb89 	bl	800669a <HAL_TIM_PWM_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f8e:	f7ff fe01 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4810      	ldr	r0, [pc, #64]	; (8000fe4 <MX_TIM2_Init+0xe8>)
 8000fa2:	f006 f9f5 	bl	8007390 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000fac:	f7ff fdf2 	bl	8000b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb0:	2360      	movs	r3, #96	; 0x60
 8000fb2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <MX_TIM2_Init+0xe8>)
 8000fc8:	f005 fbc8 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000fd2:	f7ff fddf 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <MX_TIM2_Init+0xe8>)
 8000fd8:	f000 f8e2 	bl	80011a0 <HAL_TIM_MspPostInit>

}
 8000fdc:	bf00      	nop
 8000fde:	3738      	adds	r7, #56	; 0x38
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	240002b0 	.word	0x240002b0

08000fe8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08e      	sub	sp, #56	; 0x38
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001008:	463b      	mov	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800101a:	4b38      	ldr	r3, [pc, #224]	; (80010fc <MX_TIM3_Init+0x114>)
 800101c:	4a38      	ldr	r2, [pc, #224]	; (8001100 <MX_TIM3_Init+0x118>)
 800101e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <MX_TIM3_Init+0x114>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001026:	4b35      	ldr	r3, [pc, #212]	; (80010fc <MX_TIM3_Init+0x114>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800102c:	4b33      	ldr	r3, [pc, #204]	; (80010fc <MX_TIM3_Init+0x114>)
 800102e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001032:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b31      	ldr	r3, [pc, #196]	; (80010fc <MX_TIM3_Init+0x114>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103a:	4b30      	ldr	r3, [pc, #192]	; (80010fc <MX_TIM3_Init+0x114>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001040:	482e      	ldr	r0, [pc, #184]	; (80010fc <MX_TIM3_Init+0x114>)
 8001042:	f005 fad3 	bl	80065ec <HAL_TIM_Base_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800104c:	f7ff fda2 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800105a:	4619      	mov	r1, r3
 800105c:	4827      	ldr	r0, [pc, #156]	; (80010fc <MX_TIM3_Init+0x114>)
 800105e:	f005 fc91 	bl	8006984 <HAL_TIM_ConfigClockSource>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001068:	f7ff fd94 	bl	8000b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800106c:	4823      	ldr	r0, [pc, #140]	; (80010fc <MX_TIM3_Init+0x114>)
 800106e:	f005 fb14 	bl	800669a <HAL_TIM_PWM_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001078:	f7ff fd8c 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	481c      	ldr	r0, [pc, #112]	; (80010fc <MX_TIM3_Init+0x114>)
 800108c:	f006 f980 	bl	8007390 <HAL_TIMEx_MasterConfigSynchronization>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001096:	f7ff fd7d 	bl	8000b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109a:	2360      	movs	r3, #96	; 0x60
 800109c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80010a2:	2302      	movs	r3, #2
 80010a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	2200      	movs	r2, #0
 80010ae:	4619      	mov	r1, r3
 80010b0:	4812      	ldr	r0, [pc, #72]	; (80010fc <MX_TIM3_Init+0x114>)
 80010b2:	f005 fb53 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80010bc:	f7ff fd6a 	bl	8000b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	2204      	movs	r2, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	480d      	ldr	r0, [pc, #52]	; (80010fc <MX_TIM3_Init+0x114>)
 80010c8:	f005 fb48 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80010d2:	f7ff fd5f 	bl	8000b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	2208      	movs	r2, #8
 80010da:	4619      	mov	r1, r3
 80010dc:	4807      	ldr	r0, [pc, #28]	; (80010fc <MX_TIM3_Init+0x114>)
 80010de:	f005 fb3d 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80010e8:	f7ff fd54 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010ec:	4803      	ldr	r0, [pc, #12]	; (80010fc <MX_TIM3_Init+0x114>)
 80010ee:	f000 f857 	bl	80011a0 <HAL_TIM_MspPostInit>

}
 80010f2:	bf00      	nop
 80010f4:	3738      	adds	r7, #56	; 0x38
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	240002fc 	.word	0x240002fc
 8001100:	40000400 	.word	0x40000400

08001104 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a20      	ldr	r2, [pc, #128]	; (8001194 <HAL_TIM_Base_MspInit+0x90>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d10f      	bne.n	8001136 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <HAL_TIM_Base_MspInit+0x94>)
 8001118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800111c:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <HAL_TIM_Base_MspInit+0x94>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_TIM_Base_MspInit+0x94>)
 8001128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001134:	e028      	b.n	8001188 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM2)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800113e:	d10f      	bne.n	8001160 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_TIM_Base_MspInit+0x94>)
 8001142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001146:	4a14      	ldr	r2, [pc, #80]	; (8001198 <HAL_TIM_Base_MspInit+0x94>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_TIM_Base_MspInit+0x94>)
 8001152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
}
 800115e:	e013      	b.n	8001188 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM3)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <HAL_TIM_Base_MspInit+0x98>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d10e      	bne.n	8001188 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_TIM_Base_MspInit+0x94>)
 800116c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001170:	4a09      	ldr	r2, [pc, #36]	; (8001198 <HAL_TIM_Base_MspInit+0x94>)
 8001172:	f043 0302 	orr.w	r3, r3, #2
 8001176:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_TIM_Base_MspInit+0x94>)
 800117c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	bf00      	nop
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	40010000 	.word	0x40010000
 8001198:	58024400 	.word	0x58024400
 800119c:	40000400 	.word	0x40000400

080011a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a47      	ldr	r2, [pc, #284]	; (80012dc <HAL_TIM_MspPostInit+0x13c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d120      	bne.n	8001204 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011c2:	4b47      	ldr	r3, [pc, #284]	; (80012e0 <HAL_TIM_MspPostInit+0x140>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c8:	4a45      	ldr	r2, [pc, #276]	; (80012e0 <HAL_TIM_MspPostInit+0x140>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d2:	4b43      	ldr	r3, [pc, #268]	; (80012e0 <HAL_TIM_MspPostInit+0x140>)
 80011d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 80011e0:	f44f 4394 	mov.w	r3, #18944	; 0x4a00
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4839      	ldr	r0, [pc, #228]	; (80012e4 <HAL_TIM_MspPostInit+0x144>)
 80011fe:	f000 ff2f 	bl	8002060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001202:	e067      	b.n	80012d4 <HAL_TIM_MspPostInit+0x134>
  else if(timHandle->Instance==TIM2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800120c:	d11f      	bne.n	800124e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <HAL_TIM_MspPostInit+0x140>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001214:	4a32      	ldr	r2, [pc, #200]	; (80012e0 <HAL_TIM_MspPostInit+0x140>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800121e:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <HAL_TIM_MspPostInit+0x140>)
 8001220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800122c:	2301      	movs	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800123c:	2301      	movs	r3, #1
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4619      	mov	r1, r3
 8001246:	4828      	ldr	r0, [pc, #160]	; (80012e8 <HAL_TIM_MspPostInit+0x148>)
 8001248:	f000 ff0a 	bl	8002060 <HAL_GPIO_Init>
}
 800124c:	e042      	b.n	80012d4 <HAL_TIM_MspPostInit+0x134>
  else if(timHandle->Instance==TIM3)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a26      	ldr	r2, [pc, #152]	; (80012ec <HAL_TIM_MspPostInit+0x14c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d13d      	bne.n	80012d4 <HAL_TIM_MspPostInit+0x134>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <HAL_TIM_MspPostInit+0x140>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125e:	4a20      	ldr	r2, [pc, #128]	; (80012e0 <HAL_TIM_MspPostInit+0x140>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HAL_TIM_MspPostInit+0x140>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_TIM_MspPostInit+0x140>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <HAL_TIM_MspPostInit+0x140>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_TIM_MspPostInit+0x140>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001294:	23c0      	movs	r3, #192	; 0xc0
 8001296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012a4:	2302      	movs	r3, #2
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	480e      	ldr	r0, [pc, #56]	; (80012e8 <HAL_TIM_MspPostInit+0x148>)
 80012b0:	f000 fed6 	bl	8002060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012c4:	2302      	movs	r3, #2
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4808      	ldr	r0, [pc, #32]	; (80012f0 <HAL_TIM_MspPostInit+0x150>)
 80012d0:	f000 fec6 	bl	8002060 <HAL_GPIO_Init>
}
 80012d4:	bf00      	nop
 80012d6:	3730      	adds	r7, #48	; 0x30
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40010000 	.word	0x40010000
 80012e0:	58024400 	.word	0x58024400
 80012e4:	58021000 	.word	0x58021000
 80012e8:	58020000 	.word	0x58020000
 80012ec:	40000400 	.word	0x40000400
 80012f0:	58020400 	.word	0x58020400

080012f4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <MX_UART4_Init+0x90>)
 80012fa:	4a23      	ldr	r2, [pc, #140]	; (8001388 <MX_UART4_Init+0x94>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 7500000;
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <MX_UART4_Init+0x90>)
 8001300:	4a22      	ldr	r2, [pc, #136]	; (800138c <MX_UART4_Init+0x98>)
 8001302:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <MX_UART4_Init+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MX_UART4_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_UART4_Init+0x90>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_UART4_Init+0x90>)
 8001318:	220c      	movs	r2, #12
 800131a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_UART4_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <MX_UART4_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_UART4_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_UART4_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <MX_UART4_Init+0x90>)
 8001336:	2200      	movs	r2, #0
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800133a:	4812      	ldr	r0, [pc, #72]	; (8001384 <MX_UART4_Init+0x90>)
 800133c:	f006 f934 	bl	80075a8 <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8001346:	f7ff fc25 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134a:	2100      	movs	r1, #0
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_UART4_Init+0x90>)
 800134e:	f007 f936 	bl	80085be <HAL_UARTEx_SetTxFifoThreshold>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8001358:	f7ff fc1c 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800135c:	2100      	movs	r1, #0
 800135e:	4809      	ldr	r0, [pc, #36]	; (8001384 <MX_UART4_Init+0x90>)
 8001360:	f007 f96b 	bl	800863a <HAL_UARTEx_SetRxFifoThreshold>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 800136a:	f7ff fc13 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_UART4_Init+0x90>)
 8001370:	f007 f8ec 	bl	800854c <HAL_UARTEx_DisableFifoMode>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 800137a:	f7ff fc0b 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	24000348 	.word	0x24000348
 8001388:	40004c00 	.word	0x40004c00
 800138c:	007270e0 	.word	0x007270e0

08001390 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_UART8_Init+0x90>)
 8001396:	4a23      	ldr	r2, [pc, #140]	; (8001424 <MX_UART8_Init+0x94>)
 8001398:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 7500000;
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <MX_UART8_Init+0x90>)
 800139c:	4a22      	ldr	r2, [pc, #136]	; (8001428 <MX_UART8_Init+0x98>)
 800139e:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_UART8_Init+0x90>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <MX_UART8_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_UART8_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <MX_UART8_Init+0x90>)
 80013b4:	220c      	movs	r2, #12
 80013b6:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <MX_UART8_Init+0x90>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_UART8_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MX_UART8_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_UART8_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_UART8_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80013d6:	4812      	ldr	r0, [pc, #72]	; (8001420 <MX_UART8_Init+0x90>)
 80013d8:	f006 f8e6 	bl	80075a8 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_UART8_Init+0x56>
  {
    Error_Handler();
 80013e2:	f7ff fbd7 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e6:	2100      	movs	r1, #0
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_UART8_Init+0x90>)
 80013ea:	f007 f8e8 	bl	80085be <HAL_UARTEx_SetTxFifoThreshold>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_UART8_Init+0x68>
  {
    Error_Handler();
 80013f4:	f7ff fbce 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f8:	2100      	movs	r1, #0
 80013fa:	4809      	ldr	r0, [pc, #36]	; (8001420 <MX_UART8_Init+0x90>)
 80013fc:	f007 f91d 	bl	800863a <HAL_UARTEx_SetRxFifoThreshold>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_UART8_Init+0x7a>
  {
    Error_Handler();
 8001406:	f7ff fbc5 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_UART8_Init+0x90>)
 800140c:	f007 f89e 	bl	800854c <HAL_UARTEx_DisableFifoMode>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 8001416:	f7ff fbbd 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	240003dc 	.word	0x240003dc
 8001424:	40007c00 	.word	0x40007c00
 8001428:	007270e0 	.word	0x007270e0

0800142c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b0bc      	sub	sp, #240	; 0xf0
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001444:	f107 0318 	add.w	r3, r7, #24
 8001448:	22c0      	movs	r2, #192	; 0xc0
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f00b f9b3 	bl	800c7b8 <memset>
  if(uartHandle->Instance==UART4)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a4d      	ldr	r2, [pc, #308]	; (800158c <HAL_UART_MspInit+0x160>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d147      	bne.n	80014ec <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800145c:	f04f 0202 	mov.w	r2, #2
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800146e:	f107 0318 	add.w	r3, r7, #24
 8001472:	4618      	mov	r0, r3
 8001474:	f003 fa8e 	bl	8004994 <HAL_RCCEx_PeriphCLKConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800147e:	f7ff fb89 	bl	8000b94 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001482:	4b43      	ldr	r3, [pc, #268]	; (8001590 <HAL_UART_MspInit+0x164>)
 8001484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001488:	4a41      	ldr	r2, [pc, #260]	; (8001590 <HAL_UART_MspInit+0x164>)
 800148a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800148e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <HAL_UART_MspInit+0x164>)
 8001494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a0:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <HAL_UART_MspInit+0x164>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a6:	4a3a      	ldr	r2, [pc, #232]	; (8001590 <HAL_UART_MspInit+0x164>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b0:	4b37      	ldr	r3, [pc, #220]	; (8001590 <HAL_UART_MspInit+0x164>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014d8:	2308      	movs	r3, #8
 80014da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014e2:	4619      	mov	r1, r3
 80014e4:	482b      	ldr	r0, [pc, #172]	; (8001594 <HAL_UART_MspInit+0x168>)
 80014e6:	f000 fdbb 	bl	8002060 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 80014ea:	e04a      	b.n	8001582 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==UART8)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a29      	ldr	r2, [pc, #164]	; (8001598 <HAL_UART_MspInit+0x16c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d145      	bne.n	8001582 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80014f6:	f04f 0202 	mov.w	r2, #2
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	4618      	mov	r0, r3
 800150e:	f003 fa41 	bl	8004994 <HAL_RCCEx_PeriphCLKConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001518:	f7ff fb3c 	bl	8000b94 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <HAL_UART_MspInit+0x164>)
 800151e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001522:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <HAL_UART_MspInit+0x164>)
 8001524:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001528:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_UART_MspInit+0x164>)
 800152e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_UART_MspInit+0x164>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001540:	4a13      	ldr	r2, [pc, #76]	; (8001590 <HAL_UART_MspInit+0x164>)
 8001542:	f043 0310 	orr.w	r3, r3, #16
 8001546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_UART_MspInit+0x164>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001558:	2303      	movs	r3, #3
 800155a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001570:	2308      	movs	r3, #8
 8001572:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001576:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800157a:	4619      	mov	r1, r3
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <HAL_UART_MspInit+0x170>)
 800157e:	f000 fd6f 	bl	8002060 <HAL_GPIO_Init>
}
 8001582:	bf00      	nop
 8001584:	37f0      	adds	r7, #240	; 0xf0
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40004c00 	.word	0x40004c00
 8001590:	58024400 	.word	0x58024400
 8001594:	58020400 	.word	0x58020400
 8001598:	40007c00 	.word	0x40007c00
 800159c:	58021000 	.word	0x58021000

080015a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015a4:	f7ff fb5e 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015aa:	490d      	ldr	r1, [pc, #52]	; (80015e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b0:	e002      	b.n	80015b8 <LoopCopyDataInit>

080015b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b6:	3304      	adds	r3, #4

080015b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015bc:	d3f9      	bcc.n	80015b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015c0:	4c0a      	ldr	r4, [pc, #40]	; (80015ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c4:	e001      	b.n	80015ca <LoopFillZerobss>

080015c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c8:	3204      	adds	r2, #4

080015ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015cc:	d3fb      	bcc.n	80015c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ce:	f00b f8fb 	bl	800c7c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d2:	f7ff fa17 	bl	8000a04 <main>
  bx  lr
 80015d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015e0:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 80015e4:	0800c920 	.word	0x0800c920
  ldr r2, =_sbss
 80015e8:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 80015ec:	24002080 	.word	0x24002080

080015f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC3_IRQHandler>
	...

080015f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fa:	2003      	movs	r0, #3
 80015fc:	f000 f98c 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001600:	f002 fff2 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8001604:	4602      	mov	r2, r0
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_Init+0x68>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	f003 030f 	and.w	r3, r3, #15
 8001610:	4913      	ldr	r1, [pc, #76]	; (8001660 <HAL_Init+0x6c>)
 8001612:	5ccb      	ldrb	r3, [r1, r3]
 8001614:	f003 031f 	and.w	r3, r3, #31
 8001618:	fa22 f303 	lsr.w	r3, r2, r3
 800161c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_Init+0x68>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <HAL_Init+0x6c>)
 8001628:	5cd3      	ldrb	r3, [r2, r3]
 800162a:	f003 031f 	and.w	r3, r3, #31
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	fa22 f303 	lsr.w	r3, r2, r3
 8001634:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <HAL_Init+0x70>)
 8001636:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001638:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <HAL_Init+0x74>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163e:	200f      	movs	r0, #15
 8001640:	f000 f814 	bl	800166c <HAL_InitTick>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e002      	b.n	8001654 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800164e:	f7ff faa7 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	58024400 	.word	0x58024400
 8001660:	0800c8d8 	.word	0x0800c8d8
 8001664:	24000004 	.word	0x24000004
 8001668:	24000000 	.word	0x24000000

0800166c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_InitTick+0x60>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e021      	b.n	80016c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_InitTick+0x64>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_InitTick+0x60>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f971 	bl	800197e <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f000 f93b 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <HAL_InitTick+0x68>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2400000c 	.word	0x2400000c
 80016d0:	24000000 	.word	0x24000000
 80016d4:	24000008 	.word	0x24000008

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	2400000c 	.word	0x2400000c
 80016fc:	24000470 	.word	0x24000470

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	24000470 	.word	0x24000470

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffde 	bl	8001700 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2400000c 	.word	0x2400000c

08001760 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <HAL_GetREVID+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	0c1b      	lsrs	r3, r3, #16
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	5c001000 	.word	0x5c001000

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <__NVIC_SetPriorityGrouping+0x40>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <__NVIC_SetPriorityGrouping+0x40>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00
 80017bc:	05fa0000 	.word	0x05fa0000

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff29 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800193c:	f7ff ff40 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 8001940:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f7ff ff90 	bl	800186c <NVIC_EncodePriority>
 800194c:	4602      	mov	r2, r0
 800194e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff5f 	bl	8001818 <__NVIC_SetPriority>
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff33 	bl	80017dc <__NVIC_EnableIRQ>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffa4 	bl	80018d4 <SysTick_Config>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b098      	sub	sp, #96	; 0x60
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80019a0:	4a84      	ldr	r2, [pc, #528]	; (8001bb4 <HAL_FDCAN_Init+0x21c>)
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	4611      	mov	r1, r2
 80019a8:	224c      	movs	r2, #76	; 0x4c
 80019aa:	4618      	mov	r0, r3
 80019ac:	f00a ff30 	bl	800c810 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e1c6      	b.n	8001d48 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a7e      	ldr	r2, [pc, #504]	; (8001bb8 <HAL_FDCAN_Init+0x220>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d106      	bne.n	80019d2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80019cc:	461a      	mov	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7fe febc 	bl	8000764 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0210 	bic.w	r2, r2, #16
 80019fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019fc:	f7ff fe80 	bl	8001700 <HAL_GetTick>
 8001a00:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001a02:	e014      	b.n	8001a2e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a04:	f7ff fe7c 	bl	8001700 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b0a      	cmp	r3, #10
 8001a10:	d90d      	bls.n	8001a2e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a18:	f043 0201 	orr.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e18c      	b.n	8001d48 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d0e3      	beq.n	8001a04 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699a      	ldr	r2, [r3, #24]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a4c:	f7ff fe58 	bl	8001700 <HAL_GetTick>
 8001a50:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a52:	e014      	b.n	8001a7e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a54:	f7ff fe54 	bl	8001700 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b0a      	cmp	r3, #10
 8001a60:	d90d      	bls.n	8001a7e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2203      	movs	r2, #3
 8001a76:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e164      	b.n	8001d48 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0e3      	beq.n	8001a54 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699a      	ldr	r2, [r3, #24]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0202 	orr.w	r2, r2, #2
 8001a9a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7c1b      	ldrb	r3, [r3, #16]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d108      	bne.n	8001ab6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699a      	ldr	r2, [r3, #24]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ab2:	619a      	str	r2, [r3, #24]
 8001ab4:	e007      	b.n	8001ac6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699a      	ldr	r2, [r3, #24]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ac4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7c5b      	ldrb	r3, [r3, #17]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d108      	bne.n	8001ae0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699a      	ldr	r2, [r3, #24]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001adc:	619a      	str	r2, [r3, #24]
 8001ade:	e007      	b.n	8001af0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001aee:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7c9b      	ldrb	r3, [r3, #18]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d108      	bne.n	8001b0a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699a      	ldr	r2, [r3, #24]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b06:	619a      	str	r2, [r3, #24]
 8001b08:	e007      	b.n	8001b1a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699a      	ldr	r2, [r3, #24]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b18:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001b3e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0210 	bic.w	r2, r2, #16
 8001b4e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d108      	bne.n	8001b6a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0204 	orr.w	r2, r2, #4
 8001b66:	619a      	str	r2, [r3, #24]
 8001b68:	e030      	b.n	8001bcc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d02c      	beq.n	8001bcc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d020      	beq.n	8001bbc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699a      	ldr	r2, [r3, #24]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b88:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0210 	orr.w	r2, r2, #16
 8001b98:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d114      	bne.n	8001bcc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0220 	orr.w	r2, r2, #32
 8001bb0:	619a      	str	r2, [r3, #24]
 8001bb2:	e00b      	b.n	8001bcc <HAL_FDCAN_Init+0x234>
 8001bb4:	0800c844 	.word	0x0800c844
 8001bb8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699a      	ldr	r2, [r3, #24]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0220 	orr.w	r2, r2, #32
 8001bca:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bdc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001be4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001bf4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bf6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c00:	d115      	bne.n	8001c2e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001c10:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	3b01      	subs	r3, #1
 8001c18:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001c1a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	3b01      	subs	r3, #1
 8001c24:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001c2a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001c2c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00a      	beq.n	8001c4c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c54:	4413      	add	r3, r2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d011      	beq.n	8001c7e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001c62:	f023 0107 	bic.w	r1, r3, #7
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	3360      	adds	r3, #96	; 0x60
 8001c6e:	443b      	add	r3, r7
 8001c70:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d011      	beq.n	8001caa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001c8e:	f023 0107 	bic.w	r1, r3, #7
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	3360      	adds	r3, #96	; 0x60
 8001c9a:	443b      	add	r3, r7
 8001c9c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d012      	beq.n	8001cd8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001cba:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	3360      	adds	r3, #96	; 0x60
 8001cc6:	443b      	add	r3, r7
 8001cc8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001ccc:	011a      	lsls	r2, r3, #4
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d012      	beq.n	8001d06 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001ce8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	3360      	adds	r3, #96	; 0x60
 8001cf4:	443b      	add	r3, r7
 8001cf6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001cfa:	021a      	lsls	r2, r3, #8
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a11      	ldr	r2, [pc, #68]	; (8001d50 <HAL_FDCAN_Init+0x3b8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d107      	bne.n	8001d20 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f022 0203 	bic.w	r2, r2, #3
 8001d1e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f80b 	bl	8001d54 <FDCAN_CalcultateRamBlockAddresses>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001d44:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3760      	adds	r7, #96	; 0x60
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	4000a000 	.word	0x4000a000

08001d54 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d60:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d6a:	4ba7      	ldr	r3, [pc, #668]	; (8002008 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	0091      	lsls	r1, r2, #2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	430b      	orrs	r3, r1
 8001d78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d84:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001daa:	4b97      	ldr	r3, [pc, #604]	; (8002008 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	0091      	lsls	r1, r2, #2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	430b      	orrs	r3, r1
 8001db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dcc:	041a      	lsls	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	4413      	add	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001dec:	4b86      	ldr	r3, [pc, #536]	; (8002008 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	0091      	lsls	r1, r2, #2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001e06:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	041a      	lsls	r2, r3, #16
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	4413      	add	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e34:	4b74      	ldr	r3, [pc, #464]	; (8002008 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	0091      	lsls	r1, r2, #2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	430b      	orrs	r3, r1
 8001e42:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e4e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e56:	041a      	lsls	r2, r3, #16
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e6a:	fb02 f303 	mul.w	r3, r2, r3
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	4413      	add	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001e7c:	4b62      	ldr	r3, [pc, #392]	; (8002008 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	0091      	lsls	r1, r2, #2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001ea8:	4b57      	ldr	r3, [pc, #348]	; (8002008 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	0091      	lsls	r1, r2, #2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ec2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	041a      	lsls	r2, r3, #16
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	4413      	add	r3, r2
 8001ee0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001eea:	4b47      	ldr	r3, [pc, #284]	; (8002008 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	0091      	lsls	r1, r2, #2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	430b      	orrs	r3, r1
 8001ef8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f04:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	041a      	lsls	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f20:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f28:	061a      	lsls	r2, r3, #24
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f38:	4b34      	ldr	r3, [pc, #208]	; (800200c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009a      	lsls	r2, r3, #2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	441a      	add	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	441a      	add	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	441a      	add	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	441a      	add	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001f9e:	fb01 f303 	mul.w	r3, r1, r3
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	441a      	add	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	441a      	add	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	441a      	add	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001fea:	fb01 f303 	mul.w	r3, r1, r3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	441a      	add	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffe:	4a04      	ldr	r2, [pc, #16]	; (8002010 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d915      	bls.n	8002030 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002004:	e006      	b.n	8002014 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002006:	bf00      	nop
 8002008:	ffff0003 	.word	0xffff0003
 800200c:	10002b00 	.word	0x10002b00
 8002010:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800201a:	f043 0220 	orr.w	r2, r3, #32
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2203      	movs	r2, #3
 8002028:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e010      	b.n	8002052 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	e005      	b.n	8002044 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3304      	adds	r3, #4
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	429a      	cmp	r2, r3
 800204e:	d3f3      	bcc.n	8002038 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop

08002060 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800206e:	4b89      	ldr	r3, [pc, #548]	; (8002294 <HAL_GPIO_Init+0x234>)
 8002070:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002072:	e194      	b.n	800239e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	2101      	movs	r1, #1
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8186 	beq.w	8002398 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d005      	beq.n	80020a4 <HAL_GPIO_Init+0x44>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d130      	bne.n	8002106 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020da:	2201      	movs	r2, #1
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	f003 0201 	and.w	r2, r3, #1
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b03      	cmp	r3, #3
 8002110:	d017      	beq.n	8002142 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	2203      	movs	r2, #3
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d123      	bne.n	8002196 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	08da      	lsrs	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3208      	adds	r2, #8
 8002156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	220f      	movs	r2, #15
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	08da      	lsrs	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3208      	adds	r2, #8
 8002190:	69b9      	ldr	r1, [r7, #24]
 8002192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	2203      	movs	r2, #3
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0203 	and.w	r2, r3, #3
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80e0 	beq.w	8002398 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <HAL_GPIO_Init+0x238>)
 80021da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021de:	4a2e      	ldr	r2, [pc, #184]	; (8002298 <HAL_GPIO_Init+0x238>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021e8:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <HAL_GPIO_Init+0x238>)
 80021ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021f6:	4a29      	ldr	r2, [pc, #164]	; (800229c <HAL_GPIO_Init+0x23c>)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a20      	ldr	r2, [pc, #128]	; (80022a0 <HAL_GPIO_Init+0x240>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d052      	beq.n	80022c8 <HAL_GPIO_Init+0x268>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <HAL_GPIO_Init+0x244>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d031      	beq.n	800228e <HAL_GPIO_Init+0x22e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <HAL_GPIO_Init+0x248>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d02b      	beq.n	800228a <HAL_GPIO_Init+0x22a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <HAL_GPIO_Init+0x24c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d025      	beq.n	8002286 <HAL_GPIO_Init+0x226>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a1c      	ldr	r2, [pc, #112]	; (80022b0 <HAL_GPIO_Init+0x250>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01f      	beq.n	8002282 <HAL_GPIO_Init+0x222>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a1b      	ldr	r2, [pc, #108]	; (80022b4 <HAL_GPIO_Init+0x254>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d019      	beq.n	800227e <HAL_GPIO_Init+0x21e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a1a      	ldr	r2, [pc, #104]	; (80022b8 <HAL_GPIO_Init+0x258>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_GPIO_Init+0x21a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a19      	ldr	r2, [pc, #100]	; (80022bc <HAL_GPIO_Init+0x25c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00d      	beq.n	8002276 <HAL_GPIO_Init+0x216>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_GPIO_Init+0x260>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <HAL_GPIO_Init+0x212>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <HAL_GPIO_Init+0x264>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_GPIO_Init+0x20e>
 800226a:	2309      	movs	r3, #9
 800226c:	e02d      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 800226e:	230a      	movs	r3, #10
 8002270:	e02b      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 8002272:	2308      	movs	r3, #8
 8002274:	e029      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 8002276:	2307      	movs	r3, #7
 8002278:	e027      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 800227a:	2306      	movs	r3, #6
 800227c:	e025      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 800227e:	2305      	movs	r3, #5
 8002280:	e023      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 8002282:	2304      	movs	r3, #4
 8002284:	e021      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 8002286:	2303      	movs	r3, #3
 8002288:	e01f      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 800228a:	2302      	movs	r3, #2
 800228c:	e01d      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 800228e:	2301      	movs	r3, #1
 8002290:	e01b      	b.n	80022ca <HAL_GPIO_Init+0x26a>
 8002292:	bf00      	nop
 8002294:	58000080 	.word	0x58000080
 8002298:	58024400 	.word	0x58024400
 800229c:	58000400 	.word	0x58000400
 80022a0:	58020000 	.word	0x58020000
 80022a4:	58020400 	.word	0x58020400
 80022a8:	58020800 	.word	0x58020800
 80022ac:	58020c00 	.word	0x58020c00
 80022b0:	58021000 	.word	0x58021000
 80022b4:	58021400 	.word	0x58021400
 80022b8:	58021800 	.word	0x58021800
 80022bc:	58021c00 	.word	0x58021c00
 80022c0:	58022000 	.word	0x58022000
 80022c4:	58022400 	.word	0x58022400
 80022c8:	2300      	movs	r3, #0
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	f002 0203 	and.w	r2, r2, #3
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	4093      	lsls	r3, r2
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022da:	4938      	ldr	r1, [pc, #224]	; (80023bc <HAL_GPIO_Init+0x35c>)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800230e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800233c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	3301      	adds	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f47f ae63 	bne.w	8002074 <HAL_GPIO_Init+0x14>
  }
}
 80023ae:	bf00      	nop
 80023b0:	bf00      	nop
 80023b2:	3724      	adds	r7, #36	; 0x24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	58000400 	.word	0x58000400

080023c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c2:	b08f      	sub	sp, #60	; 0x3c
 80023c4:	af0a      	add	r7, sp, #40	; 0x28
 80023c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e116      	b.n	8002600 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f009 fe9b 	bl	800c128 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2203      	movs	r2, #3
 80023f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f006 fac0 	bl	8008996 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	687e      	ldr	r6, [r7, #4]
 800241e:	466d      	mov	r5, sp
 8002420:	f106 0410 	add.w	r4, r6, #16
 8002424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800242a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002430:	e885 0003 	stmia.w	r5, {r0, r1}
 8002434:	1d33      	adds	r3, r6, #4
 8002436:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002438:	6838      	ldr	r0, [r7, #0]
 800243a:	f006 f98b 	bl	8008754 <USB_CoreInit>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0d7      	b.n	8002600 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f006 faae 	bl	80089b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245c:	2300      	movs	r3, #0
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	e04a      	b.n	80024f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	333d      	adds	r3, #61	; 0x3d
 8002472:	2201      	movs	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	333c      	adds	r3, #60	; 0x3c
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	b298      	uxth	r0, r3
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	3356      	adds	r3, #86	; 0x56
 800249e:	4602      	mov	r2, r0
 80024a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	3340      	adds	r3, #64	; 0x40
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3344      	adds	r3, #68	; 0x44
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	3348      	adds	r3, #72	; 0x48
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	334c      	adds	r3, #76	; 0x4c
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	3301      	adds	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d3af      	bcc.n	8002462 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	e044      	b.n	8002592 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	3301      	adds	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	d3b5      	bcc.n	8002508 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	687e      	ldr	r6, [r7, #4]
 80025a4:	466d      	mov	r5, sp
 80025a6:	f106 0410 	add.w	r4, r6, #16
 80025aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80025ba:	1d33      	adds	r3, r6, #4
 80025bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025be:	6838      	ldr	r0, [r7, #0]
 80025c0:	f006 fa46 	bl	8008a50 <USB_DevInit>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e014      	b.n	8002600 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d102      	bne.n	80025f4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f001 f970 	bl	80038d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f007 fa88 	bl	8009b0e <USB_DevDisconnect>

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002608 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_PCD_Start+0x1c>
 8002620:	2302      	movs	r3, #2
 8002622:	e022      	b.n	800266a <HAL_PCD_Start+0x62>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800263c:	2b01      	cmp	r3, #1
 800263e:	d105      	bne.n	800264c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f006 f98f 	bl	8008974 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f007 fa36 	bl	8009acc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002672:	b590      	push	{r4, r7, lr}
 8002674:	b08d      	sub	sp, #52	; 0x34
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f007 faf4 	bl	8009c76 <USB_GetMode>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	f040 84b7 	bne.w	8003004 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f007 fa58 	bl	8009b50 <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 84ad 	beq.w	8003002 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f007 fa45 	bl	8009b50 <USB_ReadInterrupts>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d107      	bne.n	80026e0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f002 0202 	and.w	r2, r2, #2
 80026de:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f007 fa33 	bl	8009b50 <USB_ReadInterrupts>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b10      	cmp	r3, #16
 80026f2:	d161      	bne.n	80027b8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0210 	bic.w	r2, r2, #16
 8002702:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	f003 020f 	and.w	r2, r3, #15
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	4413      	add	r3, r2
 8002720:	3304      	adds	r3, #4
 8002722:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	0c5b      	lsrs	r3, r3, #17
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	2b02      	cmp	r3, #2
 800272e:	d124      	bne.n	800277a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d035      	beq.n	80027a8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800274a:	b29b      	uxth	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	6a38      	ldr	r0, [r7, #32]
 8002750:	f007 f86a 	bl	8009828 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	091b      	lsrs	r3, r3, #4
 800275c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002760:	441a      	add	r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002772:	441a      	add	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	615a      	str	r2, [r3, #20]
 8002778:	e016      	b.n	80027a8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	0c5b      	lsrs	r3, r3, #17
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	2b06      	cmp	r3, #6
 8002784:	d110      	bne.n	80027a8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800278c:	2208      	movs	r2, #8
 800278e:	4619      	mov	r1, r3
 8002790:	6a38      	ldr	r0, [r7, #32]
 8002792:	f007 f849 	bl	8009828 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027a2:	441a      	add	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0210 	orr.w	r2, r2, #16
 80027b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f007 f9c7 	bl	8009b50 <USB_ReadInterrupts>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027cc:	f040 80a7 	bne.w	800291e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f007 f9cc 	bl	8009b76 <USB_ReadDevAllOutEpInterrupt>
 80027de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80027e0:	e099      	b.n	8002916 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 808e 	beq.w	800290a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f007 f9f0 	bl	8009bde <USB_ReadDevOutEPInterrupt>
 80027fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00c      	beq.n	8002824 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	4413      	add	r3, r2
 8002812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002816:	461a      	mov	r2, r3
 8002818:	2301      	movs	r3, #1
 800281a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800281c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fed2 	bl	80035c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00c      	beq.n	8002848 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	4413      	add	r3, r2
 8002836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283a:	461a      	mov	r2, r3
 800283c:	2308      	movs	r3, #8
 800283e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 ffa8 	bl	8003798 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	4413      	add	r3, r2
 800285a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800285e:	461a      	mov	r2, r3
 8002860:	2310      	movs	r3, #16
 8002862:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d030      	beq.n	80028d0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002876:	2b80      	cmp	r3, #128	; 0x80
 8002878:	d109      	bne.n	800288e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002888:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800288c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800288e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	3304      	adds	r3, #4
 80028a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	78db      	ldrb	r3, [r3, #3]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d108      	bne.n	80028be <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2200      	movs	r2, #0
 80028b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	4619      	mov	r1, r3
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f009 fd6b 	bl	800c394 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ca:	461a      	mov	r2, r3
 80028cc:	2302      	movs	r3, #2
 80028ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e6:	461a      	mov	r2, r3
 80028e8:	2320      	movs	r3, #32
 80028ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d009      	beq.n	800290a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002902:	461a      	mov	r2, r3
 8002904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002908:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	3301      	adds	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	2b00      	cmp	r3, #0
 800291a:	f47f af62 	bne.w	80027e2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f007 f914 	bl	8009b50 <USB_ReadInterrupts>
 8002928:	4603      	mov	r3, r0
 800292a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002932:	f040 80db 	bne.w	8002aec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f007 f935 	bl	8009baa <USB_ReadDevAllInEpInterrupt>
 8002940:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002946:	e0cd      	b.n	8002ae4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80c2 	beq.w	8002ad8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f007 f95b 	bl	8009c1a <USB_ReadDevInEPInterrupt>
 8002964:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d057      	beq.n	8002a20 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	2201      	movs	r2, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	43db      	mvns	r3, r3
 800298a:	69f9      	ldr	r1, [r7, #28]
 800298c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002990:	4013      	ands	r3, r2
 8002992:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	4413      	add	r3, r2
 800299c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a0:	461a      	mov	r2, r3
 80029a2:	2301      	movs	r3, #1
 80029a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d132      	bne.n	8002a14 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	3348      	adds	r3, #72	; 0x48
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4403      	add	r3, r0
 80029ce:	3344      	adds	r3, #68	; 0x44
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4419      	add	r1, r3
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4403      	add	r3, r0
 80029e2:	3348      	adds	r3, #72	; 0x48
 80029e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d113      	bne.n	8002a14 <HAL_PCD_IRQHandler+0x3a2>
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	334c      	adds	r3, #76	; 0x4c
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d108      	bne.n	8002a14 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2101      	movs	r1, #1
 8002a10:	f007 f964 	bl	8009cdc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f009 fc35 	bl	800c28a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a36:	461a      	mov	r2, r3
 8002a38:	2308      	movs	r3, #8
 8002a3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a52:	461a      	mov	r2, r3
 8002a54:	2310      	movs	r3, #16
 8002a56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2340      	movs	r3, #64	; 0x40
 8002a72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d023      	beq.n	8002ac6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a80:	6a38      	ldr	r0, [r7, #32]
 8002a82:	f006 f943 	bl	8008d0c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	3338      	adds	r3, #56	; 0x38
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	3304      	adds	r3, #4
 8002a98:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	78db      	ldrb	r3, [r3, #3]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d108      	bne.n	8002ab4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	4619      	mov	r1, r3
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f009 fc82 	bl	800c3b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fcea 	bl	80034ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	3301      	adds	r3, #1
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae0:	085b      	lsrs	r3, r3, #1
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f47f af2e 	bne.w	8002948 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f007 f82d 	bl	8009b50 <USB_ReadInterrupts>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b00:	d122      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d108      	bne.n	8002b32 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b28:	2100      	movs	r1, #0
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fef6 	bl	800391c <HAL_PCDEx_LPM_Callback>
 8002b30:	e002      	b.n	8002b38 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f009 fc20 	bl	800c378 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f006 ffff 	bl	8009b50 <USB_ReadInterrupts>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5c:	d112      	bne.n	8002b84 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d102      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f009 fbdc 	bl	800c32c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b82:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f006 ffe1 	bl	8009b50 <USB_ReadInterrupts>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b98:	d121      	bne.n	8002bde <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002ba8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d111      	bne.n	8002bd8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	f003 020f 	and.w	r2, r3, #15
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002bce:	2101      	movs	r1, #1
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fea3 	bl	800391c <HAL_PCDEx_LPM_Callback>
 8002bd6:	e002      	b.n	8002bde <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f009 fba7 	bl	800c32c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f006 ffb4 	bl	8009b50 <USB_ReadInterrupts>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf2:	f040 80b7 	bne.w	8002d64 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2110      	movs	r1, #16
 8002c10:	4618      	mov	r0, r3
 8002c12:	f006 f87b 	bl	8008d0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1a:	e046      	b.n	8002caa <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c40:	0151      	lsls	r1, r2, #5
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	440a      	add	r2, r1
 8002c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c62:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c74:	0151      	lsls	r1, r2, #5
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	440a      	add	r2, r1
 8002c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c94:	0151      	lsls	r1, r2, #5
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	440a      	add	r2, r1
 8002c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ca2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d3b3      	bcc.n	8002c1c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002cc6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d016      	beq.n	8002cfe <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ce0:	f043 030b 	orr.w	r3, r3, #11
 8002ce4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf6:	f043 030b 	orr.w	r3, r3, #11
 8002cfa:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfc:	e015      	b.n	8002d2a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f242 032b 	movw	r3, #8235	; 0x202b
 8002d12:	4313      	orrs	r3, r2
 8002d14:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d24:	f043 030b 	orr.w	r3, r3, #11
 8002d28:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d38:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d3c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f006 ffc4 	bl	8009cdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f006 fef1 	bl	8009b50 <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d78:	d124      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f006 ff88 	bl	8009c94 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f006 f83c 	bl	8008e06 <USB_GetDevSpeed>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681c      	ldr	r4, [r3, #0]
 8002d9a:	f001 fd9f 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 8002d9e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	4620      	mov	r0, r4
 8002daa:	f005 fd41 	bl	8008830 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f009 fa93 	bl	800c2da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f006 fec1 	bl	8009b50 <USB_ReadInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d10a      	bne.n	8002dee <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f009 fa70 	bl	800c2be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f002 0208 	and.w	r2, r2, #8
 8002dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f006 feac 	bl	8009b50 <USB_ReadInterrupts>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfe:	2b80      	cmp	r3, #128	; 0x80
 8002e00:	d122      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e0e:	2301      	movs	r3, #1
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
 8002e12:	e014      	b.n	8002e3e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d105      	bne.n	8002e38 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	4619      	mov	r1, r3
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fb09 	bl	800344a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d3e5      	bcc.n	8002e14 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f006 fe7f 	bl	8009b50 <USB_ReadInterrupts>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5c:	d13b      	bne.n	8002ed6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e5e:	2301      	movs	r3, #1
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
 8002e62:	e02b      	b.n	8002ebc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	3340      	adds	r3, #64	; 0x40
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d115      	bne.n	8002eb6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e8a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	da12      	bge.n	8002eb6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	333f      	adds	r3, #63	; 0x3f
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 faca 	bl	800344a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	3301      	adds	r3, #1
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d3ce      	bcc.n	8002e64 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f006 fe38 	bl	8009b50 <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eea:	d155      	bne.n	8002f98 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eec:	2301      	movs	r3, #1
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef0:	e045      	b.n	8002f7e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d12e      	bne.n	8002f78 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	da2b      	bge.n	8002f78 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002f2c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d121      	bne.n	8002f78 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f74:	6053      	str	r3, [r2, #4]
            break;
 8002f76:	e007      	b.n	8002f88 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d3b4      	bcc.n	8002ef2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f006 fdd7 	bl	8009b50 <USB_ReadInterrupts>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fac:	d10a      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f009 fa14 	bl	800c3dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f006 fdc1 	bl	8009b50 <USB_ReadInterrupts>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d115      	bne.n	8003004 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f009 fa04 	bl	800c3f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	e000      	b.n	8003004 <HAL_PCD_IRQHandler+0x992>
      return;
 8003002:	bf00      	nop
    }
  }
}
 8003004:	3734      	adds	r7, #52	; 0x34
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}

0800300a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_PCD_SetAddress+0x1a>
 8003020:	2302      	movs	r3, #2
 8003022:	e013      	b.n	800304c <HAL_PCD_SetAddress+0x42>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f006 fd1f 	bl	8009a80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	4608      	mov	r0, r1
 800305e:	4611      	mov	r1, r2
 8003060:	461a      	mov	r2, r3
 8003062:	4603      	mov	r3, r0
 8003064:	70fb      	strb	r3, [r7, #3]
 8003066:	460b      	mov	r3, r1
 8003068:	803b      	strh	r3, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003076:	2b00      	cmp	r3, #0
 8003078:	da0f      	bge.n	800309a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	3338      	adds	r3, #56	; 0x38
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	3304      	adds	r3, #4
 8003090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	705a      	strb	r2, [r3, #1]
 8003098:	e00f      	b.n	80030ba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 020f 	and.w	r2, r3, #15
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	3304      	adds	r3, #4
 80030b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030c6:	883a      	ldrh	r2, [r7, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	78ba      	ldrb	r2, [r7, #2]
 80030d0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	785b      	ldrb	r3, [r3, #1]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d004      	beq.n	80030e4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030e4:	78bb      	ldrb	r3, [r7, #2]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d102      	bne.n	80030f0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_PCD_EP_Open+0xaa>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e00e      	b.n	800311c <HAL_PCD_EP_Open+0xc8>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68f9      	ldr	r1, [r7, #12]
 800310c:	4618      	mov	r0, r3
 800310e:	f005 fe9f 	bl	8008e50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800311a:	7afb      	ldrb	r3, [r7, #11]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003134:	2b00      	cmp	r3, #0
 8003136:	da0f      	bge.n	8003158 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	f003 020f 	and.w	r2, r3, #15
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	3338      	adds	r3, #56	; 0x38
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4413      	add	r3, r2
 800314c:	3304      	adds	r3, #4
 800314e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	705a      	strb	r2, [r3, #1]
 8003156:	e00f      	b.n	8003178 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	3304      	adds	r3, #4
 8003170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	b2da      	uxtb	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_PCD_EP_Close+0x6e>
 800318e:	2302      	movs	r3, #2
 8003190:	e00e      	b.n	80031b0 <HAL_PCD_EP_Close+0x8c>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68f9      	ldr	r1, [r7, #12]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f005 fedd 	bl	8008f60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	460b      	mov	r3, r1
 80031c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031c8:	7afb      	ldrb	r3, [r7, #11]
 80031ca:	f003 020f 	and.w	r2, r3, #15
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4413      	add	r3, r2
 80031de:	3304      	adds	r3, #4
 80031e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2200      	movs	r2, #0
 80031f2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2200      	movs	r2, #0
 80031f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031fa:	7afb      	ldrb	r3, [r7, #11]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	b2da      	uxtb	r2, r3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d102      	bne.n	8003214 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	6979      	ldr	r1, [r7, #20]
 8003222:	f005 ff79 	bl	8009118 <USB_EPStartXfer>

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	f003 020f 	and.w	r2, r3, #15
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003252:	681b      	ldr	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	460b      	mov	r3, r1
 800326e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003270:	7afb      	ldrb	r3, [r7, #11]
 8003272:	f003 020f 	and.w	r2, r3, #15
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	3338      	adds	r3, #56	; 0x38
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	3304      	adds	r3, #4
 8003286:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2200      	movs	r2, #0
 8003298:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2201      	movs	r2, #1
 800329e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032a0:	7afb      	ldrb	r3, [r7, #11]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d102      	bne.n	80032ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	6979      	ldr	r1, [r7, #20]
 80032c8:	f005 ff26 	bl	8009118 <USB_EPStartXfer>

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 020f 	and.w	r2, r3, #15
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d901      	bls.n	80032f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e050      	b.n	8003396 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	da0f      	bge.n	800331c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	f003 020f 	and.w	r2, r3, #15
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	3338      	adds	r3, #56	; 0x38
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4413      	add	r3, r2
 8003310:	3304      	adds	r3, #4
 8003312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	705a      	strb	r2, [r3, #1]
 800331a:	e00d      	b.n	8003338 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	4613      	mov	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	3304      	adds	r3, #4
 8003330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_PCD_EP_SetStall+0x82>
 8003354:	2302      	movs	r3, #2
 8003356:	e01e      	b.n	8003396 <HAL_PCD_EP_SetStall+0xc0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68f9      	ldr	r1, [r7, #12]
 8003366:	4618      	mov	r0, r3
 8003368:	f006 fab6 	bl	80098d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10a      	bne.n	800338c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	b2d9      	uxtb	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003386:	461a      	mov	r2, r3
 8003388:	f006 fca8 	bl	8009cdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	460b      	mov	r3, r1
 80033a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033aa:	78fb      	ldrb	r3, [r7, #3]
 80033ac:	f003 020f 	and.w	r2, r3, #15
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d901      	bls.n	80033bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e042      	b.n	8003442 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	da0f      	bge.n	80033e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f003 020f 	and.w	r2, r3, #15
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	3338      	adds	r3, #56	; 0x38
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	3304      	adds	r3, #4
 80033da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	705a      	strb	r2, [r3, #1]
 80033e2:	e00f      	b.n	8003404 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	f003 020f 	and.w	r2, r3, #15
 80033ea:	4613      	mov	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4413      	add	r3, r2
 80033fa:	3304      	adds	r3, #4
 80033fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800340a:	78fb      	ldrb	r3, [r7, #3]
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	b2da      	uxtb	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_PCD_EP_ClrStall+0x86>
 8003420:	2302      	movs	r3, #2
 8003422:	e00e      	b.n	8003442 <HAL_PCD_EP_ClrStall+0xa4>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68f9      	ldr	r1, [r7, #12]
 8003432:	4618      	mov	r0, r3
 8003434:	f006 fabe 	bl	80099b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	460b      	mov	r3, r1
 8003454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003456:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800345a:	2b00      	cmp	r3, #0
 800345c:	da0c      	bge.n	8003478 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800345e:	78fb      	ldrb	r3, [r7, #3]
 8003460:	f003 020f 	and.w	r2, r3, #15
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	3338      	adds	r3, #56	; 0x38
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	3304      	adds	r3, #4
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	e00c      	b.n	8003492 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	f003 020f 	and.w	r2, r3, #15
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	3304      	adds	r3, #4
 8003490:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68f9      	ldr	r1, [r7, #12]
 8003498:	4618      	mov	r0, r3
 800349a:	f006 f8dd 	bl	8009658 <USB_EPStopXfer>
 800349e:	4603      	mov	r3, r0
 80034a0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034a2:	7afb      	ldrb	r3, [r7, #11]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	; 0x28
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	3338      	adds	r3, #56	; 0x38
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	4413      	add	r3, r2
 80034d0:	3304      	adds	r3, #4
 80034d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d901      	bls.n	80034e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e06c      	b.n	80035be <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d902      	bls.n	8003500 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	3303      	adds	r3, #3
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003508:	e02b      	b.n	8003562 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	429a      	cmp	r2, r3
 800351e:	d902      	bls.n	8003526 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3303      	adds	r3, #3
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	68d9      	ldr	r1, [r3, #12]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800353e:	b2db      	uxtb	r3, r3
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	4603      	mov	r3, r0
 8003544:	6978      	ldr	r0, [r7, #20]
 8003546:	f006 f931 	bl	80097ac <USB_WritePacket>

    ep->xfer_buff  += len;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	441a      	add	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	441a      	add	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	429a      	cmp	r2, r3
 8003576:	d809      	bhi.n	800358c <PCD_WriteEmptyTxFifo+0xe0>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003580:	429a      	cmp	r2, r3
 8003582:	d203      	bcs.n	800358c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1be      	bne.n	800350a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	429a      	cmp	r2, r3
 8003596:	d811      	bhi.n	80035bc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	2201      	movs	r2, #1
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	6939      	ldr	r1, [r7, #16]
 80035b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035b8:	4013      	ands	r3, r2
 80035ba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	333c      	adds	r3, #60	; 0x3c
 80035e0:	3304      	adds	r3, #4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d17b      	bne.n	80036f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d015      	beq.n	8003634 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	4a61      	ldr	r2, [pc, #388]	; (8003790 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	f240 80b9 	bls.w	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80b3 	beq.w	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362a:	461a      	mov	r2, r3
 800362c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003630:	6093      	str	r3, [r2, #8]
 8003632:	e0a7      	b.n	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364a:	461a      	mov	r2, r3
 800364c:	2320      	movs	r3, #32
 800364e:	6093      	str	r3, [r2, #8]
 8003650:	e098      	b.n	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	f040 8093 	bne.w	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	4a4b      	ldr	r2, [pc, #300]	; (8003790 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d90f      	bls.n	8003686 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	4413      	add	r3, r2
 8003678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800367c:	461a      	mov	r2, r3
 800367e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003682:	6093      	str	r3, [r2, #8]
 8003684:	e07e      	b.n	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	3304      	adds	r3, #4
 800369a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a1a      	ldr	r2, [r3, #32]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	0159      	lsls	r1, r3, #5
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	440b      	add	r3, r1
 80036a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b2:	1ad2      	subs	r2, r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d114      	bne.n	80036e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036d0:	461a      	mov	r2, r3
 80036d2:	2101      	movs	r1, #1
 80036d4:	f006 fb02 	bl	8009cdc <USB_EP0_OutStart>
 80036d8:	e006      	b.n	80036e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	441a      	add	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f008 fdb0 	bl	800c254 <HAL_PCD_DataOutStageCallback>
 80036f4:	e046      	b.n	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	4a26      	ldr	r2, [pc, #152]	; (8003794 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d124      	bne.n	8003748 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003714:	461a      	mov	r2, r3
 8003716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800371a:	6093      	str	r3, [r2, #8]
 800371c:	e032      	b.n	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003734:	461a      	mov	r2, r3
 8003736:	2320      	movs	r3, #32
 8003738:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f008 fd87 	bl	800c254 <HAL_PCD_DataOutStageCallback>
 8003746:	e01d      	b.n	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d114      	bne.n	8003778 <PCD_EP_OutXfrComplete_int+0x1b0>
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d108      	bne.n	8003778 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003770:	461a      	mov	r2, r3
 8003772:	2100      	movs	r1, #0
 8003774:	f006 fab2 	bl	8009cdc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	4619      	mov	r1, r3
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f008 fd68 	bl	800c254 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	4f54300a 	.word	0x4f54300a
 8003794:	4f54310a 	.word	0x4f54310a

08003798 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	333c      	adds	r3, #60	; 0x3c
 80037b0:	3304      	adds	r3, #4
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4a15      	ldr	r2, [pc, #84]	; (8003820 <PCD_EP_OutSetupPacket_int+0x88>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d90e      	bls.n	80037ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d009      	beq.n	80037ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e4:	461a      	mov	r2, r3
 80037e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f008 fd1f 	bl	800c230 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <PCD_EP_OutSetupPacket_int+0x88>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d90c      	bls.n	8003814 <PCD_EP_OutSetupPacket_int+0x7c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d108      	bne.n	8003814 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800380c:	461a      	mov	r2, r3
 800380e:	2101      	movs	r1, #1
 8003810:	f006 fa64 	bl	8009cdc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	4f54300a 	.word	0x4f54300a

08003824 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	70fb      	strb	r3, [r7, #3]
 8003830:	4613      	mov	r3, r2
 8003832:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d107      	bne.n	8003852 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003842:	883b      	ldrh	r3, [r7, #0]
 8003844:	0419      	lsls	r1, r3, #16
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	430a      	orrs	r2, r1
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
 8003850:	e028      	b.n	80038a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	4413      	add	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
 8003864:	e00d      	b.n	8003882 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	3340      	adds	r3, #64	; 0x40
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	4413      	add	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	3301      	adds	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	3b01      	subs	r3, #1
 8003888:	429a      	cmp	r2, r3
 800388a:	d3ec      	bcc.n	8003866 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800388c:	883b      	ldrh	r3, [r7, #0]
 800388e:	0418      	lsls	r0, r3, #16
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6819      	ldr	r1, [r3, #0]
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	3b01      	subs	r3, #1
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	4302      	orrs	r2, r0
 800389c:	3340      	adds	r3, #64	; 0x40
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	460b      	mov	r3, r1
 80038bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	887a      	ldrh	r2, [r7, #2]
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_PCDEx_ActivateLPM+0x44>)
 8003904:	4313      	orrs	r3, r2
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	10000003 	.word	0x10000003

0800391c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800393c:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_PWREx_ConfigSupply+0x70>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b04      	cmp	r3, #4
 8003946:	d00a      	beq.n	800395e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003948:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <HAL_PWREx_ConfigSupply+0x70>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	d001      	beq.n	800395a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e01f      	b.n	800399a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e01d      	b.n	800399a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <HAL_PWREx_ConfigSupply+0x70>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f023 0207 	bic.w	r2, r3, #7
 8003966:	490f      	ldr	r1, [pc, #60]	; (80039a4 <HAL_PWREx_ConfigSupply+0x70>)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4313      	orrs	r3, r2
 800396c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800396e:	f7fd fec7 	bl	8001700 <HAL_GetTick>
 8003972:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003974:	e009      	b.n	800398a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003976:	f7fd fec3 	bl	8001700 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003984:	d901      	bls.n	800398a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e007      	b.n	800399a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_PWREx_ConfigSupply+0x70>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003996:	d1ee      	bne.n	8003976 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	58024800 	.word	0x58024800

080039a8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80039b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b6:	60d3      	str	r3, [r2, #12]
}
 80039b8:	bf00      	nop
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	58024800 	.word	0x58024800

080039c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08c      	sub	sp, #48	; 0x30
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d102      	bne.n	80039dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f000 bc48 	b.w	800426c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 8088 	beq.w	8003afa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ea:	4b99      	ldr	r3, [pc, #612]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039f4:	4b96      	ldr	r3, [pc, #600]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d007      	beq.n	8003a10 <HAL_RCC_OscConfig+0x48>
 8003a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a02:	2b18      	cmp	r3, #24
 8003a04:	d111      	bne.n	8003a2a <HAL_RCC_OscConfig+0x62>
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d10c      	bne.n	8003a2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	4b8f      	ldr	r3, [pc, #572]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d06d      	beq.n	8003af8 <HAL_RCC_OscConfig+0x130>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d169      	bne.n	8003af8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	f000 bc21 	b.w	800426c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a32:	d106      	bne.n	8003a42 <HAL_RCC_OscConfig+0x7a>
 8003a34:	4b86      	ldr	r3, [pc, #536]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a85      	ldr	r2, [pc, #532]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	e02e      	b.n	8003aa0 <HAL_RCC_OscConfig+0xd8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x9c>
 8003a4a:	4b81      	ldr	r3, [pc, #516]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a80      	ldr	r2, [pc, #512]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b7e      	ldr	r3, [pc, #504]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a7d      	ldr	r2, [pc, #500]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e01d      	b.n	8003aa0 <HAL_RCC_OscConfig+0xd8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCC_OscConfig+0xc0>
 8003a6e:	4b78      	ldr	r3, [pc, #480]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a77      	ldr	r2, [pc, #476]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	4b75      	ldr	r3, [pc, #468]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a74      	ldr	r2, [pc, #464]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	e00b      	b.n	8003aa0 <HAL_RCC_OscConfig+0xd8>
 8003a88:	4b71      	ldr	r3, [pc, #452]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a70      	ldr	r2, [pc, #448]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4b6e      	ldr	r3, [pc, #440]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a6d      	ldr	r2, [pc, #436]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d013      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fd fe2a 	bl	8001700 <HAL_GetTick>
 8003aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab0:	f7fd fe26 	bl	8001700 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b64      	cmp	r3, #100	; 0x64
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e3d4      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ac2:	4b63      	ldr	r3, [pc, #396]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0xe8>
 8003ace:	e014      	b.n	8003afa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fd fe16 	bl	8001700 <HAL_GetTick>
 8003ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fd fe12 	bl	8001700 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e3c0      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003aea:	4b59      	ldr	r3, [pc, #356]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x110>
 8003af6:	e000      	b.n	8003afa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 80ca 	beq.w	8003c9c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b08:	4b51      	ldr	r3, [pc, #324]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b12:	4b4f      	ldr	r3, [pc, #316]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_RCC_OscConfig+0x166>
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	2b18      	cmp	r3, #24
 8003b22:	d156      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x20a>
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d151      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b2e:	4b48      	ldr	r3, [pc, #288]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_RCC_OscConfig+0x17e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e392      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b46:	4b42      	ldr	r3, [pc, #264]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 0219 	bic.w	r2, r3, #25
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	493f      	ldr	r1, [pc, #252]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd fdd2 	bl	8001700 <HAL_GetTick>
 8003b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b60:	f7fd fdce 	bl	8001700 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e37c      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b72:	4b37      	ldr	r3, [pc, #220]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7e:	f7fd fdef 	bl	8001760 <HAL_GetREVID>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d817      	bhi.n	8003bbc <HAL_RCC_OscConfig+0x1f4>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	2b40      	cmp	r3, #64	; 0x40
 8003b92:	d108      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x1de>
 8003b94:	4b2e      	ldr	r3, [pc, #184]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b9c:	4a2c      	ldr	r2, [pc, #176]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba4:	e07a      	b.n	8003c9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba6:	4b2a      	ldr	r3, [pc, #168]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	031b      	lsls	r3, r3, #12
 8003bb4:	4926      	ldr	r1, [pc, #152]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bba:	e06f      	b.n	8003c9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbc:	4b24      	ldr	r3, [pc, #144]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	061b      	lsls	r3, r3, #24
 8003bca:	4921      	ldr	r1, [pc, #132]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd0:	e064      	b.n	8003c9c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d047      	beq.n	8003c6a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bda:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 0219 	bic.w	r2, r3, #25
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	491a      	ldr	r1, [pc, #104]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fd fd88 	bl	8001700 <HAL_GetTick>
 8003bf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf4:	f7fd fd84 	bl	8001700 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e332      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c12:	f7fd fda5 	bl	8001760 <HAL_GetREVID>
 8003c16:	4603      	mov	r3, r0
 8003c18:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d819      	bhi.n	8003c54 <HAL_RCC_OscConfig+0x28c>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2b40      	cmp	r3, #64	; 0x40
 8003c26:	d108      	bne.n	8003c3a <HAL_RCC_OscConfig+0x272>
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c30:	4a07      	ldr	r2, [pc, #28]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c36:	6053      	str	r3, [r2, #4]
 8003c38:	e030      	b.n	8003c9c <HAL_RCC_OscConfig+0x2d4>
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	031b      	lsls	r3, r3, #12
 8003c48:	4901      	ldr	r1, [pc, #4]	; (8003c50 <HAL_RCC_OscConfig+0x288>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
 8003c4e:	e025      	b.n	8003c9c <HAL_RCC_OscConfig+0x2d4>
 8003c50:	58024400 	.word	0x58024400
 8003c54:	4b9a      	ldr	r3, [pc, #616]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	061b      	lsls	r3, r3, #24
 8003c62:	4997      	ldr	r1, [pc, #604]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]
 8003c68:	e018      	b.n	8003c9c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6a:	4b95      	ldr	r3, [pc, #596]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a94      	ldr	r2, [pc, #592]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c76:	f7fd fd43 	bl	8001700 <HAL_GetTick>
 8003c7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7e:	f7fd fd3f 	bl	8001700 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e2ed      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c90:	4b8b      	ldr	r3, [pc, #556]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1f0      	bne.n	8003c7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80a9 	beq.w	8003dfc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003caa:	4b85      	ldr	r3, [pc, #532]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cb2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cb4:	4b82      	ldr	r3, [pc, #520]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d007      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x308>
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b18      	cmp	r3, #24
 8003cc4:	d13a      	bne.n	8003d3c <HAL_RCC_OscConfig+0x374>
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d135      	bne.n	8003d3c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cd0:	4b7b      	ldr	r3, [pc, #492]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x320>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e2c1      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ce8:	f7fd fd3a 	bl	8001760 <HAL_GetREVID>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d817      	bhi.n	8003d26 <HAL_RCC_OscConfig+0x35e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d108      	bne.n	8003d10 <HAL_RCC_OscConfig+0x348>
 8003cfe:	4b70      	ldr	r3, [pc, #448]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d06:	4a6e      	ldr	r2, [pc, #440]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003d08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d0c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d0e:	e075      	b.n	8003dfc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d10:	4b6b      	ldr	r3, [pc, #428]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	069b      	lsls	r3, r3, #26
 8003d1e:	4968      	ldr	r1, [pc, #416]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d24:	e06a      	b.n	8003dfc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d26:	4b66      	ldr	r3, [pc, #408]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	061b      	lsls	r3, r3, #24
 8003d34:	4962      	ldr	r1, [pc, #392]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d3a:	e05f      	b.n	8003dfc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d042      	beq.n	8003dca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d44:	4b5e      	ldr	r3, [pc, #376]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a5d      	ldr	r2, [pc, #372]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fd fcd6 	bl	8001700 <HAL_GetTick>
 8003d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d58:	f7fd fcd2 	bl	8001700 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e280      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d6a:	4b55      	ldr	r3, [pc, #340]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d76:	f7fd fcf3 	bl	8001760 <HAL_GetREVID>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d817      	bhi.n	8003db4 <HAL_RCC_OscConfig+0x3ec>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d108      	bne.n	8003d9e <HAL_RCC_OscConfig+0x3d6>
 8003d8c:	4b4c      	ldr	r3, [pc, #304]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d94:	4a4a      	ldr	r2, [pc, #296]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003d96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d9a:	6053      	str	r3, [r2, #4]
 8003d9c:	e02e      	b.n	8003dfc <HAL_RCC_OscConfig+0x434>
 8003d9e:	4b48      	ldr	r3, [pc, #288]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	069b      	lsls	r3, r3, #26
 8003dac:	4944      	ldr	r1, [pc, #272]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	604b      	str	r3, [r1, #4]
 8003db2:	e023      	b.n	8003dfc <HAL_RCC_OscConfig+0x434>
 8003db4:	4b42      	ldr	r3, [pc, #264]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	061b      	lsls	r3, r3, #24
 8003dc2:	493f      	ldr	r1, [pc, #252]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60cb      	str	r3, [r1, #12]
 8003dc8:	e018      	b.n	8003dfc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003dca:	4b3d      	ldr	r3, [pc, #244]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a3c      	ldr	r2, [pc, #240]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd6:	f7fd fc93 	bl	8001700 <HAL_GetTick>
 8003dda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003dde:	f7fd fc8f 	bl	8001700 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e23d      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003df0:	4b33      	ldr	r3, [pc, #204]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d036      	beq.n	8003e76 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d019      	beq.n	8003e44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e10:	4b2b      	ldr	r3, [pc, #172]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e14:	4a2a      	ldr	r2, [pc, #168]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1c:	f7fd fc70 	bl	8001700 <HAL_GetTick>
 8003e20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e24:	f7fd fc6c 	bl	8001700 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e21a      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e36:	4b22      	ldr	r3, [pc, #136]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0x45c>
 8003e42:	e018      	b.n	8003e76 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e44:	4b1e      	ldr	r3, [pc, #120]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e48:	4a1d      	ldr	r2, [pc, #116]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fd fc56 	bl	8001700 <HAL_GetTick>
 8003e54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e58:	f7fd fc52 	bl	8001700 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e200      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e6a:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d039      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01c      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a0c      	ldr	r2, [pc, #48]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e96:	f7fd fc33 	bl	8001700 <HAL_GetTick>
 8003e9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e9e:	f7fd fc2f 	bl	8001700 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e1dd      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_RCC_OscConfig+0x4f8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x4d6>
 8003ebc:	e01b      	b.n	8003ef6 <HAL_RCC_OscConfig+0x52e>
 8003ebe:	bf00      	nop
 8003ec0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ec4:	4b9b      	ldr	r3, [pc, #620]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a9a      	ldr	r2, [pc, #616]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003eca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ece:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ed0:	f7fd fc16 	bl	8001700 <HAL_GetTick>
 8003ed4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ed8:	f7fd fc12 	bl	8001700 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e1c0      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003eea:	4b92      	ldr	r3, [pc, #584]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8081 	beq.w	8004006 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f04:	4b8c      	ldr	r3, [pc, #560]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a8b      	ldr	r2, [pc, #556]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f10:	f7fd fbf6 	bl	8001700 <HAL_GetTick>
 8003f14:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f18:	f7fd fbf2 	bl	8001700 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	; 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e1a0      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f2a:	4b83      	ldr	r3, [pc, #524]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d106      	bne.n	8003f4c <HAL_RCC_OscConfig+0x584>
 8003f3e:	4b7d      	ldr	r3, [pc, #500]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	4a7c      	ldr	r2, [pc, #496]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4a:	e02d      	b.n	8003fa8 <HAL_RCC_OscConfig+0x5e0>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10c      	bne.n	8003f6e <HAL_RCC_OscConfig+0x5a6>
 8003f54:	4b77      	ldr	r3, [pc, #476]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f58:	4a76      	ldr	r2, [pc, #472]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f60:	4b74      	ldr	r3, [pc, #464]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	4a73      	ldr	r2, [pc, #460]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003f66:	f023 0304 	bic.w	r3, r3, #4
 8003f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6c:	e01c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x5e0>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCC_OscConfig+0x5c8>
 8003f76:	4b6f      	ldr	r3, [pc, #444]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	4a6e      	ldr	r2, [pc, #440]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003f7c:	f043 0304 	orr.w	r3, r3, #4
 8003f80:	6713      	str	r3, [r2, #112]	; 0x70
 8003f82:	4b6c      	ldr	r3, [pc, #432]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a6b      	ldr	r2, [pc, #428]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8e:	e00b      	b.n	8003fa8 <HAL_RCC_OscConfig+0x5e0>
 8003f90:	4b68      	ldr	r3, [pc, #416]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	4a67      	ldr	r2, [pc, #412]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9c:	4b65      	ldr	r3, [pc, #404]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a64      	ldr	r2, [pc, #400]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003fa2:	f023 0304 	bic.w	r3, r3, #4
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d015      	beq.n	8003fdc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fd fba6 	bl	8001700 <HAL_GetTick>
 8003fb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7fd fba2 	bl	8001700 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e14e      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fce:	4b59      	ldr	r3, [pc, #356]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0ee      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x5f0>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7fd fb90 	bl	8001700 <HAL_GetTick>
 8003fe0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe4:	f7fd fb8c 	bl	8001700 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e138      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ffa:	4b4e      	ldr	r3, [pc, #312]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1ee      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 812d 	beq.w	800426a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004010:	4b48      	ldr	r3, [pc, #288]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004018:	2b18      	cmp	r3, #24
 800401a:	f000 80bd 	beq.w	8004198 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2b02      	cmp	r3, #2
 8004024:	f040 809e 	bne.w	8004164 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004028:	4b42      	ldr	r3, [pc, #264]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a41      	ldr	r2, [pc, #260]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 800402e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fd fb64 	bl	8001700 <HAL_GetTick>
 8004038:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403c:	f7fd fb60 	bl	8001700 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e10e      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800404e:	4b39      	ldr	r3, [pc, #228]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800405a:	4b36      	ldr	r3, [pc, #216]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 800405c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800405e:	4b37      	ldr	r3, [pc, #220]	; (800413c <HAL_RCC_OscConfig+0x774>)
 8004060:	4013      	ands	r3, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800406a:	0112      	lsls	r2, r2, #4
 800406c:	430a      	orrs	r2, r1
 800406e:	4931      	ldr	r1, [pc, #196]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8004070:	4313      	orrs	r3, r2
 8004072:	628b      	str	r3, [r1, #40]	; 0x28
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	3b01      	subs	r3, #1
 800407a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004082:	3b01      	subs	r3, #1
 8004084:	025b      	lsls	r3, r3, #9
 8004086:	b29b      	uxth	r3, r3
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	3b01      	subs	r3, #1
 8004090:	041b      	lsls	r3, r3, #16
 8004092:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409c:	3b01      	subs	r3, #1
 800409e:	061b      	lsls	r3, r3, #24
 80040a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040a4:	4923      	ldr	r1, [pc, #140]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80040aa:	4b22      	ldr	r3, [pc, #136]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	4a21      	ldr	r2, [pc, #132]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040b6:	4b1f      	ldr	r3, [pc, #124]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 80040b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ba:	4b21      	ldr	r3, [pc, #132]	; (8004140 <HAL_RCC_OscConfig+0x778>)
 80040bc:	4013      	ands	r3, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040c2:	00d2      	lsls	r2, r2, #3
 80040c4:	491b      	ldr	r1, [pc, #108]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80040ca:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	f023 020c 	bic.w	r2, r3, #12
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	4917      	ldr	r1, [pc, #92]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80040dc:	4b15      	ldr	r3, [pc, #84]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	f023 0202 	bic.w	r2, r3, #2
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e8:	4912      	ldr	r1, [pc, #72]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040ee:	4b11      	ldr	r3, [pc, #68]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	4a10      	ldr	r2, [pc, #64]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040fa:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	4a0d      	ldr	r2, [pc, #52]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8004100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004104:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004106:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	4a0a      	ldr	r2, [pc, #40]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 800410c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004110:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004112:	4b08      	ldr	r3, [pc, #32]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	4a07      	ldr	r2, [pc, #28]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a04      	ldr	r2, [pc, #16]	; (8004134 <HAL_RCC_OscConfig+0x76c>)
 8004124:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412a:	f7fd fae9 	bl	8001700 <HAL_GetTick>
 800412e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004130:	e011      	b.n	8004156 <HAL_RCC_OscConfig+0x78e>
 8004132:	bf00      	nop
 8004134:	58024400 	.word	0x58024400
 8004138:	58024800 	.word	0x58024800
 800413c:	fffffc0c 	.word	0xfffffc0c
 8004140:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004144:	f7fd fadc 	bl	8001700 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e08a      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004156:	4b47      	ldr	r3, [pc, #284]	; (8004274 <HAL_RCC_OscConfig+0x8ac>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x77c>
 8004162:	e082      	b.n	800426a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004164:	4b43      	ldr	r3, [pc, #268]	; (8004274 <HAL_RCC_OscConfig+0x8ac>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a42      	ldr	r2, [pc, #264]	; (8004274 <HAL_RCC_OscConfig+0x8ac>)
 800416a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800416e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fd fac6 	bl	8001700 <HAL_GetTick>
 8004174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004178:	f7fd fac2 	bl	8001700 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e070      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800418a:	4b3a      	ldr	r3, [pc, #232]	; (8004274 <HAL_RCC_OscConfig+0x8ac>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x7b0>
 8004196:	e068      	b.n	800426a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004198:	4b36      	ldr	r3, [pc, #216]	; (8004274 <HAL_RCC_OscConfig+0x8ac>)
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800419e:	4b35      	ldr	r3, [pc, #212]	; (8004274 <HAL_RCC_OscConfig+0x8ac>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d031      	beq.n	8004210 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f003 0203 	and.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d12a      	bne.n	8004210 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d122      	bne.n	8004210 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d11a      	bne.n	8004210 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	0a5b      	lsrs	r3, r3, #9
 80041de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d111      	bne.n	8004210 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	0c1b      	lsrs	r3, r3, #16
 80041f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d108      	bne.n	8004210 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	0e1b      	lsrs	r3, r3, #24
 8004202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e02b      	b.n	800426c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004214:	4b17      	ldr	r3, [pc, #92]	; (8004274 <HAL_RCC_OscConfig+0x8ac>)
 8004216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004218:	08db      	lsrs	r3, r3, #3
 800421a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800421e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	429a      	cmp	r2, r3
 8004228:	d01f      	beq.n	800426a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <HAL_RCC_OscConfig+0x8ac>)
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	4a11      	ldr	r2, [pc, #68]	; (8004274 <HAL_RCC_OscConfig+0x8ac>)
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004236:	f7fd fa63 	bl	8001700 <HAL_GetTick>
 800423a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800423c:	bf00      	nop
 800423e:	f7fd fa5f 	bl	8001700 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	4293      	cmp	r3, r2
 8004248:	d0f9      	beq.n	800423e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <HAL_RCC_OscConfig+0x8ac>)
 800424c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800424e:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <HAL_RCC_OscConfig+0x8b0>)
 8004250:	4013      	ands	r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004256:	00d2      	lsls	r2, r2, #3
 8004258:	4906      	ldr	r1, [pc, #24]	; (8004274 <HAL_RCC_OscConfig+0x8ac>)
 800425a:	4313      	orrs	r3, r2
 800425c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCC_OscConfig+0x8ac>)
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	4a04      	ldr	r2, [pc, #16]	; (8004274 <HAL_RCC_OscConfig+0x8ac>)
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3730      	adds	r7, #48	; 0x30
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	58024400 	.word	0x58024400
 8004278:	ffff0007 	.word	0xffff0007

0800427c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e19c      	b.n	80045ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004290:	4b8a      	ldr	r3, [pc, #552]	; (80044bc <HAL_RCC_ClockConfig+0x240>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d910      	bls.n	80042c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b87      	ldr	r3, [pc, #540]	; (80044bc <HAL_RCC_ClockConfig+0x240>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 020f 	bic.w	r2, r3, #15
 80042a6:	4985      	ldr	r1, [pc, #532]	; (80044bc <HAL_RCC_ClockConfig+0x240>)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b83      	ldr	r3, [pc, #524]	; (80044bc <HAL_RCC_ClockConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e184      	b.n	80045ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d010      	beq.n	80042ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	4b7b      	ldr	r3, [pc, #492]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042d8:	429a      	cmp	r2, r3
 80042da:	d908      	bls.n	80042ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042dc:	4b78      	ldr	r3, [pc, #480]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	4975      	ldr	r1, [pc, #468]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d010      	beq.n	800431c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	4b70      	ldr	r3, [pc, #448]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004306:	429a      	cmp	r2, r3
 8004308:	d908      	bls.n	800431c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800430a:	4b6d      	ldr	r3, [pc, #436]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	496a      	ldr	r1, [pc, #424]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 8004318:	4313      	orrs	r3, r2
 800431a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	d010      	beq.n	800434a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699a      	ldr	r2, [r3, #24]
 800432c:	4b64      	ldr	r3, [pc, #400]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004334:	429a      	cmp	r2, r3
 8004336:	d908      	bls.n	800434a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004338:	4b61      	ldr	r3, [pc, #388]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	495e      	ldr	r1, [pc, #376]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 8004346:	4313      	orrs	r3, r2
 8004348:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d010      	beq.n	8004378 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69da      	ldr	r2, [r3, #28]
 800435a:	4b59      	ldr	r3, [pc, #356]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004362:	429a      	cmp	r2, r3
 8004364:	d908      	bls.n	8004378 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004366:	4b56      	ldr	r3, [pc, #344]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	4953      	ldr	r1, [pc, #332]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 8004374:	4313      	orrs	r3, r2
 8004376:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d010      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	4b4d      	ldr	r3, [pc, #308]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f003 030f 	and.w	r3, r3, #15
 8004390:	429a      	cmp	r2, r3
 8004392:	d908      	bls.n	80043a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004394:	4b4a      	ldr	r3, [pc, #296]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f023 020f 	bic.w	r2, r3, #15
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4947      	ldr	r1, [pc, #284]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d055      	beq.n	800445e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80043b2:	4b43      	ldr	r3, [pc, #268]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	4940      	ldr	r1, [pc, #256]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d107      	bne.n	80043dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043cc:	4b3c      	ldr	r3, [pc, #240]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d121      	bne.n	800441c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0f6      	b.n	80045ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d107      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043e4:	4b36      	ldr	r3, [pc, #216]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d115      	bne.n	800441c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0ea      	b.n	80045ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d107      	bne.n	800440c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043fc:	4b30      	ldr	r3, [pc, #192]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d109      	bne.n	800441c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0de      	b.n	80045ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800440c:	4b2c      	ldr	r3, [pc, #176]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0d6      	b.n	80045ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800441c:	4b28      	ldr	r3, [pc, #160]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	f023 0207 	bic.w	r2, r3, #7
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	4925      	ldr	r1, [pc, #148]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 800442a:	4313      	orrs	r3, r2
 800442c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442e:	f7fd f967 	bl	8001700 <HAL_GetTick>
 8004432:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004434:	e00a      	b.n	800444c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004436:	f7fd f963 	bl	8001700 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f241 3288 	movw	r2, #5000	; 0x1388
 8004444:	4293      	cmp	r3, r2
 8004446:	d901      	bls.n	800444c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e0be      	b.n	80045ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444c:	4b1c      	ldr	r3, [pc, #112]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	429a      	cmp	r2, r3
 800445c:	d1eb      	bne.n	8004436 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d010      	beq.n	800448c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	4b14      	ldr	r3, [pc, #80]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	429a      	cmp	r2, r3
 8004478:	d208      	bcs.n	800448c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800447a:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f023 020f 	bic.w	r2, r3, #15
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	490e      	ldr	r1, [pc, #56]	; (80044c0 <HAL_RCC_ClockConfig+0x244>)
 8004488:	4313      	orrs	r3, r2
 800448a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_RCC_ClockConfig+0x240>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d214      	bcs.n	80044c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <HAL_RCC_ClockConfig+0x240>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 020f 	bic.w	r2, r3, #15
 80044a2:	4906      	ldr	r1, [pc, #24]	; (80044bc <HAL_RCC_ClockConfig+0x240>)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044aa:	4b04      	ldr	r3, [pc, #16]	; (80044bc <HAL_RCC_ClockConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e086      	b.n	80045ca <HAL_RCC_ClockConfig+0x34e>
 80044bc:	52002000 	.word	0x52002000
 80044c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d010      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	4b3f      	ldr	r3, [pc, #252]	; (80045d4 <HAL_RCC_ClockConfig+0x358>)
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044dc:	429a      	cmp	r2, r3
 80044de:	d208      	bcs.n	80044f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044e0:	4b3c      	ldr	r3, [pc, #240]	; (80045d4 <HAL_RCC_ClockConfig+0x358>)
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	4939      	ldr	r1, [pc, #228]	; (80045d4 <HAL_RCC_ClockConfig+0x358>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d010      	beq.n	8004520 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	4b34      	ldr	r3, [pc, #208]	; (80045d4 <HAL_RCC_ClockConfig+0x358>)
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800450a:	429a      	cmp	r2, r3
 800450c:	d208      	bcs.n	8004520 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800450e:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <HAL_RCC_ClockConfig+0x358>)
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	492e      	ldr	r1, [pc, #184]	; (80045d4 <HAL_RCC_ClockConfig+0x358>)
 800451c:	4313      	orrs	r3, r2
 800451e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b00      	cmp	r3, #0
 800452a:	d010      	beq.n	800454e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699a      	ldr	r2, [r3, #24]
 8004530:	4b28      	ldr	r3, [pc, #160]	; (80045d4 <HAL_RCC_ClockConfig+0x358>)
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004538:	429a      	cmp	r2, r3
 800453a:	d208      	bcs.n	800454e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800453c:	4b25      	ldr	r3, [pc, #148]	; (80045d4 <HAL_RCC_ClockConfig+0x358>)
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	4922      	ldr	r1, [pc, #136]	; (80045d4 <HAL_RCC_ClockConfig+0x358>)
 800454a:	4313      	orrs	r3, r2
 800454c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d010      	beq.n	800457c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69da      	ldr	r2, [r3, #28]
 800455e:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <HAL_RCC_ClockConfig+0x358>)
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004566:	429a      	cmp	r2, r3
 8004568:	d208      	bcs.n	800457c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800456a:	4b1a      	ldr	r3, [pc, #104]	; (80045d4 <HAL_RCC_ClockConfig+0x358>)
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	4917      	ldr	r1, [pc, #92]	; (80045d4 <HAL_RCC_ClockConfig+0x358>)
 8004578:	4313      	orrs	r3, r2
 800457a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800457c:	f000 f834 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <HAL_RCC_ClockConfig+0x358>)
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	0a1b      	lsrs	r3, r3, #8
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	4912      	ldr	r1, [pc, #72]	; (80045d8 <HAL_RCC_ClockConfig+0x35c>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
 8004598:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800459a:	4b0e      	ldr	r3, [pc, #56]	; (80045d4 <HAL_RCC_ClockConfig+0x358>)
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	4a0d      	ldr	r2, [pc, #52]	; (80045d8 <HAL_RCC_ClockConfig+0x35c>)
 80045a4:	5cd3      	ldrb	r3, [r2, r3]
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
 80045b0:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <HAL_RCC_ClockConfig+0x360>)
 80045b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045b4:	4a0a      	ldr	r2, [pc, #40]	; (80045e0 <HAL_RCC_ClockConfig+0x364>)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80045ba:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <HAL_RCC_ClockConfig+0x368>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fd f854 	bl	800166c <HAL_InitTick>
 80045c4:	4603      	mov	r3, r0
 80045c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	58024400 	.word	0x58024400
 80045d8:	0800c8d8 	.word	0x0800c8d8
 80045dc:	24000004 	.word	0x24000004
 80045e0:	24000000 	.word	0x24000000
 80045e4:	24000008 	.word	0x24000008

080045e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b089      	sub	sp, #36	; 0x24
 80045ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ee:	4bb3      	ldr	r3, [pc, #716]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045f6:	2b18      	cmp	r3, #24
 80045f8:	f200 8155 	bhi.w	80048a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80045fc:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <HAL_RCC_GetSysClockFreq+0x1c>)
 80045fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004602:	bf00      	nop
 8004604:	08004669 	.word	0x08004669
 8004608:	080048a7 	.word	0x080048a7
 800460c:	080048a7 	.word	0x080048a7
 8004610:	080048a7 	.word	0x080048a7
 8004614:	080048a7 	.word	0x080048a7
 8004618:	080048a7 	.word	0x080048a7
 800461c:	080048a7 	.word	0x080048a7
 8004620:	080048a7 	.word	0x080048a7
 8004624:	0800468f 	.word	0x0800468f
 8004628:	080048a7 	.word	0x080048a7
 800462c:	080048a7 	.word	0x080048a7
 8004630:	080048a7 	.word	0x080048a7
 8004634:	080048a7 	.word	0x080048a7
 8004638:	080048a7 	.word	0x080048a7
 800463c:	080048a7 	.word	0x080048a7
 8004640:	080048a7 	.word	0x080048a7
 8004644:	08004695 	.word	0x08004695
 8004648:	080048a7 	.word	0x080048a7
 800464c:	080048a7 	.word	0x080048a7
 8004650:	080048a7 	.word	0x080048a7
 8004654:	080048a7 	.word	0x080048a7
 8004658:	080048a7 	.word	0x080048a7
 800465c:	080048a7 	.word	0x080048a7
 8004660:	080048a7 	.word	0x080048a7
 8004664:	0800469b 	.word	0x0800469b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004668:	4b94      	ldr	r3, [pc, #592]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004674:	4b91      	ldr	r3, [pc, #580]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	08db      	lsrs	r3, r3, #3
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	4a90      	ldr	r2, [pc, #576]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004680:	fa22 f303 	lsr.w	r3, r2, r3
 8004684:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004686:	e111      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004688:	4b8d      	ldr	r3, [pc, #564]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800468a:	61bb      	str	r3, [r7, #24]
      break;
 800468c:	e10e      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800468e:	4b8d      	ldr	r3, [pc, #564]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004690:	61bb      	str	r3, [r7, #24]
      break;
 8004692:	e10b      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004694:	4b8c      	ldr	r3, [pc, #560]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004696:	61bb      	str	r3, [r7, #24]
      break;
 8004698:	e108      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800469a:	4b88      	ldr	r3, [pc, #544]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80046a4:	4b85      	ldr	r3, [pc, #532]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80046b0:	4b82      	ldr	r3, [pc, #520]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80046ba:	4b80      	ldr	r3, [pc, #512]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046be:	08db      	lsrs	r3, r3, #3
 80046c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	fb02 f303 	mul.w	r3, r2, r3
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80e1 	beq.w	80048a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	f000 8083 	beq.w	80047ec <HAL_RCC_GetSysClockFreq+0x204>
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	f200 80a1 	bhi.w	8004830 <HAL_RCC_GetSysClockFreq+0x248>
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_RCC_GetSysClockFreq+0x114>
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d056      	beq.n	80047a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80046fa:	e099      	b.n	8004830 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046fc:	4b6f      	ldr	r3, [pc, #444]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d02d      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004708:	4b6c      	ldr	r3, [pc, #432]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	08db      	lsrs	r3, r3, #3
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	4a6b      	ldr	r2, [pc, #428]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
 8004718:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	ee07 3a90 	vmov	s15, r3
 8004720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004732:	4b62      	ldr	r3, [pc, #392]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004742:	ed97 6a02 	vldr	s12, [r7, #8]
 8004746:	eddf 5a61 	vldr	s11, [pc, #388]	; 80048cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800474a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800474e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800475a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004762:	e087      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80048d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004776:	4b51      	ldr	r3, [pc, #324]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004786:	ed97 6a02 	vldr	s12, [r7, #8]
 800478a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80048cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800478e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800479a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800479e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047a6:	e065      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80048d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ba:	4b40      	ldr	r3, [pc, #256]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80048cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80047d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047ea:	e043      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80048d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80047fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fe:	4b2f      	ldr	r3, [pc, #188]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004812:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80048cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800481a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800482e:	e021      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80048d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800483e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004842:	4b1e      	ldr	r3, [pc, #120]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004852:	ed97 6a02 	vldr	s12, [r7, #8]
 8004856:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80048cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800485a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800485e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800486a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004872:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004874:	4b11      	ldr	r3, [pc, #68]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	0a5b      	lsrs	r3, r3, #9
 800487a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800487e:	3301      	adds	r3, #1
 8004880:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	ee07 3a90 	vmov	s15, r3
 8004888:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800488c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004898:	ee17 3a90 	vmov	r3, s15
 800489c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800489e:	e005      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61bb      	str	r3, [r7, #24]
      break;
 80048a4:	e002      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80048a6:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048a8:	61bb      	str	r3, [r7, #24]
      break;
 80048aa:	bf00      	nop
  }

  return sysclockfreq;
 80048ac:	69bb      	ldr	r3, [r7, #24]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3724      	adds	r7, #36	; 0x24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	58024400 	.word	0x58024400
 80048c0:	03d09000 	.word	0x03d09000
 80048c4:	003d0900 	.word	0x003d0900
 80048c8:	00f42400 	.word	0x00f42400
 80048cc:	46000000 	.word	0x46000000
 80048d0:	4c742400 	.word	0x4c742400
 80048d4:	4a742400 	.word	0x4a742400
 80048d8:	4b742400 	.word	0x4b742400

080048dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80048e2:	f7ff fe81 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 80048e6:	4602      	mov	r2, r0
 80048e8:	4b10      	ldr	r3, [pc, #64]	; (800492c <HAL_RCC_GetHCLKFreq+0x50>)
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	0a1b      	lsrs	r3, r3, #8
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	490f      	ldr	r1, [pc, #60]	; (8004930 <HAL_RCC_GetHCLKFreq+0x54>)
 80048f4:	5ccb      	ldrb	r3, [r1, r3]
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	fa22 f303 	lsr.w	r3, r2, r3
 80048fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004900:	4b0a      	ldr	r3, [pc, #40]	; (800492c <HAL_RCC_GetHCLKFreq+0x50>)
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	4a09      	ldr	r2, [pc, #36]	; (8004930 <HAL_RCC_GetHCLKFreq+0x54>)
 800490a:	5cd3      	ldrb	r3, [r2, r3]
 800490c:	f003 031f 	and.w	r3, r3, #31
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	fa22 f303 	lsr.w	r3, r2, r3
 8004916:	4a07      	ldr	r2, [pc, #28]	; (8004934 <HAL_RCC_GetHCLKFreq+0x58>)
 8004918:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800491a:	4a07      	ldr	r2, [pc, #28]	; (8004938 <HAL_RCC_GetHCLKFreq+0x5c>)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004920:	4b04      	ldr	r3, [pc, #16]	; (8004934 <HAL_RCC_GetHCLKFreq+0x58>)
 8004922:	681b      	ldr	r3, [r3, #0]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	58024400 	.word	0x58024400
 8004930:	0800c8d8 	.word	0x0800c8d8
 8004934:	24000004 	.word	0x24000004
 8004938:	24000000 	.word	0x24000000

0800493c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004940:	f7ff ffcc 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 8004944:	4602      	mov	r2, r0
 8004946:	4b06      	ldr	r3, [pc, #24]	; (8004960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	4904      	ldr	r1, [pc, #16]	; (8004964 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004952:	5ccb      	ldrb	r3, [r1, r3]
 8004954:	f003 031f 	and.w	r3, r3, #31
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	58024400 	.word	0x58024400
 8004964:	0800c8d8 	.word	0x0800c8d8

08004968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800496c:	f7ff ffb6 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 8004970:	4602      	mov	r2, r0
 8004972:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	0a1b      	lsrs	r3, r3, #8
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	4904      	ldr	r1, [pc, #16]	; (8004990 <HAL_RCC_GetPCLK2Freq+0x28>)
 800497e:	5ccb      	ldrb	r3, [r1, r3]
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004988:	4618      	mov	r0, r3
 800498a:	bd80      	pop	{r7, pc}
 800498c:	58024400 	.word	0x58024400
 8004990:	0800c8d8 	.word	0x0800c8d8

08004994 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004998:	b0ca      	sub	sp, #296	; 0x128
 800499a:	af00      	add	r7, sp, #0
 800499c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049a0:	2300      	movs	r3, #0
 80049a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049a6:	2300      	movs	r3, #0
 80049a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80049b8:	2500      	movs	r5, #0
 80049ba:	ea54 0305 	orrs.w	r3, r4, r5
 80049be:	d049      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049ca:	d02f      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80049cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049d0:	d828      	bhi.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80049d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049d6:	d01a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049dc:	d822      	bhi.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80049e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e6:	d007      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049e8:	e01c      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ea:	4bb8      	ldr	r3, [pc, #736]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	4ab7      	ldr	r2, [pc, #732]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049f6:	e01a      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049fc:	3308      	adds	r3, #8
 80049fe:	2102      	movs	r1, #2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 fc8f 	bl	8006324 <RCCEx_PLL2_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a0c:	e00f      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a12:	3328      	adds	r3, #40	; 0x28
 8004a14:	2102      	movs	r1, #2
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 fd36 	bl	8006488 <RCCEx_PLL3_Config>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a22:	e004      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a2a:	e000      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a36:	4ba5      	ldr	r3, [pc, #660]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a44:	4aa1      	ldr	r2, [pc, #644]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a46:	430b      	orrs	r3, r1
 8004a48:	6513      	str	r3, [r2, #80]	; 0x50
 8004a4a:	e003      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004a60:	f04f 0900 	mov.w	r9, #0
 8004a64:	ea58 0309 	orrs.w	r3, r8, r9
 8004a68:	d047      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d82a      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004a74:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7a:	bf00      	nop
 8004a7c:	08004a91 	.word	0x08004a91
 8004a80:	08004a9f 	.word	0x08004a9f
 8004a84:	08004ab5 	.word	0x08004ab5
 8004a88:	08004ad3 	.word	0x08004ad3
 8004a8c:	08004ad3 	.word	0x08004ad3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a90:	4b8e      	ldr	r3, [pc, #568]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	4a8d      	ldr	r2, [pc, #564]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a9c:	e01a      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa2:	3308      	adds	r3, #8
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f001 fc3c 	bl	8006324 <RCCEx_PLL2_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ab2:	e00f      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab8:	3328      	adds	r3, #40	; 0x28
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f001 fce3 	bl	8006488 <RCCEx_PLL3_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ac8:	e004      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10a      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004adc:	4b7b      	ldr	r3, [pc, #492]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae0:	f023 0107 	bic.w	r1, r3, #7
 8004ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aea:	4a78      	ldr	r2, [pc, #480]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aec:	430b      	orrs	r3, r1
 8004aee:	6513      	str	r3, [r2, #80]	; 0x50
 8004af0:	e003      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004af6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004b06:	f04f 0b00 	mov.w	fp, #0
 8004b0a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004b0e:	d04c      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1a:	d030      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b20:	d829      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b22:	2bc0      	cmp	r3, #192	; 0xc0
 8004b24:	d02d      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b26:	2bc0      	cmp	r3, #192	; 0xc0
 8004b28:	d825      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b2a:	2b80      	cmp	r3, #128	; 0x80
 8004b2c:	d018      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004b2e:	2b80      	cmp	r3, #128	; 0x80
 8004b30:	d821      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d007      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004b3a:	e01c      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b3c:	4b63      	ldr	r3, [pc, #396]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	4a62      	ldr	r2, [pc, #392]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b48:	e01c      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b4e:	3308      	adds	r3, #8
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 fbe6 	bl	8006324 <RCCEx_PLL2_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b5e:	e011      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b64:	3328      	adds	r3, #40	; 0x28
 8004b66:	2100      	movs	r1, #0
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f001 fc8d 	bl	8006488 <RCCEx_PLL3_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b74:	e006      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b7c:	e002      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004b7e:	bf00      	nop
 8004b80:	e000      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004b8c:	4b4f      	ldr	r3, [pc, #316]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b90:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9a:	4a4c      	ldr	r2, [pc, #304]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	6513      	str	r3, [r2, #80]	; 0x50
 8004ba0:	e003      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ba6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004bb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bc0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	d053      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004bd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bd6:	d035      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004bd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bdc:	d82e      	bhi.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004be2:	d031      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004be4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004be8:	d828      	bhi.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bee:	d01a      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf4:	d822      	bhi.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bfe:	d007      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004c00:	e01c      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c02:	4b32      	ldr	r3, [pc, #200]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	4a31      	ldr	r2, [pc, #196]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c0e:	e01c      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c14:	3308      	adds	r3, #8
 8004c16:	2100      	movs	r1, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f001 fb83 	bl	8006324 <RCCEx_PLL2_Config>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004c24:	e011      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c2a:	3328      	adds	r3, #40	; 0x28
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 fc2a 	bl	8006488 <RCCEx_PLL3_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c3a:	e006      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c42:	e002      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004c44:	bf00      	nop
 8004c46:	e000      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10b      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c52:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c56:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c62:	4a1a      	ldr	r2, [pc, #104]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6593      	str	r3, [r2, #88]	; 0x58
 8004c68:	e003      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004c7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c82:	2300      	movs	r3, #0
 8004c84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c88:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	d056      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c9e:	d038      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004ca0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ca4:	d831      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ca6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004caa:	d034      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004cac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cb0:	d82b      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004cb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cb6:	d01d      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004cb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cbc:	d825      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d006      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004cc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cc6:	d00a      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004cc8:	e01f      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004cca:	bf00      	nop
 8004ccc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd0:	4ba2      	ldr	r3, [pc, #648]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	4aa1      	ldr	r2, [pc, #644]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cdc:	e01c      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f001 fb1c 	bl	8006324 <RCCEx_PLL2_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004cf2:	e011      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf8:	3328      	adds	r3, #40	; 0x28
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 fbc3 	bl	8006488 <RCCEx_PLL3_Config>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d08:	e006      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d10:	e002      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004d12:	bf00      	nop
 8004d14:	e000      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10b      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d20:	4b8e      	ldr	r3, [pc, #568]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d24:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d30:	4a8a      	ldr	r2, [pc, #552]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d32:	430b      	orrs	r3, r1
 8004d34:	6593      	str	r3, [r2, #88]	; 0x58
 8004d36:	e003      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d50:	2300      	movs	r3, #0
 8004d52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d56:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	d03a      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d66:	2b30      	cmp	r3, #48	; 0x30
 8004d68:	d01f      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004d6a:	2b30      	cmp	r3, #48	; 0x30
 8004d6c:	d819      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	d00c      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d815      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d019      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004d7a:	2b10      	cmp	r3, #16
 8004d7c:	d111      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d7e:	4b77      	ldr	r3, [pc, #476]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	4a76      	ldr	r2, [pc, #472]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d8a:	e011      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d90:	3308      	adds	r3, #8
 8004d92:	2102      	movs	r1, #2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 fac5 	bl	8006324 <RCCEx_PLL2_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004da0:	e006      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004da8:	e002      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004db8:	4b68      	ldr	r3, [pc, #416]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dbc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc6:	4a65      	ldr	r2, [pc, #404]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dcc:	e003      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dde:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004de2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004de6:	2300      	movs	r3, #0
 8004de8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004dec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4313      	orrs	r3, r2
 8004df4:	d051      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e00:	d035      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e06:	d82e      	bhi.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e0c:	d031      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004e0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e12:	d828      	bhi.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e18:	d01a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1e:	d822      	bhi.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e28:	d007      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004e2a:	e01c      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e2c:	4b4b      	ldr	r3, [pc, #300]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	4a4a      	ldr	r2, [pc, #296]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e38:	e01c      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e3e:	3308      	adds	r3, #8
 8004e40:	2100      	movs	r1, #0
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 fa6e 	bl	8006324 <RCCEx_PLL2_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e4e:	e011      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e54:	3328      	adds	r3, #40	; 0x28
 8004e56:	2100      	movs	r1, #0
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f001 fb15 	bl	8006488 <RCCEx_PLL3_Config>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e64:	e006      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e6c:	e002      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004e6e:	bf00      	nop
 8004e70:	e000      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10a      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e7c:	4b37      	ldr	r3, [pc, #220]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e80:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8a:	4a34      	ldr	r2, [pc, #208]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	6513      	str	r3, [r2, #80]	; 0x50
 8004e90:	e003      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004eb0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	d056      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ec4:	d033      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004ec6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eca:	d82c      	bhi.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ecc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ed0:	d02f      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004ed2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ed6:	d826      	bhi.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ed8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004edc:	d02b      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004ede:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ee2:	d820      	bhi.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ee8:	d012      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eee:	d81a      	bhi.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d022      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef8:	d115      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efe:	3308      	adds	r3, #8
 8004f00:	2101      	movs	r1, #1
 8004f02:	4618      	mov	r0, r3
 8004f04:	f001 fa0e 	bl	8006324 <RCCEx_PLL2_Config>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004f0e:	e015      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f14:	3328      	adds	r3, #40	; 0x28
 8004f16:	2101      	movs	r1, #1
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 fab5 	bl	8006488 <RCCEx_PLL3_Config>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004f24:	e00a      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f2c:	e006      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f2e:	bf00      	nop
 8004f30:	e004      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f32:	bf00      	nop
 8004f34:	e002      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f36:	bf00      	nop
 8004f38:	e000      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10d      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f48:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f52:	4a02      	ldr	r2, [pc, #8]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f54:	430b      	orrs	r3, r1
 8004f56:	6513      	str	r3, [r2, #80]	; 0x50
 8004f58:	e006      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004f5a:	bf00      	nop
 8004f5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f7e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4313      	orrs	r3, r2
 8004f86:	d055      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f94:	d033      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f9a:	d82c      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa0:	d02f      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa6:	d826      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004fa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fac:	d02b      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004fae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fb2:	d820      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb8:	d012      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fbe:	d81a      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d022      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fc8:	d115      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fce:	3308      	adds	r3, #8
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f001 f9a6 	bl	8006324 <RCCEx_PLL2_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004fde:	e015      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe4:	3328      	adds	r3, #40	; 0x28
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f001 fa4d 	bl	8006488 <RCCEx_PLL3_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ff4:	e00a      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ffc:	e006      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ffe:	bf00      	nop
 8005000:	e004      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005002:	bf00      	nop
 8005004:	e002      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005006:	bf00      	nop
 8005008:	e000      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800500a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800500c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10b      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005014:	4ba3      	ldr	r3, [pc, #652]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005018:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800501c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005020:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005024:	4a9f      	ldr	r2, [pc, #636]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005026:	430b      	orrs	r3, r1
 8005028:	6593      	str	r3, [r2, #88]	; 0x58
 800502a:	e003      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800502c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005030:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005044:	2300      	movs	r3, #0
 8005046:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800504a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800504e:	460b      	mov	r3, r1
 8005050:	4313      	orrs	r3, r2
 8005052:	d037      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800505e:	d00e      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005064:	d816      	bhi.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005066:	2b00      	cmp	r3, #0
 8005068:	d018      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800506a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800506e:	d111      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005070:	4b8c      	ldr	r3, [pc, #560]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	4a8b      	ldr	r2, [pc, #556]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800507a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800507c:	e00f      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800507e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005082:	3308      	adds	r3, #8
 8005084:	2101      	movs	r1, #1
 8005086:	4618      	mov	r0, r3
 8005088:	f001 f94c 	bl	8006324 <RCCEx_PLL2_Config>
 800508c:	4603      	mov	r3, r0
 800508e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005092:	e004      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800509a:	e000      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800509c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050a6:	4b7f      	ldr	r3, [pc, #508]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80050ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	4a7b      	ldr	r2, [pc, #492]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050b6:	430b      	orrs	r3, r1
 80050b8:	6513      	str	r3, [r2, #80]	; 0x50
 80050ba:	e003      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80050c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80050d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050d4:	2300      	movs	r3, #0
 80050d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80050da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80050de:	460b      	mov	r3, r1
 80050e0:	4313      	orrs	r3, r2
 80050e2:	d039      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d81c      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80050ee:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80050f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f4:	08005131 	.word	0x08005131
 80050f8:	08005105 	.word	0x08005105
 80050fc:	08005113 	.word	0x08005113
 8005100:	08005131 	.word	0x08005131
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005104:	4b67      	ldr	r3, [pc, #412]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	4a66      	ldr	r2, [pc, #408]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800510a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800510e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005110:	e00f      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005116:	3308      	adds	r3, #8
 8005118:	2102      	movs	r1, #2
 800511a:	4618      	mov	r0, r3
 800511c:	f001 f902 	bl	8006324 <RCCEx_PLL2_Config>
 8005120:	4603      	mov	r3, r0
 8005122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005126:	e004      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800512e:	e000      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800513a:	4b5a      	ldr	r3, [pc, #360]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800513c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513e:	f023 0103 	bic.w	r1, r3, #3
 8005142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005148:	4a56      	ldr	r2, [pc, #344]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800514a:	430b      	orrs	r3, r1
 800514c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800514e:	e003      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005150:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005154:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005164:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005168:	2300      	movs	r3, #0
 800516a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800516e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005172:	460b      	mov	r3, r1
 8005174:	4313      	orrs	r3, r2
 8005176:	f000 809f 	beq.w	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800517a:	4b4b      	ldr	r3, [pc, #300]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a4a      	ldr	r2, [pc, #296]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005184:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005186:	f7fc fabb 	bl	8001700 <HAL_GetTick>
 800518a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800518e:	e00b      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005190:	f7fc fab6 	bl	8001700 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b64      	cmp	r3, #100	; 0x64
 800519e:	d903      	bls.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051a6:	e005      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051a8:	4b3f      	ldr	r3, [pc, #252]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0ed      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80051b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d179      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80051bc:	4b39      	ldr	r3, [pc, #228]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80051c8:	4053      	eors	r3, r2
 80051ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d015      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051d2:	4b34      	ldr	r3, [pc, #208]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051de:	4b31      	ldr	r3, [pc, #196]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e2:	4a30      	ldr	r2, [pc, #192]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051ea:	4b2e      	ldr	r3, [pc, #184]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	4a2d      	ldr	r2, [pc, #180]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80051f6:	4a2b      	ldr	r2, [pc, #172]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80051fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005202:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520a:	d118      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fc fa78 	bl	8001700 <HAL_GetTick>
 8005210:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005214:	e00d      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005216:	f7fc fa73 	bl	8001700 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005220:	1ad2      	subs	r2, r2, r3
 8005222:	f241 3388 	movw	r3, #5000	; 0x1388
 8005226:	429a      	cmp	r2, r3
 8005228:	d903      	bls.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005230:	e005      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005232:	4b1c      	ldr	r3, [pc, #112]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0eb      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800523e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005242:	2b00      	cmp	r3, #0
 8005244:	d129      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800524a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005256:	d10e      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005258:	4b12      	ldr	r3, [pc, #72]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005264:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005268:	091a      	lsrs	r2, r3, #4
 800526a:	4b10      	ldr	r3, [pc, #64]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800526c:	4013      	ands	r3, r2
 800526e:	4a0d      	ldr	r2, [pc, #52]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005270:	430b      	orrs	r3, r1
 8005272:	6113      	str	r3, [r2, #16]
 8005274:	e005      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005276:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	4a0a      	ldr	r2, [pc, #40]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800527c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005280:	6113      	str	r3, [r2, #16]
 8005282:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005284:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800528a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800528e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005292:	4a04      	ldr	r2, [pc, #16]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005294:	430b      	orrs	r3, r1
 8005296:	6713      	str	r3, [r2, #112]	; 0x70
 8005298:	e00e      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800529a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800529e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80052a2:	e009      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80052a4:	58024400 	.word	0x58024400
 80052a8:	58024800 	.word	0x58024800
 80052ac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80052b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	f002 0301 	and.w	r3, r2, #1
 80052c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052c8:	2300      	movs	r3, #0
 80052ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f000 8089 	beq.w	80053ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80052da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e0:	2b28      	cmp	r3, #40	; 0x28
 80052e2:	d86b      	bhi.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80052e4:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ea:	bf00      	nop
 80052ec:	080053c5 	.word	0x080053c5
 80052f0:	080053bd 	.word	0x080053bd
 80052f4:	080053bd 	.word	0x080053bd
 80052f8:	080053bd 	.word	0x080053bd
 80052fc:	080053bd 	.word	0x080053bd
 8005300:	080053bd 	.word	0x080053bd
 8005304:	080053bd 	.word	0x080053bd
 8005308:	080053bd 	.word	0x080053bd
 800530c:	08005391 	.word	0x08005391
 8005310:	080053bd 	.word	0x080053bd
 8005314:	080053bd 	.word	0x080053bd
 8005318:	080053bd 	.word	0x080053bd
 800531c:	080053bd 	.word	0x080053bd
 8005320:	080053bd 	.word	0x080053bd
 8005324:	080053bd 	.word	0x080053bd
 8005328:	080053bd 	.word	0x080053bd
 800532c:	080053a7 	.word	0x080053a7
 8005330:	080053bd 	.word	0x080053bd
 8005334:	080053bd 	.word	0x080053bd
 8005338:	080053bd 	.word	0x080053bd
 800533c:	080053bd 	.word	0x080053bd
 8005340:	080053bd 	.word	0x080053bd
 8005344:	080053bd 	.word	0x080053bd
 8005348:	080053bd 	.word	0x080053bd
 800534c:	080053c5 	.word	0x080053c5
 8005350:	080053bd 	.word	0x080053bd
 8005354:	080053bd 	.word	0x080053bd
 8005358:	080053bd 	.word	0x080053bd
 800535c:	080053bd 	.word	0x080053bd
 8005360:	080053bd 	.word	0x080053bd
 8005364:	080053bd 	.word	0x080053bd
 8005368:	080053bd 	.word	0x080053bd
 800536c:	080053c5 	.word	0x080053c5
 8005370:	080053bd 	.word	0x080053bd
 8005374:	080053bd 	.word	0x080053bd
 8005378:	080053bd 	.word	0x080053bd
 800537c:	080053bd 	.word	0x080053bd
 8005380:	080053bd 	.word	0x080053bd
 8005384:	080053bd 	.word	0x080053bd
 8005388:	080053bd 	.word	0x080053bd
 800538c:	080053c5 	.word	0x080053c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005394:	3308      	adds	r3, #8
 8005396:	2101      	movs	r1, #1
 8005398:	4618      	mov	r0, r3
 800539a:	f000 ffc3 	bl	8006324 <RCCEx_PLL2_Config>
 800539e:	4603      	mov	r3, r0
 80053a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80053a4:	e00f      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053aa:	3328      	adds	r3, #40	; 0x28
 80053ac:	2101      	movs	r1, #1
 80053ae:	4618      	mov	r0, r3
 80053b0:	f001 f86a 	bl	8006488 <RCCEx_PLL3_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80053ba:	e004      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053c2:	e000      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80053c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80053ce:	4bbf      	ldr	r3, [pc, #764]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80053d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053dc:	4abb      	ldr	r2, [pc, #748]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053de:	430b      	orrs	r3, r1
 80053e0:	6553      	str	r3, [r2, #84]	; 0x54
 80053e2:	e003      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f002 0302 	and.w	r3, r2, #2
 80053f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053fc:	2300      	movs	r3, #0
 80053fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005402:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005406:	460b      	mov	r3, r1
 8005408:	4313      	orrs	r3, r2
 800540a:	d041      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800540c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005412:	2b05      	cmp	r3, #5
 8005414:	d824      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005416:	a201      	add	r2, pc, #4	; (adr r2, 800541c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541c:	08005469 	.word	0x08005469
 8005420:	08005435 	.word	0x08005435
 8005424:	0800544b 	.word	0x0800544b
 8005428:	08005469 	.word	0x08005469
 800542c:	08005469 	.word	0x08005469
 8005430:	08005469 	.word	0x08005469
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005438:	3308      	adds	r3, #8
 800543a:	2101      	movs	r1, #1
 800543c:	4618      	mov	r0, r3
 800543e:	f000 ff71 	bl	8006324 <RCCEx_PLL2_Config>
 8005442:	4603      	mov	r3, r0
 8005444:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005448:	e00f      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800544a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544e:	3328      	adds	r3, #40	; 0x28
 8005450:	2101      	movs	r1, #1
 8005452:	4618      	mov	r0, r3
 8005454:	f001 f818 	bl	8006488 <RCCEx_PLL3_Config>
 8005458:	4603      	mov	r3, r0
 800545a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800545e:	e004      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005466:	e000      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005472:	4b96      	ldr	r3, [pc, #600]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005476:	f023 0107 	bic.w	r1, r3, #7
 800547a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005480:	4a92      	ldr	r2, [pc, #584]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005482:	430b      	orrs	r3, r1
 8005484:	6553      	str	r3, [r2, #84]	; 0x54
 8005486:	e003      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005488:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800548c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	f002 0304 	and.w	r3, r2, #4
 800549c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054a0:	2300      	movs	r3, #0
 80054a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4313      	orrs	r3, r2
 80054ae:	d044      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80054b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054b8:	2b05      	cmp	r3, #5
 80054ba:	d825      	bhi.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80054bc:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80054be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c2:	bf00      	nop
 80054c4:	08005511 	.word	0x08005511
 80054c8:	080054dd 	.word	0x080054dd
 80054cc:	080054f3 	.word	0x080054f3
 80054d0:	08005511 	.word	0x08005511
 80054d4:	08005511 	.word	0x08005511
 80054d8:	08005511 	.word	0x08005511
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054e0:	3308      	adds	r3, #8
 80054e2:	2101      	movs	r1, #1
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 ff1d 	bl	8006324 <RCCEx_PLL2_Config>
 80054ea:	4603      	mov	r3, r0
 80054ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80054f0:	e00f      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f6:	3328      	adds	r3, #40	; 0x28
 80054f8:	2101      	movs	r1, #1
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 ffc4 	bl	8006488 <RCCEx_PLL3_Config>
 8005500:	4603      	mov	r3, r0
 8005502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005506:	e004      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800550e:	e000      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005512:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10b      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800551a:	4b6c      	ldr	r3, [pc, #432]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800551c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551e:	f023 0107 	bic.w	r1, r3, #7
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800552a:	4a68      	ldr	r2, [pc, #416]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800552c:	430b      	orrs	r3, r1
 800552e:	6593      	str	r3, [r2, #88]	; 0x58
 8005530:	e003      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005536:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800553a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	f002 0320 	and.w	r3, r2, #32
 8005546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800554a:	2300      	movs	r3, #0
 800554c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005550:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005554:	460b      	mov	r3, r1
 8005556:	4313      	orrs	r3, r2
 8005558:	d055      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800555a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005566:	d033      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800556c:	d82c      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800556e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005572:	d02f      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005578:	d826      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800557a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800557e:	d02b      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005580:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005584:	d820      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800558a:	d012      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800558c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005590:	d81a      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005592:	2b00      	cmp	r3, #0
 8005594:	d022      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800559a:	d115      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800559c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a0:	3308      	adds	r3, #8
 80055a2:	2100      	movs	r1, #0
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 febd 	bl	8006324 <RCCEx_PLL2_Config>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80055b0:	e015      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055b6:	3328      	adds	r3, #40	; 0x28
 80055b8:	2102      	movs	r1, #2
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 ff64 	bl	8006488 <RCCEx_PLL3_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80055c6:	e00a      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055ce:	e006      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055d0:	bf00      	nop
 80055d2:	e004      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055d4:	bf00      	nop
 80055d6:	e002      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055d8:	bf00      	nop
 80055da:	e000      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10b      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055e6:	4b39      	ldr	r3, [pc, #228]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f6:	4a35      	ldr	r2, [pc, #212]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055f8:	430b      	orrs	r3, r1
 80055fa:	6553      	str	r3, [r2, #84]	; 0x54
 80055fc:	e003      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005602:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005616:	2300      	movs	r3, #0
 8005618:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800561c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005620:	460b      	mov	r3, r1
 8005622:	4313      	orrs	r3, r2
 8005624:	d058      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800562a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800562e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005632:	d033      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005634:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005638:	d82c      	bhi.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800563a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563e:	d02f      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005644:	d826      	bhi.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005646:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800564a:	d02b      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800564c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005650:	d820      	bhi.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005656:	d012      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800565c:	d81a      	bhi.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d022      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005666:	d115      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800566c:	3308      	adds	r3, #8
 800566e:	2100      	movs	r1, #0
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fe57 	bl	8006324 <RCCEx_PLL2_Config>
 8005676:	4603      	mov	r3, r0
 8005678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800567c:	e015      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005682:	3328      	adds	r3, #40	; 0x28
 8005684:	2102      	movs	r1, #2
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fefe 	bl	8006488 <RCCEx_PLL3_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005692:	e00a      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800569a:	e006      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800569c:	bf00      	nop
 800569e:	e004      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80056a0:	bf00      	nop
 80056a2:	e002      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80056a4:	bf00      	nop
 80056a6:	e000      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80056a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10e      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80056ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056c2:	4a02      	ldr	r2, [pc, #8]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056c4:	430b      	orrs	r3, r1
 80056c6:	6593      	str	r3, [r2, #88]	; 0x58
 80056c8:	e006      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80056ca:	bf00      	nop
 80056cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80056d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80056e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056e8:	2300      	movs	r3, #0
 80056ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80056f2:	460b      	mov	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	d055      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80056f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005700:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005704:	d033      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005706:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800570a:	d82c      	bhi.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800570c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005710:	d02f      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005716:	d826      	bhi.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005718:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800571c:	d02b      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800571e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005722:	d820      	bhi.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005728:	d012      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800572a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800572e:	d81a      	bhi.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d022      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005738:	d115      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800573a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800573e:	3308      	adds	r3, #8
 8005740:	2100      	movs	r1, #0
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fdee 	bl	8006324 <RCCEx_PLL2_Config>
 8005748:	4603      	mov	r3, r0
 800574a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800574e:	e015      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005754:	3328      	adds	r3, #40	; 0x28
 8005756:	2102      	movs	r1, #2
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fe95 	bl	8006488 <RCCEx_PLL3_Config>
 800575e:	4603      	mov	r3, r0
 8005760:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005764:	e00a      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800576c:	e006      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800576e:	bf00      	nop
 8005770:	e004      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005772:	bf00      	nop
 8005774:	e002      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005776:	bf00      	nop
 8005778:	e000      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800577a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800577c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10b      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005784:	4ba1      	ldr	r3, [pc, #644]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005788:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800578c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005790:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005794:	4a9d      	ldr	r2, [pc, #628]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005796:	430b      	orrs	r3, r1
 8005798:	6593      	str	r3, [r2, #88]	; 0x58
 800579a:	e003      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80057a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ac:	f002 0308 	and.w	r3, r2, #8
 80057b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057b4:	2300      	movs	r3, #0
 80057b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80057be:	460b      	mov	r3, r1
 80057c0:	4313      	orrs	r3, r2
 80057c2:	d01e      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80057c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d0:	d10c      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d6:	3328      	adds	r3, #40	; 0x28
 80057d8:	2102      	movs	r1, #2
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fe54 	bl	8006488 <RCCEx_PLL3_Config>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80057ec:	4b87      	ldr	r3, [pc, #540]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057fc:	4a83      	ldr	r2, [pc, #524]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057fe:	430b      	orrs	r3, r1
 8005800:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580a:	f002 0310 	and.w	r3, r2, #16
 800580e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005812:	2300      	movs	r3, #0
 8005814:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005818:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800581c:	460b      	mov	r3, r1
 800581e:	4313      	orrs	r3, r2
 8005820:	d01e      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800582a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582e:	d10c      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005834:	3328      	adds	r3, #40	; 0x28
 8005836:	2102      	movs	r1, #2
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fe25 	bl	8006488 <RCCEx_PLL3_Config>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800584a:	4b70      	ldr	r3, [pc, #448]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800584c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005856:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800585a:	4a6c      	ldr	r2, [pc, #432]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800585c:	430b      	orrs	r3, r1
 800585e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005868:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800586c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005870:	2300      	movs	r3, #0
 8005872:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005876:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800587a:	460b      	mov	r3, r1
 800587c:	4313      	orrs	r3, r2
 800587e:	d03e      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005888:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800588c:	d022      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800588e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005892:	d81b      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589c:	d00b      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800589e:	e015      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a4:	3308      	adds	r3, #8
 80058a6:	2100      	movs	r1, #0
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fd3b 	bl	8006324 <RCCEx_PLL2_Config>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80058b4:	e00f      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ba:	3328      	adds	r3, #40	; 0x28
 80058bc:	2102      	movs	r1, #2
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fde2 	bl	8006488 <RCCEx_PLL3_Config>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80058ca:	e004      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058d2:	e000      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80058d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10b      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058de:	4b4b      	ldr	r3, [pc, #300]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80058e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058ee:	4a47      	ldr	r2, [pc, #284]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058f0:	430b      	orrs	r3, r1
 80058f2:	6593      	str	r3, [r2, #88]	; 0x58
 80058f4:	e003      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005906:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800590a:	67bb      	str	r3, [r7, #120]	; 0x78
 800590c:	2300      	movs	r3, #0
 800590e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005910:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005914:	460b      	mov	r3, r1
 8005916:	4313      	orrs	r3, r2
 8005918:	d03b      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800591a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800591e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005922:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005926:	d01f      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005928:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800592c:	d818      	bhi.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800592e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005932:	d003      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005934:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005938:	d007      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800593a:	e011      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800593c:	4b33      	ldr	r3, [pc, #204]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	4a32      	ldr	r2, [pc, #200]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005946:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005948:	e00f      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800594e:	3328      	adds	r3, #40	; 0x28
 8005950:	2101      	movs	r1, #1
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fd98 	bl	8006488 <RCCEx_PLL3_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800595e:	e004      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005966:	e000      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800596a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10b      	bne.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005972:	4b26      	ldr	r3, [pc, #152]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005976:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800597a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005982:	4a22      	ldr	r2, [pc, #136]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005984:	430b      	orrs	r3, r1
 8005986:	6553      	str	r3, [r2, #84]	; 0x54
 8005988:	e003      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800598e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800599e:	673b      	str	r3, [r7, #112]	; 0x70
 80059a0:	2300      	movs	r3, #0
 80059a2:	677b      	str	r3, [r7, #116]	; 0x74
 80059a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80059a8:	460b      	mov	r3, r1
 80059aa:	4313      	orrs	r3, r2
 80059ac:	d034      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80059ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80059b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059bc:	d007      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80059be:	e011      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c0:	4b12      	ldr	r3, [pc, #72]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	4a11      	ldr	r2, [pc, #68]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80059cc:	e00e      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059d2:	3308      	adds	r3, #8
 80059d4:	2102      	movs	r1, #2
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fca4 	bl	8006324 <RCCEx_PLL2_Config>
 80059dc:	4603      	mov	r3, r0
 80059de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80059e2:	e003      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10d      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80059f4:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a02:	4a02      	ldr	r2, [pc, #8]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a04:	430b      	orrs	r3, r1
 8005a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a08:	e006      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005a0a:	bf00      	nop
 8005a0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005a24:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a26:	2300      	movs	r3, #0
 8005a28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a2a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4313      	orrs	r3, r2
 8005a32:	d00c      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a38:	3328      	adds	r3, #40	; 0x28
 8005a3a:	2102      	movs	r1, #2
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 fd23 	bl	8006488 <RCCEx_PLL3_Config>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a56:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005a5a:	663b      	str	r3, [r7, #96]	; 0x60
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	667b      	str	r3, [r7, #100]	; 0x64
 8005a60:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005a64:	460b      	mov	r3, r1
 8005a66:	4313      	orrs	r3, r2
 8005a68:	d038      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a76:	d018      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a7c:	d811      	bhi.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a82:	d014      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a88:	d80b      	bhi.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d011      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a92:	d106      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a94:	4bc3      	ldr	r3, [pc, #780]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	4ac2      	ldr	r2, [pc, #776]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005aa0:	e008      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005aa8:	e004      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005aaa:	bf00      	nop
 8005aac:	e002      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005aae:	bf00      	nop
 8005ab0:	e000      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10b      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005abc:	4bb9      	ldr	r3, [pc, #740]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005acc:	4ab5      	ldr	r2, [pc, #724]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ace:	430b      	orrs	r3, r1
 8005ad0:	6553      	str	r3, [r2, #84]	; 0x54
 8005ad2:	e003      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ad8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005ae8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005aea:	2300      	movs	r3, #0
 8005aec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005af2:	460b      	mov	r3, r1
 8005af4:	4313      	orrs	r3, r2
 8005af6:	d009      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005af8:	4baa      	ldr	r3, [pc, #680]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005afc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b06:	4aa7      	ldr	r2, [pc, #668]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b08:	430b      	orrs	r3, r1
 8005b0a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005b18:	653b      	str	r3, [r7, #80]	; 0x50
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	657b      	str	r3, [r7, #84]	; 0x54
 8005b1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005b22:	460b      	mov	r3, r1
 8005b24:	4313      	orrs	r3, r2
 8005b26:	d00a      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005b28:	4b9e      	ldr	r3, [pc, #632]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005b38:	4a9a      	ldr	r2, [pc, #616]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b3a:	430b      	orrs	r3, r1
 8005b3c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005b4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b50:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005b54:	460b      	mov	r3, r1
 8005b56:	4313      	orrs	r3, r2
 8005b58:	d009      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b5a:	4b92      	ldr	r3, [pc, #584]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b5e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b68:	4a8e      	ldr	r2, [pc, #568]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b80:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005b84:	460b      	mov	r3, r1
 8005b86:	4313      	orrs	r3, r2
 8005b88:	d00e      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b8a:	4b86      	ldr	r3, [pc, #536]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	4a85      	ldr	r2, [pc, #532]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b94:	6113      	str	r3, [r2, #16]
 8005b96:	4b83      	ldr	r3, [pc, #524]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b98:	6919      	ldr	r1, [r3, #16]
 8005b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005ba2:	4a80      	ldr	r2, [pc, #512]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005bb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	d009      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005bc4:	4b77      	ldr	r3, [pc, #476]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd2:	4a74      	ldr	r2, [pc, #464]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005be4:	633b      	str	r3, [r7, #48]	; 0x30
 8005be6:	2300      	movs	r3, #0
 8005be8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	d00a      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bf4:	4b6b      	ldr	r3, [pc, #428]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c04:	4a67      	ldr	r2, [pc, #412]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c06:	430b      	orrs	r3, r1
 8005c08:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	2100      	movs	r1, #0
 8005c14:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005c20:	460b      	mov	r3, r1
 8005c22:	4313      	orrs	r3, r2
 8005c24:	d011      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 fb78 	bl	8006324 <RCCEx_PLL2_Config>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	2100      	movs	r1, #0
 8005c54:	6239      	str	r1, [r7, #32]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005c60:	460b      	mov	r3, r1
 8005c62:	4313      	orrs	r3, r2
 8005c64:	d011      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fb58 	bl	8006324 <RCCEx_PLL2_Config>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c92:	2100      	movs	r1, #0
 8005c94:	61b9      	str	r1, [r7, #24]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	d011      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005caa:	3308      	adds	r3, #8
 8005cac:	2102      	movs	r1, #2
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fb38 	bl	8006324 <RCCEx_PLL2_Config>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005cba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	6139      	str	r1, [r7, #16]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	d011      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cea:	3328      	adds	r3, #40	; 0x28
 8005cec:	2100      	movs	r1, #0
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fbca 	bl	8006488 <RCCEx_PLL3_Config>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	2100      	movs	r1, #0
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005d20:	460b      	mov	r3, r1
 8005d22:	4313      	orrs	r3, r2
 8005d24:	d011      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d2a:	3328      	adds	r3, #40	; 0x28
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fbaa 	bl	8006488 <RCCEx_PLL3_Config>
 8005d34:	4603      	mov	r3, r0
 8005d36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	2100      	movs	r1, #0
 8005d54:	6039      	str	r1, [r7, #0]
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	607b      	str	r3, [r7, #4]
 8005d5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d60:	460b      	mov	r3, r1
 8005d62:	4313      	orrs	r3, r2
 8005d64:	d011      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d6a:	3328      	adds	r3, #40	; 0x28
 8005d6c:	2102      	movs	r1, #2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fb8a 	bl	8006488 <RCCEx_PLL3_Config>
 8005d74:	4603      	mov	r3, r0
 8005d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005d8a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e000      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005da4:	58024400 	.word	0x58024400

08005da8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005dac:	f7fe fd96 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 8005db0:	4602      	mov	r2, r0
 8005db2:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	091b      	lsrs	r3, r3, #4
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	4904      	ldr	r1, [pc, #16]	; (8005dd0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005dbe:	5ccb      	ldrb	r3, [r1, r3]
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	58024400 	.word	0x58024400
 8005dd0:	0800c8d8 	.word	0x0800c8d8

08005dd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b089      	sub	sp, #36	; 0x24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ddc:	4ba1      	ldr	r3, [pc, #644]	; (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005de6:	4b9f      	ldr	r3, [pc, #636]	; (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	0b1b      	lsrs	r3, r3, #12
 8005dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005df0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005df2:	4b9c      	ldr	r3, [pc, #624]	; (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	091b      	lsrs	r3, r3, #4
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005dfe:	4b99      	ldr	r3, [pc, #612]	; (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	08db      	lsrs	r3, r3, #3
 8005e04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	fb02 f303 	mul.w	r3, r2, r3
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 8111 	beq.w	8006044 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	f000 8083 	beq.w	8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	f200 80a1 	bhi.w	8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d056      	beq.n	8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005e3e:	e099      	b.n	8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e40:	4b88      	ldr	r3, [pc, #544]	; (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d02d      	beq.n	8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e4c:	4b85      	ldr	r3, [pc, #532]	; (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	08db      	lsrs	r3, r3, #3
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	4a84      	ldr	r2, [pc, #528]	; (8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e58:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	ee07 3a90 	vmov	s15, r3
 8005e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e76:	4b7b      	ldr	r3, [pc, #492]	; (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800606c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005ea6:	e087      	b.n	8005fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006070 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eba:	4b6a      	ldr	r3, [pc, #424]	; (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ece:	eddf 5a67 	vldr	s11, [pc, #412]	; 800606c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eea:	e065      	b.n	8005fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005efe:	4b59      	ldr	r3, [pc, #356]	; (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f12:	eddf 5a56 	vldr	s11, [pc, #344]	; 800606c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f2e:	e043      	b.n	8005fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f42:	4b48      	ldr	r3, [pc, #288]	; (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f56:	eddf 5a45 	vldr	s11, [pc, #276]	; 800606c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f72:	e021      	b.n	8005fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f86:	4b37      	ldr	r3, [pc, #220]	; (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800606c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005fb8:	4b2a      	ldr	r3, [pc, #168]	; (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	0a5b      	lsrs	r3, r3, #9
 8005fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fde:	ee17 2a90 	vmov	r2, s15
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005fe6:	4b1f      	ldr	r3, [pc, #124]	; (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	0c1b      	lsrs	r3, r3, #16
 8005fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ff0:	ee07 3a90 	vmov	s15, r3
 8005ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ffc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006000:	edd7 6a07 	vldr	s13, [r7, #28]
 8006004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800600c:	ee17 2a90 	vmov	r2, s15
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006014:	4b13      	ldr	r3, [pc, #76]	; (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	0e1b      	lsrs	r3, r3, #24
 800601a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800602a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800602e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800603a:	ee17 2a90 	vmov	r2, s15
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006042:	e008      	b.n	8006056 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	609a      	str	r2, [r3, #8]
}
 8006056:	bf00      	nop
 8006058:	3724      	adds	r7, #36	; 0x24
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	58024400 	.word	0x58024400
 8006068:	03d09000 	.word	0x03d09000
 800606c:	46000000 	.word	0x46000000
 8006070:	4c742400 	.word	0x4c742400
 8006074:	4a742400 	.word	0x4a742400
 8006078:	4b742400 	.word	0x4b742400

0800607c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800607c:	b480      	push	{r7}
 800607e:	b089      	sub	sp, #36	; 0x24
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006084:	4ba1      	ldr	r3, [pc, #644]	; (800630c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006088:	f003 0303 	and.w	r3, r3, #3
 800608c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800608e:	4b9f      	ldr	r3, [pc, #636]	; (800630c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	0d1b      	lsrs	r3, r3, #20
 8006094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006098:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800609a:	4b9c      	ldr	r3, [pc, #624]	; (800630c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	0a1b      	lsrs	r3, r3, #8
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80060a6:	4b99      	ldr	r3, [pc, #612]	; (800630c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060aa:	08db      	lsrs	r3, r3, #3
 80060ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	fb02 f303 	mul.w	r3, r2, r3
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8111 	beq.w	80062ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	f000 8083 	beq.w	80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	f200 80a1 	bhi.w	800621c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d056      	beq.n	8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80060e6:	e099      	b.n	800621c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060e8:	4b88      	ldr	r3, [pc, #544]	; (800630c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0320 	and.w	r3, r3, #32
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d02d      	beq.n	8006150 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060f4:	4b85      	ldr	r3, [pc, #532]	; (800630c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	08db      	lsrs	r3, r3, #3
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	4a84      	ldr	r2, [pc, #528]	; (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006100:	fa22 f303 	lsr.w	r3, r2, r3
 8006104:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	ee07 3a90 	vmov	s15, r3
 800610c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800611a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800611e:	4b7b      	ldr	r3, [pc, #492]	; (800630c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006132:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800613e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800614e:	e087      	b.n	8006260 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006318 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800615e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006162:	4b6a      	ldr	r3, [pc, #424]	; (800630c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006172:	ed97 6a03 	vldr	s12, [r7, #12]
 8006176:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800617a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800617e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800618a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006192:	e065      	b.n	8006260 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800631c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80061a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a6:	4b59      	ldr	r3, [pc, #356]	; (800630c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061d6:	e043      	b.n	8006260 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80061e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ea:	4b48      	ldr	r3, [pc, #288]	; (800630c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80061fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800620a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800620e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800621a:	e021      	b.n	8006260 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006226:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800631c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800622a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800622e:	4b37      	ldr	r3, [pc, #220]	; (800630c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006242:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800624a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800625a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800625e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006260:	4b2a      	ldr	r3, [pc, #168]	; (800630c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	0a5b      	lsrs	r3, r3, #9
 8006266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800627a:	edd7 6a07 	vldr	s13, [r7, #28]
 800627e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006286:	ee17 2a90 	vmov	r2, s15
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800628e:	4b1f      	ldr	r3, [pc, #124]	; (800630c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	0c1b      	lsrs	r3, r3, #16
 8006294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006298:	ee07 3a90 	vmov	s15, r3
 800629c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80062ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062b4:	ee17 2a90 	vmov	r2, s15
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80062bc:	4b13      	ldr	r3, [pc, #76]	; (800630c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	0e1b      	lsrs	r3, r3, #24
 80062c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80062da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062e2:	ee17 2a90 	vmov	r2, s15
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062ea:	e008      	b.n	80062fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	609a      	str	r2, [r3, #8]
}
 80062fe:	bf00      	nop
 8006300:	3724      	adds	r7, #36	; 0x24
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	58024400 	.word	0x58024400
 8006310:	03d09000 	.word	0x03d09000
 8006314:	46000000 	.word	0x46000000
 8006318:	4c742400 	.word	0x4c742400
 800631c:	4a742400 	.word	0x4a742400
 8006320:	4b742400 	.word	0x4b742400

08006324 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006332:	4b53      	ldr	r3, [pc, #332]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	2b03      	cmp	r3, #3
 800633c:	d101      	bne.n	8006342 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e099      	b.n	8006476 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006342:	4b4f      	ldr	r3, [pc, #316]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a4e      	ldr	r2, [pc, #312]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 8006348:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800634c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800634e:	f7fb f9d7 	bl	8001700 <HAL_GetTick>
 8006352:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006354:	e008      	b.n	8006368 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006356:	f7fb f9d3 	bl	8001700 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d901      	bls.n	8006368 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e086      	b.n	8006476 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006368:	4b45      	ldr	r3, [pc, #276]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1f0      	bne.n	8006356 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006374:	4b42      	ldr	r3, [pc, #264]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	031b      	lsls	r3, r3, #12
 8006382:	493f      	ldr	r1, [pc, #252]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 8006384:	4313      	orrs	r3, r2
 8006386:	628b      	str	r3, [r1, #40]	; 0x28
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	3b01      	subs	r3, #1
 800638e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	3b01      	subs	r3, #1
 8006398:	025b      	lsls	r3, r3, #9
 800639a:	b29b      	uxth	r3, r3
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	041b      	lsls	r3, r3, #16
 80063a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063aa:	431a      	orrs	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	061b      	lsls	r3, r3, #24
 80063b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063b8:	4931      	ldr	r1, [pc, #196]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80063be:	4b30      	ldr	r3, [pc, #192]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	492d      	ldr	r1, [pc, #180]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80063d0:	4b2b      	ldr	r3, [pc, #172]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	f023 0220 	bic.w	r2, r3, #32
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	4928      	ldr	r1, [pc, #160]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063e2:	4b27      	ldr	r3, [pc, #156]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	4a26      	ldr	r2, [pc, #152]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 80063e8:	f023 0310 	bic.w	r3, r3, #16
 80063ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80063ee:	4b24      	ldr	r3, [pc, #144]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 80063f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063f2:	4b24      	ldr	r3, [pc, #144]	; (8006484 <RCCEx_PLL2_Config+0x160>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	69d2      	ldr	r2, [r2, #28]
 80063fa:	00d2      	lsls	r2, r2, #3
 80063fc:	4920      	ldr	r1, [pc, #128]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006402:	4b1f      	ldr	r3, [pc, #124]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	4a1e      	ldr	r2, [pc, #120]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 8006408:	f043 0310 	orr.w	r3, r3, #16
 800640c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d106      	bne.n	8006422 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006414:	4b1a      	ldr	r3, [pc, #104]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	4a19      	ldr	r2, [pc, #100]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 800641a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800641e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006420:	e00f      	b.n	8006442 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d106      	bne.n	8006436 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006428:	4b15      	ldr	r3, [pc, #84]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	4a14      	ldr	r2, [pc, #80]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 800642e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006432:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006434:	e005      	b.n	8006442 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006436:	4b12      	ldr	r3, [pc, #72]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	4a11      	ldr	r2, [pc, #68]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 800643c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006440:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006442:	4b0f      	ldr	r3, [pc, #60]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a0e      	ldr	r2, [pc, #56]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 8006448:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800644c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800644e:	f7fb f957 	bl	8001700 <HAL_GetTick>
 8006452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006454:	e008      	b.n	8006468 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006456:	f7fb f953 	bl	8001700 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d901      	bls.n	8006468 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e006      	b.n	8006476 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006468:	4b05      	ldr	r3, [pc, #20]	; (8006480 <RCCEx_PLL2_Config+0x15c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0f0      	beq.n	8006456 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	58024400 	.word	0x58024400
 8006484:	ffff0007 	.word	0xffff0007

08006488 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006496:	4b53      	ldr	r3, [pc, #332]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d101      	bne.n	80064a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e099      	b.n	80065da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80064a6:	4b4f      	ldr	r3, [pc, #316]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a4e      	ldr	r2, [pc, #312]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 80064ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b2:	f7fb f925 	bl	8001700 <HAL_GetTick>
 80064b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064b8:	e008      	b.n	80064cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80064ba:	f7fb f921 	bl	8001700 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e086      	b.n	80065da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064cc:	4b45      	ldr	r3, [pc, #276]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f0      	bne.n	80064ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80064d8:	4b42      	ldr	r3, [pc, #264]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	051b      	lsls	r3, r3, #20
 80064e6:	493f      	ldr	r1, [pc, #252]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	628b      	str	r3, [r1, #40]	; 0x28
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	025b      	lsls	r3, r3, #9
 80064fe:	b29b      	uxth	r3, r3
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	3b01      	subs	r3, #1
 8006508:	041b      	lsls	r3, r3, #16
 800650a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	3b01      	subs	r3, #1
 8006516:	061b      	lsls	r3, r3, #24
 8006518:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800651c:	4931      	ldr	r1, [pc, #196]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 800651e:	4313      	orrs	r3, r2
 8006520:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006522:	4b30      	ldr	r3, [pc, #192]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	492d      	ldr	r1, [pc, #180]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 8006530:	4313      	orrs	r3, r2
 8006532:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006534:	4b2b      	ldr	r3, [pc, #172]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	4928      	ldr	r1, [pc, #160]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 8006542:	4313      	orrs	r3, r2
 8006544:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006546:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	4a26      	ldr	r2, [pc, #152]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 800654c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006550:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006552:	4b24      	ldr	r3, [pc, #144]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 8006554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006556:	4b24      	ldr	r3, [pc, #144]	; (80065e8 <RCCEx_PLL3_Config+0x160>)
 8006558:	4013      	ands	r3, r2
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	69d2      	ldr	r2, [r2, #28]
 800655e:	00d2      	lsls	r2, r2, #3
 8006560:	4920      	ldr	r1, [pc, #128]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 8006562:	4313      	orrs	r3, r2
 8006564:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006566:	4b1f      	ldr	r3, [pc, #124]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	4a1e      	ldr	r2, [pc, #120]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 800656c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006570:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d106      	bne.n	8006586 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006578:	4b1a      	ldr	r3, [pc, #104]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	4a19      	ldr	r2, [pc, #100]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 800657e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006582:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006584:	e00f      	b.n	80065a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d106      	bne.n	800659a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800658c:	4b15      	ldr	r3, [pc, #84]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	4a14      	ldr	r2, [pc, #80]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 8006592:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006596:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006598:	e005      	b.n	80065a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800659a:	4b12      	ldr	r3, [pc, #72]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	4a11      	ldr	r2, [pc, #68]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 80065a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80065a6:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a0e      	ldr	r2, [pc, #56]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 80065ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065b2:	f7fb f8a5 	bl	8001700 <HAL_GetTick>
 80065b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065b8:	e008      	b.n	80065cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80065ba:	f7fb f8a1 	bl	8001700 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d901      	bls.n	80065cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e006      	b.n	80065da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065cc:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <RCCEx_PLL3_Config+0x15c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0f0      	beq.n	80065ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	58024400 	.word	0x58024400
 80065e8:	ffff0007 	.word	0xffff0007

080065ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e049      	b.n	8006692 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fa fd76 	bl	8001104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3304      	adds	r3, #4
 8006628:	4619      	mov	r1, r3
 800662a:	4610      	mov	r0, r2
 800662c:	f000 faa2 	bl	8006b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e049      	b.n	8006740 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d106      	bne.n	80066c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f841 	bl	8006748 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2202      	movs	r2, #2
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3304      	adds	r3, #4
 80066d6:	4619      	mov	r1, r3
 80066d8:	4610      	mov	r0, r2
 80066da:	f000 fa4b 	bl	8006b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006776:	2302      	movs	r3, #2
 8006778:	e0ff      	b.n	800697a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b14      	cmp	r3, #20
 8006786:	f200 80f0 	bhi.w	800696a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800678a:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800678c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006790:	080067e5 	.word	0x080067e5
 8006794:	0800696b 	.word	0x0800696b
 8006798:	0800696b 	.word	0x0800696b
 800679c:	0800696b 	.word	0x0800696b
 80067a0:	08006825 	.word	0x08006825
 80067a4:	0800696b 	.word	0x0800696b
 80067a8:	0800696b 	.word	0x0800696b
 80067ac:	0800696b 	.word	0x0800696b
 80067b0:	08006867 	.word	0x08006867
 80067b4:	0800696b 	.word	0x0800696b
 80067b8:	0800696b 	.word	0x0800696b
 80067bc:	0800696b 	.word	0x0800696b
 80067c0:	080068a7 	.word	0x080068a7
 80067c4:	0800696b 	.word	0x0800696b
 80067c8:	0800696b 	.word	0x0800696b
 80067cc:	0800696b 	.word	0x0800696b
 80067d0:	080068e9 	.word	0x080068e9
 80067d4:	0800696b 	.word	0x0800696b
 80067d8:	0800696b 	.word	0x0800696b
 80067dc:	0800696b 	.word	0x0800696b
 80067e0:	08006929 	.word	0x08006929
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68b9      	ldr	r1, [r7, #8]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fa5c 	bl	8006ca8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	699a      	ldr	r2, [r3, #24]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0208 	orr.w	r2, r2, #8
 80067fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699a      	ldr	r2, [r3, #24]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0204 	bic.w	r2, r2, #4
 800680e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6999      	ldr	r1, [r3, #24]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	691a      	ldr	r2, [r3, #16]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	619a      	str	r2, [r3, #24]
      break;
 8006822:	e0a5      	b.n	8006970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 facc 	bl	8006dc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699a      	ldr	r2, [r3, #24]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800683e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800684e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6999      	ldr	r1, [r3, #24]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	021a      	lsls	r2, r3, #8
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	619a      	str	r2, [r3, #24]
      break;
 8006864:	e084      	b.n	8006970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68b9      	ldr	r1, [r7, #8]
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fb35 	bl	8006edc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69da      	ldr	r2, [r3, #28]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0208 	orr.w	r2, r2, #8
 8006880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69da      	ldr	r2, [r3, #28]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0204 	bic.w	r2, r2, #4
 8006890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69d9      	ldr	r1, [r3, #28]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	61da      	str	r2, [r3, #28]
      break;
 80068a4:	e064      	b.n	8006970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fb9d 	bl	8006fec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69d9      	ldr	r1, [r3, #28]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	021a      	lsls	r2, r3, #8
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	61da      	str	r2, [r3, #28]
      break;
 80068e6:	e043      	b.n	8006970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fbe6 	bl	80070c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0208 	orr.w	r2, r2, #8
 8006902:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0204 	bic.w	r2, r2, #4
 8006912:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	691a      	ldr	r2, [r3, #16]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006926:	e023      	b.n	8006970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fc2a 	bl	8007188 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006942:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006952:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	021a      	lsls	r2, r3, #8
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006968:	e002      	b.n	8006970 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	75fb      	strb	r3, [r7, #23]
      break;
 800696e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006978:	7dfb      	ldrb	r3, [r7, #23]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop

08006984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006998:	2b01      	cmp	r3, #1
 800699a:	d101      	bne.n	80069a0 <HAL_TIM_ConfigClockSource+0x1c>
 800699c:	2302      	movs	r3, #2
 800699e:	e0dc      	b.n	8006b5a <HAL_TIM_ConfigClockSource+0x1d6>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	4b6a      	ldr	r3, [pc, #424]	; (8006b64 <HAL_TIM_ConfigClockSource+0x1e0>)
 80069bc:	4013      	ands	r3, r2
 80069be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a64      	ldr	r2, [pc, #400]	; (8006b68 <HAL_TIM_ConfigClockSource+0x1e4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	f000 80a9 	beq.w	8006b2e <HAL_TIM_ConfigClockSource+0x1aa>
 80069dc:	4a62      	ldr	r2, [pc, #392]	; (8006b68 <HAL_TIM_ConfigClockSource+0x1e4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	f200 80ae 	bhi.w	8006b40 <HAL_TIM_ConfigClockSource+0x1bc>
 80069e4:	4a61      	ldr	r2, [pc, #388]	; (8006b6c <HAL_TIM_ConfigClockSource+0x1e8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	f000 80a1 	beq.w	8006b2e <HAL_TIM_ConfigClockSource+0x1aa>
 80069ec:	4a5f      	ldr	r2, [pc, #380]	; (8006b6c <HAL_TIM_ConfigClockSource+0x1e8>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	f200 80a6 	bhi.w	8006b40 <HAL_TIM_ConfigClockSource+0x1bc>
 80069f4:	4a5e      	ldr	r2, [pc, #376]	; (8006b70 <HAL_TIM_ConfigClockSource+0x1ec>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	f000 8099 	beq.w	8006b2e <HAL_TIM_ConfigClockSource+0x1aa>
 80069fc:	4a5c      	ldr	r2, [pc, #368]	; (8006b70 <HAL_TIM_ConfigClockSource+0x1ec>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	f200 809e 	bhi.w	8006b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006a08:	f000 8091 	beq.w	8006b2e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006a10:	f200 8096 	bhi.w	8006b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a18:	f000 8089 	beq.w	8006b2e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a20:	f200 808e 	bhi.w	8006b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a28:	d03e      	beq.n	8006aa8 <HAL_TIM_ConfigClockSource+0x124>
 8006a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2e:	f200 8087 	bhi.w	8006b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a36:	f000 8086 	beq.w	8006b46 <HAL_TIM_ConfigClockSource+0x1c2>
 8006a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3e:	d87f      	bhi.n	8006b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a40:	2b70      	cmp	r3, #112	; 0x70
 8006a42:	d01a      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0xf6>
 8006a44:	2b70      	cmp	r3, #112	; 0x70
 8006a46:	d87b      	bhi.n	8006b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a48:	2b60      	cmp	r3, #96	; 0x60
 8006a4a:	d050      	beq.n	8006aee <HAL_TIM_ConfigClockSource+0x16a>
 8006a4c:	2b60      	cmp	r3, #96	; 0x60
 8006a4e:	d877      	bhi.n	8006b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a50:	2b50      	cmp	r3, #80	; 0x50
 8006a52:	d03c      	beq.n	8006ace <HAL_TIM_ConfigClockSource+0x14a>
 8006a54:	2b50      	cmp	r3, #80	; 0x50
 8006a56:	d873      	bhi.n	8006b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a58:	2b40      	cmp	r3, #64	; 0x40
 8006a5a:	d058      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x18a>
 8006a5c:	2b40      	cmp	r3, #64	; 0x40
 8006a5e:	d86f      	bhi.n	8006b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a60:	2b30      	cmp	r3, #48	; 0x30
 8006a62:	d064      	beq.n	8006b2e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a64:	2b30      	cmp	r3, #48	; 0x30
 8006a66:	d86b      	bhi.n	8006b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	d060      	beq.n	8006b2e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a6c:	2b20      	cmp	r3, #32
 8006a6e:	d867      	bhi.n	8006b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d05c      	beq.n	8006b2e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a74:	2b10      	cmp	r3, #16
 8006a76:	d05a      	beq.n	8006b2e <HAL_TIM_ConfigClockSource+0x1aa>
 8006a78:	e062      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a8a:	f000 fc61 	bl	8007350 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	609a      	str	r2, [r3, #8]
      break;
 8006aa6:	e04f      	b.n	8006b48 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ab8:	f000 fc4a 	bl	8007350 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aca:	609a      	str	r2, [r3, #8]
      break;
 8006acc:	e03c      	b.n	8006b48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ada:	461a      	mov	r2, r3
 8006adc:	f000 fbba 	bl	8007254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2150      	movs	r1, #80	; 0x50
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fc14 	bl	8007314 <TIM_ITRx_SetConfig>
      break;
 8006aec:	e02c      	b.n	8006b48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006afa:	461a      	mov	r2, r3
 8006afc:	f000 fbd9 	bl	80072b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2160      	movs	r1, #96	; 0x60
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fc04 	bl	8007314 <TIM_ITRx_SetConfig>
      break;
 8006b0c:	e01c      	b.n	8006b48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f000 fb9a 	bl	8007254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2140      	movs	r1, #64	; 0x40
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fbf4 	bl	8007314 <TIM_ITRx_SetConfig>
      break;
 8006b2c:	e00c      	b.n	8006b48 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4619      	mov	r1, r3
 8006b38:	4610      	mov	r0, r2
 8006b3a:	f000 fbeb 	bl	8007314 <TIM_ITRx_SetConfig>
      break;
 8006b3e:	e003      	b.n	8006b48 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	73fb      	strb	r3, [r7, #15]
      break;
 8006b44:	e000      	b.n	8006b48 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006b46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	ffceff88 	.word	0xffceff88
 8006b68:	00100040 	.word	0x00100040
 8006b6c:	00100030 	.word	0x00100030
 8006b70:	00100020 	.word	0x00100020

08006b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a40      	ldr	r2, [pc, #256]	; (8006c88 <TIM_Base_SetConfig+0x114>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d013      	beq.n	8006bb4 <TIM_Base_SetConfig+0x40>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b92:	d00f      	beq.n	8006bb4 <TIM_Base_SetConfig+0x40>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a3d      	ldr	r2, [pc, #244]	; (8006c8c <TIM_Base_SetConfig+0x118>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d00b      	beq.n	8006bb4 <TIM_Base_SetConfig+0x40>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a3c      	ldr	r2, [pc, #240]	; (8006c90 <TIM_Base_SetConfig+0x11c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d007      	beq.n	8006bb4 <TIM_Base_SetConfig+0x40>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a3b      	ldr	r2, [pc, #236]	; (8006c94 <TIM_Base_SetConfig+0x120>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d003      	beq.n	8006bb4 <TIM_Base_SetConfig+0x40>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a3a      	ldr	r2, [pc, #232]	; (8006c98 <TIM_Base_SetConfig+0x124>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d108      	bne.n	8006bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a2f      	ldr	r2, [pc, #188]	; (8006c88 <TIM_Base_SetConfig+0x114>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d01f      	beq.n	8006c0e <TIM_Base_SetConfig+0x9a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd4:	d01b      	beq.n	8006c0e <TIM_Base_SetConfig+0x9a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a2c      	ldr	r2, [pc, #176]	; (8006c8c <TIM_Base_SetConfig+0x118>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d017      	beq.n	8006c0e <TIM_Base_SetConfig+0x9a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2b      	ldr	r2, [pc, #172]	; (8006c90 <TIM_Base_SetConfig+0x11c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d013      	beq.n	8006c0e <TIM_Base_SetConfig+0x9a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a2a      	ldr	r2, [pc, #168]	; (8006c94 <TIM_Base_SetConfig+0x120>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00f      	beq.n	8006c0e <TIM_Base_SetConfig+0x9a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a29      	ldr	r2, [pc, #164]	; (8006c98 <TIM_Base_SetConfig+0x124>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00b      	beq.n	8006c0e <TIM_Base_SetConfig+0x9a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a28      	ldr	r2, [pc, #160]	; (8006c9c <TIM_Base_SetConfig+0x128>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d007      	beq.n	8006c0e <TIM_Base_SetConfig+0x9a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a27      	ldr	r2, [pc, #156]	; (8006ca0 <TIM_Base_SetConfig+0x12c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d003      	beq.n	8006c0e <TIM_Base_SetConfig+0x9a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a26      	ldr	r2, [pc, #152]	; (8006ca4 <TIM_Base_SetConfig+0x130>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d108      	bne.n	8006c20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a10      	ldr	r2, [pc, #64]	; (8006c88 <TIM_Base_SetConfig+0x114>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00f      	beq.n	8006c6c <TIM_Base_SetConfig+0xf8>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a12      	ldr	r2, [pc, #72]	; (8006c98 <TIM_Base_SetConfig+0x124>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00b      	beq.n	8006c6c <TIM_Base_SetConfig+0xf8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a11      	ldr	r2, [pc, #68]	; (8006c9c <TIM_Base_SetConfig+0x128>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d007      	beq.n	8006c6c <TIM_Base_SetConfig+0xf8>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a10      	ldr	r2, [pc, #64]	; (8006ca0 <TIM_Base_SetConfig+0x12c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d003      	beq.n	8006c6c <TIM_Base_SetConfig+0xf8>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a0f      	ldr	r2, [pc, #60]	; (8006ca4 <TIM_Base_SetConfig+0x130>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d103      	bne.n	8006c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	615a      	str	r2, [r3, #20]
}
 8006c7a:	bf00      	nop
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	40010000 	.word	0x40010000
 8006c8c:	40000400 	.word	0x40000400
 8006c90:	40000800 	.word	0x40000800
 8006c94:	40000c00 	.word	0x40000c00
 8006c98:	40010400 	.word	0x40010400
 8006c9c:	40014000 	.word	0x40014000
 8006ca0:	40014400 	.word	0x40014400
 8006ca4:	40014800 	.word	0x40014800

08006ca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f023 0201 	bic.w	r2, r3, #1
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4b37      	ldr	r3, [pc, #220]	; (8006db0 <TIM_OC1_SetConfig+0x108>)
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0303 	bic.w	r3, r3, #3
 8006cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f023 0302 	bic.w	r3, r3, #2
 8006cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a2d      	ldr	r2, [pc, #180]	; (8006db4 <TIM_OC1_SetConfig+0x10c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00f      	beq.n	8006d24 <TIM_OC1_SetConfig+0x7c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a2c      	ldr	r2, [pc, #176]	; (8006db8 <TIM_OC1_SetConfig+0x110>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00b      	beq.n	8006d24 <TIM_OC1_SetConfig+0x7c>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a2b      	ldr	r2, [pc, #172]	; (8006dbc <TIM_OC1_SetConfig+0x114>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d007      	beq.n	8006d24 <TIM_OC1_SetConfig+0x7c>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a2a      	ldr	r2, [pc, #168]	; (8006dc0 <TIM_OC1_SetConfig+0x118>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_OC1_SetConfig+0x7c>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a29      	ldr	r2, [pc, #164]	; (8006dc4 <TIM_OC1_SetConfig+0x11c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d10c      	bne.n	8006d3e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f023 0308 	bic.w	r3, r3, #8
 8006d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f023 0304 	bic.w	r3, r3, #4
 8006d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a1c      	ldr	r2, [pc, #112]	; (8006db4 <TIM_OC1_SetConfig+0x10c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00f      	beq.n	8006d66 <TIM_OC1_SetConfig+0xbe>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a1b      	ldr	r2, [pc, #108]	; (8006db8 <TIM_OC1_SetConfig+0x110>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00b      	beq.n	8006d66 <TIM_OC1_SetConfig+0xbe>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a1a      	ldr	r2, [pc, #104]	; (8006dbc <TIM_OC1_SetConfig+0x114>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d007      	beq.n	8006d66 <TIM_OC1_SetConfig+0xbe>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a19      	ldr	r2, [pc, #100]	; (8006dc0 <TIM_OC1_SetConfig+0x118>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d003      	beq.n	8006d66 <TIM_OC1_SetConfig+0xbe>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a18      	ldr	r2, [pc, #96]	; (8006dc4 <TIM_OC1_SetConfig+0x11c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d111      	bne.n	8006d8a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	621a      	str	r2, [r3, #32]
}
 8006da4:	bf00      	nop
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	fffeff8f 	.word	0xfffeff8f
 8006db4:	40010000 	.word	0x40010000
 8006db8:	40010400 	.word	0x40010400
 8006dbc:	40014000 	.word	0x40014000
 8006dc0:	40014400 	.word	0x40014400
 8006dc4:	40014800 	.word	0x40014800

08006dc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	f023 0210 	bic.w	r2, r3, #16
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	4b34      	ldr	r3, [pc, #208]	; (8006ec4 <TIM_OC2_SetConfig+0xfc>)
 8006df4:	4013      	ands	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f023 0320 	bic.w	r3, r3, #32
 8006e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a29      	ldr	r2, [pc, #164]	; (8006ec8 <TIM_OC2_SetConfig+0x100>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_OC2_SetConfig+0x68>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a28      	ldr	r2, [pc, #160]	; (8006ecc <TIM_OC2_SetConfig+0x104>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d10d      	bne.n	8006e4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a1e      	ldr	r2, [pc, #120]	; (8006ec8 <TIM_OC2_SetConfig+0x100>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00f      	beq.n	8006e74 <TIM_OC2_SetConfig+0xac>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a1d      	ldr	r2, [pc, #116]	; (8006ecc <TIM_OC2_SetConfig+0x104>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d00b      	beq.n	8006e74 <TIM_OC2_SetConfig+0xac>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a1c      	ldr	r2, [pc, #112]	; (8006ed0 <TIM_OC2_SetConfig+0x108>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d007      	beq.n	8006e74 <TIM_OC2_SetConfig+0xac>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a1b      	ldr	r2, [pc, #108]	; (8006ed4 <TIM_OC2_SetConfig+0x10c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d003      	beq.n	8006e74 <TIM_OC2_SetConfig+0xac>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a1a      	ldr	r2, [pc, #104]	; (8006ed8 <TIM_OC2_SetConfig+0x110>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d113      	bne.n	8006e9c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	621a      	str	r2, [r3, #32]
}
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	feff8fff 	.word	0xfeff8fff
 8006ec8:	40010000 	.word	0x40010000
 8006ecc:	40010400 	.word	0x40010400
 8006ed0:	40014000 	.word	0x40014000
 8006ed4:	40014400 	.word	0x40014400
 8006ed8:	40014800 	.word	0x40014800

08006edc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4b33      	ldr	r3, [pc, #204]	; (8006fd4 <TIM_OC3_SetConfig+0xf8>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0303 	bic.w	r3, r3, #3
 8006f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	021b      	lsls	r3, r3, #8
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a28      	ldr	r2, [pc, #160]	; (8006fd8 <TIM_OC3_SetConfig+0xfc>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d003      	beq.n	8006f42 <TIM_OC3_SetConfig+0x66>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a27      	ldr	r2, [pc, #156]	; (8006fdc <TIM_OC3_SetConfig+0x100>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d10d      	bne.n	8006f5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	021b      	lsls	r3, r3, #8
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a1d      	ldr	r2, [pc, #116]	; (8006fd8 <TIM_OC3_SetConfig+0xfc>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00f      	beq.n	8006f86 <TIM_OC3_SetConfig+0xaa>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a1c      	ldr	r2, [pc, #112]	; (8006fdc <TIM_OC3_SetConfig+0x100>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00b      	beq.n	8006f86 <TIM_OC3_SetConfig+0xaa>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a1b      	ldr	r2, [pc, #108]	; (8006fe0 <TIM_OC3_SetConfig+0x104>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d007      	beq.n	8006f86 <TIM_OC3_SetConfig+0xaa>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a1a      	ldr	r2, [pc, #104]	; (8006fe4 <TIM_OC3_SetConfig+0x108>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d003      	beq.n	8006f86 <TIM_OC3_SetConfig+0xaa>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a19      	ldr	r2, [pc, #100]	; (8006fe8 <TIM_OC3_SetConfig+0x10c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d113      	bne.n	8006fae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	621a      	str	r2, [r3, #32]
}
 8006fc8:	bf00      	nop
 8006fca:	371c      	adds	r7, #28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	fffeff8f 	.word	0xfffeff8f
 8006fd8:	40010000 	.word	0x40010000
 8006fdc:	40010400 	.word	0x40010400
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40014400 	.word	0x40014400
 8006fe8:	40014800 	.word	0x40014800

08006fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <TIM_OC4_SetConfig+0xbc>)
 8007018:	4013      	ands	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	031b      	lsls	r3, r3, #12
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	4313      	orrs	r3, r2
 8007042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a19      	ldr	r2, [pc, #100]	; (80070ac <TIM_OC4_SetConfig+0xc0>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00f      	beq.n	800706c <TIM_OC4_SetConfig+0x80>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <TIM_OC4_SetConfig+0xc4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00b      	beq.n	800706c <TIM_OC4_SetConfig+0x80>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a17      	ldr	r2, [pc, #92]	; (80070b4 <TIM_OC4_SetConfig+0xc8>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d007      	beq.n	800706c <TIM_OC4_SetConfig+0x80>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a16      	ldr	r2, [pc, #88]	; (80070b8 <TIM_OC4_SetConfig+0xcc>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d003      	beq.n	800706c <TIM_OC4_SetConfig+0x80>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a15      	ldr	r2, [pc, #84]	; (80070bc <TIM_OC4_SetConfig+0xd0>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d109      	bne.n	8007080 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	019b      	lsls	r3, r3, #6
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	4313      	orrs	r3, r2
 800707e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	621a      	str	r2, [r3, #32]
}
 800709a:	bf00      	nop
 800709c:	371c      	adds	r7, #28
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	feff8fff 	.word	0xfeff8fff
 80070ac:	40010000 	.word	0x40010000
 80070b0:	40010400 	.word	0x40010400
 80070b4:	40014000 	.word	0x40014000
 80070b8:	40014400 	.word	0x40014400
 80070bc:	40014800 	.word	0x40014800

080070c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	4b21      	ldr	r3, [pc, #132]	; (8007170 <TIM_OC5_SetConfig+0xb0>)
 80070ec:	4013      	ands	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007100:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	041b      	lsls	r3, r3, #16
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a18      	ldr	r2, [pc, #96]	; (8007174 <TIM_OC5_SetConfig+0xb4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00f      	beq.n	8007136 <TIM_OC5_SetConfig+0x76>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a17      	ldr	r2, [pc, #92]	; (8007178 <TIM_OC5_SetConfig+0xb8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00b      	beq.n	8007136 <TIM_OC5_SetConfig+0x76>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a16      	ldr	r2, [pc, #88]	; (800717c <TIM_OC5_SetConfig+0xbc>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d007      	beq.n	8007136 <TIM_OC5_SetConfig+0x76>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a15      	ldr	r2, [pc, #84]	; (8007180 <TIM_OC5_SetConfig+0xc0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d003      	beq.n	8007136 <TIM_OC5_SetConfig+0x76>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a14      	ldr	r2, [pc, #80]	; (8007184 <TIM_OC5_SetConfig+0xc4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d109      	bne.n	800714a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800713c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	4313      	orrs	r3, r2
 8007148:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	621a      	str	r2, [r3, #32]
}
 8007164:	bf00      	nop
 8007166:	371c      	adds	r7, #28
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	fffeff8f 	.word	0xfffeff8f
 8007174:	40010000 	.word	0x40010000
 8007178:	40010400 	.word	0x40010400
 800717c:	40014000 	.word	0x40014000
 8007180:	40014400 	.word	0x40014400
 8007184:	40014800 	.word	0x40014800

08007188 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	4b22      	ldr	r3, [pc, #136]	; (800723c <TIM_OC6_SetConfig+0xb4>)
 80071b4:	4013      	ands	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	021b      	lsls	r3, r3, #8
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	051b      	lsls	r3, r3, #20
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a19      	ldr	r2, [pc, #100]	; (8007240 <TIM_OC6_SetConfig+0xb8>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00f      	beq.n	8007200 <TIM_OC6_SetConfig+0x78>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a18      	ldr	r2, [pc, #96]	; (8007244 <TIM_OC6_SetConfig+0xbc>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00b      	beq.n	8007200 <TIM_OC6_SetConfig+0x78>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a17      	ldr	r2, [pc, #92]	; (8007248 <TIM_OC6_SetConfig+0xc0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d007      	beq.n	8007200 <TIM_OC6_SetConfig+0x78>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a16      	ldr	r2, [pc, #88]	; (800724c <TIM_OC6_SetConfig+0xc4>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d003      	beq.n	8007200 <TIM_OC6_SetConfig+0x78>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a15      	ldr	r2, [pc, #84]	; (8007250 <TIM_OC6_SetConfig+0xc8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d109      	bne.n	8007214 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007206:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	029b      	lsls	r3, r3, #10
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	4313      	orrs	r3, r2
 8007212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	621a      	str	r2, [r3, #32]
}
 800722e:	bf00      	nop
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	feff8fff 	.word	0xfeff8fff
 8007240:	40010000 	.word	0x40010000
 8007244:	40010400 	.word	0x40010400
 8007248:	40014000 	.word	0x40014000
 800724c:	40014400 	.word	0x40014400
 8007250:	40014800 	.word	0x40014800

08007254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	f023 0201 	bic.w	r2, r3, #1
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800727e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f023 030a 	bic.w	r3, r3, #10
 8007290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b087      	sub	sp, #28
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f023 0210 	bic.w	r2, r3, #16
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	031b      	lsls	r3, r3, #12
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	621a      	str	r2, [r3, #32]
}
 8007306:	bf00      	nop
 8007308:	371c      	adds	r7, #28
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
	...

08007314 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4b09      	ldr	r3, [pc, #36]	; (800734c <TIM_ITRx_SetConfig+0x38>)
 8007328:	4013      	ands	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	4313      	orrs	r3, r2
 8007332:	f043 0307 	orr.w	r3, r3, #7
 8007336:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	609a      	str	r2, [r3, #8]
}
 800733e:	bf00      	nop
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	ffcfff8f 	.word	0xffcfff8f

08007350 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800736a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	021a      	lsls	r2, r3, #8
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	431a      	orrs	r2, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	4313      	orrs	r3, r2
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	609a      	str	r2, [r3, #8]
}
 8007384:	bf00      	nop
 8007386:	371c      	adds	r7, #28
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d101      	bne.n	80073a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073a4:	2302      	movs	r3, #2
 80073a6:	e06d      	b.n	8007484 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a30      	ldr	r2, [pc, #192]	; (8007490 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d004      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a2f      	ldr	r2, [pc, #188]	; (8007494 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d108      	bne.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a20      	ldr	r2, [pc, #128]	; (8007490 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d022      	beq.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800741a:	d01d      	beq.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a1d      	ldr	r2, [pc, #116]	; (8007498 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d018      	beq.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a1c      	ldr	r2, [pc, #112]	; (800749c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d013      	beq.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a1a      	ldr	r2, [pc, #104]	; (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00e      	beq.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a15      	ldr	r2, [pc, #84]	; (8007494 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d009      	beq.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a16      	ldr	r2, [pc, #88]	; (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d004      	beq.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a15      	ldr	r2, [pc, #84]	; (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d10c      	bne.n	8007472 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800745e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	4313      	orrs	r3, r2
 8007468:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	40010000 	.word	0x40010000
 8007494:	40010400 	.word	0x40010400
 8007498:	40000400 	.word	0x40000400
 800749c:	40000800 	.word	0x40000800
 80074a0:	40000c00 	.word	0x40000c00
 80074a4:	40001800 	.word	0x40001800
 80074a8:	40014000 	.word	0x40014000

080074ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074c4:	2302      	movs	r3, #2
 80074c6:	e065      	b.n	8007594 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	4313      	orrs	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4313      	orrs	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	4313      	orrs	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752e:	4313      	orrs	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	041b      	lsls	r3, r3, #16
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a16      	ldr	r2, [pc, #88]	; (80075a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d004      	beq.n	8007556 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a14      	ldr	r2, [pc, #80]	; (80075a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d115      	bne.n	8007582 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	051b      	lsls	r3, r3, #20
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	4313      	orrs	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	40010000 	.word	0x40010000
 80075a4:	40010400 	.word	0x40010400

080075a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e042      	b.n	8007640 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d106      	bne.n	80075d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7f9 ff2d 	bl	800142c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2224      	movs	r2, #36	; 0x24
 80075d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0201 	bic.w	r2, r2, #1
 80075e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f82c 	bl	8007648 <UART_SetConfig>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d101      	bne.n	80075fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e022      	b.n	8007640 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fd88 	bl	8008118 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007616:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007626:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0201 	orr.w	r2, r2, #1
 8007636:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fe0f 	bl	800825c <UART_CheckIdleState>
 800763e:	4603      	mov	r3, r0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800764c:	b092      	sub	sp, #72	; 0x48
 800764e:	af00      	add	r7, sp, #0
 8007650:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	431a      	orrs	r2, r3
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	431a      	orrs	r2, r3
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	4313      	orrs	r3, r2
 800766e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	4bbe      	ldr	r3, [pc, #760]	; (8007970 <UART_SetConfig+0x328>)
 8007678:	4013      	ands	r3, r2
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	6812      	ldr	r2, [r2, #0]
 800767e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007680:	430b      	orrs	r3, r1
 8007682:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	68da      	ldr	r2, [r3, #12]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4ab3      	ldr	r2, [pc, #716]	; (8007974 <UART_SetConfig+0x32c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d004      	beq.n	80076b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076b0:	4313      	orrs	r3, r2
 80076b2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	4baf      	ldr	r3, [pc, #700]	; (8007978 <UART_SetConfig+0x330>)
 80076bc:	4013      	ands	r3, r2
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076c4:	430b      	orrs	r3, r1
 80076c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	f023 010f 	bic.w	r1, r3, #15
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4aa6      	ldr	r2, [pc, #664]	; (800797c <UART_SetConfig+0x334>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d177      	bne.n	80077d8 <UART_SetConfig+0x190>
 80076e8:	4ba5      	ldr	r3, [pc, #660]	; (8007980 <UART_SetConfig+0x338>)
 80076ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076f0:	2b28      	cmp	r3, #40	; 0x28
 80076f2:	d86d      	bhi.n	80077d0 <UART_SetConfig+0x188>
 80076f4:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <UART_SetConfig+0xb4>)
 80076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fa:	bf00      	nop
 80076fc:	080077a1 	.word	0x080077a1
 8007700:	080077d1 	.word	0x080077d1
 8007704:	080077d1 	.word	0x080077d1
 8007708:	080077d1 	.word	0x080077d1
 800770c:	080077d1 	.word	0x080077d1
 8007710:	080077d1 	.word	0x080077d1
 8007714:	080077d1 	.word	0x080077d1
 8007718:	080077d1 	.word	0x080077d1
 800771c:	080077a9 	.word	0x080077a9
 8007720:	080077d1 	.word	0x080077d1
 8007724:	080077d1 	.word	0x080077d1
 8007728:	080077d1 	.word	0x080077d1
 800772c:	080077d1 	.word	0x080077d1
 8007730:	080077d1 	.word	0x080077d1
 8007734:	080077d1 	.word	0x080077d1
 8007738:	080077d1 	.word	0x080077d1
 800773c:	080077b1 	.word	0x080077b1
 8007740:	080077d1 	.word	0x080077d1
 8007744:	080077d1 	.word	0x080077d1
 8007748:	080077d1 	.word	0x080077d1
 800774c:	080077d1 	.word	0x080077d1
 8007750:	080077d1 	.word	0x080077d1
 8007754:	080077d1 	.word	0x080077d1
 8007758:	080077d1 	.word	0x080077d1
 800775c:	080077b9 	.word	0x080077b9
 8007760:	080077d1 	.word	0x080077d1
 8007764:	080077d1 	.word	0x080077d1
 8007768:	080077d1 	.word	0x080077d1
 800776c:	080077d1 	.word	0x080077d1
 8007770:	080077d1 	.word	0x080077d1
 8007774:	080077d1 	.word	0x080077d1
 8007778:	080077d1 	.word	0x080077d1
 800777c:	080077c1 	.word	0x080077c1
 8007780:	080077d1 	.word	0x080077d1
 8007784:	080077d1 	.word	0x080077d1
 8007788:	080077d1 	.word	0x080077d1
 800778c:	080077d1 	.word	0x080077d1
 8007790:	080077d1 	.word	0x080077d1
 8007794:	080077d1 	.word	0x080077d1
 8007798:	080077d1 	.word	0x080077d1
 800779c:	080077c9 	.word	0x080077c9
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077a6:	e222      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077a8:	2304      	movs	r3, #4
 80077aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ae:	e21e      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077b0:	2308      	movs	r3, #8
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b6:	e21a      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077b8:	2310      	movs	r3, #16
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077be:	e216      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077c0:	2320      	movs	r3, #32
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077c6:	e212      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077c8:	2340      	movs	r3, #64	; 0x40
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ce:	e20e      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077d0:	2380      	movs	r3, #128	; 0x80
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077d6:	e20a      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a69      	ldr	r2, [pc, #420]	; (8007984 <UART_SetConfig+0x33c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d130      	bne.n	8007844 <UART_SetConfig+0x1fc>
 80077e2:	4b67      	ldr	r3, [pc, #412]	; (8007980 <UART_SetConfig+0x338>)
 80077e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	2b05      	cmp	r3, #5
 80077ec:	d826      	bhi.n	800783c <UART_SetConfig+0x1f4>
 80077ee:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <UART_SetConfig+0x1ac>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	0800780d 	.word	0x0800780d
 80077f8:	08007815 	.word	0x08007815
 80077fc:	0800781d 	.word	0x0800781d
 8007800:	08007825 	.word	0x08007825
 8007804:	0800782d 	.word	0x0800782d
 8007808:	08007835 	.word	0x08007835
 800780c:	2300      	movs	r3, #0
 800780e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007812:	e1ec      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007814:	2304      	movs	r3, #4
 8007816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800781a:	e1e8      	b.n	8007bee <UART_SetConfig+0x5a6>
 800781c:	2308      	movs	r3, #8
 800781e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007822:	e1e4      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007824:	2310      	movs	r3, #16
 8007826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800782a:	e1e0      	b.n	8007bee <UART_SetConfig+0x5a6>
 800782c:	2320      	movs	r3, #32
 800782e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007832:	e1dc      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007834:	2340      	movs	r3, #64	; 0x40
 8007836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800783a:	e1d8      	b.n	8007bee <UART_SetConfig+0x5a6>
 800783c:	2380      	movs	r3, #128	; 0x80
 800783e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007842:	e1d4      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a4f      	ldr	r2, [pc, #316]	; (8007988 <UART_SetConfig+0x340>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d130      	bne.n	80078b0 <UART_SetConfig+0x268>
 800784e:	4b4c      	ldr	r3, [pc, #304]	; (8007980 <UART_SetConfig+0x338>)
 8007850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	2b05      	cmp	r3, #5
 8007858:	d826      	bhi.n	80078a8 <UART_SetConfig+0x260>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <UART_SetConfig+0x218>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007879 	.word	0x08007879
 8007864:	08007881 	.word	0x08007881
 8007868:	08007889 	.word	0x08007889
 800786c:	08007891 	.word	0x08007891
 8007870:	08007899 	.word	0x08007899
 8007874:	080078a1 	.word	0x080078a1
 8007878:	2300      	movs	r3, #0
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800787e:	e1b6      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007880:	2304      	movs	r3, #4
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007886:	e1b2      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007888:	2308      	movs	r3, #8
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788e:	e1ae      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007890:	2310      	movs	r3, #16
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007896:	e1aa      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007898:	2320      	movs	r3, #32
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800789e:	e1a6      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078a0:	2340      	movs	r3, #64	; 0x40
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078a6:	e1a2      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078a8:	2380      	movs	r3, #128	; 0x80
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ae:	e19e      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a35      	ldr	r2, [pc, #212]	; (800798c <UART_SetConfig+0x344>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d130      	bne.n	800791c <UART_SetConfig+0x2d4>
 80078ba:	4b31      	ldr	r3, [pc, #196]	; (8007980 <UART_SetConfig+0x338>)
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	f003 0307 	and.w	r3, r3, #7
 80078c2:	2b05      	cmp	r3, #5
 80078c4:	d826      	bhi.n	8007914 <UART_SetConfig+0x2cc>
 80078c6:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <UART_SetConfig+0x284>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	080078e5 	.word	0x080078e5
 80078d0:	080078ed 	.word	0x080078ed
 80078d4:	080078f5 	.word	0x080078f5
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	08007905 	.word	0x08007905
 80078e0:	0800790d 	.word	0x0800790d
 80078e4:	2300      	movs	r3, #0
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ea:	e180      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078ec:	2304      	movs	r3, #4
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f2:	e17c      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078f4:	2308      	movs	r3, #8
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fa:	e178      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078fc:	2310      	movs	r3, #16
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007902:	e174      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007904:	2320      	movs	r3, #32
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800790a:	e170      	b.n	8007bee <UART_SetConfig+0x5a6>
 800790c:	2340      	movs	r3, #64	; 0x40
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007912:	e16c      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007914:	2380      	movs	r3, #128	; 0x80
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800791a:	e168      	b.n	8007bee <UART_SetConfig+0x5a6>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a1b      	ldr	r2, [pc, #108]	; (8007990 <UART_SetConfig+0x348>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d142      	bne.n	80079ac <UART_SetConfig+0x364>
 8007926:	4b16      	ldr	r3, [pc, #88]	; (8007980 <UART_SetConfig+0x338>)
 8007928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792a:	f003 0307 	and.w	r3, r3, #7
 800792e:	2b05      	cmp	r3, #5
 8007930:	d838      	bhi.n	80079a4 <UART_SetConfig+0x35c>
 8007932:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <UART_SetConfig+0x2f0>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	08007951 	.word	0x08007951
 800793c:	08007959 	.word	0x08007959
 8007940:	08007961 	.word	0x08007961
 8007944:	08007969 	.word	0x08007969
 8007948:	08007995 	.word	0x08007995
 800794c:	0800799d 	.word	0x0800799d
 8007950:	2300      	movs	r3, #0
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007956:	e14a      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007958:	2304      	movs	r3, #4
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795e:	e146      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007960:	2308      	movs	r3, #8
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007966:	e142      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007968:	2310      	movs	r3, #16
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800796e:	e13e      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007970:	cfff69f3 	.word	0xcfff69f3
 8007974:	58000c00 	.word	0x58000c00
 8007978:	11fff4ff 	.word	0x11fff4ff
 800797c:	40011000 	.word	0x40011000
 8007980:	58024400 	.word	0x58024400
 8007984:	40004400 	.word	0x40004400
 8007988:	40004800 	.word	0x40004800
 800798c:	40004c00 	.word	0x40004c00
 8007990:	40005000 	.word	0x40005000
 8007994:	2320      	movs	r3, #32
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800799a:	e128      	b.n	8007bee <UART_SetConfig+0x5a6>
 800799c:	2340      	movs	r3, #64	; 0x40
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079a2:	e124      	b.n	8007bee <UART_SetConfig+0x5a6>
 80079a4:	2380      	movs	r3, #128	; 0x80
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079aa:	e120      	b.n	8007bee <UART_SetConfig+0x5a6>
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4acb      	ldr	r2, [pc, #812]	; (8007ce0 <UART_SetConfig+0x698>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d176      	bne.n	8007aa4 <UART_SetConfig+0x45c>
 80079b6:	4bcb      	ldr	r3, [pc, #812]	; (8007ce4 <UART_SetConfig+0x69c>)
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079be:	2b28      	cmp	r3, #40	; 0x28
 80079c0:	d86c      	bhi.n	8007a9c <UART_SetConfig+0x454>
 80079c2:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <UART_SetConfig+0x380>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	08007a6d 	.word	0x08007a6d
 80079cc:	08007a9d 	.word	0x08007a9d
 80079d0:	08007a9d 	.word	0x08007a9d
 80079d4:	08007a9d 	.word	0x08007a9d
 80079d8:	08007a9d 	.word	0x08007a9d
 80079dc:	08007a9d 	.word	0x08007a9d
 80079e0:	08007a9d 	.word	0x08007a9d
 80079e4:	08007a9d 	.word	0x08007a9d
 80079e8:	08007a75 	.word	0x08007a75
 80079ec:	08007a9d 	.word	0x08007a9d
 80079f0:	08007a9d 	.word	0x08007a9d
 80079f4:	08007a9d 	.word	0x08007a9d
 80079f8:	08007a9d 	.word	0x08007a9d
 80079fc:	08007a9d 	.word	0x08007a9d
 8007a00:	08007a9d 	.word	0x08007a9d
 8007a04:	08007a9d 	.word	0x08007a9d
 8007a08:	08007a7d 	.word	0x08007a7d
 8007a0c:	08007a9d 	.word	0x08007a9d
 8007a10:	08007a9d 	.word	0x08007a9d
 8007a14:	08007a9d 	.word	0x08007a9d
 8007a18:	08007a9d 	.word	0x08007a9d
 8007a1c:	08007a9d 	.word	0x08007a9d
 8007a20:	08007a9d 	.word	0x08007a9d
 8007a24:	08007a9d 	.word	0x08007a9d
 8007a28:	08007a85 	.word	0x08007a85
 8007a2c:	08007a9d 	.word	0x08007a9d
 8007a30:	08007a9d 	.word	0x08007a9d
 8007a34:	08007a9d 	.word	0x08007a9d
 8007a38:	08007a9d 	.word	0x08007a9d
 8007a3c:	08007a9d 	.word	0x08007a9d
 8007a40:	08007a9d 	.word	0x08007a9d
 8007a44:	08007a9d 	.word	0x08007a9d
 8007a48:	08007a8d 	.word	0x08007a8d
 8007a4c:	08007a9d 	.word	0x08007a9d
 8007a50:	08007a9d 	.word	0x08007a9d
 8007a54:	08007a9d 	.word	0x08007a9d
 8007a58:	08007a9d 	.word	0x08007a9d
 8007a5c:	08007a9d 	.word	0x08007a9d
 8007a60:	08007a9d 	.word	0x08007a9d
 8007a64:	08007a9d 	.word	0x08007a9d
 8007a68:	08007a95 	.word	0x08007a95
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a72:	e0bc      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a74:	2304      	movs	r3, #4
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a7a:	e0b8      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a7c:	2308      	movs	r3, #8
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a82:	e0b4      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a84:	2310      	movs	r3, #16
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a8a:	e0b0      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a8c:	2320      	movs	r3, #32
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a92:	e0ac      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a94:	2340      	movs	r3, #64	; 0x40
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9a:	e0a8      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a9c:	2380      	movs	r3, #128	; 0x80
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa2:	e0a4      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a8f      	ldr	r2, [pc, #572]	; (8007ce8 <UART_SetConfig+0x6a0>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d130      	bne.n	8007b10 <UART_SetConfig+0x4c8>
 8007aae:	4b8d      	ldr	r3, [pc, #564]	; (8007ce4 <UART_SetConfig+0x69c>)
 8007ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	2b05      	cmp	r3, #5
 8007ab8:	d826      	bhi.n	8007b08 <UART_SetConfig+0x4c0>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <UART_SetConfig+0x478>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007ad9 	.word	0x08007ad9
 8007ac4:	08007ae1 	.word	0x08007ae1
 8007ac8:	08007ae9 	.word	0x08007ae9
 8007acc:	08007af1 	.word	0x08007af1
 8007ad0:	08007af9 	.word	0x08007af9
 8007ad4:	08007b01 	.word	0x08007b01
 8007ad8:	2300      	movs	r3, #0
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ade:	e086      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ae6:	e082      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007ae8:	2308      	movs	r3, #8
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aee:	e07e      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007af0:	2310      	movs	r3, #16
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007af6:	e07a      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007af8:	2320      	movs	r3, #32
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007afe:	e076      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b00:	2340      	movs	r3, #64	; 0x40
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b06:	e072      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b08:	2380      	movs	r3, #128	; 0x80
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0e:	e06e      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a75      	ldr	r2, [pc, #468]	; (8007cec <UART_SetConfig+0x6a4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d130      	bne.n	8007b7c <UART_SetConfig+0x534>
 8007b1a:	4b72      	ldr	r3, [pc, #456]	; (8007ce4 <UART_SetConfig+0x69c>)
 8007b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	2b05      	cmp	r3, #5
 8007b24:	d826      	bhi.n	8007b74 <UART_SetConfig+0x52c>
 8007b26:	a201      	add	r2, pc, #4	; (adr r2, 8007b2c <UART_SetConfig+0x4e4>)
 8007b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2c:	08007b45 	.word	0x08007b45
 8007b30:	08007b4d 	.word	0x08007b4d
 8007b34:	08007b55 	.word	0x08007b55
 8007b38:	08007b5d 	.word	0x08007b5d
 8007b3c:	08007b65 	.word	0x08007b65
 8007b40:	08007b6d 	.word	0x08007b6d
 8007b44:	2300      	movs	r3, #0
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b4a:	e050      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b4c:	2304      	movs	r3, #4
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b52:	e04c      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b54:	2308      	movs	r3, #8
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b5a:	e048      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b62:	e044      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b64:	2320      	movs	r3, #32
 8007b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b6a:	e040      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b6c:	2340      	movs	r3, #64	; 0x40
 8007b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b72:	e03c      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b74:	2380      	movs	r3, #128	; 0x80
 8007b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b7a:	e038      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a5b      	ldr	r2, [pc, #364]	; (8007cf0 <UART_SetConfig+0x6a8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d130      	bne.n	8007be8 <UART_SetConfig+0x5a0>
 8007b86:	4b57      	ldr	r3, [pc, #348]	; (8007ce4 <UART_SetConfig+0x69c>)
 8007b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8a:	f003 0307 	and.w	r3, r3, #7
 8007b8e:	2b05      	cmp	r3, #5
 8007b90:	d826      	bhi.n	8007be0 <UART_SetConfig+0x598>
 8007b92:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <UART_SetConfig+0x550>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bb1 	.word	0x08007bb1
 8007b9c:	08007bb9 	.word	0x08007bb9
 8007ba0:	08007bc1 	.word	0x08007bc1
 8007ba4:	08007bc9 	.word	0x08007bc9
 8007ba8:	08007bd1 	.word	0x08007bd1
 8007bac:	08007bd9 	.word	0x08007bd9
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bb6:	e01a      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007bb8:	2304      	movs	r3, #4
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bbe:	e016      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007bc0:	2308      	movs	r3, #8
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bc6:	e012      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007bc8:	2310      	movs	r3, #16
 8007bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bce:	e00e      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007bd0:	2320      	movs	r3, #32
 8007bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bd6:	e00a      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007bd8:	2340      	movs	r3, #64	; 0x40
 8007bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bde:	e006      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007be0:	2380      	movs	r3, #128	; 0x80
 8007be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007be6:	e002      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007be8:	2380      	movs	r3, #128	; 0x80
 8007bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a3f      	ldr	r2, [pc, #252]	; (8007cf0 <UART_SetConfig+0x6a8>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	f040 80f8 	bne.w	8007dea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bfa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007bfe:	2b20      	cmp	r3, #32
 8007c00:	dc46      	bgt.n	8007c90 <UART_SetConfig+0x648>
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	f2c0 8082 	blt.w	8007d0c <UART_SetConfig+0x6c4>
 8007c08:	3b02      	subs	r3, #2
 8007c0a:	2b1e      	cmp	r3, #30
 8007c0c:	d87e      	bhi.n	8007d0c <UART_SetConfig+0x6c4>
 8007c0e:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <UART_SetConfig+0x5cc>)
 8007c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c14:	08007c97 	.word	0x08007c97
 8007c18:	08007d0d 	.word	0x08007d0d
 8007c1c:	08007c9f 	.word	0x08007c9f
 8007c20:	08007d0d 	.word	0x08007d0d
 8007c24:	08007d0d 	.word	0x08007d0d
 8007c28:	08007d0d 	.word	0x08007d0d
 8007c2c:	08007caf 	.word	0x08007caf
 8007c30:	08007d0d 	.word	0x08007d0d
 8007c34:	08007d0d 	.word	0x08007d0d
 8007c38:	08007d0d 	.word	0x08007d0d
 8007c3c:	08007d0d 	.word	0x08007d0d
 8007c40:	08007d0d 	.word	0x08007d0d
 8007c44:	08007d0d 	.word	0x08007d0d
 8007c48:	08007d0d 	.word	0x08007d0d
 8007c4c:	08007cbf 	.word	0x08007cbf
 8007c50:	08007d0d 	.word	0x08007d0d
 8007c54:	08007d0d 	.word	0x08007d0d
 8007c58:	08007d0d 	.word	0x08007d0d
 8007c5c:	08007d0d 	.word	0x08007d0d
 8007c60:	08007d0d 	.word	0x08007d0d
 8007c64:	08007d0d 	.word	0x08007d0d
 8007c68:	08007d0d 	.word	0x08007d0d
 8007c6c:	08007d0d 	.word	0x08007d0d
 8007c70:	08007d0d 	.word	0x08007d0d
 8007c74:	08007d0d 	.word	0x08007d0d
 8007c78:	08007d0d 	.word	0x08007d0d
 8007c7c:	08007d0d 	.word	0x08007d0d
 8007c80:	08007d0d 	.word	0x08007d0d
 8007c84:	08007d0d 	.word	0x08007d0d
 8007c88:	08007d0d 	.word	0x08007d0d
 8007c8c:	08007cff 	.word	0x08007cff
 8007c90:	2b40      	cmp	r3, #64	; 0x40
 8007c92:	d037      	beq.n	8007d04 <UART_SetConfig+0x6bc>
 8007c94:	e03a      	b.n	8007d0c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007c96:	f7fe f887 	bl	8005da8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007c9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c9c:	e03c      	b.n	8007d18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fe f896 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cac:	e034      	b.n	8007d18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cae:	f107 0318 	add.w	r3, r7, #24
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe f9e2 	bl	800607c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cbc:	e02c      	b.n	8007d18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cbe:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <UART_SetConfig+0x69c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d016      	beq.n	8007cf8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cca:	4b06      	ldr	r3, [pc, #24]	; (8007ce4 <UART_SetConfig+0x69c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	08db      	lsrs	r3, r3, #3
 8007cd0:	f003 0303 	and.w	r3, r3, #3
 8007cd4:	4a07      	ldr	r2, [pc, #28]	; (8007cf4 <UART_SetConfig+0x6ac>)
 8007cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cdc:	e01c      	b.n	8007d18 <UART_SetConfig+0x6d0>
 8007cde:	bf00      	nop
 8007ce0:	40011400 	.word	0x40011400
 8007ce4:	58024400 	.word	0x58024400
 8007ce8:	40007800 	.word	0x40007800
 8007cec:	40007c00 	.word	0x40007c00
 8007cf0:	58000c00 	.word	0x58000c00
 8007cf4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007cf8:	4b9d      	ldr	r3, [pc, #628]	; (8007f70 <UART_SetConfig+0x928>)
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cfc:	e00c      	b.n	8007d18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cfe:	4b9d      	ldr	r3, [pc, #628]	; (8007f74 <UART_SetConfig+0x92c>)
 8007d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d02:	e009      	b.n	8007d18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d0a:	e005      	b.n	8007d18 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007d16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 81de 	beq.w	80080dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	4a94      	ldr	r2, [pc, #592]	; (8007f78 <UART_SetConfig+0x930>)
 8007d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d32:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	4413      	add	r3, r2
 8007d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d305      	bcc.n	8007d50 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d903      	bls.n	8007d58 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007d56:	e1c1      	b.n	80080dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	60bb      	str	r3, [r7, #8]
 8007d5e:	60fa      	str	r2, [r7, #12]
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	4a84      	ldr	r2, [pc, #528]	; (8007f78 <UART_SetConfig+0x930>)
 8007d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	607a      	str	r2, [r7, #4]
 8007d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d7a:	f7f8 faad 	bl	80002d8 <__aeabi_uldivmod>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4610      	mov	r0, r2
 8007d84:	4619      	mov	r1, r3
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	f04f 0300 	mov.w	r3, #0
 8007d8e:	020b      	lsls	r3, r1, #8
 8007d90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d94:	0202      	lsls	r2, r0, #8
 8007d96:	6979      	ldr	r1, [r7, #20]
 8007d98:	6849      	ldr	r1, [r1, #4]
 8007d9a:	0849      	lsrs	r1, r1, #1
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	4605      	mov	r5, r0
 8007da2:	eb12 0804 	adds.w	r8, r2, r4
 8007da6:	eb43 0905 	adc.w	r9, r3, r5
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	469a      	mov	sl, r3
 8007db2:	4693      	mov	fp, r2
 8007db4:	4652      	mov	r2, sl
 8007db6:	465b      	mov	r3, fp
 8007db8:	4640      	mov	r0, r8
 8007dba:	4649      	mov	r1, r9
 8007dbc:	f7f8 fa8c 	bl	80002d8 <__aeabi_uldivmod>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dce:	d308      	bcc.n	8007de2 <UART_SetConfig+0x79a>
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dd6:	d204      	bcs.n	8007de2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dde:	60da      	str	r2, [r3, #12]
 8007de0:	e17c      	b.n	80080dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007de8:	e178      	b.n	80080dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df2:	f040 80c5 	bne.w	8007f80 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007df6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	dc48      	bgt.n	8007e90 <UART_SetConfig+0x848>
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	db7b      	blt.n	8007efa <UART_SetConfig+0x8b2>
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	d879      	bhi.n	8007efa <UART_SetConfig+0x8b2>
 8007e06:	a201      	add	r2, pc, #4	; (adr r2, 8007e0c <UART_SetConfig+0x7c4>)
 8007e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0c:	08007e97 	.word	0x08007e97
 8007e10:	08007e9f 	.word	0x08007e9f
 8007e14:	08007efb 	.word	0x08007efb
 8007e18:	08007efb 	.word	0x08007efb
 8007e1c:	08007ea7 	.word	0x08007ea7
 8007e20:	08007efb 	.word	0x08007efb
 8007e24:	08007efb 	.word	0x08007efb
 8007e28:	08007efb 	.word	0x08007efb
 8007e2c:	08007eb7 	.word	0x08007eb7
 8007e30:	08007efb 	.word	0x08007efb
 8007e34:	08007efb 	.word	0x08007efb
 8007e38:	08007efb 	.word	0x08007efb
 8007e3c:	08007efb 	.word	0x08007efb
 8007e40:	08007efb 	.word	0x08007efb
 8007e44:	08007efb 	.word	0x08007efb
 8007e48:	08007efb 	.word	0x08007efb
 8007e4c:	08007ec7 	.word	0x08007ec7
 8007e50:	08007efb 	.word	0x08007efb
 8007e54:	08007efb 	.word	0x08007efb
 8007e58:	08007efb 	.word	0x08007efb
 8007e5c:	08007efb 	.word	0x08007efb
 8007e60:	08007efb 	.word	0x08007efb
 8007e64:	08007efb 	.word	0x08007efb
 8007e68:	08007efb 	.word	0x08007efb
 8007e6c:	08007efb 	.word	0x08007efb
 8007e70:	08007efb 	.word	0x08007efb
 8007e74:	08007efb 	.word	0x08007efb
 8007e78:	08007efb 	.word	0x08007efb
 8007e7c:	08007efb 	.word	0x08007efb
 8007e80:	08007efb 	.word	0x08007efb
 8007e84:	08007efb 	.word	0x08007efb
 8007e88:	08007efb 	.word	0x08007efb
 8007e8c:	08007eed 	.word	0x08007eed
 8007e90:	2b40      	cmp	r3, #64	; 0x40
 8007e92:	d02e      	beq.n	8007ef2 <UART_SetConfig+0x8aa>
 8007e94:	e031      	b.n	8007efa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e96:	f7fc fd51 	bl	800493c <HAL_RCC_GetPCLK1Freq>
 8007e9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e9c:	e033      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e9e:	f7fc fd63 	bl	8004968 <HAL_RCC_GetPCLK2Freq>
 8007ea2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ea4:	e02f      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fd ff92 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb4:	e027      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eb6:	f107 0318 	add.w	r3, r7, #24
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe f8de 	bl	800607c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ec4:	e01f      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ec6:	4b2d      	ldr	r3, [pc, #180]	; (8007f7c <UART_SetConfig+0x934>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d009      	beq.n	8007ee6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ed2:	4b2a      	ldr	r3, [pc, #168]	; (8007f7c <UART_SetConfig+0x934>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	08db      	lsrs	r3, r3, #3
 8007ed8:	f003 0303 	and.w	r3, r3, #3
 8007edc:	4a24      	ldr	r2, [pc, #144]	; (8007f70 <UART_SetConfig+0x928>)
 8007ede:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ee4:	e00f      	b.n	8007f06 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007ee6:	4b22      	ldr	r3, [pc, #136]	; (8007f70 <UART_SetConfig+0x928>)
 8007ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eea:	e00c      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007eec:	4b21      	ldr	r3, [pc, #132]	; (8007f74 <UART_SetConfig+0x92c>)
 8007eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ef0:	e009      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ef8:	e005      	b.n	8007f06 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007f04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 80e7 	beq.w	80080dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	4a19      	ldr	r2, [pc, #100]	; (8007f78 <UART_SetConfig+0x930>)
 8007f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f18:	461a      	mov	r2, r3
 8007f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f20:	005a      	lsls	r2, r3, #1
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	085b      	lsrs	r3, r3, #1
 8007f28:	441a      	add	r2, r3
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f32:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	2b0f      	cmp	r3, #15
 8007f38:	d916      	bls.n	8007f68 <UART_SetConfig+0x920>
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f40:	d212      	bcs.n	8007f68 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	f023 030f 	bic.w	r3, r3, #15
 8007f4a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007f64:	60da      	str	r2, [r3, #12]
 8007f66:	e0b9      	b.n	80080dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007f6e:	e0b5      	b.n	80080dc <UART_SetConfig+0xa94>
 8007f70:	03d09000 	.word	0x03d09000
 8007f74:	003d0900 	.word	0x003d0900
 8007f78:	0800c8e8 	.word	0x0800c8e8
 8007f7c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f84:	2b20      	cmp	r3, #32
 8007f86:	dc49      	bgt.n	800801c <UART_SetConfig+0x9d4>
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	db7c      	blt.n	8008086 <UART_SetConfig+0xa3e>
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d87a      	bhi.n	8008086 <UART_SetConfig+0xa3e>
 8007f90:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <UART_SetConfig+0x950>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08008023 	.word	0x08008023
 8007f9c:	0800802b 	.word	0x0800802b
 8007fa0:	08008087 	.word	0x08008087
 8007fa4:	08008087 	.word	0x08008087
 8007fa8:	08008033 	.word	0x08008033
 8007fac:	08008087 	.word	0x08008087
 8007fb0:	08008087 	.word	0x08008087
 8007fb4:	08008087 	.word	0x08008087
 8007fb8:	08008043 	.word	0x08008043
 8007fbc:	08008087 	.word	0x08008087
 8007fc0:	08008087 	.word	0x08008087
 8007fc4:	08008087 	.word	0x08008087
 8007fc8:	08008087 	.word	0x08008087
 8007fcc:	08008087 	.word	0x08008087
 8007fd0:	08008087 	.word	0x08008087
 8007fd4:	08008087 	.word	0x08008087
 8007fd8:	08008053 	.word	0x08008053
 8007fdc:	08008087 	.word	0x08008087
 8007fe0:	08008087 	.word	0x08008087
 8007fe4:	08008087 	.word	0x08008087
 8007fe8:	08008087 	.word	0x08008087
 8007fec:	08008087 	.word	0x08008087
 8007ff0:	08008087 	.word	0x08008087
 8007ff4:	08008087 	.word	0x08008087
 8007ff8:	08008087 	.word	0x08008087
 8007ffc:	08008087 	.word	0x08008087
 8008000:	08008087 	.word	0x08008087
 8008004:	08008087 	.word	0x08008087
 8008008:	08008087 	.word	0x08008087
 800800c:	08008087 	.word	0x08008087
 8008010:	08008087 	.word	0x08008087
 8008014:	08008087 	.word	0x08008087
 8008018:	08008079 	.word	0x08008079
 800801c:	2b40      	cmp	r3, #64	; 0x40
 800801e:	d02e      	beq.n	800807e <UART_SetConfig+0xa36>
 8008020:	e031      	b.n	8008086 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008022:	f7fc fc8b 	bl	800493c <HAL_RCC_GetPCLK1Freq>
 8008026:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008028:	e033      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800802a:	f7fc fc9d 	bl	8004968 <HAL_RCC_GetPCLK2Freq>
 800802e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008030:	e02f      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008036:	4618      	mov	r0, r3
 8008038:	f7fd fecc 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008040:	e027      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008042:	f107 0318 	add.w	r3, r7, #24
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe f818 	bl	800607c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008050:	e01f      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008052:	4b2d      	ldr	r3, [pc, #180]	; (8008108 <UART_SetConfig+0xac0>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	d009      	beq.n	8008072 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800805e:	4b2a      	ldr	r3, [pc, #168]	; (8008108 <UART_SetConfig+0xac0>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	08db      	lsrs	r3, r3, #3
 8008064:	f003 0303 	and.w	r3, r3, #3
 8008068:	4a28      	ldr	r2, [pc, #160]	; (800810c <UART_SetConfig+0xac4>)
 800806a:	fa22 f303 	lsr.w	r3, r2, r3
 800806e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008070:	e00f      	b.n	8008092 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008072:	4b26      	ldr	r3, [pc, #152]	; (800810c <UART_SetConfig+0xac4>)
 8008074:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008076:	e00c      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008078:	4b25      	ldr	r3, [pc, #148]	; (8008110 <UART_SetConfig+0xac8>)
 800807a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800807c:	e009      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800807e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008084:	e005      	b.n	8008092 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008090:	bf00      	nop
    }

    if (pclk != 0U)
 8008092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008094:	2b00      	cmp	r3, #0
 8008096:	d021      	beq.n	80080dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	4a1d      	ldr	r2, [pc, #116]	; (8008114 <UART_SetConfig+0xacc>)
 800809e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080a2:	461a      	mov	r2, r3
 80080a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	085b      	lsrs	r3, r3, #1
 80080b0:	441a      	add	r2, r3
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080be:	2b0f      	cmp	r3, #15
 80080c0:	d909      	bls.n	80080d6 <UART_SetConfig+0xa8e>
 80080c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c8:	d205      	bcs.n	80080d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60da      	str	r2, [r3, #12]
 80080d4:	e002      	b.n	80080dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	2201      	movs	r2, #1
 80080e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2200      	movs	r2, #0
 80080f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2200      	movs	r2, #0
 80080f6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80080f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3748      	adds	r7, #72	; 0x48
 8008100:	46bd      	mov	sp, r7
 8008102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008106:	bf00      	nop
 8008108:	58024400 	.word	0x58024400
 800810c:	03d09000 	.word	0x03d09000
 8008110:	003d0900 	.word	0x003d0900
 8008114:	0800c8e8 	.word	0x0800c8e8

08008118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008168:	f003 0304 	and.w	r3, r3, #4
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00a      	beq.n	8008186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	f003 0310 	and.w	r3, r3, #16
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ce:	f003 0320 	and.w	r3, r3, #32
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01a      	beq.n	800822e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008216:	d10a      	bne.n	800822e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	605a      	str	r2, [r3, #4]
  }
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b098      	sub	sp, #96	; 0x60
 8008260:	af02      	add	r7, sp, #8
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800826c:	f7f9 fa48 	bl	8001700 <HAL_GetTick>
 8008270:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0308 	and.w	r3, r3, #8
 800827c:	2b08      	cmp	r3, #8
 800827e:	d12f      	bne.n	80082e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008288:	2200      	movs	r2, #0
 800828a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f88e 	bl	80083b0 <UART_WaitOnFlagUntilTimeout>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d022      	beq.n	80082e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	e853 3f00 	ldrex	r3, [r3]
 80082a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ae:	653b      	str	r3, [r7, #80]	; 0x50
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082b8:	647b      	str	r3, [r7, #68]	; 0x44
 80082ba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082c0:	e841 2300 	strex	r3, r2, [r1]
 80082c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1e6      	bne.n	800829a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e063      	b.n	80083a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0304 	and.w	r3, r3, #4
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d149      	bne.n	8008382 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082f6:	2200      	movs	r2, #0
 80082f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f857 	bl	80083b0 <UART_WaitOnFlagUntilTimeout>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d03c      	beq.n	8008382 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	623b      	str	r3, [r7, #32]
   return(result);
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800831c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008326:	633b      	str	r3, [r7, #48]	; 0x30
 8008328:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800832c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1e6      	bne.n	8008308 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	60fb      	str	r3, [r7, #12]
   return(result);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f023 0301 	bic.w	r3, r3, #1
 8008350:	64bb      	str	r3, [r7, #72]	; 0x48
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3308      	adds	r3, #8
 8008358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800835a:	61fa      	str	r2, [r7, #28]
 800835c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	69b9      	ldr	r1, [r7, #24]
 8008360:	69fa      	ldr	r2, [r7, #28]
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	617b      	str	r3, [r7, #20]
   return(result);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e5      	bne.n	800833a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2220      	movs	r2, #32
 8008372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e012      	b.n	80083a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2220      	movs	r2, #32
 8008386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2220      	movs	r2, #32
 800838e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3758      	adds	r7, #88	; 0x58
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	4613      	mov	r3, r2
 80083be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c0:	e049      	b.n	8008456 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c8:	d045      	beq.n	8008456 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ca:	f7f9 f999 	bl	8001700 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d302      	bcc.n	80083e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e048      	b.n	8008476 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0304 	and.w	r3, r3, #4
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d031      	beq.n	8008456 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	f003 0308 	and.w	r3, r3, #8
 80083fc:	2b08      	cmp	r3, #8
 80083fe:	d110      	bne.n	8008422 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2208      	movs	r2, #8
 8008406:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f839 	bl	8008480 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2208      	movs	r2, #8
 8008412:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e029      	b.n	8008476 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800842c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008430:	d111      	bne.n	8008456 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800843a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 f81f 	bl	8008480 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2220      	movs	r2, #32
 8008446:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e00f      	b.n	8008476 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69da      	ldr	r2, [r3, #28]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	4013      	ands	r3, r2
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	429a      	cmp	r2, r3
 8008464:	bf0c      	ite	eq
 8008466:	2301      	moveq	r3, #1
 8008468:	2300      	movne	r3, #0
 800846a:	b2db      	uxtb	r3, r3
 800846c:	461a      	mov	r2, r3
 800846e:	79fb      	ldrb	r3, [r7, #7]
 8008470:	429a      	cmp	r2, r3
 8008472:	d0a6      	beq.n	80083c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
	...

08008480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008480:	b480      	push	{r7}
 8008482:	b095      	sub	sp, #84	; 0x54
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800849c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a6:	643b      	str	r3, [r7, #64]	; 0x40
 80084a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084ae:	e841 2300 	strex	r3, r2, [r1]
 80084b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1e6      	bne.n	8008488 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	3308      	adds	r3, #8
 80084c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	e853 3f00 	ldrex	r3, [r3]
 80084c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80084ca:	69fa      	ldr	r2, [r7, #28]
 80084cc:	4b1e      	ldr	r3, [pc, #120]	; (8008548 <UART_EndRxTransfer+0xc8>)
 80084ce:	4013      	ands	r3, r2
 80084d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3308      	adds	r3, #8
 80084d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084e2:	e841 2300 	strex	r3, r2, [r1]
 80084e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1e5      	bne.n	80084ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d118      	bne.n	8008528 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	e853 3f00 	ldrex	r3, [r3]
 8008502:	60bb      	str	r3, [r7, #8]
   return(result);
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f023 0310 	bic.w	r3, r3, #16
 800850a:	647b      	str	r3, [r7, #68]	; 0x44
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008514:	61bb      	str	r3, [r7, #24]
 8008516:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008518:	6979      	ldr	r1, [r7, #20]
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	e841 2300 	strex	r3, r2, [r1]
 8008520:	613b      	str	r3, [r7, #16]
   return(result);
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e6      	bne.n	80084f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2220      	movs	r2, #32
 800852c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800853c:	bf00      	nop
 800853e:	3754      	adds	r7, #84	; 0x54
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	effffffe 	.word	0xeffffffe

0800854c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800855a:	2b01      	cmp	r3, #1
 800855c:	d101      	bne.n	8008562 <HAL_UARTEx_DisableFifoMode+0x16>
 800855e:	2302      	movs	r3, #2
 8008560:	e027      	b.n	80085b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2224      	movs	r2, #36	; 0x24
 800856e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f022 0201 	bic.w	r2, r2, #1
 8008588:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008590:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2220      	movs	r2, #32
 80085a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d101      	bne.n	80085d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085d2:	2302      	movs	r3, #2
 80085d4:	e02d      	b.n	8008632 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2224      	movs	r2, #36	; 0x24
 80085e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f022 0201 	bic.w	r2, r2, #1
 80085fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	430a      	orrs	r2, r1
 8008610:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f850 	bl	80086b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2220      	movs	r2, #32
 8008624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800864a:	2b01      	cmp	r3, #1
 800864c:	d101      	bne.n	8008652 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800864e:	2302      	movs	r3, #2
 8008650:	e02d      	b.n	80086ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2224      	movs	r2, #36	; 0x24
 800865e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f022 0201 	bic.w	r2, r2, #1
 8008678:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	683a      	ldr	r2, [r7, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f812 	bl	80086b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2220      	movs	r2, #32
 80086a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d108      	bne.n	80086da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086d8:	e031      	b.n	800873e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086da:	2310      	movs	r3, #16
 80086dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086de:	2310      	movs	r3, #16
 80086e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	0e5b      	lsrs	r3, r3, #25
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	f003 0307 	and.w	r3, r3, #7
 80086f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	0f5b      	lsrs	r3, r3, #29
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	f003 0307 	and.w	r3, r3, #7
 8008700:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	7b3a      	ldrb	r2, [r7, #12]
 8008706:	4911      	ldr	r1, [pc, #68]	; (800874c <UARTEx_SetNbDataToProcess+0x94>)
 8008708:	5c8a      	ldrb	r2, [r1, r2]
 800870a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800870e:	7b3a      	ldrb	r2, [r7, #12]
 8008710:	490f      	ldr	r1, [pc, #60]	; (8008750 <UARTEx_SetNbDataToProcess+0x98>)
 8008712:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008714:	fb93 f3f2 	sdiv	r3, r3, r2
 8008718:	b29a      	uxth	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	7b7a      	ldrb	r2, [r7, #13]
 8008724:	4909      	ldr	r1, [pc, #36]	; (800874c <UARTEx_SetNbDataToProcess+0x94>)
 8008726:	5c8a      	ldrb	r2, [r1, r2]
 8008728:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800872c:	7b7a      	ldrb	r2, [r7, #13]
 800872e:	4908      	ldr	r1, [pc, #32]	; (8008750 <UARTEx_SetNbDataToProcess+0x98>)
 8008730:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008732:	fb93 f3f2 	sdiv	r3, r3, r2
 8008736:	b29a      	uxth	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800873e:	bf00      	nop
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	0800c900 	.word	0x0800c900
 8008750:	0800c908 	.word	0x0800c908

08008754 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008754:	b084      	sub	sp, #16
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	f107 001c 	add.w	r0, r7, #28
 8008762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008768:	2b01      	cmp	r3, #1
 800876a:	d120      	bne.n	80087ae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008770:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68da      	ldr	r2, [r3, #12]
 800877c:	4b2a      	ldr	r3, [pc, #168]	; (8008828 <USB_CoreInit+0xd4>)
 800877e:	4013      	ands	r3, r2
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008792:	2b01      	cmp	r3, #1
 8008794:	d105      	bne.n	80087a2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f001 faf8 	bl	8009d98 <USB_CoreReset>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]
 80087ac:	e01a      	b.n	80087e4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f001 faec 	bl	8009d98 <USB_CoreReset>
 80087c0:	4603      	mov	r3, r0
 80087c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80087c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d106      	bne.n	80087d8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	639a      	str	r2, [r3, #56]	; 0x38
 80087d6:	e005      	b.n	80087e4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d116      	bne.n	8008818 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087f8:	4b0c      	ldr	r3, [pc, #48]	; (800882c <USB_CoreInit+0xd8>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f043 0206 	orr.w	r2, r3, #6
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f043 0220 	orr.w	r2, r3, #32
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008818:	7bfb      	ldrb	r3, [r7, #15]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008824:	b004      	add	sp, #16
 8008826:	4770      	bx	lr
 8008828:	ffbdffbf 	.word	0xffbdffbf
 800882c:	03ee0000 	.word	0x03ee0000

08008830 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	4613      	mov	r3, r2
 800883c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800883e:	79fb      	ldrb	r3, [r7, #7]
 8008840:	2b02      	cmp	r3, #2
 8008842:	d165      	bne.n	8008910 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	4a41      	ldr	r2, [pc, #260]	; (800894c <USB_SetTurnaroundTime+0x11c>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d906      	bls.n	800885a <USB_SetTurnaroundTime+0x2a>
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	4a40      	ldr	r2, [pc, #256]	; (8008950 <USB_SetTurnaroundTime+0x120>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d202      	bcs.n	800885a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008854:	230f      	movs	r3, #15
 8008856:	617b      	str	r3, [r7, #20]
 8008858:	e062      	b.n	8008920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	4a3c      	ldr	r2, [pc, #240]	; (8008950 <USB_SetTurnaroundTime+0x120>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d306      	bcc.n	8008870 <USB_SetTurnaroundTime+0x40>
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	4a3b      	ldr	r2, [pc, #236]	; (8008954 <USB_SetTurnaroundTime+0x124>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d202      	bcs.n	8008870 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800886a:	230e      	movs	r3, #14
 800886c:	617b      	str	r3, [r7, #20]
 800886e:	e057      	b.n	8008920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	4a38      	ldr	r2, [pc, #224]	; (8008954 <USB_SetTurnaroundTime+0x124>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d306      	bcc.n	8008886 <USB_SetTurnaroundTime+0x56>
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	4a37      	ldr	r2, [pc, #220]	; (8008958 <USB_SetTurnaroundTime+0x128>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d202      	bcs.n	8008886 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008880:	230d      	movs	r3, #13
 8008882:	617b      	str	r3, [r7, #20]
 8008884:	e04c      	b.n	8008920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	4a33      	ldr	r2, [pc, #204]	; (8008958 <USB_SetTurnaroundTime+0x128>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d306      	bcc.n	800889c <USB_SetTurnaroundTime+0x6c>
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	4a32      	ldr	r2, [pc, #200]	; (800895c <USB_SetTurnaroundTime+0x12c>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d802      	bhi.n	800889c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008896:	230c      	movs	r3, #12
 8008898:	617b      	str	r3, [r7, #20]
 800889a:	e041      	b.n	8008920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	4a2f      	ldr	r2, [pc, #188]	; (800895c <USB_SetTurnaroundTime+0x12c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d906      	bls.n	80088b2 <USB_SetTurnaroundTime+0x82>
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	4a2e      	ldr	r2, [pc, #184]	; (8008960 <USB_SetTurnaroundTime+0x130>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d802      	bhi.n	80088b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80088ac:	230b      	movs	r3, #11
 80088ae:	617b      	str	r3, [r7, #20]
 80088b0:	e036      	b.n	8008920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	4a2a      	ldr	r2, [pc, #168]	; (8008960 <USB_SetTurnaroundTime+0x130>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d906      	bls.n	80088c8 <USB_SetTurnaroundTime+0x98>
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	4a29      	ldr	r2, [pc, #164]	; (8008964 <USB_SetTurnaroundTime+0x134>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d802      	bhi.n	80088c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80088c2:	230a      	movs	r3, #10
 80088c4:	617b      	str	r3, [r7, #20]
 80088c6:	e02b      	b.n	8008920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	4a26      	ldr	r2, [pc, #152]	; (8008964 <USB_SetTurnaroundTime+0x134>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d906      	bls.n	80088de <USB_SetTurnaroundTime+0xae>
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	4a25      	ldr	r2, [pc, #148]	; (8008968 <USB_SetTurnaroundTime+0x138>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d202      	bcs.n	80088de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80088d8:	2309      	movs	r3, #9
 80088da:	617b      	str	r3, [r7, #20]
 80088dc:	e020      	b.n	8008920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	4a21      	ldr	r2, [pc, #132]	; (8008968 <USB_SetTurnaroundTime+0x138>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d306      	bcc.n	80088f4 <USB_SetTurnaroundTime+0xc4>
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	4a20      	ldr	r2, [pc, #128]	; (800896c <USB_SetTurnaroundTime+0x13c>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d802      	bhi.n	80088f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80088ee:	2308      	movs	r3, #8
 80088f0:	617b      	str	r3, [r7, #20]
 80088f2:	e015      	b.n	8008920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	4a1d      	ldr	r2, [pc, #116]	; (800896c <USB_SetTurnaroundTime+0x13c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d906      	bls.n	800890a <USB_SetTurnaroundTime+0xda>
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4a1c      	ldr	r2, [pc, #112]	; (8008970 <USB_SetTurnaroundTime+0x140>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d202      	bcs.n	800890a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008904:	2307      	movs	r3, #7
 8008906:	617b      	str	r3, [r7, #20]
 8008908:	e00a      	b.n	8008920 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800890a:	2306      	movs	r3, #6
 800890c:	617b      	str	r3, [r7, #20]
 800890e:	e007      	b.n	8008920 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008910:	79fb      	ldrb	r3, [r7, #7]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d102      	bne.n	800891c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008916:	2309      	movs	r3, #9
 8008918:	617b      	str	r3, [r7, #20]
 800891a:	e001      	b.n	8008920 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800891c:	2309      	movs	r3, #9
 800891e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	68da      	ldr	r2, [r3, #12]
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	029b      	lsls	r3, r3, #10
 8008934:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008938:	431a      	orrs	r2, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	371c      	adds	r7, #28
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	00d8acbf 	.word	0x00d8acbf
 8008950:	00e4e1c0 	.word	0x00e4e1c0
 8008954:	00f42400 	.word	0x00f42400
 8008958:	01067380 	.word	0x01067380
 800895c:	011a499f 	.word	0x011a499f
 8008960:	01312cff 	.word	0x01312cff
 8008964:	014ca43f 	.word	0x014ca43f
 8008968:	016e3600 	.word	0x016e3600
 800896c:	01a6ab1f 	.word	0x01a6ab1f
 8008970:	01e84800 	.word	0x01e84800

08008974 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f043 0201 	orr.w	r2, r3, #1
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008996:	b480      	push	{r7}
 8008998:	b083      	sub	sp, #12
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f023 0201 	bic.w	r2, r3, #1
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80089c4:	2300      	movs	r3, #0
 80089c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80089d4:	78fb      	ldrb	r3, [r7, #3]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d115      	bne.n	8008a06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089e6:	2001      	movs	r0, #1
 80089e8:	f7f8 fe96 	bl	8001718 <HAL_Delay>
      ms++;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3301      	adds	r3, #1
 80089f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f001 f93f 	bl	8009c76 <USB_GetMode>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d01e      	beq.n	8008a3c <USB_SetCurrentMode+0x84>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b31      	cmp	r3, #49	; 0x31
 8008a02:	d9f0      	bls.n	80089e6 <USB_SetCurrentMode+0x2e>
 8008a04:	e01a      	b.n	8008a3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a06:	78fb      	ldrb	r3, [r7, #3]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d115      	bne.n	8008a38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a18:	2001      	movs	r0, #1
 8008a1a:	f7f8 fe7d 	bl	8001718 <HAL_Delay>
      ms++;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3301      	adds	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 f926 	bl	8009c76 <USB_GetMode>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <USB_SetCurrentMode+0x84>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2b31      	cmp	r3, #49	; 0x31
 8008a34:	d9f0      	bls.n	8008a18 <USB_SetCurrentMode+0x60>
 8008a36:	e001      	b.n	8008a3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e005      	b.n	8008a48 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2b32      	cmp	r3, #50	; 0x32
 8008a40:	d101      	bne.n	8008a46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e000      	b.n	8008a48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a50:	b084      	sub	sp, #16
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b086      	sub	sp, #24
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	613b      	str	r3, [r7, #16]
 8008a6e:	e009      	b.n	8008a84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	3340      	adds	r3, #64	; 0x40
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	3301      	adds	r3, #1
 8008a82:	613b      	str	r3, [r7, #16]
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	2b0e      	cmp	r3, #14
 8008a88:	d9f2      	bls.n	8008a70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d11c      	bne.n	8008aca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a9e:	f043 0302 	orr.w	r3, r3, #2
 8008aa2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	601a      	str	r2, [r3, #0]
 8008ac8:	e005      	b.n	8008ad6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ace:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008adc:	461a      	mov	r2, r3
 8008ade:	2300      	movs	r3, #0
 8008ae0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae8:	4619      	mov	r1, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af0:	461a      	mov	r2, r3
 8008af2:	680b      	ldr	r3, [r1, #0]
 8008af4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d10c      	bne.n	8008b16 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d104      	bne.n	8008b0c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008b02:	2100      	movs	r1, #0
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f965 	bl	8008dd4 <USB_SetDevSpeed>
 8008b0a:	e008      	b.n	8008b1e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f960 	bl	8008dd4 <USB_SetDevSpeed>
 8008b14:	e003      	b.n	8008b1e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b16:	2103      	movs	r1, #3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f95b 	bl	8008dd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b1e:	2110      	movs	r1, #16
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f8f3 	bl	8008d0c <USB_FlushTxFifo>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f91f 	bl	8008d74 <USB_FlushRxFifo>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b46:	461a      	mov	r2, r3
 8008b48:	2300      	movs	r3, #0
 8008b4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b52:	461a      	mov	r2, r3
 8008b54:	2300      	movs	r3, #0
 8008b56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5e:	461a      	mov	r2, r3
 8008b60:	2300      	movs	r3, #0
 8008b62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b64:	2300      	movs	r3, #0
 8008b66:	613b      	str	r3, [r7, #16]
 8008b68:	e043      	b.n	8008bf2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b80:	d118      	bne.n	8008bb4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10a      	bne.n	8008b9e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	015a      	lsls	r2, r3, #5
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b94:	461a      	mov	r2, r3
 8008b96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b9a:	6013      	str	r3, [r2, #0]
 8008b9c:	e013      	b.n	8008bc6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	015a      	lsls	r2, r3, #5
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008baa:	461a      	mov	r2, r3
 8008bac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008bb0:	6013      	str	r3, [r2, #0]
 8008bb2:	e008      	b.n	8008bc6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	015a      	lsls	r2, r3, #5
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be4:	461a      	mov	r2, r3
 8008be6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	613b      	str	r3, [r7, #16]
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d3b7      	bcc.n	8008b6a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	613b      	str	r3, [r7, #16]
 8008bfe:	e043      	b.n	8008c88 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c16:	d118      	bne.n	8008c4a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10a      	bne.n	8008c34 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	e013      	b.n	8008c5c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c40:	461a      	mov	r2, r3
 8008c42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	e008      	b.n	8008c5c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c56:	461a      	mov	r2, r3
 8008c58:	2300      	movs	r3, #0
 8008c5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c68:	461a      	mov	r2, r3
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	3301      	adds	r3, #1
 8008c86:	613b      	str	r3, [r7, #16]
 8008c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d3b7      	bcc.n	8008c00 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ca2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008cb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d105      	bne.n	8008cc4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	f043 0210 	orr.w	r2, r3, #16
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	699a      	ldr	r2, [r3, #24]
 8008cc8:	4b0e      	ldr	r3, [pc, #56]	; (8008d04 <USB_DevInit+0x2b4>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d005      	beq.n	8008ce2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	f043 0208 	orr.w	r2, r3, #8
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d105      	bne.n	8008cf4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	699a      	ldr	r2, [r3, #24]
 8008cec:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <USB_DevInit+0x2b8>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d00:	b004      	add	sp, #16
 8008d02:	4770      	bx	lr
 8008d04:	803c3800 	.word	0x803c3800
 8008d08:	40000004 	.word	0x40000004

08008d0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4a13      	ldr	r2, [pc, #76]	; (8008d70 <USB_FlushTxFifo+0x64>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d901      	bls.n	8008d2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e01b      	b.n	8008d64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	daf2      	bge.n	8008d1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	019b      	lsls	r3, r3, #6
 8008d3c:	f043 0220 	orr.w	r2, r3, #32
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	3301      	adds	r3, #1
 8008d48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	4a08      	ldr	r2, [pc, #32]	; (8008d70 <USB_FlushTxFifo+0x64>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d901      	bls.n	8008d56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e006      	b.n	8008d64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	f003 0320 	and.w	r3, r3, #32
 8008d5e:	2b20      	cmp	r3, #32
 8008d60:	d0f0      	beq.n	8008d44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	00030d40 	.word	0x00030d40

08008d74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	3301      	adds	r3, #1
 8008d84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	4a11      	ldr	r2, [pc, #68]	; (8008dd0 <USB_FlushRxFifo+0x5c>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d901      	bls.n	8008d92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e018      	b.n	8008dc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	daf2      	bge.n	8008d80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2210      	movs	r2, #16
 8008da2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	3301      	adds	r3, #1
 8008da8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	4a08      	ldr	r2, [pc, #32]	; (8008dd0 <USB_FlushRxFifo+0x5c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d901      	bls.n	8008db6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e006      	b.n	8008dc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	f003 0310 	and.w	r3, r3, #16
 8008dbe:	2b10      	cmp	r3, #16
 8008dc0:	d0f0      	beq.n	8008da4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	00030d40 	.word	0x00030d40

08008dd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	78fb      	ldrb	r3, [r7, #3]
 8008dee:	68f9      	ldr	r1, [r7, #12]
 8008df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008df4:	4313      	orrs	r3, r2
 8008df6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b087      	sub	sp, #28
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f003 0306 	and.w	r3, r3, #6
 8008e1e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d102      	bne.n	8008e2c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008e26:	2300      	movs	r3, #0
 8008e28:	75fb      	strb	r3, [r7, #23]
 8008e2a:	e00a      	b.n	8008e42 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d002      	beq.n	8008e38 <USB_GetDevSpeed+0x32>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b06      	cmp	r3, #6
 8008e36:	d102      	bne.n	8008e3e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008e38:	2302      	movs	r3, #2
 8008e3a:	75fb      	strb	r3, [r7, #23]
 8008e3c:	e001      	b.n	8008e42 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008e3e:	230f      	movs	r3, #15
 8008e40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	371c      	adds	r7, #28
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d139      	bne.n	8008ee0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e72:	69da      	ldr	r2, [r3, #28]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	f003 030f 	and.w	r3, r3, #15
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	68f9      	ldr	r1, [r7, #12]
 8008e86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	015a      	lsls	r2, r3, #5
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	4413      	add	r3, r2
 8008e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d153      	bne.n	8008f4c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	015a      	lsls	r2, r3, #5
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	791b      	ldrb	r3, [r3, #4]
 8008ebe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ec0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	059b      	lsls	r3, r3, #22
 8008ec6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ec8:	431a      	orrs	r2, r3
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	0159      	lsls	r1, r3, #5
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	440b      	add	r3, r1
 8008ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	4b20      	ldr	r3, [pc, #128]	; (8008f5c <USB_ActivateEndpoint+0x10c>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	600b      	str	r3, [r1, #0]
 8008ede:	e035      	b.n	8008f4c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee6:	69da      	ldr	r2, [r3, #28]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	f003 030f 	and.w	r3, r3, #15
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef6:	041b      	lsls	r3, r3, #16
 8008ef8:	68f9      	ldr	r1, [r7, #12]
 8008efa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008efe:	4313      	orrs	r3, r2
 8008f00:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d119      	bne.n	8008f4c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	791b      	ldrb	r3, [r3, #4]
 8008f32:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f34:	430b      	orrs	r3, r1
 8008f36:	431a      	orrs	r2, r3
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	0159      	lsls	r1, r3, #5
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	440b      	add	r3, r1
 8008f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f44:	4619      	mov	r1, r3
 8008f46:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <USB_ActivateEndpoint+0x10c>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3714      	adds	r7, #20
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	10008000 	.word	0x10008000

08008f60 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d161      	bne.n	8009040 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f92:	d11f      	bne.n	8008fd4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	0151      	lsls	r1, r2, #5
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	440a      	add	r2, r1
 8008faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fb2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	0151      	lsls	r1, r2, #5
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	440a      	add	r2, r1
 8008fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	f003 030f 	and.w	r3, r3, #15
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	43db      	mvns	r3, r3
 8008fee:	68f9      	ldr	r1, [r7, #12]
 8008ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffe:	69da      	ldr	r2, [r3, #28]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	f003 030f 	and.w	r3, r3, #15
 8009008:	2101      	movs	r1, #1
 800900a:	fa01 f303 	lsl.w	r3, r1, r3
 800900e:	b29b      	uxth	r3, r3
 8009010:	43db      	mvns	r3, r3
 8009012:	68f9      	ldr	r1, [r7, #12]
 8009014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009018:	4013      	ands	r3, r2
 800901a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	0159      	lsls	r1, r3, #5
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	440b      	add	r3, r1
 8009032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009036:	4619      	mov	r1, r3
 8009038:	4b35      	ldr	r3, [pc, #212]	; (8009110 <USB_DeactivateEndpoint+0x1b0>)
 800903a:	4013      	ands	r3, r2
 800903c:	600b      	str	r3, [r1, #0]
 800903e:	e060      	b.n	8009102 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4413      	add	r3, r2
 8009048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009056:	d11f      	bne.n	8009098 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4413      	add	r3, r2
 8009060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	0151      	lsls	r1, r2, #5
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	440a      	add	r2, r1
 800906e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009072:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009076:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	015a      	lsls	r2, r3, #5
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	4413      	add	r3, r2
 8009080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	0151      	lsls	r1, r2, #5
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	440a      	add	r2, r1
 800908e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009096:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	f003 030f 	and.w	r3, r3, #15
 80090a8:	2101      	movs	r1, #1
 80090aa:	fa01 f303 	lsl.w	r3, r1, r3
 80090ae:	041b      	lsls	r3, r3, #16
 80090b0:	43db      	mvns	r3, r3
 80090b2:	68f9      	ldr	r1, [r7, #12]
 80090b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090b8:	4013      	ands	r3, r2
 80090ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c2:	69da      	ldr	r2, [r3, #28]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	f003 030f 	and.w	r3, r3, #15
 80090cc:	2101      	movs	r1, #1
 80090ce:	fa01 f303 	lsl.w	r3, r1, r3
 80090d2:	041b      	lsls	r3, r3, #16
 80090d4:	43db      	mvns	r3, r3
 80090d6:	68f9      	ldr	r1, [r7, #12]
 80090d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090dc:	4013      	ands	r3, r2
 80090de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	0159      	lsls	r1, r3, #5
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	440b      	add	r3, r1
 80090f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fa:	4619      	mov	r1, r3
 80090fc:	4b05      	ldr	r3, [pc, #20]	; (8009114 <USB_DeactivateEndpoint+0x1b4>)
 80090fe:	4013      	ands	r3, r2
 8009100:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	ec337800 	.word	0xec337800
 8009114:	eff37800 	.word	0xeff37800

08009118 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b08a      	sub	sp, #40	; 0x28
 800911c:	af02      	add	r7, sp, #8
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	4613      	mov	r3, r2
 8009124:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	785b      	ldrb	r3, [r3, #1]
 8009134:	2b01      	cmp	r3, #1
 8009136:	f040 8181 	bne.w	800943c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d132      	bne.n	80091a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	4413      	add	r3, r2
 800914a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800914e:	691a      	ldr	r2, [r3, #16]
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	0159      	lsls	r1, r3, #5
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	440b      	add	r3, r1
 8009158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800915c:	4619      	mov	r1, r3
 800915e:	4ba5      	ldr	r3, [pc, #660]	; (80093f4 <USB_EPStartXfer+0x2dc>)
 8009160:	4013      	ands	r3, r2
 8009162:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	69ba      	ldr	r2, [r7, #24]
 8009174:	0151      	lsls	r1, r2, #5
 8009176:	69fa      	ldr	r2, [r7, #28]
 8009178:	440a      	add	r2, r1
 800917a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800917e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009182:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009190:	691a      	ldr	r2, [r3, #16]
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	0159      	lsls	r1, r3, #5
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	440b      	add	r3, r1
 800919a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919e:	4619      	mov	r1, r3
 80091a0:	4b95      	ldr	r3, [pc, #596]	; (80093f8 <USB_EPStartXfer+0x2e0>)
 80091a2:	4013      	ands	r3, r2
 80091a4:	610b      	str	r3, [r1, #16]
 80091a6:	e092      	b.n	80092ce <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b4:	691a      	ldr	r2, [r3, #16]
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	0159      	lsls	r1, r3, #5
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	440b      	add	r3, r1
 80091be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c2:	4619      	mov	r1, r3
 80091c4:	4b8c      	ldr	r3, [pc, #560]	; (80093f8 <USB_EPStartXfer+0x2e0>)
 80091c6:	4013      	ands	r3, r2
 80091c8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d6:	691a      	ldr	r2, [r3, #16]
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	0159      	lsls	r1, r3, #5
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	440b      	add	r3, r1
 80091e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e4:	4619      	mov	r1, r3
 80091e6:	4b83      	ldr	r3, [pc, #524]	; (80093f4 <USB_EPStartXfer+0x2dc>)
 80091e8:	4013      	ands	r3, r2
 80091ea:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d11a      	bne.n	8009228 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	691a      	ldr	r2, [r3, #16]
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d903      	bls.n	8009206 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	689a      	ldr	r2, [r3, #8]
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	4413      	add	r3, r2
 800920e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	0151      	lsls	r1, r2, #5
 8009218:	69fa      	ldr	r2, [r7, #28]
 800921a:	440a      	add	r2, r1
 800921c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009220:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009224:	6113      	str	r3, [r2, #16]
 8009226:	e01b      	b.n	8009260 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009234:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	6919      	ldr	r1, [r3, #16]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	440b      	add	r3, r1
 8009240:	1e59      	subs	r1, r3, #1
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	fbb1 f3f3 	udiv	r3, r1, r3
 800924a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800924c:	4b6b      	ldr	r3, [pc, #428]	; (80093fc <USB_EPStartXfer+0x2e4>)
 800924e:	400b      	ands	r3, r1
 8009250:	69b9      	ldr	r1, [r7, #24]
 8009252:	0148      	lsls	r0, r1, #5
 8009254:	69f9      	ldr	r1, [r7, #28]
 8009256:	4401      	add	r1, r0
 8009258:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800925c:	4313      	orrs	r3, r2
 800925e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926c:	691a      	ldr	r2, [r3, #16]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009276:	69b9      	ldr	r1, [r7, #24]
 8009278:	0148      	lsls	r0, r1, #5
 800927a:	69f9      	ldr	r1, [r7, #28]
 800927c:	4401      	add	r1, r0
 800927e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009282:	4313      	orrs	r3, r2
 8009284:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	791b      	ldrb	r3, [r3, #4]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d11f      	bne.n	80092ce <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	015a      	lsls	r2, r3, #5
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	4413      	add	r3, r2
 8009296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	69ba      	ldr	r2, [r7, #24]
 800929e:	0151      	lsls	r1, r2, #5
 80092a0:	69fa      	ldr	r2, [r7, #28]
 80092a2:	440a      	add	r2, r1
 80092a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80092ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	015a      	lsls	r2, r3, #5
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	4413      	add	r3, r2
 80092b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	69ba      	ldr	r2, [r7, #24]
 80092be:	0151      	lsls	r1, r2, #5
 80092c0:	69fa      	ldr	r2, [r7, #28]
 80092c2:	440a      	add	r2, r1
 80092c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80092ce:	79fb      	ldrb	r3, [r7, #7]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d14b      	bne.n	800936c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d009      	beq.n	80092f0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e8:	461a      	mov	r2, r3
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	791b      	ldrb	r3, [r3, #4]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d128      	bne.n	800934a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009304:	2b00      	cmp	r3, #0
 8009306:	d110      	bne.n	800932a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	69ba      	ldr	r2, [r7, #24]
 8009318:	0151      	lsls	r1, r2, #5
 800931a:	69fa      	ldr	r2, [r7, #28]
 800931c:	440a      	add	r2, r1
 800931e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009322:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009326:	6013      	str	r3, [r2, #0]
 8009328:	e00f      	b.n	800934a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	015a      	lsls	r2, r3, #5
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	4413      	add	r3, r2
 8009332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	69ba      	ldr	r2, [r7, #24]
 800933a:	0151      	lsls	r1, r2, #5
 800933c:	69fa      	ldr	r2, [r7, #28]
 800933e:	440a      	add	r2, r1
 8009340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009348:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	4413      	add	r3, r2
 8009352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	69ba      	ldr	r2, [r7, #24]
 800935a:	0151      	lsls	r1, r2, #5
 800935c:	69fa      	ldr	r2, [r7, #28]
 800935e:	440a      	add	r2, r1
 8009360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009364:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009368:	6013      	str	r3, [r2, #0]
 800936a:	e16a      	b.n	8009642 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	4413      	add	r3, r2
 8009374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	0151      	lsls	r1, r2, #5
 800937e:	69fa      	ldr	r2, [r7, #28]
 8009380:	440a      	add	r2, r1
 8009382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009386:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800938a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	791b      	ldrb	r3, [r3, #4]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d015      	beq.n	80093c0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 8152 	beq.w	8009642 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	f003 030f 	and.w	r3, r3, #15
 80093ae:	2101      	movs	r1, #1
 80093b0:	fa01 f303 	lsl.w	r3, r1, r3
 80093b4:	69f9      	ldr	r1, [r7, #28]
 80093b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093ba:	4313      	orrs	r3, r2
 80093bc:	634b      	str	r3, [r1, #52]	; 0x34
 80093be:	e140      	b.n	8009642 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d117      	bne.n	8009400 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	0151      	lsls	r1, r2, #5
 80093e2:	69fa      	ldr	r2, [r7, #28]
 80093e4:	440a      	add	r2, r1
 80093e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093ee:	6013      	str	r3, [r2, #0]
 80093f0:	e016      	b.n	8009420 <USB_EPStartXfer+0x308>
 80093f2:	bf00      	nop
 80093f4:	e007ffff 	.word	0xe007ffff
 80093f8:	fff80000 	.word	0xfff80000
 80093fc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	015a      	lsls	r2, r3, #5
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	4413      	add	r3, r2
 8009408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	69ba      	ldr	r2, [r7, #24]
 8009410:	0151      	lsls	r1, r2, #5
 8009412:	69fa      	ldr	r2, [r7, #28]
 8009414:	440a      	add	r2, r1
 8009416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800941a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800941e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	68d9      	ldr	r1, [r3, #12]
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	781a      	ldrb	r2, [r3, #0]
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	b298      	uxth	r0, r3
 800942e:	79fb      	ldrb	r3, [r7, #7]
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	4603      	mov	r3, r0
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f9b9 	bl	80097ac <USB_WritePacket>
 800943a:	e102      	b.n	8009642 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009448:	691a      	ldr	r2, [r3, #16]
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	0159      	lsls	r1, r3, #5
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	440b      	add	r3, r1
 8009452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009456:	4619      	mov	r1, r3
 8009458:	4b7c      	ldr	r3, [pc, #496]	; (800964c <USB_EPStartXfer+0x534>)
 800945a:	4013      	ands	r3, r2
 800945c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	4413      	add	r3, r2
 8009466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946a:	691a      	ldr	r2, [r3, #16]
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	0159      	lsls	r1, r3, #5
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	440b      	add	r3, r1
 8009474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009478:	4619      	mov	r1, r3
 800947a:	4b75      	ldr	r3, [pc, #468]	; (8009650 <USB_EPStartXfer+0x538>)
 800947c:	4013      	ands	r3, r2
 800947e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d12f      	bne.n	80094e6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d003      	beq.n	8009496 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	689a      	ldr	r2, [r3, #8]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	689a      	ldr	r2, [r3, #8]
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094aa:	691a      	ldr	r2, [r3, #16]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094b4:	69b9      	ldr	r1, [r7, #24]
 80094b6:	0148      	lsls	r0, r1, #5
 80094b8:	69f9      	ldr	r1, [r7, #28]
 80094ba:	4401      	add	r1, r0
 80094bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094c0:	4313      	orrs	r3, r2
 80094c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	015a      	lsls	r2, r3, #5
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	4413      	add	r3, r2
 80094cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	69ba      	ldr	r2, [r7, #24]
 80094d4:	0151      	lsls	r1, r2, #5
 80094d6:	69fa      	ldr	r2, [r7, #28]
 80094d8:	440a      	add	r2, r1
 80094da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094e2:	6113      	str	r3, [r2, #16]
 80094e4:	e05f      	b.n	80095a6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d123      	bne.n	8009536 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	015a      	lsls	r2, r3, #5
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	4413      	add	r3, r2
 80094f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094fa:	691a      	ldr	r2, [r3, #16]
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009504:	69b9      	ldr	r1, [r7, #24]
 8009506:	0148      	lsls	r0, r1, #5
 8009508:	69f9      	ldr	r1, [r7, #28]
 800950a:	4401      	add	r1, r0
 800950c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009510:	4313      	orrs	r3, r2
 8009512:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	0151      	lsls	r1, r2, #5
 8009526:	69fa      	ldr	r2, [r7, #28]
 8009528:	440a      	add	r2, r1
 800952a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800952e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009532:	6113      	str	r3, [r2, #16]
 8009534:	e037      	b.n	80095a6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	691a      	ldr	r2, [r3, #16]
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	4413      	add	r3, r2
 8009540:	1e5a      	subs	r2, r3, #1
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	fbb2 f3f3 	udiv	r3, r2, r3
 800954a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	8afa      	ldrh	r2, [r7, #22]
 8009552:	fb03 f202 	mul.w	r2, r3, r2
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	4413      	add	r3, r2
 8009562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009566:	691a      	ldr	r2, [r3, #16]
 8009568:	8afb      	ldrh	r3, [r7, #22]
 800956a:	04d9      	lsls	r1, r3, #19
 800956c:	4b39      	ldr	r3, [pc, #228]	; (8009654 <USB_EPStartXfer+0x53c>)
 800956e:	400b      	ands	r3, r1
 8009570:	69b9      	ldr	r1, [r7, #24]
 8009572:	0148      	lsls	r0, r1, #5
 8009574:	69f9      	ldr	r1, [r7, #28]
 8009576:	4401      	add	r1, r0
 8009578:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800957c:	4313      	orrs	r3, r2
 800957e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	015a      	lsls	r2, r3, #5
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	4413      	add	r3, r2
 8009588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800958c:	691a      	ldr	r2, [r3, #16]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009596:	69b9      	ldr	r1, [r7, #24]
 8009598:	0148      	lsls	r0, r1, #5
 800959a:	69f9      	ldr	r1, [r7, #28]
 800959c:	4401      	add	r1, r0
 800959e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80095a2:	4313      	orrs	r3, r2
 80095a4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80095a6:	79fb      	ldrb	r3, [r7, #7]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d10d      	bne.n	80095c8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d009      	beq.n	80095c8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	68d9      	ldr	r1, [r3, #12]
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	015a      	lsls	r2, r3, #5
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	4413      	add	r3, r2
 80095c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c4:	460a      	mov	r2, r1
 80095c6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	791b      	ldrb	r3, [r3, #4]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d128      	bne.n	8009622 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d110      	bne.n	8009602 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	0151      	lsls	r1, r2, #5
 80095f2:	69fa      	ldr	r2, [r7, #28]
 80095f4:	440a      	add	r2, r1
 80095f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095fe:	6013      	str	r3, [r2, #0]
 8009600:	e00f      	b.n	8009622 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	015a      	lsls	r2, r3, #5
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	4413      	add	r3, r2
 800960a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	69ba      	ldr	r2, [r7, #24]
 8009612:	0151      	lsls	r1, r2, #5
 8009614:	69fa      	ldr	r2, [r7, #28]
 8009616:	440a      	add	r2, r1
 8009618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800961c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009620:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	4413      	add	r3, r2
 800962a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	69ba      	ldr	r2, [r7, #24]
 8009632:	0151      	lsls	r1, r2, #5
 8009634:	69fa      	ldr	r2, [r7, #28]
 8009636:	440a      	add	r2, r1
 8009638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800963c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009640:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3720      	adds	r7, #32
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	fff80000 	.word	0xfff80000
 8009650:	e007ffff 	.word	0xe007ffff
 8009654:	1ff80000 	.word	0x1ff80000

08009658 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009658:	b480      	push	{r7}
 800965a:	b087      	sub	sp, #28
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009662:	2300      	movs	r3, #0
 8009664:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	785b      	ldrb	r3, [r3, #1]
 8009672:	2b01      	cmp	r3, #1
 8009674:	d14a      	bne.n	800970c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	015a      	lsls	r2, r3, #5
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	4413      	add	r3, r2
 8009680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800968a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800968e:	f040 8086 	bne.w	800979e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	015a      	lsls	r2, r3, #5
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	4413      	add	r3, r2
 800969c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	683a      	ldr	r2, [r7, #0]
 80096a4:	7812      	ldrb	r2, [r2, #0]
 80096a6:	0151      	lsls	r1, r2, #5
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	440a      	add	r2, r1
 80096ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80096b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	7812      	ldrb	r2, [r2, #0]
 80096ca:	0151      	lsls	r1, r2, #5
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	440a      	add	r2, r1
 80096d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	3301      	adds	r3, #1
 80096de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d902      	bls.n	80096f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	75fb      	strb	r3, [r7, #23]
          break;
 80096ee:	e056      	b.n	800979e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009708:	d0e7      	beq.n	80096da <USB_EPStopXfer+0x82>
 800970a:	e048      	b.n	800979e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009724:	d13b      	bne.n	800979e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	4413      	add	r3, r2
 8009730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	7812      	ldrb	r2, [r2, #0]
 800973a:	0151      	lsls	r1, r2, #5
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	440a      	add	r2, r1
 8009740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009744:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009748:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	7812      	ldrb	r2, [r2, #0]
 800975e:	0151      	lsls	r1, r2, #5
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	440a      	add	r2, r1
 8009764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800976c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	3301      	adds	r3, #1
 8009772:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f242 7210 	movw	r2, #10000	; 0x2710
 800977a:	4293      	cmp	r3, r2
 800977c:	d902      	bls.n	8009784 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	75fb      	strb	r3, [r7, #23]
          break;
 8009782:	e00c      	b.n	800979e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	015a      	lsls	r2, r3, #5
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	4413      	add	r3, r2
 800978e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800979c:	d0e7      	beq.n	800976e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800979e:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	371c      	adds	r7, #28
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b089      	sub	sp, #36	; 0x24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	4611      	mov	r1, r2
 80097b8:	461a      	mov	r2, r3
 80097ba:	460b      	mov	r3, r1
 80097bc:	71fb      	strb	r3, [r7, #7]
 80097be:	4613      	mov	r3, r2
 80097c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80097ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d123      	bne.n	800981a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80097d2:	88bb      	ldrh	r3, [r7, #4]
 80097d4:	3303      	adds	r3, #3
 80097d6:	089b      	lsrs	r3, r3, #2
 80097d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80097da:	2300      	movs	r3, #0
 80097dc:	61bb      	str	r3, [r7, #24]
 80097de:	e018      	b.n	8009812 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80097e0:	79fb      	ldrb	r3, [r7, #7]
 80097e2:	031a      	lsls	r2, r3, #12
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ec:	461a      	mov	r2, r3
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	3301      	adds	r3, #1
 80097f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	3301      	adds	r3, #1
 80097fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	3301      	adds	r3, #1
 8009804:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	3301      	adds	r3, #1
 800980a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	3301      	adds	r3, #1
 8009810:	61bb      	str	r3, [r7, #24]
 8009812:	69ba      	ldr	r2, [r7, #24]
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	429a      	cmp	r2, r3
 8009818:	d3e2      	bcc.n	80097e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3724      	adds	r7, #36	; 0x24
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009828:	b480      	push	{r7}
 800982a:	b08b      	sub	sp, #44	; 0x2c
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	4613      	mov	r3, r2
 8009834:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800983e:	88fb      	ldrh	r3, [r7, #6]
 8009840:	089b      	lsrs	r3, r3, #2
 8009842:	b29b      	uxth	r3, r3
 8009844:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009846:	88fb      	ldrh	r3, [r7, #6]
 8009848:	f003 0303 	and.w	r3, r3, #3
 800984c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800984e:	2300      	movs	r3, #0
 8009850:	623b      	str	r3, [r7, #32]
 8009852:	e014      	b.n	800987e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	3301      	adds	r3, #1
 8009864:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	3301      	adds	r3, #1
 800986a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800986c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986e:	3301      	adds	r3, #1
 8009870:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	3301      	adds	r3, #1
 8009876:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	3301      	adds	r3, #1
 800987c:	623b      	str	r3, [r7, #32]
 800987e:	6a3a      	ldr	r2, [r7, #32]
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	429a      	cmp	r2, r3
 8009884:	d3e6      	bcc.n	8009854 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009886:	8bfb      	ldrh	r3, [r7, #30]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d01e      	beq.n	80098ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800988c:	2300      	movs	r3, #0
 800988e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009896:	461a      	mov	r2, r3
 8009898:	f107 0310 	add.w	r3, r7, #16
 800989c:	6812      	ldr	r2, [r2, #0]
 800989e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	fa22 f303 	lsr.w	r3, r2, r3
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	701a      	strb	r2, [r3, #0]
      i++;
 80098b2:	6a3b      	ldr	r3, [r7, #32]
 80098b4:	3301      	adds	r3, #1
 80098b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	3301      	adds	r3, #1
 80098bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80098be:	8bfb      	ldrh	r3, [r7, #30]
 80098c0:	3b01      	subs	r3, #1
 80098c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80098c4:	8bfb      	ldrh	r3, [r7, #30]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1ea      	bne.n	80098a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	372c      	adds	r7, #44	; 0x2c
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	785b      	ldrb	r3, [r3, #1]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d12c      	bne.n	800994e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	015a      	lsls	r2, r3, #5
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	4413      	add	r3, r2
 80098fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	db12      	blt.n	800992c <USB_EPSetStall+0x54>
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00f      	beq.n	800992c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4413      	add	r3, r2
 8009914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	0151      	lsls	r1, r2, #5
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	440a      	add	r2, r1
 8009922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009926:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800992a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	015a      	lsls	r2, r3, #5
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4413      	add	r3, r2
 8009934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	0151      	lsls	r1, r2, #5
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	440a      	add	r2, r1
 8009942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009946:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800994a:	6013      	str	r3, [r2, #0]
 800994c:	e02b      	b.n	80099a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	015a      	lsls	r2, r3, #5
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	4413      	add	r3, r2
 8009956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	db12      	blt.n	8009986 <USB_EPSetStall+0xae>
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00f      	beq.n	8009986 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	4413      	add	r3, r2
 800996e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	0151      	lsls	r1, r2, #5
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	440a      	add	r2, r1
 800997c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009980:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009984:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4413      	add	r3, r2
 800998e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	0151      	lsls	r1, r2, #5
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	440a      	add	r2, r1
 800999c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80099a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	785b      	ldrb	r3, [r3, #1]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d128      	bne.n	8009a22 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	0151      	lsls	r1, r2, #5
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	440a      	add	r2, r1
 80099e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	791b      	ldrb	r3, [r3, #4]
 80099f4:	2b03      	cmp	r3, #3
 80099f6:	d003      	beq.n	8009a00 <USB_EPClearStall+0x4c>
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	791b      	ldrb	r3, [r3, #4]
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d138      	bne.n	8009a72 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	0151      	lsls	r1, r2, #5
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	440a      	add	r2, r1
 8009a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	e027      	b.n	8009a72 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	015a      	lsls	r2, r3, #5
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	0151      	lsls	r1, r2, #5
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	440a      	add	r2, r1
 8009a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	791b      	ldrb	r3, [r3, #4]
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d003      	beq.n	8009a52 <USB_EPClearStall+0x9e>
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	791b      	ldrb	r3, [r3, #4]
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d10f      	bne.n	8009a72 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	0151      	lsls	r1, r2, #5
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	440a      	add	r2, r1
 8009a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a70:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009aa2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	78fb      	ldrb	r3, [r7, #3]
 8009aae:	011b      	lsls	r3, r3, #4
 8009ab0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009ab4:	68f9      	ldr	r1, [r7, #12]
 8009ab6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009aba:	4313      	orrs	r3, r2
 8009abc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ae6:	f023 0303 	bic.w	r3, r3, #3
 8009aea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009afa:	f023 0302 	bic.w	r3, r3, #2
 8009afe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3714      	adds	r7, #20
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b085      	sub	sp, #20
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b28:	f023 0303 	bic.w	r3, r3, #3
 8009b2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b3c:	f043 0302 	orr.w	r3, r3, #2
 8009b40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	695b      	ldr	r3, [r3, #20]
 8009b5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	4013      	ands	r3, r2
 8009b66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009b68:	68fb      	ldr	r3, [r7, #12]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b76:	b480      	push	{r7}
 8009b78:	b085      	sub	sp, #20
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b92:	69db      	ldr	r3, [r3, #28]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	4013      	ands	r3, r2
 8009b98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	0c1b      	lsrs	r3, r3, #16
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009baa:	b480      	push	{r7}
 8009bac:	b085      	sub	sp, #20
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	4013      	ands	r3, r2
 8009bcc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	b29b      	uxth	r3, r3
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009bde:	b480      	push	{r7}
 8009be0:	b085      	sub	sp, #20
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	460b      	mov	r3, r1
 8009be8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009bee:	78fb      	ldrb	r3, [r7, #3]
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	4013      	ands	r3, r2
 8009c0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009c0c:	68bb      	ldr	r3, [r7, #8]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b087      	sub	sp, #28
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	460b      	mov	r3, r1
 8009c24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c3c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009c3e:	78fb      	ldrb	r3, [r7, #3]
 8009c40:	f003 030f 	and.w	r3, r3, #15
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	fa22 f303 	lsr.w	r3, r2, r3
 8009c4a:	01db      	lsls	r3, r3, #7
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009c54:	78fb      	ldrb	r3, [r7, #3]
 8009c56:	015a      	lsls	r2, r3, #5
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	4013      	ands	r3, r2
 8009c66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009c68:	68bb      	ldr	r3, [r7, #8]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	371c      	adds	r7, #28
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009c76:	b480      	push	{r7}
 8009c78:	b083      	sub	sp, #12
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	f003 0301 	and.w	r3, r3, #1
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	370c      	adds	r7, #12
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
	...

08009c94 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cae:	4619      	mov	r1, r3
 8009cb0:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <USB_ActivateSetup+0x44>)
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3714      	adds	r7, #20
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	fffff800 	.word	0xfffff800

08009cdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b087      	sub	sp, #28
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	607a      	str	r2, [r7, #4]
 8009ce8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	333c      	adds	r3, #60	; 0x3c
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	4a26      	ldr	r2, [pc, #152]	; (8009d94 <USB_EP0_OutStart+0xb8>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d90a      	bls.n	8009d16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d10:	d101      	bne.n	8009d16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	e037      	b.n	8009d86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	2300      	movs	r3, #0
 8009d20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	697a      	ldr	r2, [r7, #20]
 8009d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d44:	f043 0318 	orr.w	r3, r3, #24
 8009d48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009d5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009d5e:	7afb      	ldrb	r3, [r7, #11]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d10f      	bne.n	8009d84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	371c      	adds	r7, #28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	4f54300a 	.word	0x4f54300a

08009d98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	3301      	adds	r3, #1
 8009da8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	4a13      	ldr	r2, [pc, #76]	; (8009dfc <USB_CoreReset+0x64>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d901      	bls.n	8009db6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009db2:	2303      	movs	r3, #3
 8009db4:	e01b      	b.n	8009dee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	daf2      	bge.n	8009da4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	f043 0201 	orr.w	r2, r3, #1
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	4a09      	ldr	r2, [pc, #36]	; (8009dfc <USB_CoreReset+0x64>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d901      	bls.n	8009de0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e006      	b.n	8009dee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d0f0      	beq.n	8009dce <USB_CoreReset+0x36>

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	00030d40 	.word	0x00030d40

08009e00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009e0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009e10:	f002 fc8e 	bl	800c730 <USBD_static_malloc>
 8009e14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d109      	bne.n	8009e30 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	32b0      	adds	r2, #176	; 0xb0
 8009e26:	2100      	movs	r1, #0
 8009e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	e0d4      	b.n	8009fda <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009e30:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009e34:	2100      	movs	r1, #0
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	f002 fcbe 	bl	800c7b8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	32b0      	adds	r2, #176	; 0xb0
 8009e46:	68f9      	ldr	r1, [r7, #12]
 8009e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	32b0      	adds	r2, #176	; 0xb0
 8009e56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	7c1b      	ldrb	r3, [r3, #16]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d138      	bne.n	8009eda <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009e68:	4b5e      	ldr	r3, [pc, #376]	; (8009fe4 <USBD_CDC_Init+0x1e4>)
 8009e6a:	7819      	ldrb	r1, [r3, #0]
 8009e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e70:	2202      	movs	r2, #2
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f002 fb39 	bl	800c4ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009e78:	4b5a      	ldr	r3, [pc, #360]	; (8009fe4 <USBD_CDC_Init+0x1e4>)
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	f003 020f 	and.w	r2, r3, #15
 8009e80:	6879      	ldr	r1, [r7, #4]
 8009e82:	4613      	mov	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	440b      	add	r3, r1
 8009e8c:	3324      	adds	r3, #36	; 0x24
 8009e8e:	2201      	movs	r2, #1
 8009e90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009e92:	4b55      	ldr	r3, [pc, #340]	; (8009fe8 <USBD_CDC_Init+0x1e8>)
 8009e94:	7819      	ldrb	r1, [r3, #0]
 8009e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e9a:	2202      	movs	r2, #2
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f002 fb24 	bl	800c4ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009ea2:	4b51      	ldr	r3, [pc, #324]	; (8009fe8 <USBD_CDC_Init+0x1e8>)
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	f003 020f 	and.w	r2, r3, #15
 8009eaa:	6879      	ldr	r1, [r7, #4]
 8009eac:	4613      	mov	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	440b      	add	r3, r1
 8009eb6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009eba:	2201      	movs	r2, #1
 8009ebc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009ebe:	4b4b      	ldr	r3, [pc, #300]	; (8009fec <USBD_CDC_Init+0x1ec>)
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	f003 020f 	and.w	r2, r3, #15
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4413      	add	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	440b      	add	r3, r1
 8009ed2:	3326      	adds	r3, #38	; 0x26
 8009ed4:	2210      	movs	r2, #16
 8009ed6:	801a      	strh	r2, [r3, #0]
 8009ed8:	e035      	b.n	8009f46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009eda:	4b42      	ldr	r3, [pc, #264]	; (8009fe4 <USBD_CDC_Init+0x1e4>)
 8009edc:	7819      	ldrb	r1, [r3, #0]
 8009ede:	2340      	movs	r3, #64	; 0x40
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f002 fb01 	bl	800c4ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009ee8:	4b3e      	ldr	r3, [pc, #248]	; (8009fe4 <USBD_CDC_Init+0x1e4>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	f003 020f 	and.w	r2, r3, #15
 8009ef0:	6879      	ldr	r1, [r7, #4]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	440b      	add	r3, r1
 8009efc:	3324      	adds	r3, #36	; 0x24
 8009efe:	2201      	movs	r2, #1
 8009f00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009f02:	4b39      	ldr	r3, [pc, #228]	; (8009fe8 <USBD_CDC_Init+0x1e8>)
 8009f04:	7819      	ldrb	r1, [r3, #0]
 8009f06:	2340      	movs	r3, #64	; 0x40
 8009f08:	2202      	movs	r2, #2
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f002 faed 	bl	800c4ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009f10:	4b35      	ldr	r3, [pc, #212]	; (8009fe8 <USBD_CDC_Init+0x1e8>)
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	f003 020f 	and.w	r2, r3, #15
 8009f18:	6879      	ldr	r1, [r7, #4]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4413      	add	r3, r2
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	440b      	add	r3, r1
 8009f24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f28:	2201      	movs	r2, #1
 8009f2a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009f2c:	4b2f      	ldr	r3, [pc, #188]	; (8009fec <USBD_CDC_Init+0x1ec>)
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	f003 020f 	and.w	r2, r3, #15
 8009f34:	6879      	ldr	r1, [r7, #4]
 8009f36:	4613      	mov	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	440b      	add	r3, r1
 8009f40:	3326      	adds	r3, #38	; 0x26
 8009f42:	2210      	movs	r2, #16
 8009f44:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009f46:	4b29      	ldr	r3, [pc, #164]	; (8009fec <USBD_CDC_Init+0x1ec>)
 8009f48:	7819      	ldrb	r1, [r3, #0]
 8009f4a:	2308      	movs	r3, #8
 8009f4c:	2203      	movs	r2, #3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f002 facb 	bl	800c4ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009f54:	4b25      	ldr	r3, [pc, #148]	; (8009fec <USBD_CDC_Init+0x1ec>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	f003 020f 	and.w	r2, r3, #15
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	440b      	add	r3, r1
 8009f68:	3324      	adds	r3, #36	; 0x24
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	33b0      	adds	r3, #176	; 0xb0
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d101      	bne.n	8009fa8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	e018      	b.n	8009fda <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	7c1b      	ldrb	r3, [r3, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10a      	bne.n	8009fc6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009fb0:	4b0d      	ldr	r3, [pc, #52]	; (8009fe8 <USBD_CDC_Init+0x1e8>)
 8009fb2:	7819      	ldrb	r1, [r3, #0]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f002 fb82 	bl	800c6c8 <USBD_LL_PrepareReceive>
 8009fc4:	e008      	b.n	8009fd8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009fc6:	4b08      	ldr	r3, [pc, #32]	; (8009fe8 <USBD_CDC_Init+0x1e8>)
 8009fc8:	7819      	ldrb	r1, [r3, #0]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fd0:	2340      	movs	r3, #64	; 0x40
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f002 fb78 	bl	800c6c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	24000097 	.word	0x24000097
 8009fe8:	24000098 	.word	0x24000098
 8009fec:	24000099 	.word	0x24000099

08009ff0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009ffc:	4b3a      	ldr	r3, [pc, #232]	; (800a0e8 <USBD_CDC_DeInit+0xf8>)
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	4619      	mov	r1, r3
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f002 fa97 	bl	800c536 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a008:	4b37      	ldr	r3, [pc, #220]	; (800a0e8 <USBD_CDC_DeInit+0xf8>)
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	f003 020f 	and.w	r2, r3, #15
 800a010:	6879      	ldr	r1, [r7, #4]
 800a012:	4613      	mov	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	440b      	add	r3, r1
 800a01c:	3324      	adds	r3, #36	; 0x24
 800a01e:	2200      	movs	r2, #0
 800a020:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a022:	4b32      	ldr	r3, [pc, #200]	; (800a0ec <USBD_CDC_DeInit+0xfc>)
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	4619      	mov	r1, r3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f002 fa84 	bl	800c536 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a02e:	4b2f      	ldr	r3, [pc, #188]	; (800a0ec <USBD_CDC_DeInit+0xfc>)
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	f003 020f 	and.w	r2, r3, #15
 800a036:	6879      	ldr	r1, [r7, #4]
 800a038:	4613      	mov	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	440b      	add	r3, r1
 800a042:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a046:	2200      	movs	r2, #0
 800a048:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a04a:	4b29      	ldr	r3, [pc, #164]	; (800a0f0 <USBD_CDC_DeInit+0x100>)
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f002 fa70 	bl	800c536 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a056:	4b26      	ldr	r3, [pc, #152]	; (800a0f0 <USBD_CDC_DeInit+0x100>)
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	f003 020f 	and.w	r2, r3, #15
 800a05e:	6879      	ldr	r1, [r7, #4]
 800a060:	4613      	mov	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	440b      	add	r3, r1
 800a06a:	3324      	adds	r3, #36	; 0x24
 800a06c:	2200      	movs	r2, #0
 800a06e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a070:	4b1f      	ldr	r3, [pc, #124]	; (800a0f0 <USBD_CDC_DeInit+0x100>)
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	f003 020f 	and.w	r2, r3, #15
 800a078:	6879      	ldr	r1, [r7, #4]
 800a07a:	4613      	mov	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4413      	add	r3, r2
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	440b      	add	r3, r1
 800a084:	3326      	adds	r3, #38	; 0x26
 800a086:	2200      	movs	r2, #0
 800a088:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	32b0      	adds	r2, #176	; 0xb0
 800a094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d01f      	beq.n	800a0dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	33b0      	adds	r3, #176	; 0xb0
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4413      	add	r3, r2
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	32b0      	adds	r2, #176	; 0xb0
 800a0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f002 fb44 	bl	800c74c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	32b0      	adds	r2, #176	; 0xb0
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	24000097 	.word	0x24000097
 800a0ec:	24000098 	.word	0x24000098
 800a0f0:	24000099 	.word	0x24000099

0800a0f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	32b0      	adds	r2, #176	; 0xb0
 800a108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a10c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a116:	2300      	movs	r3, #0
 800a118:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a120:	2303      	movs	r3, #3
 800a122:	e0bf      	b.n	800a2a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d050      	beq.n	800a1d2 <USBD_CDC_Setup+0xde>
 800a130:	2b20      	cmp	r3, #32
 800a132:	f040 80af 	bne.w	800a294 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	88db      	ldrh	r3, [r3, #6]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d03a      	beq.n	800a1b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	b25b      	sxtb	r3, r3
 800a144:	2b00      	cmp	r3, #0
 800a146:	da1b      	bge.n	800a180 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	33b0      	adds	r3, #176	; 0xb0
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a15e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	88d2      	ldrh	r2, [r2, #6]
 800a164:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	88db      	ldrh	r3, [r3, #6]
 800a16a:	2b07      	cmp	r3, #7
 800a16c:	bf28      	it	cs
 800a16e:	2307      	movcs	r3, #7
 800a170:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	89fa      	ldrh	r2, [r7, #14]
 800a176:	4619      	mov	r1, r3
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f001 fd73 	bl	800bc64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a17e:	e090      	b.n	800a2a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	785a      	ldrb	r2, [r3, #1]
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	88db      	ldrh	r3, [r3, #6]
 800a18e:	2b3f      	cmp	r3, #63	; 0x3f
 800a190:	d803      	bhi.n	800a19a <USBD_CDC_Setup+0xa6>
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	88db      	ldrh	r3, [r3, #6]
 800a196:	b2da      	uxtb	r2, r3
 800a198:	e000      	b.n	800a19c <USBD_CDC_Setup+0xa8>
 800a19a:	2240      	movs	r2, #64	; 0x40
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a1a2:	6939      	ldr	r1, [r7, #16]
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f001 fd85 	bl	800bcbc <USBD_CtlPrepareRx>
      break;
 800a1b2:	e076      	b.n	800a2a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	33b0      	adds	r3, #176	; 0xb0
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	7850      	ldrb	r0, [r2, #1]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	4798      	blx	r3
      break;
 800a1d0:	e067      	b.n	800a2a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	785b      	ldrb	r3, [r3, #1]
 800a1d6:	2b0b      	cmp	r3, #11
 800a1d8:	d851      	bhi.n	800a27e <USBD_CDC_Setup+0x18a>
 800a1da:	a201      	add	r2, pc, #4	; (adr r2, 800a1e0 <USBD_CDC_Setup+0xec>)
 800a1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e0:	0800a211 	.word	0x0800a211
 800a1e4:	0800a28d 	.word	0x0800a28d
 800a1e8:	0800a27f 	.word	0x0800a27f
 800a1ec:	0800a27f 	.word	0x0800a27f
 800a1f0:	0800a27f 	.word	0x0800a27f
 800a1f4:	0800a27f 	.word	0x0800a27f
 800a1f8:	0800a27f 	.word	0x0800a27f
 800a1fc:	0800a27f 	.word	0x0800a27f
 800a200:	0800a27f 	.word	0x0800a27f
 800a204:	0800a27f 	.word	0x0800a27f
 800a208:	0800a23b 	.word	0x0800a23b
 800a20c:	0800a265 	.word	0x0800a265
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a216:	b2db      	uxtb	r3, r3
 800a218:	2b03      	cmp	r3, #3
 800a21a:	d107      	bne.n	800a22c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a21c:	f107 030a 	add.w	r3, r7, #10
 800a220:	2202      	movs	r2, #2
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f001 fd1d 	bl	800bc64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a22a:	e032      	b.n	800a292 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f001 fca7 	bl	800bb82 <USBD_CtlError>
            ret = USBD_FAIL;
 800a234:	2303      	movs	r3, #3
 800a236:	75fb      	strb	r3, [r7, #23]
          break;
 800a238:	e02b      	b.n	800a292 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a240:	b2db      	uxtb	r3, r3
 800a242:	2b03      	cmp	r3, #3
 800a244:	d107      	bne.n	800a256 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a246:	f107 030d 	add.w	r3, r7, #13
 800a24a:	2201      	movs	r2, #1
 800a24c:	4619      	mov	r1, r3
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f001 fd08 	bl	800bc64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a254:	e01d      	b.n	800a292 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a256:	6839      	ldr	r1, [r7, #0]
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f001 fc92 	bl	800bb82 <USBD_CtlError>
            ret = USBD_FAIL;
 800a25e:	2303      	movs	r3, #3
 800a260:	75fb      	strb	r3, [r7, #23]
          break;
 800a262:	e016      	b.n	800a292 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d00f      	beq.n	800a290 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a270:	6839      	ldr	r1, [r7, #0]
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 fc85 	bl	800bb82 <USBD_CtlError>
            ret = USBD_FAIL;
 800a278:	2303      	movs	r3, #3
 800a27a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a27c:	e008      	b.n	800a290 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a27e:	6839      	ldr	r1, [r7, #0]
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f001 fc7e 	bl	800bb82 <USBD_CtlError>
          ret = USBD_FAIL;
 800a286:	2303      	movs	r3, #3
 800a288:	75fb      	strb	r3, [r7, #23]
          break;
 800a28a:	e002      	b.n	800a292 <USBD_CDC_Setup+0x19e>
          break;
 800a28c:	bf00      	nop
 800a28e:	e008      	b.n	800a2a2 <USBD_CDC_Setup+0x1ae>
          break;
 800a290:	bf00      	nop
      }
      break;
 800a292:	e006      	b.n	800a2a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f001 fc73 	bl	800bb82 <USBD_CtlError>
      ret = USBD_FAIL;
 800a29c:	2303      	movs	r3, #3
 800a29e:	75fb      	strb	r3, [r7, #23]
      break;
 800a2a0:	bf00      	nop
  }

  return (uint8_t)ret;
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3718      	adds	r7, #24
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	32b0      	adds	r2, #176	; 0xb0
 800a2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d101      	bne.n	800a2d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	e065      	b.n	800a3a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	32b0      	adds	r2, #176	; 0xb0
 800a2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a2e6:	78fb      	ldrb	r3, [r7, #3]
 800a2e8:	f003 020f 	and.w	r2, r3, #15
 800a2ec:	6879      	ldr	r1, [r7, #4]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	440b      	add	r3, r1
 800a2f8:	3318      	adds	r3, #24
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d02f      	beq.n	800a360 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a300:	78fb      	ldrb	r3, [r7, #3]
 800a302:	f003 020f 	and.w	r2, r3, #15
 800a306:	6879      	ldr	r1, [r7, #4]
 800a308:	4613      	mov	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	440b      	add	r3, r1
 800a312:	3318      	adds	r3, #24
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	78fb      	ldrb	r3, [r7, #3]
 800a318:	f003 010f 	and.w	r1, r3, #15
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	460b      	mov	r3, r1
 800a320:	00db      	lsls	r3, r3, #3
 800a322:	440b      	add	r3, r1
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4403      	add	r3, r0
 800a328:	3344      	adds	r3, #68	; 0x44
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a330:	fb01 f303 	mul.w	r3, r1, r3
 800a334:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a336:	2b00      	cmp	r3, #0
 800a338:	d112      	bne.n	800a360 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	f003 020f 	and.w	r2, r3, #15
 800a340:	6879      	ldr	r1, [r7, #4]
 800a342:	4613      	mov	r3, r2
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	4413      	add	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	440b      	add	r3, r1
 800a34c:	3318      	adds	r3, #24
 800a34e:	2200      	movs	r2, #0
 800a350:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a352:	78f9      	ldrb	r1, [r7, #3]
 800a354:	2300      	movs	r3, #0
 800a356:	2200      	movs	r2, #0
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f002 f994 	bl	800c686 <USBD_LL_Transmit>
 800a35e:	e01f      	b.n	800a3a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	2200      	movs	r2, #0
 800a364:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	33b0      	adds	r3, #176	; 0xb0
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d010      	beq.n	800a3a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	33b0      	adds	r3, #176	; 0xb0
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	4413      	add	r3, r2
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a39c:	78fa      	ldrb	r2, [r7, #3]
 800a39e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b084      	sub	sp, #16
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	32b0      	adds	r2, #176	; 0xb0
 800a3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	32b0      	adds	r2, #176	; 0xb0
 800a3d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	e01a      	b.n	800a412 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a3dc:	78fb      	ldrb	r3, [r7, #3]
 800a3de:	4619      	mov	r1, r3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f002 f992 	bl	800c70a <USBD_LL_GetRxDataSize>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	33b0      	adds	r3, #176	; 0xb0
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4413      	add	r3, r2
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a40c:	4611      	mov	r1, r2
 800a40e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	32b0      	adds	r2, #176	; 0xb0
 800a42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a430:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a438:	2303      	movs	r3, #3
 800a43a:	e025      	b.n	800a488 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	33b0      	adds	r3, #176	; 0xb0
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	4413      	add	r3, r2
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d01a      	beq.n	800a486 <USBD_CDC_EP0_RxReady+0x6c>
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a456:	2bff      	cmp	r3, #255	; 0xff
 800a458:	d015      	beq.n	800a486 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	33b0      	adds	r3, #176	; 0xb0
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a472:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a47a:	b292      	uxth	r2, r2
 800a47c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	22ff      	movs	r2, #255	; 0xff
 800a482:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a498:	2182      	movs	r1, #130	; 0x82
 800a49a:	4818      	ldr	r0, [pc, #96]	; (800a4fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a49c:	f000 fd0f 	bl	800aebe <USBD_GetEpDesc>
 800a4a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a4a2:	2101      	movs	r1, #1
 800a4a4:	4815      	ldr	r0, [pc, #84]	; (800a4fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a4a6:	f000 fd0a 	bl	800aebe <USBD_GetEpDesc>
 800a4aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a4ac:	2181      	movs	r1, #129	; 0x81
 800a4ae:	4813      	ldr	r0, [pc, #76]	; (800a4fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a4b0:	f000 fd05 	bl	800aebe <USBD_GetEpDesc>
 800a4b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d002      	beq.n	800a4c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	2210      	movs	r2, #16
 800a4c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d006      	beq.n	800a4d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4d0:	711a      	strb	r2, [r3, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d006      	beq.n	800a4ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4e4:	711a      	strb	r2, [r3, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2243      	movs	r2, #67	; 0x43
 800a4ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a4f0:	4b02      	ldr	r3, [pc, #8]	; (800a4fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3718      	adds	r7, #24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	24000054 	.word	0x24000054

0800a500 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a508:	2182      	movs	r1, #130	; 0x82
 800a50a:	4818      	ldr	r0, [pc, #96]	; (800a56c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a50c:	f000 fcd7 	bl	800aebe <USBD_GetEpDesc>
 800a510:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a512:	2101      	movs	r1, #1
 800a514:	4815      	ldr	r0, [pc, #84]	; (800a56c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a516:	f000 fcd2 	bl	800aebe <USBD_GetEpDesc>
 800a51a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a51c:	2181      	movs	r1, #129	; 0x81
 800a51e:	4813      	ldr	r0, [pc, #76]	; (800a56c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a520:	f000 fccd 	bl	800aebe <USBD_GetEpDesc>
 800a524:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d002      	beq.n	800a532 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	2210      	movs	r2, #16
 800a530:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d006      	beq.n	800a546 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	2200      	movs	r2, #0
 800a53c:	711a      	strb	r2, [r3, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f042 0202 	orr.w	r2, r2, #2
 800a544:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d006      	beq.n	800a55a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	711a      	strb	r2, [r3, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	f042 0202 	orr.w	r2, r2, #2
 800a558:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2243      	movs	r2, #67	; 0x43
 800a55e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a560:	4b02      	ldr	r3, [pc, #8]	; (800a56c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a562:	4618      	mov	r0, r3
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	24000054 	.word	0x24000054

0800a570 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a578:	2182      	movs	r1, #130	; 0x82
 800a57a:	4818      	ldr	r0, [pc, #96]	; (800a5dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a57c:	f000 fc9f 	bl	800aebe <USBD_GetEpDesc>
 800a580:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a582:	2101      	movs	r1, #1
 800a584:	4815      	ldr	r0, [pc, #84]	; (800a5dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a586:	f000 fc9a 	bl	800aebe <USBD_GetEpDesc>
 800a58a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a58c:	2181      	movs	r1, #129	; 0x81
 800a58e:	4813      	ldr	r0, [pc, #76]	; (800a5dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a590:	f000 fc95 	bl	800aebe <USBD_GetEpDesc>
 800a594:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	2210      	movs	r2, #16
 800a5a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d006      	beq.n	800a5b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5b0:	711a      	strb	r2, [r3, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d006      	beq.n	800a5ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5c4:	711a      	strb	r2, [r3, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2243      	movs	r2, #67	; 0x43
 800a5ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a5d0:	4b02      	ldr	r3, [pc, #8]	; (800a5dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3718      	adds	r7, #24
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	24000054 	.word	0x24000054

0800a5e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	220a      	movs	r2, #10
 800a5ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a5ee:	4b03      	ldr	r3, [pc, #12]	; (800a5fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	24000010 	.word	0x24000010

0800a600 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d101      	bne.n	800a614 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a610:	2303      	movs	r3, #3
 800a612:	e009      	b.n	800a628 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	33b0      	adds	r3, #176	; 0xb0
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a634:	b480      	push	{r7}
 800a636:	b087      	sub	sp, #28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	32b0      	adds	r2, #176	; 0xb0
 800a64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a64e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a656:	2303      	movs	r3, #3
 800a658:	e008      	b.n	800a66c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	371c      	adds	r7, #28
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	32b0      	adds	r2, #176	; 0xb0
 800a68c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a690:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d101      	bne.n	800a69c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a698:	2303      	movs	r3, #3
 800a69a:	e004      	b.n	800a6a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	32b0      	adds	r2, #176	; 0xb0
 800a6c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	32b0      	adds	r2, #176	; 0xb0
 800a6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e018      	b.n	800a714 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	7c1b      	ldrb	r3, [r3, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10a      	bne.n	800a700 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6ea:	4b0c      	ldr	r3, [pc, #48]	; (800a71c <USBD_CDC_ReceivePacket+0x68>)
 800a6ec:	7819      	ldrb	r1, [r3, #0]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f001 ffe5 	bl	800c6c8 <USBD_LL_PrepareReceive>
 800a6fe:	e008      	b.n	800a712 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a700:	4b06      	ldr	r3, [pc, #24]	; (800a71c <USBD_CDC_ReceivePacket+0x68>)
 800a702:	7819      	ldrb	r1, [r3, #0]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a70a:	2340      	movs	r3, #64	; 0x40
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f001 ffdb 	bl	800c6c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	24000098 	.word	0x24000098

0800a720 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	4613      	mov	r3, r2
 800a72c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a734:	2303      	movs	r3, #3
 800a736:	e01f      	b.n	800a778 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d003      	beq.n	800a75e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2201      	movs	r2, #1
 800a762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	79fa      	ldrb	r2, [r7, #7]
 800a76a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f001 fe51 	bl	800c414 <USBD_LL_Init>
 800a772:	4603      	mov	r3, r0
 800a774:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a776:	7dfb      	ldrb	r3, [r7, #23]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3718      	adds	r7, #24
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a78a:	2300      	movs	r3, #0
 800a78c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d101      	bne.n	800a798 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a794:	2303      	movs	r3, #3
 800a796:	e025      	b.n	800a7e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	683a      	ldr	r2, [r7, #0]
 800a79c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	32ae      	adds	r2, #174	; 0xae
 800a7aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00f      	beq.n	800a7d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	32ae      	adds	r2, #174	; 0xae
 800a7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c4:	f107 020e 	add.w	r2, r7, #14
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	4798      	blx	r3
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a7da:	1c5a      	adds	r2, r3, #1
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f001 fe5d 	bl	800c4b4 <USBD_LL_Start>
 800a7fa:	4603      	mov	r3, r0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a80c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a80e:	4618      	mov	r0, r3
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b084      	sub	sp, #16
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	460b      	mov	r3, r1
 800a824:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a830:	2b00      	cmp	r3, #0
 800a832:	d009      	beq.n	800a848 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	78fa      	ldrb	r2, [r7, #3]
 800a83e:	4611      	mov	r1, r2
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	4798      	blx	r3
 800a844:	4603      	mov	r3, r0
 800a846:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a848:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b084      	sub	sp, #16
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	460b      	mov	r3, r1
 800a85c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	78fa      	ldrb	r2, [r7, #3]
 800a86c:	4611      	mov	r1, r2
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	4798      	blx	r3
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d001      	beq.n	800a87c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a878:	2303      	movs	r3, #3
 800a87a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b084      	sub	sp, #16
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	4618      	mov	r0, r3
 800a89a:	f001 f938 	bl	800bb0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a8ba:	f003 031f 	and.w	r3, r3, #31
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d01a      	beq.n	800a8f8 <USBD_LL_SetupStage+0x72>
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d822      	bhi.n	800a90c <USBD_LL_SetupStage+0x86>
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d002      	beq.n	800a8d0 <USBD_LL_SetupStage+0x4a>
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d00a      	beq.n	800a8e4 <USBD_LL_SetupStage+0x5e>
 800a8ce:	e01d      	b.n	800a90c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 fb65 	bl	800afa8 <USBD_StdDevReq>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a8e2:	e020      	b.n	800a926 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fbcd 	bl	800b08c <USBD_StdItfReq>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8f6:	e016      	b.n	800a926 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a8fe:	4619      	mov	r1, r3
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fc2f 	bl	800b164 <USBD_StdEPReq>
 800a906:	4603      	mov	r3, r0
 800a908:	73fb      	strb	r3, [r7, #15]
      break;
 800a90a:	e00c      	b.n	800a926 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a912:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a916:	b2db      	uxtb	r3, r3
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f001 fe2a 	bl	800c574 <USBD_LL_StallEP>
 800a920:	4603      	mov	r3, r0
 800a922:	73fb      	strb	r3, [r7, #15]
      break;
 800a924:	bf00      	nop
  }

  return ret;
 800a926:	7bfb      	ldrb	r3, [r7, #15]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	460b      	mov	r3, r1
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a942:	7afb      	ldrb	r3, [r7, #11]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d16e      	bne.n	800aa26 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a94e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a956:	2b03      	cmp	r3, #3
 800a958:	f040 8098 	bne.w	800aa8c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	689a      	ldr	r2, [r3, #8]
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	429a      	cmp	r2, r3
 800a966:	d913      	bls.n	800a990 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	689a      	ldr	r2, [r3, #8]
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	1ad2      	subs	r2, r2, r3
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	68da      	ldr	r2, [r3, #12]
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	4293      	cmp	r3, r2
 800a980:	bf28      	it	cs
 800a982:	4613      	movcs	r3, r2
 800a984:	461a      	mov	r2, r3
 800a986:	6879      	ldr	r1, [r7, #4]
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f001 f9b4 	bl	800bcf6 <USBD_CtlContinueRx>
 800a98e:	e07d      	b.n	800aa8c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a996:	f003 031f 	and.w	r3, r3, #31
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d014      	beq.n	800a9c8 <USBD_LL_DataOutStage+0x98>
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	d81d      	bhi.n	800a9de <USBD_LL_DataOutStage+0xae>
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d002      	beq.n	800a9ac <USBD_LL_DataOutStage+0x7c>
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d003      	beq.n	800a9b2 <USBD_LL_DataOutStage+0x82>
 800a9aa:	e018      	b.n	800a9de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	75bb      	strb	r3, [r7, #22]
            break;
 800a9b0:	e018      	b.n	800a9e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f000 fa64 	bl	800ae8a <USBD_CoreFindIF>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	75bb      	strb	r3, [r7, #22]
            break;
 800a9c6:	e00d      	b.n	800a9e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f000 fa66 	bl	800aea4 <USBD_CoreFindEP>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	75bb      	strb	r3, [r7, #22]
            break;
 800a9dc:	e002      	b.n	800a9e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	75bb      	strb	r3, [r7, #22]
            break;
 800a9e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a9e4:	7dbb      	ldrb	r3, [r7, #22]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d119      	bne.n	800aa1e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	2b03      	cmp	r3, #3
 800a9f4:	d113      	bne.n	800aa1e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a9f6:	7dba      	ldrb	r2, [r7, #22]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	32ae      	adds	r2, #174	; 0xae
 800a9fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00b      	beq.n	800aa1e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800aa06:	7dba      	ldrb	r2, [r7, #22]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800aa0e:	7dba      	ldrb	r2, [r7, #22]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	32ae      	adds	r2, #174	; 0xae
 800aa14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f001 f97a 	bl	800bd18 <USBD_CtlSendStatus>
 800aa24:	e032      	b.n	800aa8c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800aa26:	7afb      	ldrb	r3, [r7, #11]
 800aa28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	4619      	mov	r1, r3
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f000 fa37 	bl	800aea4 <USBD_CoreFindEP>
 800aa36:	4603      	mov	r3, r0
 800aa38:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa3a:	7dbb      	ldrb	r3, [r7, #22]
 800aa3c:	2bff      	cmp	r3, #255	; 0xff
 800aa3e:	d025      	beq.n	800aa8c <USBD_LL_DataOutStage+0x15c>
 800aa40:	7dbb      	ldrb	r3, [r7, #22]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d122      	bne.n	800aa8c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	2b03      	cmp	r3, #3
 800aa50:	d117      	bne.n	800aa82 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800aa52:	7dba      	ldrb	r2, [r7, #22]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	32ae      	adds	r2, #174	; 0xae
 800aa58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00f      	beq.n	800aa82 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800aa62:	7dba      	ldrb	r2, [r7, #22]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800aa6a:	7dba      	ldrb	r2, [r7, #22]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	32ae      	adds	r2, #174	; 0xae
 800aa70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa74:	699b      	ldr	r3, [r3, #24]
 800aa76:	7afa      	ldrb	r2, [r7, #11]
 800aa78:	4611      	mov	r1, r2
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	4798      	blx	r3
 800aa7e:	4603      	mov	r3, r0
 800aa80:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800aa82:	7dfb      	ldrb	r3, [r7, #23]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d001      	beq.n	800aa8c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
 800aa8a:	e000      	b.n	800aa8e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3718      	adds	r7, #24
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b086      	sub	sp, #24
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	60f8      	str	r0, [r7, #12]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	607a      	str	r2, [r7, #4]
 800aaa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800aaa4:	7afb      	ldrb	r3, [r7, #11]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d16f      	bne.n	800ab8a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	3314      	adds	r3, #20
 800aaae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d15a      	bne.n	800ab70 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	689a      	ldr	r2, [r3, #8]
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d914      	bls.n	800aaf0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	689a      	ldr	r2, [r3, #8]
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	1ad2      	subs	r2, r2, r3
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	461a      	mov	r2, r3
 800aada:	6879      	ldr	r1, [r7, #4]
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f001 f8dc 	bl	800bc9a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aae2:	2300      	movs	r3, #0
 800aae4:	2200      	movs	r2, #0
 800aae6:	2100      	movs	r1, #0
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f001 fded 	bl	800c6c8 <USBD_LL_PrepareReceive>
 800aaee:	e03f      	b.n	800ab70 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	68da      	ldr	r2, [r3, #12]
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d11c      	bne.n	800ab36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	685a      	ldr	r2, [r3, #4]
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d316      	bcc.n	800ab36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d20f      	bcs.n	800ab36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ab16:	2200      	movs	r2, #0
 800ab18:	2100      	movs	r1, #0
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f001 f8bd 	bl	800bc9a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab28:	2300      	movs	r3, #0
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f001 fdca 	bl	800c6c8 <USBD_LL_PrepareReceive>
 800ab34:	e01c      	b.n	800ab70 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	2b03      	cmp	r3, #3
 800ab40:	d10f      	bne.n	800ab62 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d009      	beq.n	800ab62 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab62:	2180      	movs	r1, #128	; 0x80
 800ab64:	68f8      	ldr	r0, [r7, #12]
 800ab66:	f001 fd05 	bl	800c574 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f001 f8e7 	bl	800bd3e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d03a      	beq.n	800abf0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f7ff fe42 	bl	800a804 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ab88:	e032      	b.n	800abf0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ab8a:	7afb      	ldrb	r3, [r7, #11]
 800ab8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	4619      	mov	r1, r3
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	f000 f985 	bl	800aea4 <USBD_CoreFindEP>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
 800aba0:	2bff      	cmp	r3, #255	; 0xff
 800aba2:	d025      	beq.n	800abf0 <USBD_LL_DataInStage+0x15a>
 800aba4:	7dfb      	ldrb	r3, [r7, #23]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d122      	bne.n	800abf0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	d11c      	bne.n	800abf0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800abb6:	7dfa      	ldrb	r2, [r7, #23]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	32ae      	adds	r2, #174	; 0xae
 800abbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d014      	beq.n	800abf0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800abc6:	7dfa      	ldrb	r2, [r7, #23]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800abce:	7dfa      	ldrb	r2, [r7, #23]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	32ae      	adds	r2, #174	; 0xae
 800abd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	7afa      	ldrb	r2, [r7, #11]
 800abdc:	4611      	mov	r1, r2
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	4798      	blx	r3
 800abe2:	4603      	mov	r3, r0
 800abe4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800abe6:	7dbb      	ldrb	r3, [r7, #22]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d001      	beq.n	800abf0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800abec:	7dbb      	ldrb	r3, [r7, #22]
 800abee:	e000      	b.n	800abf2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b084      	sub	sp, #16
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac02:	2300      	movs	r3, #0
 800ac04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d014      	beq.n	800ac60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00e      	beq.n	800ac60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	6852      	ldr	r2, [r2, #4]
 800ac4e:	b2d2      	uxtb	r2, r2
 800ac50:	4611      	mov	r1, r2
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	4798      	blx	r3
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac60:	2340      	movs	r3, #64	; 0x40
 800ac62:	2200      	movs	r2, #0
 800ac64:	2100      	movs	r1, #0
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f001 fc3f 	bl	800c4ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2240      	movs	r2, #64	; 0x40
 800ac78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac7c:	2340      	movs	r3, #64	; 0x40
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2180      	movs	r1, #128	; 0x80
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f001 fc31 	bl	800c4ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2240      	movs	r2, #64	; 0x40
 800ac92:	621a      	str	r2, [r3, #32]

  return ret;
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	460b      	mov	r3, r1
 800aca8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	78fa      	ldrb	r2, [r7, #3]
 800acae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	370c      	adds	r7, #12
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b083      	sub	sp, #12
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800accc:	b2db      	uxtb	r3, r3
 800acce:	2b04      	cmp	r3, #4
 800acd0:	d006      	beq.n	800ace0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2204      	movs	r2, #4
 800ace4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800acf6:	b480      	push	{r7}
 800acf8:	b083      	sub	sp, #12
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	2b04      	cmp	r3, #4
 800ad08:	d106      	bne.n	800ad18 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ad10:	b2da      	uxtb	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	d110      	bne.n	800ad5c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00b      	beq.n	800ad5c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad4a:	69db      	ldr	r3, [r3, #28]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d005      	beq.n	800ad5c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad56:	69db      	ldr	r3, [r3, #28]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b082      	sub	sp, #8
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	460b      	mov	r3, r1
 800ad70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	32ae      	adds	r2, #174	; 0xae
 800ad7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d101      	bne.n	800ad88 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad84:	2303      	movs	r3, #3
 800ad86:	e01c      	b.n	800adc2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b03      	cmp	r3, #3
 800ad92:	d115      	bne.n	800adc0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	32ae      	adds	r2, #174	; 0xae
 800ad9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada2:	6a1b      	ldr	r3, [r3, #32]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00b      	beq.n	800adc0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	32ae      	adds	r2, #174	; 0xae
 800adb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb6:	6a1b      	ldr	r3, [r3, #32]
 800adb8:	78fa      	ldrb	r2, [r7, #3]
 800adba:	4611      	mov	r1, r2
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b082      	sub	sp, #8
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	460b      	mov	r3, r1
 800add4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	32ae      	adds	r2, #174	; 0xae
 800ade0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ade8:	2303      	movs	r3, #3
 800adea:	e01c      	b.n	800ae26 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	2b03      	cmp	r3, #3
 800adf6:	d115      	bne.n	800ae24 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	32ae      	adds	r2, #174	; 0xae
 800ae02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00b      	beq.n	800ae24 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	32ae      	adds	r2, #174	; 0xae
 800ae16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1c:	78fa      	ldrb	r2, [r7, #3]
 800ae1e:	4611      	mov	r1, r2
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ae2e:	b480      	push	{r7}
 800ae30:	b083      	sub	sp, #12
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00e      	beq.n	800ae80 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	6852      	ldr	r2, [r2, #4]
 800ae6e:	b2d2      	uxtb	r2, r2
 800ae70:	4611      	mov	r1, r2
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	4798      	blx	r3
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d001      	beq.n	800ae80 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ae80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b083      	sub	sp, #12
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	460b      	mov	r3, r1
 800ae94:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae96:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aeb0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	370c      	adds	r7, #12
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b086      	sub	sp, #24
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	460b      	mov	r3, r1
 800aec8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800aed2:	2300      	movs	r3, #0
 800aed4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	885b      	ldrh	r3, [r3, #2]
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d920      	bls.n	800af28 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aeee:	e013      	b.n	800af18 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aef0:	f107 030a 	add.w	r3, r7, #10
 800aef4:	4619      	mov	r1, r3
 800aef6:	6978      	ldr	r0, [r7, #20]
 800aef8:	f000 f81b 	bl	800af32 <USBD_GetNextDesc>
 800aefc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	785b      	ldrb	r3, [r3, #1]
 800af02:	2b05      	cmp	r3, #5
 800af04:	d108      	bne.n	800af18 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	789b      	ldrb	r3, [r3, #2]
 800af0e:	78fa      	ldrb	r2, [r7, #3]
 800af10:	429a      	cmp	r2, r3
 800af12:	d008      	beq.n	800af26 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800af14:	2300      	movs	r3, #0
 800af16:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	885b      	ldrh	r3, [r3, #2]
 800af1c:	b29a      	uxth	r2, r3
 800af1e:	897b      	ldrh	r3, [r7, #10]
 800af20:	429a      	cmp	r2, r3
 800af22:	d8e5      	bhi.n	800aef0 <USBD_GetEpDesc+0x32>
 800af24:	e000      	b.n	800af28 <USBD_GetEpDesc+0x6a>
          break;
 800af26:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800af28:	693b      	ldr	r3, [r7, #16]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3718      	adds	r7, #24
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800af32:	b480      	push	{r7}
 800af34:	b085      	sub	sp, #20
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	881a      	ldrh	r2, [r3, #0]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	b29b      	uxth	r3, r3
 800af4a:	4413      	add	r3, r2
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	461a      	mov	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4413      	add	r3, r2
 800af5c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800af5e:	68fb      	ldr	r3, [r7, #12]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b087      	sub	sp, #28
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	3301      	adds	r3, #1
 800af82:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800af8a:	8a3b      	ldrh	r3, [r7, #16]
 800af8c:	021b      	lsls	r3, r3, #8
 800af8e:	b21a      	sxth	r2, r3
 800af90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800af94:	4313      	orrs	r3, r2
 800af96:	b21b      	sxth	r3, r3
 800af98:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800af9a:	89fb      	ldrh	r3, [r7, #14]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	371c      	adds	r7, #28
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afbe:	2b40      	cmp	r3, #64	; 0x40
 800afc0:	d005      	beq.n	800afce <USBD_StdDevReq+0x26>
 800afc2:	2b40      	cmp	r3, #64	; 0x40
 800afc4:	d857      	bhi.n	800b076 <USBD_StdDevReq+0xce>
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00f      	beq.n	800afea <USBD_StdDevReq+0x42>
 800afca:	2b20      	cmp	r3, #32
 800afcc:	d153      	bne.n	800b076 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	32ae      	adds	r2, #174	; 0xae
 800afd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	6839      	ldr	r1, [r7, #0]
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	4798      	blx	r3
 800afe4:	4603      	mov	r3, r0
 800afe6:	73fb      	strb	r3, [r7, #15]
      break;
 800afe8:	e04a      	b.n	800b080 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	785b      	ldrb	r3, [r3, #1]
 800afee:	2b09      	cmp	r3, #9
 800aff0:	d83b      	bhi.n	800b06a <USBD_StdDevReq+0xc2>
 800aff2:	a201      	add	r2, pc, #4	; (adr r2, 800aff8 <USBD_StdDevReq+0x50>)
 800aff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff8:	0800b04d 	.word	0x0800b04d
 800affc:	0800b061 	.word	0x0800b061
 800b000:	0800b06b 	.word	0x0800b06b
 800b004:	0800b057 	.word	0x0800b057
 800b008:	0800b06b 	.word	0x0800b06b
 800b00c:	0800b02b 	.word	0x0800b02b
 800b010:	0800b021 	.word	0x0800b021
 800b014:	0800b06b 	.word	0x0800b06b
 800b018:	0800b043 	.word	0x0800b043
 800b01c:	0800b035 	.word	0x0800b035
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b020:	6839      	ldr	r1, [r7, #0]
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fa3c 	bl	800b4a0 <USBD_GetDescriptor>
          break;
 800b028:	e024      	b.n	800b074 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b02a:	6839      	ldr	r1, [r7, #0]
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fbcb 	bl	800b7c8 <USBD_SetAddress>
          break;
 800b032:	e01f      	b.n	800b074 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fc0a 	bl	800b850 <USBD_SetConfig>
 800b03c:	4603      	mov	r3, r0
 800b03e:	73fb      	strb	r3, [r7, #15]
          break;
 800b040:	e018      	b.n	800b074 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fcad 	bl	800b9a4 <USBD_GetConfig>
          break;
 800b04a:	e013      	b.n	800b074 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fcde 	bl	800ba10 <USBD_GetStatus>
          break;
 800b054:	e00e      	b.n	800b074 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fd0d 	bl	800ba78 <USBD_SetFeature>
          break;
 800b05e:	e009      	b.n	800b074 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fd31 	bl	800baca <USBD_ClrFeature>
          break;
 800b068:	e004      	b.n	800b074 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b06a:	6839      	ldr	r1, [r7, #0]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 fd88 	bl	800bb82 <USBD_CtlError>
          break;
 800b072:	bf00      	nop
      }
      break;
 800b074:	e004      	b.n	800b080 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fd82 	bl	800bb82 <USBD_CtlError>
      break;
 800b07e:	bf00      	nop
  }

  return ret;
 800b080:	7bfb      	ldrb	r3, [r7, #15]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop

0800b08c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b096:	2300      	movs	r3, #0
 800b098:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0a2:	2b40      	cmp	r3, #64	; 0x40
 800b0a4:	d005      	beq.n	800b0b2 <USBD_StdItfReq+0x26>
 800b0a6:	2b40      	cmp	r3, #64	; 0x40
 800b0a8:	d852      	bhi.n	800b150 <USBD_StdItfReq+0xc4>
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <USBD_StdItfReq+0x26>
 800b0ae:	2b20      	cmp	r3, #32
 800b0b0:	d14e      	bne.n	800b150 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d840      	bhi.n	800b142 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	889b      	ldrh	r3, [r3, #4]
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d836      	bhi.n	800b138 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	889b      	ldrh	r3, [r3, #4]
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7ff fed9 	bl	800ae8a <USBD_CoreFindIF>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0dc:	7bbb      	ldrb	r3, [r7, #14]
 800b0de:	2bff      	cmp	r3, #255	; 0xff
 800b0e0:	d01d      	beq.n	800b11e <USBD_StdItfReq+0x92>
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d11a      	bne.n	800b11e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b0e8:	7bba      	ldrb	r2, [r7, #14]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	32ae      	adds	r2, #174	; 0xae
 800b0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00f      	beq.n	800b118 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b0f8:	7bba      	ldrb	r2, [r7, #14]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b100:	7bba      	ldrb	r2, [r7, #14]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	32ae      	adds	r2, #174	; 0xae
 800b106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	4798      	blx	r3
 800b112:	4603      	mov	r3, r0
 800b114:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b116:	e004      	b.n	800b122 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b118:	2303      	movs	r3, #3
 800b11a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b11c:	e001      	b.n	800b122 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b11e:	2303      	movs	r3, #3
 800b120:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	88db      	ldrh	r3, [r3, #6]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d110      	bne.n	800b14c <USBD_StdItfReq+0xc0>
 800b12a:	7bfb      	ldrb	r3, [r7, #15]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10d      	bne.n	800b14c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 fdf1 	bl	800bd18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b136:	e009      	b.n	800b14c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b138:	6839      	ldr	r1, [r7, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fd21 	bl	800bb82 <USBD_CtlError>
          break;
 800b140:	e004      	b.n	800b14c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fd1c 	bl	800bb82 <USBD_CtlError>
          break;
 800b14a:	e000      	b.n	800b14e <USBD_StdItfReq+0xc2>
          break;
 800b14c:	bf00      	nop
      }
      break;
 800b14e:	e004      	b.n	800b15a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fd15 	bl	800bb82 <USBD_CtlError>
      break;
 800b158:	bf00      	nop
  }

  return ret;
 800b15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3710      	adds	r7, #16
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	889b      	ldrh	r3, [r3, #4]
 800b176:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b180:	2b40      	cmp	r3, #64	; 0x40
 800b182:	d007      	beq.n	800b194 <USBD_StdEPReq+0x30>
 800b184:	2b40      	cmp	r3, #64	; 0x40
 800b186:	f200 817f 	bhi.w	800b488 <USBD_StdEPReq+0x324>
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d02a      	beq.n	800b1e4 <USBD_StdEPReq+0x80>
 800b18e:	2b20      	cmp	r3, #32
 800b190:	f040 817a 	bne.w	800b488 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b194:	7bbb      	ldrb	r3, [r7, #14]
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f7ff fe83 	bl	800aea4 <USBD_CoreFindEP>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b1a2:	7b7b      	ldrb	r3, [r7, #13]
 800b1a4:	2bff      	cmp	r3, #255	; 0xff
 800b1a6:	f000 8174 	beq.w	800b492 <USBD_StdEPReq+0x32e>
 800b1aa:	7b7b      	ldrb	r3, [r7, #13]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f040 8170 	bne.w	800b492 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b1b2:	7b7a      	ldrb	r2, [r7, #13]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b1ba:	7b7a      	ldrb	r2, [r7, #13]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	32ae      	adds	r2, #174	; 0xae
 800b1c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f000 8163 	beq.w	800b492 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b1cc:	7b7a      	ldrb	r2, [r7, #13]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	32ae      	adds	r2, #174	; 0xae
 800b1d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	4798      	blx	r3
 800b1de:	4603      	mov	r3, r0
 800b1e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b1e2:	e156      	b.n	800b492 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	785b      	ldrb	r3, [r3, #1]
 800b1e8:	2b03      	cmp	r3, #3
 800b1ea:	d008      	beq.n	800b1fe <USBD_StdEPReq+0x9a>
 800b1ec:	2b03      	cmp	r3, #3
 800b1ee:	f300 8145 	bgt.w	800b47c <USBD_StdEPReq+0x318>
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 809b 	beq.w	800b32e <USBD_StdEPReq+0x1ca>
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d03c      	beq.n	800b276 <USBD_StdEPReq+0x112>
 800b1fc:	e13e      	b.n	800b47c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b204:	b2db      	uxtb	r3, r3
 800b206:	2b02      	cmp	r3, #2
 800b208:	d002      	beq.n	800b210 <USBD_StdEPReq+0xac>
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d016      	beq.n	800b23c <USBD_StdEPReq+0xd8>
 800b20e:	e02c      	b.n	800b26a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b210:	7bbb      	ldrb	r3, [r7, #14]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00d      	beq.n	800b232 <USBD_StdEPReq+0xce>
 800b216:	7bbb      	ldrb	r3, [r7, #14]
 800b218:	2b80      	cmp	r3, #128	; 0x80
 800b21a:	d00a      	beq.n	800b232 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b21c:	7bbb      	ldrb	r3, [r7, #14]
 800b21e:	4619      	mov	r1, r3
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f001 f9a7 	bl	800c574 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b226:	2180      	movs	r1, #128	; 0x80
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f001 f9a3 	bl	800c574 <USBD_LL_StallEP>
 800b22e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b230:	e020      	b.n	800b274 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b232:	6839      	ldr	r1, [r7, #0]
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 fca4 	bl	800bb82 <USBD_CtlError>
              break;
 800b23a:	e01b      	b.n	800b274 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	885b      	ldrh	r3, [r3, #2]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d10e      	bne.n	800b262 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b244:	7bbb      	ldrb	r3, [r7, #14]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00b      	beq.n	800b262 <USBD_StdEPReq+0xfe>
 800b24a:	7bbb      	ldrb	r3, [r7, #14]
 800b24c:	2b80      	cmp	r3, #128	; 0x80
 800b24e:	d008      	beq.n	800b262 <USBD_StdEPReq+0xfe>
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	88db      	ldrh	r3, [r3, #6]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d104      	bne.n	800b262 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b258:	7bbb      	ldrb	r3, [r7, #14]
 800b25a:	4619      	mov	r1, r3
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f001 f989 	bl	800c574 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fd58 	bl	800bd18 <USBD_CtlSendStatus>

              break;
 800b268:	e004      	b.n	800b274 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b26a:	6839      	ldr	r1, [r7, #0]
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fc88 	bl	800bb82 <USBD_CtlError>
              break;
 800b272:	bf00      	nop
          }
          break;
 800b274:	e107      	b.n	800b486 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	2b02      	cmp	r3, #2
 800b280:	d002      	beq.n	800b288 <USBD_StdEPReq+0x124>
 800b282:	2b03      	cmp	r3, #3
 800b284:	d016      	beq.n	800b2b4 <USBD_StdEPReq+0x150>
 800b286:	e04b      	b.n	800b320 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b288:	7bbb      	ldrb	r3, [r7, #14]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00d      	beq.n	800b2aa <USBD_StdEPReq+0x146>
 800b28e:	7bbb      	ldrb	r3, [r7, #14]
 800b290:	2b80      	cmp	r3, #128	; 0x80
 800b292:	d00a      	beq.n	800b2aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f001 f96b 	bl	800c574 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b29e:	2180      	movs	r1, #128	; 0x80
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f001 f967 	bl	800c574 <USBD_LL_StallEP>
 800b2a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b2a8:	e040      	b.n	800b32c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b2aa:	6839      	ldr	r1, [r7, #0]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 fc68 	bl	800bb82 <USBD_CtlError>
              break;
 800b2b2:	e03b      	b.n	800b32c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	885b      	ldrh	r3, [r3, #2]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d136      	bne.n	800b32a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b2bc:	7bbb      	ldrb	r3, [r7, #14]
 800b2be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d004      	beq.n	800b2d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b2c6:	7bbb      	ldrb	r3, [r7, #14]
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f001 f971 	bl	800c5b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 fd21 	bl	800bd18 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7ff fde2 	bl	800aea4 <USBD_CoreFindEP>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2e4:	7b7b      	ldrb	r3, [r7, #13]
 800b2e6:	2bff      	cmp	r3, #255	; 0xff
 800b2e8:	d01f      	beq.n	800b32a <USBD_StdEPReq+0x1c6>
 800b2ea:	7b7b      	ldrb	r3, [r7, #13]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d11c      	bne.n	800b32a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b2f0:	7b7a      	ldrb	r2, [r7, #13]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b2f8:	7b7a      	ldrb	r2, [r7, #13]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	32ae      	adds	r2, #174	; 0xae
 800b2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d010      	beq.n	800b32a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b308:	7b7a      	ldrb	r2, [r7, #13]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	32ae      	adds	r2, #174	; 0xae
 800b30e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	4798      	blx	r3
 800b31a:	4603      	mov	r3, r0
 800b31c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b31e:	e004      	b.n	800b32a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b320:	6839      	ldr	r1, [r7, #0]
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fc2d 	bl	800bb82 <USBD_CtlError>
              break;
 800b328:	e000      	b.n	800b32c <USBD_StdEPReq+0x1c8>
              break;
 800b32a:	bf00      	nop
          }
          break;
 800b32c:	e0ab      	b.n	800b486 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b02      	cmp	r3, #2
 800b338:	d002      	beq.n	800b340 <USBD_StdEPReq+0x1dc>
 800b33a:	2b03      	cmp	r3, #3
 800b33c:	d032      	beq.n	800b3a4 <USBD_StdEPReq+0x240>
 800b33e:	e097      	b.n	800b470 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b340:	7bbb      	ldrb	r3, [r7, #14]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d007      	beq.n	800b356 <USBD_StdEPReq+0x1f2>
 800b346:	7bbb      	ldrb	r3, [r7, #14]
 800b348:	2b80      	cmp	r3, #128	; 0x80
 800b34a:	d004      	beq.n	800b356 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b34c:	6839      	ldr	r1, [r7, #0]
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 fc17 	bl	800bb82 <USBD_CtlError>
                break;
 800b354:	e091      	b.n	800b47a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b356:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	da0b      	bge.n	800b376 <USBD_StdEPReq+0x212>
 800b35e:	7bbb      	ldrb	r3, [r7, #14]
 800b360:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b364:	4613      	mov	r3, r2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	4413      	add	r3, r2
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	3310      	adds	r3, #16
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	4413      	add	r3, r2
 800b372:	3304      	adds	r3, #4
 800b374:	e00b      	b.n	800b38e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b376:	7bbb      	ldrb	r3, [r7, #14]
 800b378:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b37c:	4613      	mov	r3, r2
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4413      	add	r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	4413      	add	r3, r2
 800b38c:	3304      	adds	r3, #4
 800b38e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	2200      	movs	r2, #0
 800b394:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	2202      	movs	r2, #2
 800b39a:	4619      	mov	r1, r3
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 fc61 	bl	800bc64 <USBD_CtlSendData>
              break;
 800b3a2:	e06a      	b.n	800b47a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b3a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	da11      	bge.n	800b3d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b3ac:	7bbb      	ldrb	r3, [r7, #14]
 800b3ae:	f003 020f 	and.w	r2, r3, #15
 800b3b2:	6879      	ldr	r1, [r7, #4]
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	4413      	add	r3, r2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	440b      	add	r3, r1
 800b3be:	3324      	adds	r3, #36	; 0x24
 800b3c0:	881b      	ldrh	r3, [r3, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d117      	bne.n	800b3f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 fbda 	bl	800bb82 <USBD_CtlError>
                  break;
 800b3ce:	e054      	b.n	800b47a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b3d0:	7bbb      	ldrb	r3, [r7, #14]
 800b3d2:	f003 020f 	and.w	r2, r3, #15
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	4613      	mov	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	440b      	add	r3, r1
 800b3e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d104      	bne.n	800b3f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fbc7 	bl	800bb82 <USBD_CtlError>
                  break;
 800b3f4:	e041      	b.n	800b47a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	da0b      	bge.n	800b416 <USBD_StdEPReq+0x2b2>
 800b3fe:	7bbb      	ldrb	r3, [r7, #14]
 800b400:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b404:	4613      	mov	r3, r2
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	3310      	adds	r3, #16
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	4413      	add	r3, r2
 800b412:	3304      	adds	r3, #4
 800b414:	e00b      	b.n	800b42e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b416:	7bbb      	ldrb	r3, [r7, #14]
 800b418:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b41c:	4613      	mov	r3, r2
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	4413      	add	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	4413      	add	r3, r2
 800b42c:	3304      	adds	r3, #4
 800b42e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b430:	7bbb      	ldrb	r3, [r7, #14]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d002      	beq.n	800b43c <USBD_StdEPReq+0x2d8>
 800b436:	7bbb      	ldrb	r3, [r7, #14]
 800b438:	2b80      	cmp	r3, #128	; 0x80
 800b43a:	d103      	bne.n	800b444 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	2200      	movs	r2, #0
 800b440:	601a      	str	r2, [r3, #0]
 800b442:	e00e      	b.n	800b462 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b444:	7bbb      	ldrb	r3, [r7, #14]
 800b446:	4619      	mov	r1, r3
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f001 f8d1 	bl	800c5f0 <USBD_LL_IsStallEP>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d003      	beq.n	800b45c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	2201      	movs	r2, #1
 800b458:	601a      	str	r2, [r3, #0]
 800b45a:	e002      	b.n	800b462 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	2200      	movs	r2, #0
 800b460:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2202      	movs	r2, #2
 800b466:	4619      	mov	r1, r3
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 fbfb 	bl	800bc64 <USBD_CtlSendData>
              break;
 800b46e:	e004      	b.n	800b47a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b470:	6839      	ldr	r1, [r7, #0]
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 fb85 	bl	800bb82 <USBD_CtlError>
              break;
 800b478:	bf00      	nop
          }
          break;
 800b47a:	e004      	b.n	800b486 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b47c:	6839      	ldr	r1, [r7, #0]
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fb7f 	bl	800bb82 <USBD_CtlError>
          break;
 800b484:	bf00      	nop
      }
      break;
 800b486:	e005      	b.n	800b494 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fb79 	bl	800bb82 <USBD_CtlError>
      break;
 800b490:	e000      	b.n	800b494 <USBD_StdEPReq+0x330>
      break;
 800b492:	bf00      	nop
  }

  return ret;
 800b494:	7bfb      	ldrb	r3, [r7, #15]
}
 800b496:	4618      	mov	r0, r3
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
	...

0800b4a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	885b      	ldrh	r3, [r3, #2]
 800b4ba:	0a1b      	lsrs	r3, r3, #8
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	2b0e      	cmp	r3, #14
 800b4c2:	f200 8152 	bhi.w	800b76a <USBD_GetDescriptor+0x2ca>
 800b4c6:	a201      	add	r2, pc, #4	; (adr r2, 800b4cc <USBD_GetDescriptor+0x2c>)
 800b4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4cc:	0800b53d 	.word	0x0800b53d
 800b4d0:	0800b555 	.word	0x0800b555
 800b4d4:	0800b595 	.word	0x0800b595
 800b4d8:	0800b76b 	.word	0x0800b76b
 800b4dc:	0800b76b 	.word	0x0800b76b
 800b4e0:	0800b70b 	.word	0x0800b70b
 800b4e4:	0800b737 	.word	0x0800b737
 800b4e8:	0800b76b 	.word	0x0800b76b
 800b4ec:	0800b76b 	.word	0x0800b76b
 800b4f0:	0800b76b 	.word	0x0800b76b
 800b4f4:	0800b76b 	.word	0x0800b76b
 800b4f8:	0800b76b 	.word	0x0800b76b
 800b4fc:	0800b76b 	.word	0x0800b76b
 800b500:	0800b76b 	.word	0x0800b76b
 800b504:	0800b509 	.word	0x0800b509
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b50e:	69db      	ldr	r3, [r3, #28]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00b      	beq.n	800b52c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b51a:	69db      	ldr	r3, [r3, #28]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	7c12      	ldrb	r2, [r2, #16]
 800b520:	f107 0108 	add.w	r1, r7, #8
 800b524:	4610      	mov	r0, r2
 800b526:	4798      	blx	r3
 800b528:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b52a:	e126      	b.n	800b77a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b52c:	6839      	ldr	r1, [r7, #0]
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 fb27 	bl	800bb82 <USBD_CtlError>
        err++;
 800b534:	7afb      	ldrb	r3, [r7, #11]
 800b536:	3301      	adds	r3, #1
 800b538:	72fb      	strb	r3, [r7, #11]
      break;
 800b53a:	e11e      	b.n	800b77a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	7c12      	ldrb	r2, [r2, #16]
 800b548:	f107 0108 	add.w	r1, r7, #8
 800b54c:	4610      	mov	r0, r2
 800b54e:	4798      	blx	r3
 800b550:	60f8      	str	r0, [r7, #12]
      break;
 800b552:	e112      	b.n	800b77a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	7c1b      	ldrb	r3, [r3, #16]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10d      	bne.n	800b578 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b564:	f107 0208 	add.w	r2, r7, #8
 800b568:	4610      	mov	r0, r2
 800b56a:	4798      	blx	r3
 800b56c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	3301      	adds	r3, #1
 800b572:	2202      	movs	r2, #2
 800b574:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b576:	e100      	b.n	800b77a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b580:	f107 0208 	add.w	r2, r7, #8
 800b584:	4610      	mov	r0, r2
 800b586:	4798      	blx	r3
 800b588:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	3301      	adds	r3, #1
 800b58e:	2202      	movs	r2, #2
 800b590:	701a      	strb	r2, [r3, #0]
      break;
 800b592:	e0f2      	b.n	800b77a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	885b      	ldrh	r3, [r3, #2]
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b05      	cmp	r3, #5
 800b59c:	f200 80ac 	bhi.w	800b6f8 <USBD_GetDescriptor+0x258>
 800b5a0:	a201      	add	r2, pc, #4	; (adr r2, 800b5a8 <USBD_GetDescriptor+0x108>)
 800b5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a6:	bf00      	nop
 800b5a8:	0800b5c1 	.word	0x0800b5c1
 800b5ac:	0800b5f5 	.word	0x0800b5f5
 800b5b0:	0800b629 	.word	0x0800b629
 800b5b4:	0800b65d 	.word	0x0800b65d
 800b5b8:	0800b691 	.word	0x0800b691
 800b5bc:	0800b6c5 	.word	0x0800b6c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00b      	beq.n	800b5e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	7c12      	ldrb	r2, [r2, #16]
 800b5d8:	f107 0108 	add.w	r1, r7, #8
 800b5dc:	4610      	mov	r0, r2
 800b5de:	4798      	blx	r3
 800b5e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5e2:	e091      	b.n	800b708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5e4:	6839      	ldr	r1, [r7, #0]
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 facb 	bl	800bb82 <USBD_CtlError>
            err++;
 800b5ec:	7afb      	ldrb	r3, [r7, #11]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b5f2:	e089      	b.n	800b708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d00b      	beq.n	800b618 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	7c12      	ldrb	r2, [r2, #16]
 800b60c:	f107 0108 	add.w	r1, r7, #8
 800b610:	4610      	mov	r0, r2
 800b612:	4798      	blx	r3
 800b614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b616:	e077      	b.n	800b708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b618:	6839      	ldr	r1, [r7, #0]
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fab1 	bl	800bb82 <USBD_CtlError>
            err++;
 800b620:	7afb      	ldrb	r3, [r7, #11]
 800b622:	3301      	adds	r3, #1
 800b624:	72fb      	strb	r3, [r7, #11]
          break;
 800b626:	e06f      	b.n	800b708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00b      	beq.n	800b64c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	7c12      	ldrb	r2, [r2, #16]
 800b640:	f107 0108 	add.w	r1, r7, #8
 800b644:	4610      	mov	r0, r2
 800b646:	4798      	blx	r3
 800b648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b64a:	e05d      	b.n	800b708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fa97 	bl	800bb82 <USBD_CtlError>
            err++;
 800b654:	7afb      	ldrb	r3, [r7, #11]
 800b656:	3301      	adds	r3, #1
 800b658:	72fb      	strb	r3, [r7, #11]
          break;
 800b65a:	e055      	b.n	800b708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00b      	beq.n	800b680 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	7c12      	ldrb	r2, [r2, #16]
 800b674:	f107 0108 	add.w	r1, r7, #8
 800b678:	4610      	mov	r0, r2
 800b67a:	4798      	blx	r3
 800b67c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b67e:	e043      	b.n	800b708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b680:	6839      	ldr	r1, [r7, #0]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fa7d 	bl	800bb82 <USBD_CtlError>
            err++;
 800b688:	7afb      	ldrb	r3, [r7, #11]
 800b68a:	3301      	adds	r3, #1
 800b68c:	72fb      	strb	r3, [r7, #11]
          break;
 800b68e:	e03b      	b.n	800b708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b696:	695b      	ldr	r3, [r3, #20]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d00b      	beq.n	800b6b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6a2:	695b      	ldr	r3, [r3, #20]
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	7c12      	ldrb	r2, [r2, #16]
 800b6a8:	f107 0108 	add.w	r1, r7, #8
 800b6ac:	4610      	mov	r0, r2
 800b6ae:	4798      	blx	r3
 800b6b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6b2:	e029      	b.n	800b708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b6b4:	6839      	ldr	r1, [r7, #0]
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fa63 	bl	800bb82 <USBD_CtlError>
            err++;
 800b6bc:	7afb      	ldrb	r3, [r7, #11]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b6c2:	e021      	b.n	800b708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6ca:	699b      	ldr	r3, [r3, #24]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d00b      	beq.n	800b6e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6d6:	699b      	ldr	r3, [r3, #24]
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	7c12      	ldrb	r2, [r2, #16]
 800b6dc:	f107 0108 	add.w	r1, r7, #8
 800b6e0:	4610      	mov	r0, r2
 800b6e2:	4798      	blx	r3
 800b6e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6e6:	e00f      	b.n	800b708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b6e8:	6839      	ldr	r1, [r7, #0]
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fa49 	bl	800bb82 <USBD_CtlError>
            err++;
 800b6f0:	7afb      	ldrb	r3, [r7, #11]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b6f6:	e007      	b.n	800b708 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b6f8:	6839      	ldr	r1, [r7, #0]
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fa41 	bl	800bb82 <USBD_CtlError>
          err++;
 800b700:	7afb      	ldrb	r3, [r7, #11]
 800b702:	3301      	adds	r3, #1
 800b704:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b706:	bf00      	nop
      }
      break;
 800b708:	e037      	b.n	800b77a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	7c1b      	ldrb	r3, [r3, #16]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d109      	bne.n	800b726 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b71a:	f107 0208 	add.w	r2, r7, #8
 800b71e:	4610      	mov	r0, r2
 800b720:	4798      	blx	r3
 800b722:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b724:	e029      	b.n	800b77a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b726:	6839      	ldr	r1, [r7, #0]
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fa2a 	bl	800bb82 <USBD_CtlError>
        err++;
 800b72e:	7afb      	ldrb	r3, [r7, #11]
 800b730:	3301      	adds	r3, #1
 800b732:	72fb      	strb	r3, [r7, #11]
      break;
 800b734:	e021      	b.n	800b77a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	7c1b      	ldrb	r3, [r3, #16]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10d      	bne.n	800b75a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b746:	f107 0208 	add.w	r2, r7, #8
 800b74a:	4610      	mov	r0, r2
 800b74c:	4798      	blx	r3
 800b74e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	3301      	adds	r3, #1
 800b754:	2207      	movs	r2, #7
 800b756:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b758:	e00f      	b.n	800b77a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b75a:	6839      	ldr	r1, [r7, #0]
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 fa10 	bl	800bb82 <USBD_CtlError>
        err++;
 800b762:	7afb      	ldrb	r3, [r7, #11]
 800b764:	3301      	adds	r3, #1
 800b766:	72fb      	strb	r3, [r7, #11]
      break;
 800b768:	e007      	b.n	800b77a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fa08 	bl	800bb82 <USBD_CtlError>
      err++;
 800b772:	7afb      	ldrb	r3, [r7, #11]
 800b774:	3301      	adds	r3, #1
 800b776:	72fb      	strb	r3, [r7, #11]
      break;
 800b778:	bf00      	nop
  }

  if (err != 0U)
 800b77a:	7afb      	ldrb	r3, [r7, #11]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d11e      	bne.n	800b7be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	88db      	ldrh	r3, [r3, #6]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d016      	beq.n	800b7b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b788:	893b      	ldrh	r3, [r7, #8]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00e      	beq.n	800b7ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	88da      	ldrh	r2, [r3, #6]
 800b792:	893b      	ldrh	r3, [r7, #8]
 800b794:	4293      	cmp	r3, r2
 800b796:	bf28      	it	cs
 800b798:	4613      	movcs	r3, r2
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b79e:	893b      	ldrh	r3, [r7, #8]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	68f9      	ldr	r1, [r7, #12]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fa5d 	bl	800bc64 <USBD_CtlSendData>
 800b7aa:	e009      	b.n	800b7c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f9e7 	bl	800bb82 <USBD_CtlError>
 800b7b4:	e004      	b.n	800b7c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 faae 	bl	800bd18 <USBD_CtlSendStatus>
 800b7bc:	e000      	b.n	800b7c0 <USBD_GetDescriptor+0x320>
    return;
 800b7be:	bf00      	nop
  }
}
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop

0800b7c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	889b      	ldrh	r3, [r3, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d131      	bne.n	800b83e <USBD_SetAddress+0x76>
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	88db      	ldrh	r3, [r3, #6]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d12d      	bne.n	800b83e <USBD_SetAddress+0x76>
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	885b      	ldrh	r3, [r3, #2]
 800b7e6:	2b7f      	cmp	r3, #127	; 0x7f
 800b7e8:	d829      	bhi.n	800b83e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	885b      	ldrh	r3, [r3, #2]
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	2b03      	cmp	r3, #3
 800b800:	d104      	bne.n	800b80c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b802:	6839      	ldr	r1, [r7, #0]
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f9bc 	bl	800bb82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b80a:	e01d      	b.n	800b848 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	7bfa      	ldrb	r2, [r7, #15]
 800b810:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b814:	7bfb      	ldrb	r3, [r7, #15]
 800b816:	4619      	mov	r1, r3
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 ff15 	bl	800c648 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 fa7a 	bl	800bd18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b824:	7bfb      	ldrb	r3, [r7, #15]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d004      	beq.n	800b834 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2202      	movs	r2, #2
 800b82e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b832:	e009      	b.n	800b848 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b83c:	e004      	b.n	800b848 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f99e 	bl	800bb82 <USBD_CtlError>
  }
}
 800b846:	bf00      	nop
 800b848:	bf00      	nop
 800b84a:	3710      	adds	r7, #16
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	885b      	ldrh	r3, [r3, #2]
 800b862:	b2da      	uxtb	r2, r3
 800b864:	4b4e      	ldr	r3, [pc, #312]	; (800b9a0 <USBD_SetConfig+0x150>)
 800b866:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b868:	4b4d      	ldr	r3, [pc, #308]	; (800b9a0 <USBD_SetConfig+0x150>)
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d905      	bls.n	800b87c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b870:	6839      	ldr	r1, [r7, #0]
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 f985 	bl	800bb82 <USBD_CtlError>
    return USBD_FAIL;
 800b878:	2303      	movs	r3, #3
 800b87a:	e08c      	b.n	800b996 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b882:	b2db      	uxtb	r3, r3
 800b884:	2b02      	cmp	r3, #2
 800b886:	d002      	beq.n	800b88e <USBD_SetConfig+0x3e>
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d029      	beq.n	800b8e0 <USBD_SetConfig+0x90>
 800b88c:	e075      	b.n	800b97a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b88e:	4b44      	ldr	r3, [pc, #272]	; (800b9a0 <USBD_SetConfig+0x150>)
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d020      	beq.n	800b8d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b896:	4b42      	ldr	r3, [pc, #264]	; (800b9a0 <USBD_SetConfig+0x150>)
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	461a      	mov	r2, r3
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8a0:	4b3f      	ldr	r3, [pc, #252]	; (800b9a0 <USBD_SetConfig+0x150>)
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f7fe ffb7 	bl	800a81a <USBD_SetClassConfig>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b8b0:	7bfb      	ldrb	r3, [r7, #15]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d008      	beq.n	800b8c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b8b6:	6839      	ldr	r1, [r7, #0]
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 f962 	bl	800bb82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b8c6:	e065      	b.n	800b994 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fa25 	bl	800bd18 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2203      	movs	r2, #3
 800b8d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b8d6:	e05d      	b.n	800b994 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fa1d 	bl	800bd18 <USBD_CtlSendStatus>
      break;
 800b8de:	e059      	b.n	800b994 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b8e0:	4b2f      	ldr	r3, [pc, #188]	; (800b9a0 <USBD_SetConfig+0x150>)
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d112      	bne.n	800b90e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2202      	movs	r2, #2
 800b8ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b8f0:	4b2b      	ldr	r3, [pc, #172]	; (800b9a0 <USBD_SetConfig+0x150>)
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8fa:	4b29      	ldr	r3, [pc, #164]	; (800b9a0 <USBD_SetConfig+0x150>)
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f7fe ffa6 	bl	800a852 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fa06 	bl	800bd18 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b90c:	e042      	b.n	800b994 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b90e:	4b24      	ldr	r3, [pc, #144]	; (800b9a0 <USBD_SetConfig+0x150>)
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	461a      	mov	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d02a      	beq.n	800b972 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	b2db      	uxtb	r3, r3
 800b922:	4619      	mov	r1, r3
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f7fe ff94 	bl	800a852 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b92a:	4b1d      	ldr	r3, [pc, #116]	; (800b9a0 <USBD_SetConfig+0x150>)
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	461a      	mov	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b934:	4b1a      	ldr	r3, [pc, #104]	; (800b9a0 <USBD_SetConfig+0x150>)
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	4619      	mov	r1, r3
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f7fe ff6d 	bl	800a81a <USBD_SetClassConfig>
 800b940:	4603      	mov	r3, r0
 800b942:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b944:	7bfb      	ldrb	r3, [r7, #15]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00f      	beq.n	800b96a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b94a:	6839      	ldr	r1, [r7, #0]
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 f918 	bl	800bb82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	b2db      	uxtb	r3, r3
 800b958:	4619      	mov	r1, r3
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f7fe ff79 	bl	800a852 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2202      	movs	r2, #2
 800b964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b968:	e014      	b.n	800b994 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f9d4 	bl	800bd18 <USBD_CtlSendStatus>
      break;
 800b970:	e010      	b.n	800b994 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 f9d0 	bl	800bd18 <USBD_CtlSendStatus>
      break;
 800b978:	e00c      	b.n	800b994 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b97a:	6839      	ldr	r1, [r7, #0]
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f900 	bl	800bb82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b982:	4b07      	ldr	r3, [pc, #28]	; (800b9a0 <USBD_SetConfig+0x150>)
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	4619      	mov	r1, r3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f7fe ff62 	bl	800a852 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b98e:	2303      	movs	r3, #3
 800b990:	73fb      	strb	r3, [r7, #15]
      break;
 800b992:	bf00      	nop
  }

  return ret;
 800b994:	7bfb      	ldrb	r3, [r7, #15]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	24000474 	.word	0x24000474

0800b9a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	88db      	ldrh	r3, [r3, #6]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d004      	beq.n	800b9c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b9b6:	6839      	ldr	r1, [r7, #0]
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f8e2 	bl	800bb82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b9be:	e023      	b.n	800ba08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	2b02      	cmp	r3, #2
 800b9ca:	dc02      	bgt.n	800b9d2 <USBD_GetConfig+0x2e>
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	dc03      	bgt.n	800b9d8 <USBD_GetConfig+0x34>
 800b9d0:	e015      	b.n	800b9fe <USBD_GetConfig+0x5a>
 800b9d2:	2b03      	cmp	r3, #3
 800b9d4:	d00b      	beq.n	800b9ee <USBD_GetConfig+0x4a>
 800b9d6:	e012      	b.n	800b9fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 f93c 	bl	800bc64 <USBD_CtlSendData>
        break;
 800b9ec:	e00c      	b.n	800ba08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 f934 	bl	800bc64 <USBD_CtlSendData>
        break;
 800b9fc:	e004      	b.n	800ba08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b9fe:	6839      	ldr	r1, [r7, #0]
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f8be 	bl	800bb82 <USBD_CtlError>
        break;
 800ba06:	bf00      	nop
}
 800ba08:	bf00      	nop
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	3b01      	subs	r3, #1
 800ba24:	2b02      	cmp	r3, #2
 800ba26:	d81e      	bhi.n	800ba66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	88db      	ldrh	r3, [r3, #6]
 800ba2c:	2b02      	cmp	r3, #2
 800ba2e:	d004      	beq.n	800ba3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ba30:	6839      	ldr	r1, [r7, #0]
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f8a5 	bl	800bb82 <USBD_CtlError>
        break;
 800ba38:	e01a      	b.n	800ba70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d005      	beq.n	800ba56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	f043 0202 	orr.w	r2, r3, #2
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	330c      	adds	r3, #12
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 f900 	bl	800bc64 <USBD_CtlSendData>
      break;
 800ba64:	e004      	b.n	800ba70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ba66:	6839      	ldr	r1, [r7, #0]
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f88a 	bl	800bb82 <USBD_CtlError>
      break;
 800ba6e:	bf00      	nop
  }
}
 800ba70:	bf00      	nop
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	885b      	ldrh	r3, [r3, #2]
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d107      	bne.n	800ba9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 f940 	bl	800bd18 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ba98:	e013      	b.n	800bac2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	885b      	ldrh	r3, [r3, #2]
 800ba9e:	2b02      	cmp	r3, #2
 800baa0:	d10b      	bne.n	800baba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	889b      	ldrh	r3, [r3, #4]
 800baa6:	0a1b      	lsrs	r3, r3, #8
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f930 	bl	800bd18 <USBD_CtlSendStatus>
}
 800bab8:	e003      	b.n	800bac2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800baba:	6839      	ldr	r1, [r7, #0]
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 f860 	bl	800bb82 <USBD_CtlError>
}
 800bac2:	bf00      	nop
 800bac4:	3708      	adds	r7, #8
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b082      	sub	sp, #8
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bada:	b2db      	uxtb	r3, r3
 800badc:	3b01      	subs	r3, #1
 800bade:	2b02      	cmp	r3, #2
 800bae0:	d80b      	bhi.n	800bafa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	885b      	ldrh	r3, [r3, #2]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d10c      	bne.n	800bb04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f910 	bl	800bd18 <USBD_CtlSendStatus>
      }
      break;
 800baf8:	e004      	b.n	800bb04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 f840 	bl	800bb82 <USBD_CtlError>
      break;
 800bb02:	e000      	b.n	800bb06 <USBD_ClrFeature+0x3c>
      break;
 800bb04:	bf00      	nop
  }
}
 800bb06:	bf00      	nop
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b084      	sub	sp, #16
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	781a      	ldrb	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	3301      	adds	r3, #1
 800bb28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	781a      	ldrb	r2, [r3, #0]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	3301      	adds	r3, #1
 800bb36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f7ff fa17 	bl	800af6c <SWAPBYTE>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	461a      	mov	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f7ff fa0a 	bl	800af6c <SWAPBYTE>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	3301      	adds	r3, #1
 800bb64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f7ff f9fd 	bl	800af6c <SWAPBYTE>
 800bb72:	4603      	mov	r3, r0
 800bb74:	461a      	mov	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	80da      	strh	r2, [r3, #6]
}
 800bb7a:	bf00      	nop
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b082      	sub	sp, #8
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
 800bb8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb8c:	2180      	movs	r1, #128	; 0x80
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 fcf0 	bl	800c574 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bb94:	2100      	movs	r1, #0
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fcec 	bl	800c574 <USBD_LL_StallEP>
}
 800bb9c:	bf00      	nop
 800bb9e:	3708      	adds	r7, #8
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d036      	beq.n	800bc28 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bbbe:	6938      	ldr	r0, [r7, #16]
 800bbc0:	f000 f836 	bl	800bc30 <USBD_GetLen>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	005b      	lsls	r3, r3, #1
 800bbcc:	b29a      	uxth	r2, r3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bbd2:	7dfb      	ldrb	r3, [r7, #23]
 800bbd4:	68ba      	ldr	r2, [r7, #8]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	7812      	ldrb	r2, [r2, #0]
 800bbdc:	701a      	strb	r2, [r3, #0]
  idx++;
 800bbde:	7dfb      	ldrb	r3, [r7, #23]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bbe4:	7dfb      	ldrb	r3, [r7, #23]
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	4413      	add	r3, r2
 800bbea:	2203      	movs	r2, #3
 800bbec:	701a      	strb	r2, [r3, #0]
  idx++;
 800bbee:	7dfb      	ldrb	r3, [r7, #23]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bbf4:	e013      	b.n	800bc1e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bbf6:	7dfb      	ldrb	r3, [r7, #23]
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	693a      	ldr	r2, [r7, #16]
 800bbfe:	7812      	ldrb	r2, [r2, #0]
 800bc00:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	3301      	adds	r3, #1
 800bc06:	613b      	str	r3, [r7, #16]
    idx++;
 800bc08:	7dfb      	ldrb	r3, [r7, #23]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bc0e:	7dfb      	ldrb	r3, [r7, #23]
 800bc10:	68ba      	ldr	r2, [r7, #8]
 800bc12:	4413      	add	r3, r2
 800bc14:	2200      	movs	r2, #0
 800bc16:	701a      	strb	r2, [r3, #0]
    idx++;
 800bc18:	7dfb      	ldrb	r3, [r7, #23]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1e7      	bne.n	800bbf6 <USBD_GetString+0x52>
 800bc26:	e000      	b.n	800bc2a <USBD_GetString+0x86>
    return;
 800bc28:	bf00      	nop
  }
}
 800bc2a:	3718      	adds	r7, #24
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bc40:	e005      	b.n	800bc4e <USBD_GetLen+0x1e>
  {
    len++;
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
 800bc44:	3301      	adds	r3, #1
 800bc46:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1f5      	bne.n	800bc42 <USBD_GetLen+0x12>
  }

  return len;
 800bc56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3714      	adds	r7, #20
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2202      	movs	r2, #2
 800bc74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	68ba      	ldr	r2, [r7, #8]
 800bc88:	2100      	movs	r1, #0
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f000 fcfb 	bl	800c686 <USBD_LL_Transmit>

  return USBD_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b084      	sub	sp, #16
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	60f8      	str	r0, [r7, #12]
 800bca2:	60b9      	str	r1, [r7, #8]
 800bca4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	2100      	movs	r1, #0
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f000 fcea 	bl	800c686 <USBD_LL_Transmit>

  return USBD_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2203      	movs	r2, #3
 800bccc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	68ba      	ldr	r2, [r7, #8]
 800bce4:	2100      	movs	r1, #0
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f000 fcee 	bl	800c6c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b084      	sub	sp, #16
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	60f8      	str	r0, [r7, #12]
 800bcfe:	60b9      	str	r1, [r7, #8]
 800bd00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	2100      	movs	r1, #0
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f000 fcdd 	bl	800c6c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2204      	movs	r2, #4
 800bd24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bd28:	2300      	movs	r3, #0
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fca9 	bl	800c686 <USBD_LL_Transmit>

  return USBD_OK;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b082      	sub	sp, #8
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2205      	movs	r2, #5
 800bd4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd4e:	2300      	movs	r3, #0
 800bd50:	2200      	movs	r2, #0
 800bd52:	2100      	movs	r1, #0
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fcb7 	bl	800c6c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	4913      	ldr	r1, [pc, #76]	; (800bdb8 <MX_USB_DEVICE_Init+0x54>)
 800bd6c:	4813      	ldr	r0, [pc, #76]	; (800bdbc <MX_USB_DEVICE_Init+0x58>)
 800bd6e:	f7fe fcd7 	bl	800a720 <USBD_Init>
 800bd72:	4603      	mov	r3, r0
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d001      	beq.n	800bd7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bd78:	f7f4 ff0c 	bl	8000b94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bd7c:	4910      	ldr	r1, [pc, #64]	; (800bdc0 <MX_USB_DEVICE_Init+0x5c>)
 800bd7e:	480f      	ldr	r0, [pc, #60]	; (800bdbc <MX_USB_DEVICE_Init+0x58>)
 800bd80:	f7fe fcfe 	bl	800a780 <USBD_RegisterClass>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bd8a:	f7f4 ff03 	bl	8000b94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bd8e:	490d      	ldr	r1, [pc, #52]	; (800bdc4 <MX_USB_DEVICE_Init+0x60>)
 800bd90:	480a      	ldr	r0, [pc, #40]	; (800bdbc <MX_USB_DEVICE_Init+0x58>)
 800bd92:	f7fe fc35 	bl	800a600 <USBD_CDC_RegisterInterface>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d001      	beq.n	800bda0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bd9c:	f7f4 fefa 	bl	8000b94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bda0:	4806      	ldr	r0, [pc, #24]	; (800bdbc <MX_USB_DEVICE_Init+0x58>)
 800bda2:	f7fe fd23 	bl	800a7ec <USBD_Start>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d001      	beq.n	800bdb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bdac:	f7f4 fef2 	bl	8000b94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800bdb0:	f7f7 fdfa 	bl	80039a8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bdb4:	bf00      	nop
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	240000b0 	.word	0x240000b0
 800bdbc:	24000478 	.word	0x24000478
 800bdc0:	2400001c 	.word	0x2400001c
 800bdc4:	2400009c 	.word	0x2400009c

0800bdc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bdcc:	2200      	movs	r2, #0
 800bdce:	4905      	ldr	r1, [pc, #20]	; (800bde4 <CDC_Init_FS+0x1c>)
 800bdd0:	4805      	ldr	r0, [pc, #20]	; (800bde8 <CDC_Init_FS+0x20>)
 800bdd2:	f7fe fc2f 	bl	800a634 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bdd6:	4905      	ldr	r1, [pc, #20]	; (800bdec <CDC_Init_FS+0x24>)
 800bdd8:	4803      	ldr	r0, [pc, #12]	; (800bde8 <CDC_Init_FS+0x20>)
 800bdda:	f7fe fc4d 	bl	800a678 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bdde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	24000f54 	.word	0x24000f54
 800bde8:	24000478 	.word	0x24000478
 800bdec:	24000754 	.word	0x24000754

0800bdf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bdf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	4603      	mov	r3, r0
 800be08:	6039      	str	r1, [r7, #0]
 800be0a:	71fb      	strb	r3, [r7, #7]
 800be0c:	4613      	mov	r3, r2
 800be0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800be10:	79fb      	ldrb	r3, [r7, #7]
 800be12:	2b23      	cmp	r3, #35	; 0x23
 800be14:	d84a      	bhi.n	800beac <CDC_Control_FS+0xac>
 800be16:	a201      	add	r2, pc, #4	; (adr r2, 800be1c <CDC_Control_FS+0x1c>)
 800be18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1c:	0800bead 	.word	0x0800bead
 800be20:	0800bead 	.word	0x0800bead
 800be24:	0800bead 	.word	0x0800bead
 800be28:	0800bead 	.word	0x0800bead
 800be2c:	0800bead 	.word	0x0800bead
 800be30:	0800bead 	.word	0x0800bead
 800be34:	0800bead 	.word	0x0800bead
 800be38:	0800bead 	.word	0x0800bead
 800be3c:	0800bead 	.word	0x0800bead
 800be40:	0800bead 	.word	0x0800bead
 800be44:	0800bead 	.word	0x0800bead
 800be48:	0800bead 	.word	0x0800bead
 800be4c:	0800bead 	.word	0x0800bead
 800be50:	0800bead 	.word	0x0800bead
 800be54:	0800bead 	.word	0x0800bead
 800be58:	0800bead 	.word	0x0800bead
 800be5c:	0800bead 	.word	0x0800bead
 800be60:	0800bead 	.word	0x0800bead
 800be64:	0800bead 	.word	0x0800bead
 800be68:	0800bead 	.word	0x0800bead
 800be6c:	0800bead 	.word	0x0800bead
 800be70:	0800bead 	.word	0x0800bead
 800be74:	0800bead 	.word	0x0800bead
 800be78:	0800bead 	.word	0x0800bead
 800be7c:	0800bead 	.word	0x0800bead
 800be80:	0800bead 	.word	0x0800bead
 800be84:	0800bead 	.word	0x0800bead
 800be88:	0800bead 	.word	0x0800bead
 800be8c:	0800bead 	.word	0x0800bead
 800be90:	0800bead 	.word	0x0800bead
 800be94:	0800bead 	.word	0x0800bead
 800be98:	0800bead 	.word	0x0800bead
 800be9c:	0800bead 	.word	0x0800bead
 800bea0:	0800bead 	.word	0x0800bead
 800bea4:	0800bead 	.word	0x0800bead
 800bea8:	0800bead 	.word	0x0800bead
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800beac:	bf00      	nop
  }

  return (USBD_OK);
 800beae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bec6:	6879      	ldr	r1, [r7, #4]
 800bec8:	4805      	ldr	r0, [pc, #20]	; (800bee0 <CDC_Receive_FS+0x24>)
 800beca:	f7fe fbd5 	bl	800a678 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bece:	4804      	ldr	r0, [pc, #16]	; (800bee0 <CDC_Receive_FS+0x24>)
 800bed0:	f7fe fbf0 	bl	800a6b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bed4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3708      	adds	r7, #8
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	24000478 	.word	0x24000478

0800bee4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b087      	sub	sp, #28
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	4613      	mov	r3, r2
 800bef0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bef2:	2300      	movs	r3, #0
 800bef4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800befa:	4618      	mov	r0, r3
 800befc:	371c      	adds	r7, #28
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
	...

0800bf08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	6039      	str	r1, [r7, #0]
 800bf12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	2212      	movs	r2, #18
 800bf18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bf1a:	4b03      	ldr	r3, [pc, #12]	; (800bf28 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr
 800bf28:	240000d0 	.word	0x240000d0

0800bf2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	4603      	mov	r3, r0
 800bf34:	6039      	str	r1, [r7, #0]
 800bf36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	2204      	movs	r2, #4
 800bf3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bf3e:	4b03      	ldr	r3, [pc, #12]	; (800bf4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	240000e4 	.word	0x240000e4

0800bf50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	4603      	mov	r3, r0
 800bf58:	6039      	str	r1, [r7, #0]
 800bf5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf5c:	79fb      	ldrb	r3, [r7, #7]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d105      	bne.n	800bf6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf62:	683a      	ldr	r2, [r7, #0]
 800bf64:	4907      	ldr	r1, [pc, #28]	; (800bf84 <USBD_FS_ProductStrDescriptor+0x34>)
 800bf66:	4808      	ldr	r0, [pc, #32]	; (800bf88 <USBD_FS_ProductStrDescriptor+0x38>)
 800bf68:	f7ff fe1c 	bl	800bba4 <USBD_GetString>
 800bf6c:	e004      	b.n	800bf78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	4904      	ldr	r1, [pc, #16]	; (800bf84 <USBD_FS_ProductStrDescriptor+0x34>)
 800bf72:	4805      	ldr	r0, [pc, #20]	; (800bf88 <USBD_FS_ProductStrDescriptor+0x38>)
 800bf74:	f7ff fe16 	bl	800bba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf78:	4b02      	ldr	r3, [pc, #8]	; (800bf84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	24001754 	.word	0x24001754
 800bf88:	0800c890 	.word	0x0800c890

0800bf8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	4603      	mov	r3, r0
 800bf94:	6039      	str	r1, [r7, #0]
 800bf96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	4904      	ldr	r1, [pc, #16]	; (800bfac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bf9c:	4804      	ldr	r0, [pc, #16]	; (800bfb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bf9e:	f7ff fe01 	bl	800bba4 <USBD_GetString>
  return USBD_StrDesc;
 800bfa2:	4b02      	ldr	r3, [pc, #8]	; (800bfac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	24001754 	.word	0x24001754
 800bfb0:	0800c8a8 	.word	0x0800c8a8

0800bfb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	4603      	mov	r3, r0
 800bfbc:	6039      	str	r1, [r7, #0]
 800bfbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	221a      	movs	r2, #26
 800bfc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bfc6:	f000 f843 	bl	800c050 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bfca:	4b02      	ldr	r3, [pc, #8]	; (800bfd4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3708      	adds	r7, #8
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	240000e8 	.word	0x240000e8

0800bfd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	4603      	mov	r3, r0
 800bfe0:	6039      	str	r1, [r7, #0]
 800bfe2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bfe4:	79fb      	ldrb	r3, [r7, #7]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d105      	bne.n	800bff6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	4907      	ldr	r1, [pc, #28]	; (800c00c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bfee:	4808      	ldr	r0, [pc, #32]	; (800c010 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bff0:	f7ff fdd8 	bl	800bba4 <USBD_GetString>
 800bff4:	e004      	b.n	800c000 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bff6:	683a      	ldr	r2, [r7, #0]
 800bff8:	4904      	ldr	r1, [pc, #16]	; (800c00c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bffa:	4805      	ldr	r0, [pc, #20]	; (800c010 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bffc:	f7ff fdd2 	bl	800bba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c000:	4b02      	ldr	r3, [pc, #8]	; (800c00c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c002:	4618      	mov	r0, r3
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	24001754 	.word	0x24001754
 800c010:	0800c8bc 	.word	0x0800c8bc

0800c014 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	4603      	mov	r3, r0
 800c01c:	6039      	str	r1, [r7, #0]
 800c01e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c020:	79fb      	ldrb	r3, [r7, #7]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d105      	bne.n	800c032 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c026:	683a      	ldr	r2, [r7, #0]
 800c028:	4907      	ldr	r1, [pc, #28]	; (800c048 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c02a:	4808      	ldr	r0, [pc, #32]	; (800c04c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c02c:	f7ff fdba 	bl	800bba4 <USBD_GetString>
 800c030:	e004      	b.n	800c03c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c032:	683a      	ldr	r2, [r7, #0]
 800c034:	4904      	ldr	r1, [pc, #16]	; (800c048 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c036:	4805      	ldr	r0, [pc, #20]	; (800c04c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c038:	f7ff fdb4 	bl	800bba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c03c:	4b02      	ldr	r3, [pc, #8]	; (800c048 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3708      	adds	r7, #8
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	24001754 	.word	0x24001754
 800c04c:	0800c8c8 	.word	0x0800c8c8

0800c050 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c056:	4b0f      	ldr	r3, [pc, #60]	; (800c094 <Get_SerialNum+0x44>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c05c:	4b0e      	ldr	r3, [pc, #56]	; (800c098 <Get_SerialNum+0x48>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c062:	4b0e      	ldr	r3, [pc, #56]	; (800c09c <Get_SerialNum+0x4c>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4413      	add	r3, r2
 800c06e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d009      	beq.n	800c08a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c076:	2208      	movs	r2, #8
 800c078:	4909      	ldr	r1, [pc, #36]	; (800c0a0 <Get_SerialNum+0x50>)
 800c07a:	68f8      	ldr	r0, [r7, #12]
 800c07c:	f000 f814 	bl	800c0a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c080:	2204      	movs	r2, #4
 800c082:	4908      	ldr	r1, [pc, #32]	; (800c0a4 <Get_SerialNum+0x54>)
 800c084:	68b8      	ldr	r0, [r7, #8]
 800c086:	f000 f80f 	bl	800c0a8 <IntToUnicode>
  }
}
 800c08a:	bf00      	nop
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	1ff1e800 	.word	0x1ff1e800
 800c098:	1ff1e804 	.word	0x1ff1e804
 800c09c:	1ff1e808 	.word	0x1ff1e808
 800c0a0:	240000ea 	.word	0x240000ea
 800c0a4:	240000fa 	.word	0x240000fa

0800c0a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b087      	sub	sp, #28
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	75fb      	strb	r3, [r7, #23]
 800c0be:	e027      	b.n	800c110 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	0f1b      	lsrs	r3, r3, #28
 800c0c4:	2b09      	cmp	r3, #9
 800c0c6:	d80b      	bhi.n	800c0e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	0f1b      	lsrs	r3, r3, #28
 800c0cc:	b2da      	uxtb	r2, r3
 800c0ce:	7dfb      	ldrb	r3, [r7, #23]
 800c0d0:	005b      	lsls	r3, r3, #1
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	440b      	add	r3, r1
 800c0d8:	3230      	adds	r2, #48	; 0x30
 800c0da:	b2d2      	uxtb	r2, r2
 800c0dc:	701a      	strb	r2, [r3, #0]
 800c0de:	e00a      	b.n	800c0f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	0f1b      	lsrs	r3, r3, #28
 800c0e4:	b2da      	uxtb	r2, r3
 800c0e6:	7dfb      	ldrb	r3, [r7, #23]
 800c0e8:	005b      	lsls	r3, r3, #1
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	440b      	add	r3, r1
 800c0f0:	3237      	adds	r2, #55	; 0x37
 800c0f2:	b2d2      	uxtb	r2, r2
 800c0f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	011b      	lsls	r3, r3, #4
 800c0fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c0fc:	7dfb      	ldrb	r3, [r7, #23]
 800c0fe:	005b      	lsls	r3, r3, #1
 800c100:	3301      	adds	r3, #1
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	4413      	add	r3, r2
 800c106:	2200      	movs	r2, #0
 800c108:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c10a:	7dfb      	ldrb	r3, [r7, #23]
 800c10c:	3301      	adds	r3, #1
 800c10e:	75fb      	strb	r3, [r7, #23]
 800c110:	7dfa      	ldrb	r2, [r7, #23]
 800c112:	79fb      	ldrb	r3, [r7, #7]
 800c114:	429a      	cmp	r2, r3
 800c116:	d3d3      	bcc.n	800c0c0 <IntToUnicode+0x18>
  }
}
 800c118:	bf00      	nop
 800c11a:	bf00      	nop
 800c11c:	371c      	adds	r7, #28
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
	...

0800c128 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b0ba      	sub	sp, #232	; 0xe8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c130:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c134:	2200      	movs	r2, #0
 800c136:	601a      	str	r2, [r3, #0]
 800c138:	605a      	str	r2, [r3, #4]
 800c13a:	609a      	str	r2, [r3, #8]
 800c13c:	60da      	str	r2, [r3, #12]
 800c13e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c140:	f107 0310 	add.w	r3, r7, #16
 800c144:	22c0      	movs	r2, #192	; 0xc0
 800c146:	2100      	movs	r1, #0
 800c148:	4618      	mov	r0, r3
 800c14a:	f000 fb35 	bl	800c7b8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a34      	ldr	r2, [pc, #208]	; (800c224 <HAL_PCD_MspInit+0xfc>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d161      	bne.n	800c21c <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c158:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c15c:	f04f 0300 	mov.w	r3, #0
 800c160:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800c164:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c16c:	f107 0310 	add.w	r3, r7, #16
 800c170:	4618      	mov	r0, r3
 800c172:	f7f8 fc0f 	bl	8004994 <HAL_RCCEx_PeriphCLKConfig>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d001      	beq.n	800c180 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800c17c:	f7f4 fd0a 	bl	8000b94 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800c180:	f7f7 fc12 	bl	80039a8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c184:	4b28      	ldr	r3, [pc, #160]	; (800c228 <HAL_PCD_MspInit+0x100>)
 800c186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c18a:	4a27      	ldr	r2, [pc, #156]	; (800c228 <HAL_PCD_MspInit+0x100>)
 800c18c:	f043 0301 	orr.w	r3, r3, #1
 800c190:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c194:	4b24      	ldr	r3, [pc, #144]	; (800c228 <HAL_PCD_MspInit+0x100>)
 800c196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c19a:	f003 0301 	and.w	r3, r3, #1
 800c19e:	60fb      	str	r3, [r7, #12]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c1a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c1a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800c1bc:	230a      	movs	r3, #10
 800c1be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	4818      	ldr	r0, [pc, #96]	; (800c22c <HAL_PCD_MspInit+0x104>)
 800c1ca:	f7f5 ff49 	bl	8002060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c1ce:	4b16      	ldr	r3, [pc, #88]	; (800c228 <HAL_PCD_MspInit+0x100>)
 800c1d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c1d4:	4a14      	ldr	r2, [pc, #80]	; (800c228 <HAL_PCD_MspInit+0x100>)
 800c1d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c1da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c1de:	4b12      	ldr	r3, [pc, #72]	; (800c228 <HAL_PCD_MspInit+0x100>)
 800c1e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c1e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1e8:	60bb      	str	r3, [r7, #8]
 800c1ea:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	2062      	movs	r0, #98	; 0x62
 800c1f2:	f7f5 fb9c 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 800c1f6:	2062      	movs	r0, #98	; 0x62
 800c1f8:	f7f5 fbb3 	bl	8001962 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	2100      	movs	r1, #0
 800c200:	2063      	movs	r0, #99	; 0x63
 800c202:	f7f5 fb94 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 800c206:	2063      	movs	r0, #99	; 0x63
 800c208:	f7f5 fbab 	bl	8001962 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c20c:	2200      	movs	r2, #0
 800c20e:	2100      	movs	r1, #0
 800c210:	2065      	movs	r0, #101	; 0x65
 800c212:	f7f5 fb8c 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c216:	2065      	movs	r0, #101	; 0x65
 800c218:	f7f5 fba3 	bl	8001962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c21c:	bf00      	nop
 800c21e:	37e8      	adds	r7, #232	; 0xe8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	40080000 	.word	0x40080000
 800c228:	58024400 	.word	0x58024400
 800c22c:	58020000 	.word	0x58020000

0800c230 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c244:	4619      	mov	r1, r3
 800c246:	4610      	mov	r0, r2
 800c248:	f7fe fb1d 	bl	800a886 <USBD_LL_SetupStage>
}
 800c24c:	bf00      	nop
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c266:	78fa      	ldrb	r2, [r7, #3]
 800c268:	6879      	ldr	r1, [r7, #4]
 800c26a:	4613      	mov	r3, r2
 800c26c:	00db      	lsls	r3, r3, #3
 800c26e:	4413      	add	r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	440b      	add	r3, r1
 800c274:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	78fb      	ldrb	r3, [r7, #3]
 800c27c:	4619      	mov	r1, r3
 800c27e:	f7fe fb57 	bl	800a930 <USBD_LL_DataOutStage>
}
 800c282:	bf00      	nop
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b082      	sub	sp, #8
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	460b      	mov	r3, r1
 800c294:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c29c:	78fa      	ldrb	r2, [r7, #3]
 800c29e:	6879      	ldr	r1, [r7, #4]
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	00db      	lsls	r3, r3, #3
 800c2a4:	4413      	add	r3, r2
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	440b      	add	r3, r1
 800c2aa:	3348      	adds	r3, #72	; 0x48
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	78fb      	ldrb	r3, [r7, #3]
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	f7fe fbf0 	bl	800aa96 <USBD_LL_DataInStage>
}
 800c2b6:	bf00      	nop
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b082      	sub	sp, #8
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7fe fd2a 	bl	800ad26 <USBD_LL_SOF>
}
 800c2d2:	bf00      	nop
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b084      	sub	sp, #16
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	691b      	ldr	r3, [r3, #16]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d102      	bne.n	800c2f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	73fb      	strb	r3, [r7, #15]
 800c2f2:	e008      	b.n	800c306 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	691b      	ldr	r3, [r3, #16]
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d102      	bne.n	800c302 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	73fb      	strb	r3, [r7, #15]
 800c300:	e001      	b.n	800c306 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c302:	f7f4 fc47 	bl	8000b94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c30c:	7bfa      	ldrb	r2, [r7, #15]
 800c30e:	4611      	mov	r1, r2
 800c310:	4618      	mov	r0, r3
 800c312:	f7fe fcc4 	bl	800ac9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7fe fc6c 	bl	800abfa <USBD_LL_Reset>
}
 800c322:	bf00      	nop
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
	...

0800c32c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fe fcbf 	bl	800acbe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	6812      	ldr	r2, [r2, #0]
 800c34e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c352:	f043 0301 	orr.w	r3, r3, #1
 800c356:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6a1b      	ldr	r3, [r3, #32]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d005      	beq.n	800c36c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c360:	4b04      	ldr	r3, [pc, #16]	; (800c374 <HAL_PCD_SuspendCallback+0x48>)
 800c362:	691b      	ldr	r3, [r3, #16]
 800c364:	4a03      	ldr	r2, [pc, #12]	; (800c374 <HAL_PCD_SuspendCallback+0x48>)
 800c366:	f043 0306 	orr.w	r3, r3, #6
 800c36a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c36c:	bf00      	nop
 800c36e:	3708      	adds	r7, #8
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	e000ed00 	.word	0xe000ed00

0800c378 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c386:	4618      	mov	r0, r3
 800c388:	f7fe fcb5 	bl	800acf6 <USBD_LL_Resume>
}
 800c38c:	bf00      	nop
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	460b      	mov	r3, r1
 800c39e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c3a6:	78fa      	ldrb	r2, [r7, #3]
 800c3a8:	4611      	mov	r1, r2
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7fe fd0d 	bl	800adca <USBD_LL_IsoOUTIncomplete>
}
 800c3b0:	bf00      	nop
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c3ca:	78fa      	ldrb	r2, [r7, #3]
 800c3cc:	4611      	mov	r1, r2
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fe fcc9 	bl	800ad66 <USBD_LL_IsoINIncomplete>
}
 800c3d4:	bf00      	nop
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fe fd1f 	bl	800ae2e <USBD_LL_DevConnected>
}
 800c3f0:	bf00      	nop
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c406:	4618      	mov	r0, r3
 800c408:	f7fe fd1c 	bl	800ae44 <USBD_LL_DevDisconnected>
}
 800c40c:	bf00      	nop
 800c40e:	3708      	adds	r7, #8
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d13e      	bne.n	800c4a2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c424:	4a21      	ldr	r2, [pc, #132]	; (800c4ac <USBD_LL_Init+0x98>)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4a1f      	ldr	r2, [pc, #124]	; (800c4ac <USBD_LL_Init+0x98>)
 800c430:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c434:	4b1d      	ldr	r3, [pc, #116]	; (800c4ac <USBD_LL_Init+0x98>)
 800c436:	4a1e      	ldr	r2, [pc, #120]	; (800c4b0 <USBD_LL_Init+0x9c>)
 800c438:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800c43a:	4b1c      	ldr	r3, [pc, #112]	; (800c4ac <USBD_LL_Init+0x98>)
 800c43c:	2209      	movs	r2, #9
 800c43e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c440:	4b1a      	ldr	r3, [pc, #104]	; (800c4ac <USBD_LL_Init+0x98>)
 800c442:	2202      	movs	r2, #2
 800c444:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c446:	4b19      	ldr	r3, [pc, #100]	; (800c4ac <USBD_LL_Init+0x98>)
 800c448:	2200      	movs	r2, #0
 800c44a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c44c:	4b17      	ldr	r3, [pc, #92]	; (800c4ac <USBD_LL_Init+0x98>)
 800c44e:	2202      	movs	r2, #2
 800c450:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c452:	4b16      	ldr	r3, [pc, #88]	; (800c4ac <USBD_LL_Init+0x98>)
 800c454:	2200      	movs	r2, #0
 800c456:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c458:	4b14      	ldr	r3, [pc, #80]	; (800c4ac <USBD_LL_Init+0x98>)
 800c45a:	2200      	movs	r2, #0
 800c45c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c45e:	4b13      	ldr	r3, [pc, #76]	; (800c4ac <USBD_LL_Init+0x98>)
 800c460:	2200      	movs	r2, #0
 800c462:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c464:	4b11      	ldr	r3, [pc, #68]	; (800c4ac <USBD_LL_Init+0x98>)
 800c466:	2200      	movs	r2, #0
 800c468:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c46a:	4b10      	ldr	r3, [pc, #64]	; (800c4ac <USBD_LL_Init+0x98>)
 800c46c:	2200      	movs	r2, #0
 800c46e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c470:	4b0e      	ldr	r3, [pc, #56]	; (800c4ac <USBD_LL_Init+0x98>)
 800c472:	2200      	movs	r2, #0
 800c474:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c476:	480d      	ldr	r0, [pc, #52]	; (800c4ac <USBD_LL_Init+0x98>)
 800c478:	f7f5 ffa2 	bl	80023c0 <HAL_PCD_Init>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d001      	beq.n	800c486 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c482:	f7f4 fb87 	bl	8000b94 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c486:	2180      	movs	r1, #128	; 0x80
 800c488:	4808      	ldr	r0, [pc, #32]	; (800c4ac <USBD_LL_Init+0x98>)
 800c48a:	f7f7 fa12 	bl	80038b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c48e:	2240      	movs	r2, #64	; 0x40
 800c490:	2100      	movs	r1, #0
 800c492:	4806      	ldr	r0, [pc, #24]	; (800c4ac <USBD_LL_Init+0x98>)
 800c494:	f7f7 f9c6 	bl	8003824 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c498:	2280      	movs	r2, #128	; 0x80
 800c49a:	2101      	movs	r1, #1
 800c49c:	4803      	ldr	r0, [pc, #12]	; (800c4ac <USBD_LL_Init+0x98>)
 800c49e:	f7f7 f9c1 	bl	8003824 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	24001954 	.word	0x24001954
 800c4b0:	40080000 	.word	0x40080000

0800c4b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7f6 f89c 	bl	8002608 <HAL_PCD_Start>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4d4:	7bfb      	ldrb	r3, [r7, #15]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 f942 	bl	800c760 <USBD_Get_USB_Status>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b084      	sub	sp, #16
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
 800c4f2:	4608      	mov	r0, r1
 800c4f4:	4611      	mov	r1, r2
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	70fb      	strb	r3, [r7, #3]
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	70bb      	strb	r3, [r7, #2]
 800c500:	4613      	mov	r3, r2
 800c502:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c508:	2300      	movs	r3, #0
 800c50a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c512:	78bb      	ldrb	r3, [r7, #2]
 800c514:	883a      	ldrh	r2, [r7, #0]
 800c516:	78f9      	ldrb	r1, [r7, #3]
 800c518:	f7f6 fd9c 	bl	8003054 <HAL_PCD_EP_Open>
 800c51c:	4603      	mov	r3, r0
 800c51e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c520:	7bfb      	ldrb	r3, [r7, #15]
 800c522:	4618      	mov	r0, r3
 800c524:	f000 f91c 	bl	800c760 <USBD_Get_USB_Status>
 800c528:	4603      	mov	r3, r0
 800c52a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b084      	sub	sp, #16
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	460b      	mov	r3, r1
 800c540:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c542:	2300      	movs	r3, #0
 800c544:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c546:	2300      	movs	r3, #0
 800c548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c550:	78fa      	ldrb	r2, [r7, #3]
 800c552:	4611      	mov	r1, r2
 800c554:	4618      	mov	r0, r3
 800c556:	f7f6 fde5 	bl	8003124 <HAL_PCD_EP_Close>
 800c55a:	4603      	mov	r3, r0
 800c55c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c55e:	7bfb      	ldrb	r3, [r7, #15]
 800c560:	4618      	mov	r0, r3
 800c562:	f000 f8fd 	bl	800c760 <USBD_Get_USB_Status>
 800c566:	4603      	mov	r3, r0
 800c568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c56a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3710      	adds	r7, #16
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	460b      	mov	r3, r1
 800c57e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c580:	2300      	movs	r3, #0
 800c582:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c584:	2300      	movs	r3, #0
 800c586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c58e:	78fa      	ldrb	r2, [r7, #3]
 800c590:	4611      	mov	r1, r2
 800c592:	4618      	mov	r0, r3
 800c594:	f7f6 fe9f 	bl	80032d6 <HAL_PCD_EP_SetStall>
 800c598:	4603      	mov	r3, r0
 800c59a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f000 f8de 	bl	800c760 <USBD_Get_USB_Status>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b084      	sub	sp, #16
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c5cc:	78fa      	ldrb	r2, [r7, #3]
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7f6 fee4 	bl	800339e <HAL_PCD_EP_ClrStall>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5da:	7bfb      	ldrb	r3, [r7, #15]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 f8bf 	bl	800c760 <USBD_Get_USB_Status>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3710      	adds	r7, #16
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b085      	sub	sp, #20
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c602:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	da0b      	bge.n	800c624 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c60c:	78fb      	ldrb	r3, [r7, #3]
 800c60e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c612:	68f9      	ldr	r1, [r7, #12]
 800c614:	4613      	mov	r3, r2
 800c616:	00db      	lsls	r3, r3, #3
 800c618:	4413      	add	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	440b      	add	r3, r1
 800c61e:	333e      	adds	r3, #62	; 0x3e
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	e00b      	b.n	800c63c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c624:	78fb      	ldrb	r3, [r7, #3]
 800c626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c62a:	68f9      	ldr	r1, [r7, #12]
 800c62c:	4613      	mov	r3, r2
 800c62e:	00db      	lsls	r3, r3, #3
 800c630:	4413      	add	r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	440b      	add	r3, r1
 800c636:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c63a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3714      	adds	r7, #20
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	460b      	mov	r3, r1
 800c652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c654:	2300      	movs	r3, #0
 800c656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c658:	2300      	movs	r3, #0
 800c65a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c662:	78fa      	ldrb	r2, [r7, #3]
 800c664:	4611      	mov	r1, r2
 800c666:	4618      	mov	r0, r3
 800c668:	f7f6 fccf 	bl	800300a <HAL_PCD_SetAddress>
 800c66c:	4603      	mov	r3, r0
 800c66e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c670:	7bfb      	ldrb	r3, [r7, #15]
 800c672:	4618      	mov	r0, r3
 800c674:	f000 f874 	bl	800c760 <USBD_Get_USB_Status>
 800c678:	4603      	mov	r3, r0
 800c67a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c67c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	b086      	sub	sp, #24
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	60f8      	str	r0, [r7, #12]
 800c68e:	607a      	str	r2, [r7, #4]
 800c690:	603b      	str	r3, [r7, #0]
 800c692:	460b      	mov	r3, r1
 800c694:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c696:	2300      	movs	r3, #0
 800c698:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c69a:	2300      	movs	r3, #0
 800c69c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c6a4:	7af9      	ldrb	r1, [r7, #11]
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	f7f6 fdd9 	bl	8003260 <HAL_PCD_EP_Transmit>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6b2:	7dfb      	ldrb	r3, [r7, #23]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 f853 	bl	800c760 <USBD_Get_USB_Status>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c6be:	7dbb      	ldrb	r3, [r7, #22]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3718      	adds	r7, #24
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	607a      	str	r2, [r7, #4]
 800c6d2:	603b      	str	r3, [r7, #0]
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c6e6:	7af9      	ldrb	r1, [r7, #11]
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	f7f6 fd64 	bl	80031b8 <HAL_PCD_EP_Receive>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6f4:	7dfb      	ldrb	r3, [r7, #23]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 f832 	bl	800c760 <USBD_Get_USB_Status>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c700:	7dbb      	ldrb	r3, [r7, #22]
}
 800c702:	4618      	mov	r0, r3
 800c704:	3718      	adds	r7, #24
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b082      	sub	sp, #8
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	460b      	mov	r3, r1
 800c714:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c71c:	78fa      	ldrb	r2, [r7, #3]
 800c71e:	4611      	mov	r1, r2
 800c720:	4618      	mov	r0, r3
 800c722:	f7f6 fd85 	bl	8003230 <HAL_PCD_EP_GetRxCount>
 800c726:	4603      	mov	r3, r0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3708      	adds	r7, #8
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c738:	4b03      	ldr	r3, [pc, #12]	; (800c748 <USBD_static_malloc+0x18>)
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	370c      	adds	r7, #12
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr
 800c746:	bf00      	nop
 800c748:	24001e60 	.word	0x24001e60

0800c74c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b083      	sub	sp, #12
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800c754:	bf00      	nop
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	4603      	mov	r3, r0
 800c768:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c76a:	2300      	movs	r3, #0
 800c76c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c76e:	79fb      	ldrb	r3, [r7, #7]
 800c770:	2b03      	cmp	r3, #3
 800c772:	d817      	bhi.n	800c7a4 <USBD_Get_USB_Status+0x44>
 800c774:	a201      	add	r2, pc, #4	; (adr r2, 800c77c <USBD_Get_USB_Status+0x1c>)
 800c776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c77a:	bf00      	nop
 800c77c:	0800c78d 	.word	0x0800c78d
 800c780:	0800c793 	.word	0x0800c793
 800c784:	0800c799 	.word	0x0800c799
 800c788:	0800c79f 	.word	0x0800c79f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c78c:	2300      	movs	r3, #0
 800c78e:	73fb      	strb	r3, [r7, #15]
    break;
 800c790:	e00b      	b.n	800c7aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c792:	2303      	movs	r3, #3
 800c794:	73fb      	strb	r3, [r7, #15]
    break;
 800c796:	e008      	b.n	800c7aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c798:	2301      	movs	r3, #1
 800c79a:	73fb      	strb	r3, [r7, #15]
    break;
 800c79c:	e005      	b.n	800c7aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c79e:	2303      	movs	r3, #3
 800c7a0:	73fb      	strb	r3, [r7, #15]
    break;
 800c7a2:	e002      	b.n	800c7aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c7a4:	2303      	movs	r3, #3
 800c7a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c7a8:	bf00      	nop
  }
  return usb_status;
 800c7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3714      	adds	r7, #20
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <memset>:
 800c7b8:	4402      	add	r2, r0
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d100      	bne.n	800c7c2 <memset+0xa>
 800c7c0:	4770      	bx	lr
 800c7c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c7c6:	e7f9      	b.n	800c7bc <memset+0x4>

0800c7c8 <__libc_init_array>:
 800c7c8:	b570      	push	{r4, r5, r6, lr}
 800c7ca:	4d0d      	ldr	r5, [pc, #52]	; (800c800 <__libc_init_array+0x38>)
 800c7cc:	4c0d      	ldr	r4, [pc, #52]	; (800c804 <__libc_init_array+0x3c>)
 800c7ce:	1b64      	subs	r4, r4, r5
 800c7d0:	10a4      	asrs	r4, r4, #2
 800c7d2:	2600      	movs	r6, #0
 800c7d4:	42a6      	cmp	r6, r4
 800c7d6:	d109      	bne.n	800c7ec <__libc_init_array+0x24>
 800c7d8:	4d0b      	ldr	r5, [pc, #44]	; (800c808 <__libc_init_array+0x40>)
 800c7da:	4c0c      	ldr	r4, [pc, #48]	; (800c80c <__libc_init_array+0x44>)
 800c7dc:	f000 f826 	bl	800c82c <_init>
 800c7e0:	1b64      	subs	r4, r4, r5
 800c7e2:	10a4      	asrs	r4, r4, #2
 800c7e4:	2600      	movs	r6, #0
 800c7e6:	42a6      	cmp	r6, r4
 800c7e8:	d105      	bne.n	800c7f6 <__libc_init_array+0x2e>
 800c7ea:	bd70      	pop	{r4, r5, r6, pc}
 800c7ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7f0:	4798      	blx	r3
 800c7f2:	3601      	adds	r6, #1
 800c7f4:	e7ee      	b.n	800c7d4 <__libc_init_array+0xc>
 800c7f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7fa:	4798      	blx	r3
 800c7fc:	3601      	adds	r6, #1
 800c7fe:	e7f2      	b.n	800c7e6 <__libc_init_array+0x1e>
 800c800:	0800c918 	.word	0x0800c918
 800c804:	0800c918 	.word	0x0800c918
 800c808:	0800c918 	.word	0x0800c918
 800c80c:	0800c91c 	.word	0x0800c91c

0800c810 <memcpy>:
 800c810:	440a      	add	r2, r1
 800c812:	4291      	cmp	r1, r2
 800c814:	f100 33ff 	add.w	r3, r0, #4294967295
 800c818:	d100      	bne.n	800c81c <memcpy+0xc>
 800c81a:	4770      	bx	lr
 800c81c:	b510      	push	{r4, lr}
 800c81e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c822:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c826:	4291      	cmp	r1, r2
 800c828:	d1f9      	bne.n	800c81e <memcpy+0xe>
 800c82a:	bd10      	pop	{r4, pc}

0800c82c <_init>:
 800c82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82e:	bf00      	nop
 800c830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c832:	bc08      	pop	{r3}
 800c834:	469e      	mov	lr, r3
 800c836:	4770      	bx	lr

0800c838 <_fini>:
 800c838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83a:	bf00      	nop
 800c83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c83e:	bc08      	pop	{r3}
 800c840:	469e      	mov	lr, r3
 800c842:	4770      	bx	lr
