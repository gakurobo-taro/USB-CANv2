
USB_CAN_H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffa0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08010238  08010238  00020238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801046c  0801046c  0002046c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  08010474  08010474  00020474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000000c  08010480  08010480  00020480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000154  24000000  0801048c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002b98  24000154  080105e0  00030154  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24002cec  080105e0  00032cec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030182  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003c2c0  00000000  00000000  000301c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000663a  00000000  00000000  0006c485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002508  00000000  00000000  00072ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001c66  00000000  00000000  00074fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00041def  00000000  00000000  00076c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002c23d  00000000  00000000  000b8a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00185c73  00000000  00000000  000e4c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a644  00000000  00000000  0026a8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  00274f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000154 	.word	0x24000154
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010220 	.word	0x08010220

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000158 	.word	0x24000158
 80002d4:	08010220 	.word	0x08010220

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005d8:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 80005da:	4a2f      	ldr	r2, [pc, #188]	; (8000698 <MX_FDCAN1_Init+0xc4>)
 80005dc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005de:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005e4:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80005ea:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80005f0:	4b28      	ldr	r3, [pc, #160]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80005f6:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 80005fe:	2208      	movs	r2, #8
 8000600:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000602:	4b24      	ldr	r3, [pc, #144]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000604:	2201      	movs	r2, #1
 8000606:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800060a:	2205      	movs	r2, #5
 800060c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000610:	2202      	movs	r2, #2
 8000612:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000616:	2201      	movs	r2, #1
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800061a:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800061c:	2201      	movs	r2, #1
 800061e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000622:	2201      	movs	r2, #1
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000628:	2201      	movs	r2, #1
 800062a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800062e:	2200      	movs	r2, #0
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000634:	2200      	movs	r2, #0
 8000636:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800063a:	2200      	movs	r2, #0
 800063c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000640:	2200      	movs	r2, #0
 8000642:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000646:	2204      	movs	r2, #4
 8000648:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800064c:	2200      	movs	r2, #0
 800064e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000652:	2204      	movs	r2, #4
 8000654:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000658:	2200      	movs	r2, #0
 800065a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800065e:	2204      	movs	r2, #4
 8000660:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000664:	2200      	movs	r2, #0
 8000666:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800066a:	2200      	movs	r2, #0
 800066c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000670:	2200      	movs	r2, #0
 8000672:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000676:	2200      	movs	r2, #0
 8000678:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 800067c:	2204      	movs	r2, #4
 800067e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_FDCAN1_Init+0xc0>)
 8000682:	f002 ffd5 	bl	8003630 <HAL_FDCAN_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800068c:	f000 fef2 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	24000170 	.word	0x24000170
 8000698:	4000a000 	.word	0x4000a000

0800069c <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80006a0:	4b2e      	ldr	r3, [pc, #184]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006a2:	4a2f      	ldr	r2, [pc, #188]	; (8000760 <MX_FDCAN2_Init+0xc4>)
 80006a4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006a6:	4b2d      	ldr	r3, [pc, #180]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80006ac:	4b2b      	ldr	r3, [pc, #172]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80006b2:	4b2a      	ldr	r3, [pc, #168]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80006be:	4b27      	ldr	r3, [pc, #156]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 8;
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006c6:	2208      	movs	r2, #8
 80006c8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80006ca:	4b24      	ldr	r3, [pc, #144]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 5;
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006d2:	2205      	movs	r2, #5
 80006d4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006d8:	2202      	movs	r2, #2
 80006da:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006de:	2201      	movs	r2, #1
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80006e2:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_FDCAN2_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000702:	2200      	movs	r2, #0
 8000704:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000708:	2200      	movs	r2, #0
 800070a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_FDCAN2_Init+0xc0>)
 800070e:	2204      	movs	r2, #4
 8000710:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_FDCAN2_Init+0xc0>)
 800071a:	2204      	movs	r2, #4
 800071c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000726:	2204      	movs	r2, #4
 8000728:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_FDCAN2_Init+0xc0>)
 800072c:	2200      	movs	r2, #0
 800072e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000732:	2200      	movs	r2, #0
 8000734:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000738:	2200      	movs	r2, #0
 800073a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_FDCAN2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_FDCAN2_Init+0xc0>)
 8000744:	2204      	movs	r2, #4
 8000746:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_FDCAN2_Init+0xc0>)
 800074a:	f002 ff71 	bl	8003630 <HAL_FDCAN_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000754:	f000 fe8e 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	24000210 	.word	0x24000210
 8000760:	4000a400 	.word	0x4000a400

08000764 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b0bc      	sub	sp, #240	; 0xf0
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	22c0      	movs	r2, #192	; 0xc0
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f00f fc69 	bl	801005c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a5e      	ldr	r2, [pc, #376]	; (8000908 <HAL_FDCAN_MspInit+0x1a4>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d158      	bne.n	8000846 <HAL_FDCAN_MspInit+0xe2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000794:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000798:	f04f 0300 	mov.w	r3, #0
 800079c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80007a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a8:	f107 0318 	add.w	r3, r7, #24
 80007ac:	4618      	mov	r0, r3
 80007ae:	f006 fcef 	bl	8007190 <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80007b8:	f000 fe5c 	bl	8001474 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80007bc:	4b53      	ldr	r3, [pc, #332]	; (800090c <HAL_FDCAN_MspInit+0x1a8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	4a52      	ldr	r2, [pc, #328]	; (800090c <HAL_FDCAN_MspInit+0x1a8>)
 80007c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80007c6:	4b51      	ldr	r3, [pc, #324]	; (800090c <HAL_FDCAN_MspInit+0x1a8>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d10e      	bne.n	80007ec <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80007ce:	4b50      	ldr	r3, [pc, #320]	; (8000910 <HAL_FDCAN_MspInit+0x1ac>)
 80007d0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80007d4:	4a4e      	ldr	r2, [pc, #312]	; (8000910 <HAL_FDCAN_MspInit+0x1ac>)
 80007d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007da:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80007de:	4b4c      	ldr	r3, [pc, #304]	; (8000910 <HAL_FDCAN_MspInit+0x1ac>)
 80007e0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80007e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ec:	4b48      	ldr	r3, [pc, #288]	; (8000910 <HAL_FDCAN_MspInit+0x1ac>)
 80007ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f2:	4a47      	ldr	r2, [pc, #284]	; (8000910 <HAL_FDCAN_MspInit+0x1ac>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fc:	4b44      	ldr	r3, [pc, #272]	; (8000910 <HAL_FDCAN_MspInit+0x1ac>)
 80007fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000802:	f003 0308 	and.w	r3, r3, #8
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800080a:	2303      	movs	r3, #3
 800080c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000822:	2309      	movs	r3, #9
 8000824:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000828:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800082c:	4619      	mov	r1, r3
 800082e:	4839      	ldr	r0, [pc, #228]	; (8000914 <HAL_FDCAN_MspInit+0x1b0>)
 8000830:	f004 f814 	bl	800485c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2013      	movs	r0, #19
 800083a:	f002 fec4 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800083e:	2013      	movs	r0, #19
 8000840:	f002 fedb 	bl	80035fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000844:	e05c      	b.n	8000900 <HAL_FDCAN_MspInit+0x19c>
  else if(fdcanHandle->Instance==FDCAN2)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a33      	ldr	r2, [pc, #204]	; (8000918 <HAL_FDCAN_MspInit+0x1b4>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d157      	bne.n	8000900 <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000850:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000854:	f04f 0300 	mov.w	r3, #0
 8000858:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800085c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000864:	f107 0318 	add.w	r3, r7, #24
 8000868:	4618      	mov	r0, r3
 800086a:	f006 fc91 	bl	8007190 <HAL_RCCEx_PeriphCLKConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <HAL_FDCAN_MspInit+0x114>
      Error_Handler();
 8000874:	f000 fdfe 	bl	8001474 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <HAL_FDCAN_MspInit+0x1a8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	4a23      	ldr	r2, [pc, #140]	; (800090c <HAL_FDCAN_MspInit+0x1a8>)
 8000880:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000882:	4b22      	ldr	r3, [pc, #136]	; (800090c <HAL_FDCAN_MspInit+0x1a8>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d10e      	bne.n	80008a8 <HAL_FDCAN_MspInit+0x144>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <HAL_FDCAN_MspInit+0x1ac>)
 800088c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000890:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <HAL_FDCAN_MspInit+0x1ac>)
 8000892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000896:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <HAL_FDCAN_MspInit+0x1ac>)
 800089c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80008a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <HAL_FDCAN_MspInit+0x1ac>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	4a18      	ldr	r2, [pc, #96]	; (8000910 <HAL_FDCAN_MspInit+0x1ac>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_FDCAN_MspInit+0x1ac>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80008c6:	2360      	movs	r3, #96	; 0x60
 80008c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80008de:	2309      	movs	r3, #9
 80008e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80008e8:	4619      	mov	r1, r3
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <HAL_FDCAN_MspInit+0x1b8>)
 80008ec:	f003 ffb6 	bl	800485c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	2016      	movs	r0, #22
 80008f6:	f002 fe66 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 80008fa:	2016      	movs	r0, #22
 80008fc:	f002 fe7d 	bl	80035fa <HAL_NVIC_EnableIRQ>
}
 8000900:	bf00      	nop
 8000902:	37f0      	adds	r7, #240	; 0xf0
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	4000a000 	.word	0x4000a000
 800090c:	240002b0 	.word	0x240002b0
 8000910:	58024400 	.word	0x58024400
 8000914:	58020c00 	.word	0x58020c00
 8000918:	4000a400 	.word	0x4000a400
 800091c:	58020400 	.word	0x58020400

08000920 <MX_GPIO_Init>:
     PB11   ------> USART3_RX
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <MX_GPIO_Init+0xf8>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093c:	4a36      	ldr	r2, [pc, #216]	; (8000a18 <MX_GPIO_Init+0xf8>)
 800093e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000942:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000946:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <MX_GPIO_Init+0xf8>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b30      	ldr	r3, [pc, #192]	; (8000a18 <MX_GPIO_Init+0xf8>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095a:	4a2f      	ldr	r2, [pc, #188]	; (8000a18 <MX_GPIO_Init+0xf8>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000964:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <MX_GPIO_Init+0xf8>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <MX_GPIO_Init+0xf8>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	4a27      	ldr	r2, [pc, #156]	; (8000a18 <MX_GPIO_Init+0xf8>)
 800097a:	f043 0302 	orr.w	r3, r3, #2
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000982:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <MX_GPIO_Init+0xf8>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000990:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <MX_GPIO_Init+0xf8>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000996:	4a20      	ldr	r2, [pc, #128]	; (8000a18 <MX_GPIO_Init+0xf8>)
 8000998:	f043 0310 	orr.w	r3, r3, #16
 800099c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_GPIO_Init+0xf8>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	f003 0310 	and.w	r3, r3, #16
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_GPIO_Init+0xf8>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <MX_GPIO_Init+0xf8>)
 80009b6:	f043 0308 	orr.w	r3, r3, #8
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_GPIO_Init+0xf8>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	f003 0308 	and.w	r3, r3, #8
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009cc:	230c      	movs	r3, #12
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009dc:	2307      	movs	r3, #7
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_GPIO_Init+0xfc>)
 80009e8:	f003 ff38 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009fe:	2307      	movs	r3, #7
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_GPIO_Init+0x100>)
 8000a0a:	f003 ff27 	bl	800485c <HAL_GPIO_Init>

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	58024400 	.word	0x58024400
 8000a1c:	58020000 	.word	0x58020000
 8000a20:	58020400 	.word	0x58020400

08000a24 <_ZN12G24_STM32HAL9CommonLib4ICanC1Ev>:
	ONLY_STD,
	ONLY_EXT,
	STD_AND_EXT,
};

class ICan{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <_ZN12G24_STM32HAL9CommonLib4ICanC1Ev+0x1c>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	08010408 	.word	0x08010408

08000a44 <_ZNSt15__uniq_ptr_dataIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_ELb1ELb1EEC1EOS7_>:
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	4611      	mov	r1, r2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 fd3f 	bl	80014d8 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1EOS7_>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1EOS7_>:
	{ }

      // Move constructors.

      /// Move constructor.
      unique_ptr(unique_ptr&&) = default;
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ffe5 	bl	8000a44 <_ZNSt15__uniq_ptr_dataIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_ELb1ELb1EEC1EOS7_>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommC1EP19FDCAN_HandleTypeDefSt10unique_ptrINS_9CommonLib11IRingBufferINS5_8CanFrameEEESt14default_deleteIS8_EEOSB_mmm>:
		const uint32_t rx_fifo_it;

		std::unique_ptr<IRingBuffer<CanFrame> > rx_buff;
		std::unique_ptr<IRingBuffer<CanFrame> > tx_buff;
	public:
		FdCanComm(FDCAN_HandleTypeDef *_fdcan,std::unique_ptr<IRingBuffer<CanFrame>> _rx_buff,std::unique_ptr<IRingBuffer<CanFrame>> &&_tx_buff,uint32_t _rx_fifo,uint32_t _rx_filter_fifo,uint32_t _rx_fifo_it)
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	603b      	str	r3, [r7, #0]
			:fdcan(_fdcan),
		 	 rx_buff(std::move(_rx_buff)),
			 tx_buff(std::move(_tx_buff)),
			 rx_fifo(_rx_fifo),
			 rx_filter_fifo(_rx_filter_fifo),
			 rx_fifo_it(_rx_fifo_it){
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ffc5 	bl	8000a24 <_ZN12G24_STM32HAL9CommonLib4ICanC1Ev>
 8000a9a:	4a15      	ldr	r2, [pc, #84]	; (8000af0 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommC1EP19FDCAN_HandleTypeDefSt10unique_ptrINS_9CommonLib11IRingBufferINS5_8CanFrameEEESt14default_deleteIS8_EEOSB_mmm+0x6c>)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	601a      	str	r2, [r3, #0]
			:fdcan(_fdcan),
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	605a      	str	r2, [r3, #4]
			 rx_fifo(_rx_fifo),
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	6a3a      	ldr	r2, [r7, #32]
 8000aaa:	609a      	str	r2, [r3, #8]
			 rx_filter_fifo(_rx_filter_fifo),
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ab0:	60da      	str	r2, [r3, #12]
			 rx_fifo_it(_rx_fifo_it){
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ab6:	611a      	str	r2, [r3, #16]
		 	 rx_buff(std::move(_rx_buff)),
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f103 0414 	add.w	r4, r3, #20
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 fcdd 	bl	800147e <_ZSt4moveIRSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEESt14default_deleteIS5_EEEONSt16remove_referenceIT_E4typeEOSB_>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4620      	mov	r0, r4
 8000aca:	f7ff ffcb 	bl	8000a64 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1EOS7_>
			 tx_buff(std::move(_tx_buff)),
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f103 0418 	add.w	r4, r3, #24
 8000ad4:	6838      	ldr	r0, [r7, #0]
 8000ad6:	f000 fcd2 	bl	800147e <_ZSt4moveIRSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEESt14default_deleteIS5_EEEONSt16remove_referenceIT_E4typeEOSB_>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4619      	mov	r1, r3
 8000ade:	4620      	mov	r0, r4
 8000ae0:	f7ff ffc0 	bl	8000a64 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1EOS7_>
		}
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd90      	pop	{r4, r7, pc}
 8000aee:	bf00      	nop
 8000af0:	080103f0 	.word	0x080103f0

08000af4 <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm12tx_availableEv>:
//			HAL_FDCAN_ActivateNotification(fdcan, rx_fifo_it, 0);
//			HAL_FDCAN_ActivateNotification(fdcan, rx_fifo_it, 0);
//			HAL_FDCAN_ActivateNotification(fdcan, rx_fifo_it, 0);
		}

		uint32_t tx_available(void)const override{return tx_buff->get_free_level();}
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3318      	adds	r3, #24
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 fd25 	bl	8001550 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>
 8000b06:	4603      	mov	r3, r0
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	3208      	adds	r2, #8
 8000b0c:	6812      	ldr	r2, [r2, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	4790      	blx	r2
 8000b12:	4603      	mov	r3, r0
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm12rx_availableEv>:
		void tx_interrupt_task(void);
		bool tx(const CanFrame &tx_frame)override;

		uint32_t rx_available(void)const override{return rx_buff->get_free_level();}
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3314      	adds	r3, #20
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 fd11 	bl	8001550 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	3208      	adds	r2, #8
 8000b34:	6812      	ldr	r2, [r2, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	4790      	blx	r2
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm11get_handlerEv>:
		void rx_interrupt_task(void);
		bool rx(CanFrame &rx_frame)override;

		void set_filter_free(uint32_t filter_no);

		FDCAN_HandleTypeDef *get_handler(void)const{return fdcan;}
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE>:
	};

	inline bool FdCanComm::tx(const CanFrame &tx_frame){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	; 0x30
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
		if(HAL_FDCAN_GetTxFifoFreeLevel(fdcan) > 0){
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f003 f97e 	bl	8003e6c <HAL_FDCAN_GetTxFifoFreeLevel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	bf14      	ite	ne
 8000b76:	2301      	movne	r3, #1
 8000b78:	2300      	moveq	r3, #0
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d02b      	beq.n	8000bd8 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0x7c>
			FDCAN_TxHeaderTypeDef tx_header;
			tx_header.Identifier = tx_frame.id;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60fb      	str	r3, [r7, #12]
			tx_header.IdType = tx_frame.is_ext_id ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	7c1b      	ldrb	r3, [r3, #16]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d002      	beq.n	8000b94 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0x38>
 8000b8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b92:	e000      	b.n	8000b96 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0x3a>
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
			tx_header.TxFrameType = tx_frame.is_remote ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	7c5b      	ldrb	r3, [r3, #17]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d002      	beq.n	8000ba6 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0x4a>
 8000ba0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ba4:	e000      	b.n	8000ba8 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0x4c>
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
			tx_header.DataLength = (uint32_t)tx_frame.data_length << 16;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	041b      	lsls	r3, r3, #16
 8000bb0:	61bb      	str	r3, [r7, #24]
			tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
			tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
			tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
			tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
			tx_header.MessageMarker = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c

			HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &tx_header, const_cast<uint8_t*>(tx_frame.data));
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	f107 010c 	add.w	r1, r7, #12
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f002 ff81 	bl	8003ad8 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000bd6:	e012      	b.n	8000bfe <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0xa2>
		}else{
			if(!tx_buff->push(tx_frame)){
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3318      	adds	r3, #24
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fcb7 	bl	8001550 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>
 8000be2:	4603      	mov	r3, r0
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	6812      	ldr	r2, [r2, #0]
 8000be8:	6839      	ldr	r1, [r7, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	4790      	blx	r2
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f083 0301 	eor.w	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0xa2>
				return false;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0xa4>
			}
		}
		return true;
 8000bfe:	2301      	movs	r3, #1
	}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3730      	adds	r7, #48	; 0x30
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv>:
	inline void FdCanComm::tx_interrupt_task(void){
 8000c08:	b5b0      	push	{r4, r5, r7, lr}
 8000c0a:	b090      	sub	sp, #64	; 0x40
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
		while(HAL_FDCAN_GetTxFifoFreeLevel(fdcan) && tx_buff->get_busy_level()){
 8000c10:	e046      	b.n	8000ca0 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0x98>
			CanFrame tx_frame;
 8000c12:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0xd8>)
 8000c14:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000c18:	461d      	mov	r5, r3
 8000c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c1e:	682b      	ldr	r3, [r5, #0]
 8000c20:	6023      	str	r3, [r4, #0]

			if(!tx_buff->pop(tx_frame)){
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3318      	adds	r3, #24
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fc92 	bl	8001550 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	3204      	adds	r2, #4
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000c38:	4618      	mov	r0, r3
 8000c3a:	4790      	blx	r2
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	f083 0301 	eor.w	r3, r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0x44>
				break;
 8000c48:	bf00      	nop
			tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
			tx_header.MessageMarker = 0;

			HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &tx_header, const_cast<uint8_t*>(tx_frame.data));
		}
	}
 8000c4a:	e044      	b.n	8000cd6 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0xce>
			tx_header.Identifier = tx_frame.id;
 8000c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c4e:	60bb      	str	r3, [r7, #8]
			tx_header.IdType = tx_frame.is_ext_id ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 8000c50:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0x56>
 8000c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5c:	e000      	b.n	8000c60 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0x58>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
			tx_header.TxFrameType = tx_frame.is_remote ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 8000c62:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0x68>
 8000c6a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c6e:	e000      	b.n	8000c72 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0x6a>
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
			tx_header.DataLength = (uint32_t)tx_frame.data_length << 16;
 8000c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c76:	041b      	lsls	r3, r3, #16
 8000c78:	617b      	str	r3, [r7, #20]
			tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
			tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
			tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
			tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
			tx_header.MessageMarker = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
			HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &tx_header, const_cast<uint8_t*>(tx_frame.data));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000c96:	f107 0108 	add.w	r1, r7, #8
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 ff1c 	bl	8003ad8 <HAL_FDCAN_AddMessageToTxFifoQ>
		while(HAL_FDCAN_GetTxFifoFreeLevel(fdcan) && tx_buff->get_busy_level()){
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f003 f8e1 	bl	8003e6c <HAL_FDCAN_GetTxFifoFreeLevel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00f      	beq.n	8000cd0 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0xc8>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3318      	adds	r3, #24
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fc4b 	bl	8001550 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	320c      	adds	r2, #12
 8000cc0:	6812      	ldr	r2, [r2, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	4790      	blx	r2
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0xc8>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e000      	b.n	8000cd2 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0xca>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d19d      	bne.n	8000c12 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0xa>
	}
 8000cd6:	bf00      	nop
 8000cd8:	3740      	adds	r7, #64	; 0x40
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	08010238 	.word	0x08010238

08000ce4 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2rxERNS_9CommonLib8CanFrameE>:


	inline bool FdCanComm::rx(CanFrame &rx_frame){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
		if(rx_buff->pop(rx_frame)){
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3314      	adds	r3, #20
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fc2c 	bl	8001550 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	3204      	adds	r2, #4
 8000cfe:	6812      	ldr	r2, [r2, #0]
 8000d00:	6839      	ldr	r1, [r7, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	4790      	blx	r2
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2rxERNS_9CommonLib8CanFrameE+0x2c>
			return true;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e000      	b.n	8000d12 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2rxERNS_9CommonLib8CanFrameE+0x2e>
		}else{
			return true;
 8000d10:	2301      	movs	r3, #1
		}
	}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17rx_interrupt_taskEv>:
	inline void FdCanComm::rx_interrupt_task(void){
 8000d1c:	b5b0      	push	{r4, r5, r7, lr}
 8000d1e:	b092      	sub	sp, #72	; 0x48
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
		FDCAN_RxHeaderTypeDef rx_header;
		CanFrame rx_frame;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17rx_interrupt_taskEv+0x78>)
 8000d26:	f107 040c 	add.w	r4, r7, #12
 8000d2a:	461d      	mov	r5, r3
 8000d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d30:	682b      	ldr	r3, [r5, #0]
 8000d32:	6023      	str	r3, [r4, #0]

		HAL_FDCAN_GetRxMessage(fdcan, rx_fifo, &rx_header, rx_frame.data);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6858      	ldr	r0, [r3, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6899      	ldr	r1, [r3, #8]
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	f107 0220 	add.w	r2, r7, #32
 8000d44:	f002 ff24 	bl	8003b90 <HAL_FDCAN_GetRxMessage>

		rx_frame.data_length = rx_header.DataLength>>16;
 8000d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4a:	0c1b      	lsrs	r3, r3, #16
 8000d4c:	617b      	str	r3, [r7, #20]
		rx_frame.is_remote = rx_header.RxFrameType == FDCAN_REMOTE_FRAME ? true : false;
 8000d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d54:	bf0c      	ite	eq
 8000d56:	2301      	moveq	r3, #1
 8000d58:	2300      	movne	r3, #0
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	777b      	strb	r3, [r7, #29]
		rx_frame.is_ext_id = rx_header.IdType == FDCAN_EXTENDED_ID ? true : false;
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d64:	bf0c      	ite	eq
 8000d66:	2301      	moveq	r3, #1
 8000d68:	2300      	movne	r3, #0
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	773b      	strb	r3, [r7, #28]
		rx_frame.id = rx_header.Identifier;
 8000d6e:	6a3b      	ldr	r3, [r7, #32]
 8000d70:	61bb      	str	r3, [r7, #24]

		rx_buff->push(rx_frame);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3314      	adds	r3, #20
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fbea 	bl	8001550 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	6812      	ldr	r2, [r2, #0]
 8000d82:	f107 010c 	add.w	r1, r7, #12
 8000d86:	4618      	mov	r0, r3
 8000d88:	4790      	blx	r2
	}
 8000d8a:	bf00      	nop
 8000d8c:	3748      	adds	r7, #72	; 0x48
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bdb0      	pop	{r4, r5, r7, pc}
 8000d92:	bf00      	nop
 8000d94:	08010238 	.word	0x08010238

08000d98 <_ZN12G24_STM32HAL9CommonLib4IPWMC1Ev>:

#include "main.h"

namespace G24_STM32HAL::CommonLib{

class IPWM{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <_ZN12G24_STM32HAL9CommonLib4IPWMC1Ev+0x1c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	080103c8 	.word	0x080103c8

08000db8 <_ZN12G24_STM32HAL9CommonLib7PWMHardC1EP17TIM_HandleTypeDefmff>:
	const float min;
	const float max;
	const float diff_inv;

public:
	PWMHard(TIM_HandleTypeDef *_tim,uint32_t _ch,float _min = 0,float _max = 1)
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6178      	str	r0, [r7, #20]
 8000dc0:	6139      	str	r1, [r7, #16]
 8000dc2:	60fa      	str	r2, [r7, #12]
 8000dc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000dc8:	edc7 0a01 	vstr	s1, [r7, #4]
		: tim(_tim),ch(_ch),min(_min),max(_max),diff_inv(1/(max - min)){
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ffe2 	bl	8000d98 <_ZN12G24_STM32HAL9CommonLib4IPWMC1Ev>
 8000dd4:	4a11      	ldr	r2, [pc, #68]	; (8000e1c <_ZN12G24_STM32HAL9CommonLib7PWMHardC1EP17TIM_HandleTypeDefmff+0x64>)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	68ba      	ldr	r2, [r7, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	ed93 7a04 	vldr	s14, [r3, #16]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	edd3 7a03 	vldr	s15, [r3, #12]
 8000dfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	edc3 7a05 	vstr	s15, [r3, #20]
	}
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	08010468 	.word	0x08010468

08000e20 <_ZN12G24_STM32HAL9CommonLib4ILEDC1Ev>:
	struct LEDState{
		bool state;
		uint16_t length;
	};

	class ILED{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <_ZN12G24_STM32HAL9CommonLib4ILEDC1Ev+0x1c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	080103b8 	.word	0x080103b8

08000e40 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>:
		const LEDState *playing_pattern = nullptr;
		uint32_t pattern_count = 0;
		uint32_t length_count = 0;

	public:
		LEDPwm(TIM_HandleTypeDef *tim,uint32_t ch):pwm(tim,ch){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ffe6 	bl	8000e20 <_ZN12G24_STM32HAL9CommonLib4ILEDC1Ev>
 8000e54:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm+0x54>)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000e62:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8000e98 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm+0x58>
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ffa4 	bl	8000db8 <_ZN12G24_STM32HAL9CommonLib7PWMHardC1EP17TIM_HandleTypeDefmff>
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e76:	61da      	str	r2, [r3, #28]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2200      	movs	r2, #0
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2200      	movs	r2, #0
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
		}
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	080103a8 	.word	0x080103a8
 8000e98:	00000000 	.word	0x00000000

08000e9c <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>:

		void start(void){pwm.start();}

		void play(const LEDState *pattern) override{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
			playing_pattern = pattern;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	621a      	str	r2, [r3, #32]
			pattern_count = 0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24
			length_count = 0;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28

			length_count = playing_pattern[pattern_count].length;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a1a      	ldr	r2, [r3, #32]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	885b      	ldrh	r3, [r3, #2]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28

			pwm.out(playing_pattern[pattern_count].state?duty:0.0f);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	1d19      	adds	r1, r3, #4
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a1a      	ldr	r2, [r3, #32]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE+0x4e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ee8:	e001      	b.n	8000eee <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE+0x52>
 8000eea:	eddf 7a05 	vldr	s15, [pc, #20]	; 8000f00 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE+0x64>
 8000eee:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef2:	4608      	mov	r0, r1
 8000ef4:	f00e faba 	bl	800f46c <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf>
		}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	00000000 	.word	0x00000000

08000f04 <_ZN12G24_STM32HAL9CommonLib6LEDPwm10is_playingEv>:

		bool is_playing(void)override{return playing_pattern!=nullptr ? true:false;}
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf14      	ite	ne
 8000f14:	2301      	movne	r3, #1
 8000f16:	2300      	moveq	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d005      	beq.n	8000f42 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	2203      	movs	r2, #3
 8000f40:	4798      	blx	r3
    }
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf0c      	ite	eq
 8000f5c:	2301      	moveq	r3, #1
 8000f5e:	2300      	movne	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_ZNSt8functionIFvvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ffd4 	bl	8000f26 <_ZNSt14_Function_baseD1Ev>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_ZN12G24_STM32HAL9CommonLib18IInterruptionTimerC1Ev>:

#include "main.h"
#include <functional>

namespace G24_STM32HAL::CommonLib{
	class IInterruptionTimer{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <_ZN12G24_STM32HAL9CommonLib18IInterruptionTimerC1Ev+0x1c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	08010378 	.word	0x08010378

08000fa8 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardC1EP17TIM_HandleTypeDef>:
		TIM_HandleTypeDef *tim;
		bool first_interrupt_flag = false;

		std::function<void(void)> task = nullptr;
	public:
		InterruptionTimerHard(TIM_HandleTypeDef *_tim):tim(_tim){}
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ffe7 	bl	8000f88 <_ZN12G24_STM32HAL9CommonLib18IInterruptionTimerC1Ev>
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardC1EP17TIM_HandleTypeDef+0x3c>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	721a      	strb	r2, [r3, #8]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	330c      	adds	r3, #12
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fadb 	bl	800158e <_ZNSt8functionIFvvEEC1EDn>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	08010360 	.word	0x08010360

08000fe8 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard13set_and_startEt>:

		void set_and_start(uint16_t period)override{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
			if(period == 0){
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d108      	bne.n	800100c <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard13set_and_startEt+0x24>
				HAL_TIM_Base_Stop_IT(tim);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f007 ffc2 	bl	8008f88 <HAL_TIM_Base_Stop_IT>
				first_interrupt_flag = false;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	721a      	strb	r2, [r3, #8]

				if(HAL_TIM_Base_GetState(tim) == HAL_TIM_STATE_READY){
					HAL_TIM_Base_Start_IT(tim);
				}
			}
		}
 800100a:	e021      	b.n	8001050 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard13set_and_startEt+0x68>
				__HAL_TIM_SET_AUTORELOAD(tim,period-1);
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	1e5a      	subs	r2, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	1e5a      	subs	r2, r3, #1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	60da      	str	r2, [r3, #12]
				__HAL_TIM_SET_COUNTER(tim,0);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	; 0x24
				if(HAL_TIM_Base_GetState(tim) == HAL_TIM_STATE_READY){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	f008 fb8d 	bl	8009750 <HAL_TIM_Base_GetState>
 8001036:	4603      	mov	r3, r0
 8001038:	2b01      	cmp	r3, #1
 800103a:	bf0c      	ite	eq
 800103c:	2301      	moveq	r3, #1
 800103e:	2300      	movne	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d004      	beq.n	8001050 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard13set_and_startEt+0x68>
					HAL_TIM_Base_Start_IT(tim);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4618      	mov	r0, r3
 800104c:	f007 ff24 	bl	8008e98 <HAL_TIM_Base_Start_IT>
		}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_ZNK12G24_STM32HAL9CommonLib21InterruptionTimerHard9get_stateEv>:
		uint16_t get_state(void)const override{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
			if(HAL_TIM_Base_GetState(tim) == HAL_TIM_STATE_BUSY){
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	f008 fb73 	bl	8009750 <HAL_TIM_Base_GetState>
 800106a:	4603      	mov	r3, r0
 800106c:	2b02      	cmp	r3, #2
 800106e:	bf0c      	ite	eq
 8001070:	2301      	moveq	r3, #1
 8001072:	2300      	movne	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d007      	beq.n	800108a <_ZNK12G24_STM32HAL9CommonLib21InterruptionTimerHard9get_stateEv+0x32>
				return __HAL_TIM_GET_AUTORELOAD(tim)+1;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001082:	b29b      	uxth	r3, r3
 8001084:	3301      	adds	r3, #1
 8001086:	b29b      	uxth	r3, r3
 8001088:	e000      	b.n	800108c <_ZNK12G24_STM32HAL9CommonLib21InterruptionTimerHard9get_stateEv+0x34>
			}else{
				return 0;
 800108a:	2300      	movs	r3, #0
			}
		}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard8set_taskESt8functionIFvvEE>:

		void set_task(std::function<void(void)> f)override{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
			task = f;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	330c      	adds	r3, #12
 80010a2:	6839      	ldr	r1, [r7, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fa89 	bl	80015bc <_ZNSt8functionIFvvEEaSERKS1_>
		}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard14interrupt_taskEv>:

		void interrupt_task(void){
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
			if(!first_interrupt_flag){
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7a1b      	ldrb	r3, [r3, #8]
 80010be:	f083 0301 	eor.w	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard14interrupt_taskEv+0x1e>
				first_interrupt_flag = true;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	721a      	strb	r2, [r3, #8]
			}else if(task != nullptr){
				task();
			}
		}
 80010ce:	e00d      	b.n	80010ec <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard14interrupt_taskEv+0x3a>
			}else if(task != nullptr){
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	330c      	adds	r3, #12
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fa8b 	bl	80015f2 <_ZStneIvJEEbRKSt8functionIFT_DpT0_EEDn>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d004      	beq.n	80010ec <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard14interrupt_taskEv+0x3a>
				task();
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	330c      	adds	r3, #12
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fa90 	bl	800160c <_ZNKSt8functionIFvvEEclEv>
		}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_ZNK12G24_STM32HAL9CommonLib21InterruptionTimerHard11get_handlerEv>:

		TIM_HandleTypeDef *get_handler(void)const{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
			return tim;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
		}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard11reset_countEv>:

		void reset_count(void){
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
			__HAL_TIM_SET_COUNTER(tim,0);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
		}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardD1Ev>:
	class InterruptionTimerHard:public IInterruptionTimer{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardD1Ev+0x24>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	330c      	adds	r3, #12
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff15 	bl	8000f6e <_ZNSt8functionIFvvEED1Ev>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	08010360 	.word	0x08010360

08001154 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommD1Ev>:
	class FdCanComm:public ICan{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	4a08      	ldr	r2, [pc, #32]	; (8001180 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommD1Ev+0x2c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3318      	adds	r3, #24
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f9d0 	bl	800150c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3314      	adds	r3, #20
 8001170:	4618      	mov	r0, r3
 8001172:	f000 f9cb 	bl	800150c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	080103f0 	.word	0x080103f0

08001184 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    if (htim == UsbCanBoard::led_timer.get_handler()){
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800118e:	f7ff ffb1 	bl	80010f4 <_ZNK12G24_STM32HAL9CommonLib21InterruptionTimerHard11get_handlerEv>
 8001192:	4602      	mov	r2, r0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4293      	cmp	r3, r2
 8001198:	bf0c      	ite	eq
 800119a:	2301      	moveq	r3, #1
 800119c:	2300      	movne	r3, #0
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <HAL_TIM_PeriodElapsedCallback+0x26>
    	UsbCanBoard::led_timer.interrupt_task();
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80011a6:	f7ff ff84 	bl	80010b2 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard14interrupt_taskEv>
    }
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	240002b4 	.word	0x240002b4

080011b8 <HAL_FDCAN_RxFifo0Callback>:
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	if (hfdcan==UsbCanBoard::can1.get_handler()) {
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <HAL_FDCAN_RxFifo0Callback+0x38>)
 80011c4:	f7ff fcbe 	bl	8000b44 <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm11get_handlerEv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4293      	cmp	r3, r2
 80011ce:	bf0c      	ite	eq
 80011d0:	2301      	moveq	r3, #1
 80011d2:	2300      	movne	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d006      	beq.n	80011e8 <HAL_FDCAN_RxFifo0Callback+0x30>
		UsbCanBoard::LED1_R.play(UsbCanLib::ok);
 80011da:	4906      	ldr	r1, [pc, #24]	; (80011f4 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 80011dc:	4806      	ldr	r0, [pc, #24]	; (80011f8 <HAL_FDCAN_RxFifo0Callback+0x40>)
 80011de:	f7ff fe5d 	bl	8000e9c <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
		UsbCanBoard::can1.rx_interrupt_task();
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <HAL_FDCAN_RxFifo0Callback+0x38>)
 80011e4:	f7ff fd9a 	bl	8000d1c <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17rx_interrupt_taskEv>
	}
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	240003d8 	.word	0x240003d8
 80011f4:	080102e0 	.word	0x080102e0
 80011f8:	240002d0 	.word	0x240002d0

080011fc <HAL_FDCAN_RxFifo1Callback>:
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
	if (hfdcan==UsbCanBoard::can2.get_handler()) {
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <HAL_FDCAN_RxFifo1Callback+0x38>)
 8001208:	f7ff fc9c 	bl	8000b44 <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm11get_handlerEv>
 800120c:	4602      	mov	r2, r0
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4293      	cmp	r3, r2
 8001212:	bf0c      	ite	eq
 8001214:	2301      	moveq	r3, #1
 8001216:	2300      	movne	r3, #0
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <HAL_FDCAN_RxFifo1Callback+0x30>
		UsbCanBoard::LED2_R.play(UsbCanLib::ok);
 800121e:	4906      	ldr	r1, [pc, #24]	; (8001238 <HAL_FDCAN_RxFifo1Callback+0x3c>)
 8001220:	4806      	ldr	r0, [pc, #24]	; (800123c <HAL_FDCAN_RxFifo1Callback+0x40>)
 8001222:	f7ff fe3b 	bl	8000e9c <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
		UsbCanBoard::can2.rx_interrupt_task();
 8001226:	4803      	ldr	r0, [pc, #12]	; (8001234 <HAL_FDCAN_RxFifo1Callback+0x38>)
 8001228:	f7ff fd78 	bl	8000d1c <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17rx_interrupt_taskEv>
	}
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	240003f4 	.word	0x240003f4
 8001238:	080102e0 	.word	0x080102e0
 800123c:	24000354 	.word	0x24000354

08001240 <HAL_FDCAN_TxBufferCompleteCallback>:
void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	if (hfdcan==UsbCanBoard::can2.get_handler()) {
 800124a:	4815      	ldr	r0, [pc, #84]	; (80012a0 <HAL_FDCAN_TxBufferCompleteCallback+0x60>)
 800124c:	f7ff fc7a 	bl	8000b44 <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm11get_handlerEv>
 8001250:	4602      	mov	r2, r0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4293      	cmp	r3, r2
 8001256:	bf0c      	ite	eq
 8001258:	2301      	moveq	r3, #1
 800125a:	2300      	movne	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <HAL_FDCAN_TxBufferCompleteCallback+0x32>
		UsbCanBoard::LED2_G.play(UsbCanLib::ok);
 8001262:	4910      	ldr	r1, [pc, #64]	; (80012a4 <HAL_FDCAN_TxBufferCompleteCallback+0x64>)
 8001264:	4810      	ldr	r0, [pc, #64]	; (80012a8 <HAL_FDCAN_TxBufferCompleteCallback+0x68>)
 8001266:	f7ff fe19 	bl	8000e9c <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
		UsbCanBoard::can2.tx_interrupt_task();
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <HAL_FDCAN_TxBufferCompleteCallback+0x60>)
 800126c:	f7ff fccc 	bl	8000c08 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv>
	}else if(hfdcan==UsbCanBoard::can1.get_handler()) {
		UsbCanBoard::LED1_G.play(UsbCanLib::ok);
		UsbCanBoard::can1.tx_interrupt_task();
	}
}
 8001270:	e012      	b.n	8001298 <HAL_FDCAN_TxBufferCompleteCallback+0x58>
	}else if(hfdcan==UsbCanBoard::can1.get_handler()) {
 8001272:	480e      	ldr	r0, [pc, #56]	; (80012ac <HAL_FDCAN_TxBufferCompleteCallback+0x6c>)
 8001274:	f7ff fc66 	bl	8000b44 <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm11get_handlerEv>
 8001278:	4602      	mov	r2, r0
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4293      	cmp	r3, r2
 800127e:	bf0c      	ite	eq
 8001280:	2301      	moveq	r3, #1
 8001282:	2300      	movne	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d006      	beq.n	8001298 <HAL_FDCAN_TxBufferCompleteCallback+0x58>
		UsbCanBoard::LED1_G.play(UsbCanLib::ok);
 800128a:	4906      	ldr	r1, [pc, #24]	; (80012a4 <HAL_FDCAN_TxBufferCompleteCallback+0x64>)
 800128c:	4808      	ldr	r0, [pc, #32]	; (80012b0 <HAL_FDCAN_TxBufferCompleteCallback+0x70>)
 800128e:	f7ff fe05 	bl	8000e9c <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
		UsbCanBoard::can1.tx_interrupt_task();
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <HAL_FDCAN_TxBufferCompleteCallback+0x6c>)
 8001294:	f7ff fcb8 	bl	8000c08 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	240003f4 	.word	0x240003f4
 80012a4:	080102e0 	.word	0x080102e0
 80012a8:	24000380 	.word	0x24000380
 80012ac:	240003d8 	.word	0x240003d8
 80012b0:	240002fc 	.word	0x240002fc

080012b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b8:	f001 ffe8 	bl	800328c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012bc:	f000 f818 	bl	80012f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c0:	f7ff fb2e 	bl	8000920 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80012c4:	f7ff f986 	bl	80005d4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80012c8:	f7ff f9e8 	bl	800069c <MX_FDCAN2_Init>
  MX_TIM1_Init();
 80012cc:	f001 fb5a 	bl	8002984 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012d0:	f001 fc1c 	bl	8002b0c <MX_TIM2_Init>
  MX_TIM3_Init();
 80012d4:	f001 fc90 	bl	8002bf8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80012d8:	f00d fb9e 	bl	800ea18 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 80012dc:	f001 fe56 	bl	8002f8c <MX_UART4_Init>
  MX_UART8_Init();
 80012e0:	f001 fea2 	bl	8003028 <MX_UART8_Init>
  MX_TIM17_Init();
 80012e4:	f001 fd16 	bl	8002d14 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  UsbCanBoard::init();
 80012e8:	f00e fa54 	bl	800f794 <_ZN12G24_STM32HAL11UsbCanBoard4initEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <main+0x38>
	...

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b09e      	sub	sp, #120	; 0x78
 80012f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012fa:	224c      	movs	r2, #76	; 0x4c
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f00e feac 	bl	801005c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2220      	movs	r2, #32
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f00e fea5 	bl	801005c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001312:	2002      	movs	r0, #2
 8001314:	f004 ff0c 	bl	8006130 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b52      	ldr	r3, [pc, #328]	; (8001468 <SystemClock_Config+0x178>)
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	4a51      	ldr	r2, [pc, #324]	; (8001468 <SystemClock_Config+0x178>)
 8001322:	f023 0301 	bic.w	r3, r3, #1
 8001326:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001328:	4b4f      	ldr	r3, [pc, #316]	; (8001468 <SystemClock_Config+0x178>)
 800132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b4e      	ldr	r3, [pc, #312]	; (800146c <SystemClock_Config+0x17c>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	4a4d      	ldr	r2, [pc, #308]	; (800146c <SystemClock_Config+0x17c>)
 8001338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800133c:	6193      	str	r3, [r2, #24]
 800133e:	4b4b      	ldr	r3, [pc, #300]	; (800146c <SystemClock_Config+0x17c>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800134a:	bf00      	nop
 800134c:	4b47      	ldr	r3, [pc, #284]	; (800146c <SystemClock_Config+0x17c>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001358:	bf14      	ite	ne
 800135a:	2301      	movne	r3, #1
 800135c:	2300      	moveq	r3, #0
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f3      	bne.n	800134c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001364:	4b42      	ldr	r3, [pc, #264]	; (8001470 <SystemClock_Config+0x180>)
 8001366:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800136a:	4a41      	ldr	r2, [pc, #260]	; (8001470 <SystemClock_Config+0x180>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001374:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <SystemClock_Config+0x180>)
 8001376:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b39      	ldr	r3, [pc, #228]	; (800146c <SystemClock_Config+0x17c>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4a38      	ldr	r2, [pc, #224]	; (800146c <SystemClock_Config+0x17c>)
 800138c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001390:	6193      	str	r3, [r2, #24]
 8001392:	4b36      	ldr	r3, [pc, #216]	; (800146c <SystemClock_Config+0x17c>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	4b32      	ldr	r3, [pc, #200]	; (8001468 <SystemClock_Config+0x178>)
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	4a31      	ldr	r2, [pc, #196]	; (8001468 <SystemClock_Config+0x178>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013a8:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <SystemClock_Config+0x178>)
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013b4:	bf00      	nop
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <SystemClock_Config+0x17c>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013c2:	bf14      	ite	ne
 80013c4:	2301      	movne	r3, #1
 80013c6:	2300      	moveq	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f3      	bne.n	80013b6 <SystemClock_Config+0xc6>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ce:	2301      	movs	r3, #1
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d8:	2302      	movs	r3, #2
 80013da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013dc:	2302      	movs	r3, #2
 80013de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80013e4:	233c      	movs	r3, #60	; 0x3c
 80013e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80013ec:	230f      	movs	r3, #15
 80013ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013f4:	230c      	movs	r3, #12
 80013f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001404:	4618      	mov	r0, r3
 8001406:	f004 fedd 	bl	80061c4 <HAL_RCC_OscConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf14      	ite	ne
 8001410:	2301      	movne	r3, #1
 8001412:	2300      	moveq	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800141a:	f000 f82b 	bl	8001474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141e:	233f      	movs	r3, #63	; 0x3f
 8001420:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001422:	2303      	movs	r3, #3
 8001424:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800142a:	2308      	movs	r3, #8
 800142c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800142e:	2340      	movs	r3, #64	; 0x40
 8001430:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001432:	2340      	movs	r3, #64	; 0x40
 8001434:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800143c:	2340      	movs	r3, #64	; 0x40
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2104      	movs	r1, #4
 8001446:	4618      	mov	r0, r3
 8001448:	f005 fb16 	bl	8006a78 <HAL_RCC_ClockConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	bf14      	ite	ne
 8001452:	2301      	movne	r3, #1
 8001454:	2300      	moveq	r3, #0
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x170>
  {
    Error_Handler();
 800145c:	f000 f80a 	bl	8001474 <Error_Handler>
  }
}
 8001460:	bf00      	nop
 8001462:	3778      	adds	r7, #120	; 0x78
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	58000400 	.word	0x58000400
 800146c:	58024800 	.word	0x58024800
 8001470:	58024400 	.word	0x58024400

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147c:	e7fe      	b.n	800147c <Error_Handler+0x8>

0800147e <_ZSt4moveIRSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEESt14default_deleteIS5_EEEONSt16remove_referenceIT_E4typeEOSB_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1EOS8_>:

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2729. Missing SFINAE on std::pair::operator=
      _Tuple_impl& operator=(const _Tuple_impl&) = delete;

      _Tuple_impl(_Tuple_impl&&) = default;
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	6839      	ldr	r1, [r7, #0]
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 fa04 	bl	80018ae <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEEEC1EOS7_>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_ZNSt5tupleIJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1EOS8_>:
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ffe3 	bl	8001494 <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1EOS8_>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1EOS7_>:
      __uniq_ptr_impl(__uniq_ptr_impl&& __u) noexcept
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
      : _M_t(std::move(__u._M_t))
 80014e2:	687c      	ldr	r4, [r7, #4]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f9d6 	bl	8001898 <_ZSt4moveIRSt5tupleIJPN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEESt14default_deleteIS5_EEEEONSt16remove_referenceIT_E4typeEOSC_>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4619      	mov	r1, r3
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7ff ffe1 	bl	80014b8 <_ZNSt5tupleIJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1EOS8_>
      { __u._M_ptr() = nullptr; }
 80014f6:	6838      	ldr	r0, [r7, #0]
 80014f8:	f000 f9e5 	bl	80018c6 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE6_M_ptrEv>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}

0800150c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f9d5 	bl	80018c6 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE6_M_ptrEv>
 800151c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00c      	beq.n	8001540 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f9da 	bl	80018e0 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE11get_deleterEv>
 800152c:	4604      	mov	r4, r0
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 f9e3 	bl	80018fa <_ZSt4moveIRPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001534:	4603      	mov	r3, r0
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	4620      	mov	r0, r4
 800153c:	f000 f9e8 	bl	8001910 <_ZNKSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEclEPS4_>
	__ptr = pointer();
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
      }
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bd90      	pop	{r4, r7, pc}

08001550 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>:
	return *get();
      }

      /// Return the stored pointer.
      pointer
      operator->() const noexcept
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
      {
	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
	return get();
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f9e9 	bl	8001930 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE3getEv>
 800155e:	4603      	mov	r3, r0
      }
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	461a      	mov	r2, r3
 8001574:	2300      	movs	r3, #0
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	6053      	str	r3, [r2, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <_ZNSt8functionIFvvEEC1EDn>:

      /**
       *  @brief Creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function(nullptr_t) noexcept
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	461a      	mov	r2, r3
 800159c:	2300      	movs	r3, #0
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	6053      	str	r3, [r2, #4]
 80015a2:	6093      	str	r3, [r2, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ffde 	bl	8001568 <_ZNSt14_Function_baseC1Ev>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_ZNSt8functionIFvvEEaSERKS1_>:
       *
       *  If @a __x targets a function pointer or a reference to a function
       *  object, then this operation will not throw an %exception.
       */
      function&
      operator=(const function& __x)
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
      {
	function(__x).swap(*this);
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	6839      	ldr	r1, [r7, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f9bc 	bl	800194a <_ZNSt8functionIFvvEEC1ERKS1_>
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f9e1 	bl	80019a0 <_ZNSt8functionIFvvEE4swapERS1_>
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fcc3 	bl	8000f6e <_ZNSt8functionIFvvEED1Ev>
	return *this;
 80015e8:	687b      	ldr	r3, [r7, #4]
      }
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_ZStneIvJEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw an %exception.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
    { return static_cast<bool>(__f); }
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f9f0 	bl	80019e2 <_ZNKSt8functionIFvvEEcvbEv>
 8001602:	4603      	mov	r3, r0
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_ZNKSt8functionIFvvEEclEv>:
      operator()(_ArgTypes... __args) const
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fc98 	bl	8000f4c <_ZNKSt14_Function_base8_M_emptyEv>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 8001622:	f00e fc4a 	bl	800feba <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4610      	mov	r0, r2
 800162e:	4798      	blx	r3
 8001630:	bf00      	nop
      }
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_ZN12G24_STM32HAL9CommonLib11IRingBufferINS0_8CanFrameEEC1Ev>:
	SIZE64,
	SIZE128,
};

template<typename T>
class IRingBuffer{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <_ZN12G24_STM32HAL9CommonLib11IRingBufferINS0_8CanFrameEEC1Ev+0x1c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	080103d4 	.word	0x080103d4

08001658 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EEC1Ev>:
	size_t virtual get_busy_level(void)const = 0;
	void virtual reset(void) = 0;
};

template<typename T, size_t n>
class RingBuffer : public IRingBuffer<T>{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ffe8 	bl	8001638 <_ZN12G24_STM32HAL9CommonLib11IRingBufferINS0_8CanFrameEEC1Ev>
 8001668:	4a10      	ldr	r2, [pc, #64]	; (80016ac <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EEC1Ev+0x54>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2220      	movs	r2, #32
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	1e5a      	subs	r2, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3318      	adds	r3, #24
 8001694:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f00e fcde 	bl	801005c <memset>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	08010344 	.word	0x08010344

080016b0 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
  /// @endcond

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80016b8:	f44f 7026 	mov.w	r0, #664	; 0x298
 80016bc:	f00e fbec 	bl	800fe98 <_Znwj>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461c      	mov	r4, r3
 80016c4:	4620      	mov	r0, r4
 80016c6:	f44f 7326 	mov.w	r3, #664	; 0x298
 80016ca:	461a      	mov	r2, r3
 80016cc:	2100      	movs	r1, #0
 80016ce:	f00e fcc5 	bl	801005c <memset>
 80016d2:	4620      	mov	r0, r4
 80016d4:	f7ff ffc0 	bl	8001658 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EEC1Ev>
 80016d8:	4621      	mov	r1, r4
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f9a1 	bl	8001a22 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEC1IS6_vEEPS4_>
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd90      	pop	{r4, r7, pc}

080016e8 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>:
      ~unique_ptr() noexcept
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f9a4 	bl	8001a40 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE6_M_ptrEv>
 80016f8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00c      	beq.n	800171c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f9a9 	bl	8001a5a <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE11get_deleterEv>
 8001708:	4604      	mov	r4, r0
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 f9b2 	bl	8001a74 <_ZSt4moveIRPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001710:	4603      	mov	r3, r0
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	4620      	mov	r0, r4
 8001718:	f000 f9b7 	bl	8001a8a <_ZNKSt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEEclEPS4_>
	__ptr = pointer();
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
      }
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}

0800172c <_ZNSt15__uniq_ptr_dataIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_ELb1ELb1EECI1St15__uniq_ptr_implIS4_S6_EIS5_INS1_10RingBufferIS3_Lj5EEEEEEPS4_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	68b9      	ldr	r1, [r7, #8]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f9cc 	bl	8001adc <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1IS5_INS1_10RingBufferIS3_Lj5EEEEEEPS4_OT_>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 800174e:	b5b0      	push	{r4, r5, r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 8001758:	687c      	ldr	r4, [r7, #4]
 800175a:	6838      	ldr	r0, [r7, #0]
 800175c:	f000 f9a6 	bl	8001aac <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE7releaseEv>
 8001760:	4605      	mov	r5, r0
 8001762:	6838      	ldr	r0, [r7, #0]
 8001764:	f000 f979 	bl	8001a5a <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE11get_deleterEv>
 8001768:	4603      	mov	r3, r0
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f9ab 	bl	8001ac6 <_ZSt7forwardISt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	4629      	mov	r1, r5
 8001776:	4620      	mov	r0, r4
 8001778:	f7ff ffd8 	bl	800172c <_ZNSt15__uniq_ptr_dataIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_ELb1ELb1EECI1St15__uniq_ptr_implIS4_S6_EIS5_INS1_10RingBufferIS3_Lj5EEEEEEPS4_OT_>
	{ }
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001788 <_ZN12G24_STM32HAL9CommonLib7ISerialC1Ev>:
	static constexpr size_t max_size = 64;
	uint8_t data[max_size] = {0};
	size_t size = 0;
};

class ISerial{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <_ZN12G24_STM32HAL9CommonLib7ISerialC1Ev+0x1c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	08010390 	.word	0x08010390

080017a8 <_ZN12G24_STM32HAL9CommonLib11IRingBufferINS0_10SerialDataEEC1Ev>:
class IRingBuffer{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <_ZN12G24_STM32HAL9CommonLib11IRingBufferINS0_10SerialDataEEC1Ev+0x1c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	08010328 	.word	0x08010328

080017c8 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EEC1Ev>:
class RingBuffer : public IRingBuffer<T>{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ffe8 	bl	80017a8 <_ZN12G24_STM32HAL9CommonLib11IRingBufferINS0_10SerialDataEEC1Ev>
 80017d8:	4a10      	ldr	r2, [pc, #64]	; (800181c <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EEC1Ev+0x54>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2210      	movs	r2, #16
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	1e5a      	subs	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3318      	adds	r3, #24
 8001804:	f44f 6288 	mov.w	r2, #1088	; 0x440
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f00e fc26 	bl	801005c <memset>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	0801030c 	.word	0x0801030c

08001820 <_ZN12G24_STM32HAL9CommonLib10SerialDataC1Ev>:
struct SerialData{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4618      	mov	r0, r3
 800182c:	2340      	movs	r3, #64	; 0x40
 800182e:	461a      	mov	r2, r3
 8001830:	2100      	movs	r1, #0
 8001832:	f00e fc13 	bl	801005c <memset>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EEC1EP19_USBD_HandleTypeDef>:
	RingBuffer<SerialData,RX_BUFF_N> rx_buff;

	SerialData tmp_buff;

public:
	UsbCdcComm(USBD_HandleTypeDef *_usb):usb(_usb){}
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff97 	bl	8001788 <_ZN12G24_STM32HAL9CommonLib7ISerialC1Ev>
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EEC1EP19_USBD_HandleTypeDef+0x4c>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3308      	adds	r3, #8
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ffac 	bl	80017c8 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EEC1Ev>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ffa6 	bl	80017c8 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EEC1Ev>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ffcc 	bl	8001820 <_ZN12G24_STM32HAL9CommonLib10SerialDataC1Ev>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	080102f4 	.word	0x080102f4

08001898 <_ZSt4moveIRSt5tupleIJPN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEESt14default_deleteIS5_EEEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEEEC1EOS7_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
      { }
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 f919 	bl	8001b08 <_ZSt3getILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE11get_deleterEv>:
      get_deleter() noexcept
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f919 	bl	8001b22 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE10_M_deleterEv>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_ZSt4moveIRPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_ZNKSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEclEPS4_>:
      operator()(_Tp* __ptr) const
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <_ZNKSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEclEPS4_+0x18>
 8001920:	2104      	movs	r1, #4
 8001922:	4618      	mov	r0, r3
 8001924:	f00e fab6 	bl	800fe94 <_ZdlPvj>
      }
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE3getEv>:
      get() const noexcept
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f8fe 	bl	8001b3c <_ZNKSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE6_M_ptrEv>
 8001940:	4603      	mov	r3, r0
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	461a      	mov	r2, r3
 8001958:	2300      	movs	r3, #0
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	6053      	str	r3, [r2, #4]
 800195e:	6093      	str	r3, [r2, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fe00 	bl	8001568 <_ZNSt14_Function_baseC1Ev>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 800196e:	6838      	ldr	r0, [r7, #0]
 8001970:	f000 f837 	bl	80019e2 <_ZNKSt8functionIFvvEEcvbEv>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00d      	beq.n	8001996 <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	6839      	ldr	r1, [r7, #0]
 8001982:	2202      	movs	r2, #2
 8001984:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	609a      	str	r2, [r3, #8]
      }
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f8dc 	bl	8001b6e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f103 0208 	add.w	r2, r3, #8
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	3308      	adds	r3, #8
 80019c0:	4619      	mov	r1, r3
 80019c2:	4610      	mov	r0, r2
 80019c4:	f000 f905 	bl	8001bd2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f103 020c 	add.w	r2, r3, #12
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	330c      	adds	r3, #12
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f000 f926 	bl	8001c26 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff faad 	bl	8000f4c <_ZNKSt14_Function_base8_M_emptyEv>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f083 0301 	eor.w	r3, r3, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_ZNSt15__uniq_ptr_dataIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_ELb1ELb1EECI1St15__uniq_ptr_implIS4_S6_EEPS4_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	4611      	mov	r1, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 f926 	bl	8001c64 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEC1EPS4_>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEC1IS6_vEEPS4_>:
	unique_ptr(pointer __p) noexcept
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ffe6 	bl	8001a02 <_ZNSt15__uniq_ptr_dataIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_ELb1ELb1EECI1St15__uniq_ptr_implIS4_S6_EEPS4_>
        { }
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f91e 	bl	8001c8c <_ZSt3getILj0EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE11get_deleterEv>:
      get_deleter() noexcept
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 f91e 	bl	8001ca6 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE10_M_deleterEv>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_ZSt4moveIRPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <_ZNKSt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEEclEPS4_>:
      operator()(_Tp* __ptr) const
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d004      	beq.n	8001aa4 <_ZNKSt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEEclEPS4_+0x1a>
 8001a9a:	f44f 7126 	mov.w	r1, #664	; 0x298
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f00e f9f8 	bl	800fe94 <_ZdlPvj>
      }
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE7releaseEv>:
      release() noexcept
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f902 	bl	8001cc0 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE7releaseEv>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_ZSt7forwardISt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1IS5_INS1_10RingBufferIS3_Lj5EEEEEEPS4_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8001adc:	b590      	push	{r4, r7, lr}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8001ae8:	68fc      	ldr	r4, [r7, #12]
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffeb 	bl	8001ac6 <_ZSt7forwardISt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	4619      	mov	r1, r3
 8001af8:	4620      	mov	r0, r4
 8001afa:	f000 f8f6 	bl	8001cea <_ZNSt5tupleIJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1IRS5_S6_INS1_10RingBufferIS3_Lj5EEEELb1EEEOT_OT0_>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd90      	pop	{r4, r7, pc}

08001b08 <_ZSt3getILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f902 	bl	8001d1c <_ZSt12__get_helperILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEJSt14default_deleteIS4_EEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 f901 	bl	8001d34 <_ZSt3getILj1EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <_ZNKSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f900 	bl	8001d4c <_ZSt3getILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSC_>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ffed 	bl	8001b58 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b88:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8001b8c:	6838      	ldr	r0, [r7, #0]
 8001b8e:	f7ff ffe3 	bl	8001b58 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001b92:	4602      	mov	r2, r0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b9a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8001b9e:	f107 0308 	add.w	r3, r7, #8
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ffd8 	bl	8001b58 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bb0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ffed 	bl	8001bbc <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001be2:	4603      	mov	r3, r0
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001be8:	6838      	ldr	r0, [r7, #0]
 8001bea:	f7ff ffe7 	bl	8001bbc <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ffde 	bl	8001bbc <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001c00:	4603      	mov	r3, r0
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	601a      	str	r2, [r3, #0]
    }
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ffed 	bl	8001c10 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8001c36:	4603      	mov	r3, r0
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001c3c:	6838      	ldr	r0, [r7, #0]
 8001c3e:	f7ff ffe7 	bl	8001c10 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8001c42:	4603      	mov	r3, r0
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ffde 	bl	8001c10 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8001c54:	4603      	mov	r3, r0
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	601a      	str	r2, [r3, #0]
    }
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEC1EPS4_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f878 	bl	8001d66 <_ZNSt5tupleIJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEEC1ILb1ELb1EEEv>
 8001c76:	683c      	ldr	r4, [r7, #0]
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fee1 	bl	8001a40 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE6_M_ptrEv>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	601c      	str	r4, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd90      	pop	{r4, r7, pc}

08001c8c <_ZSt3getILj0EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>:
    get(tuple<_Elements...>& __t) noexcept
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f872 	bl	8001d80 <_ZSt12__get_helperILj0EPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJSt14default_deleteIS4_EEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f871 	bl	8001d98 <_ZSt3getILj1EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE7releaseEv>:
      pointer release() noexcept
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff feb9 	bl	8001a40 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE6_M_ptrEv>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff feb3 	bl	8001a40 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE6_M_ptrEv>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
	return __p;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
      }
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <_ZNSt5tupleIJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1IRS5_S6_INS1_10RingBufferIS3_Lj5EEEELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8001cea:	b5b0      	push	{r4, r5, r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8001cf6:	68fc      	ldr	r4, [r7, #12]
 8001cf8:	68b8      	ldr	r0, [r7, #8]
 8001cfa:	f000 f859 	bl	8001db0 <_ZSt7forwardIRPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001cfe:	4605      	mov	r5, r0
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff fee0 	bl	8001ac6 <_ZSt7forwardISt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f000 f85a 	bl	8001dc6 <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1IRS5_JS6_INS1_10RingBufferIS3_Lj5EEEEEvEEOT_DpOT0_>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bdb0      	pop	{r4, r5, r7, pc}

08001d1c <_ZSt12__get_helperILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEJSt14default_deleteIS4_EEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f86a 	bl	8001dfe <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEE7_M_headERS8_>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_ZSt3getILj1EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>:
    get(tuple<_Elements...>& __t) noexcept
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f86b 	bl	8001e18 <_ZSt12__get_helperILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_ZSt3getILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSC_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f86a 	bl	8001e30 <_ZSt12__get_helperILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEJSt14default_deleteIS4_EEERKT0_RKSt11_Tuple_implIXT_EJS8_DpT1_EE>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_ZNSt5tupleIJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEEC1ILb1ELb1EEEv>:
	tuple()
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 f869 	bl	8001e48 <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEEC1Ev>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_ZSt12__get_helperILj0EPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJSt14default_deleteIS4_EEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f86d 	bl	8001e68 <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEE7_M_headERS8_>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_ZSt3getILj1EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>:
    get(tuple<_Elements...>& __t) noexcept
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f86e 	bl	8001e82 <_ZSt12__get_helperILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_ZSt7forwardIRPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1IRS5_JS6_INS1_10RingBufferIS3_Lj5EEEEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8001dc6:	b590      	push	{r4, r7, lr}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fe77 	bl	8001ac6 <_ZSt7forwardISt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f85c 	bl	8001e9a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEEEC1IS0_INS2_10RingBufferIS4_Lj5EEEEEEOT_>
 8001de2:	68fc      	ldr	r4, [r7, #12]
 8001de4:	68b8      	ldr	r0, [r7, #8]
 8001de6:	f7ff ffe3 	bl	8001db0 <_ZSt7forwardIRPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4619      	mov	r1, r3
 8001dee:	4620      	mov	r0, r4
 8001df0:	f000 f865 	bl	8001ebe <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEELb0EEC1IRS5_EEOT_>
	{ }
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd90      	pop	{r4, r7, pc}

08001dfe <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEE7_M_headERS8_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 f869 	bl	8001ee0 <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEELb0EE7_M_headERS6_>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_ZSt12__get_helperILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f868 	bl	8001ef6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEEE7_M_headERS7_>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_ZSt12__get_helperILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEJSt14default_deleteIS4_EEERKT0_RKSt11_Tuple_implIXT_EJS8_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f868 	bl	8001f0e <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEE7_M_headERKS8_>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f869 	bl	8001f28 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEEC1Ev>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 f871 	bl	8001f40 <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEELb0EEC1Ev>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEE7_M_headERS8_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f872 	bl	8001f5c <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEELb0EE7_M_headERS6_>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_ZSt12__get_helperILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f871 	bl	8001f72 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEE7_M_headERS7_>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEEEC1IS0_INS2_10RingBufferIS4_Lj5EEEEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8001ea4:	6838      	ldr	r0, [r7, #0]
 8001ea6:	f7ff fe0e 	bl	8001ac6 <_ZSt7forwardISt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f86b 	bl	8001f8a <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEELb1EEC1IS0_INS2_10RingBufferIS4_Lj5EEEEEEOT_>
	{ }
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEELb0EEC1IRS5_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8001ec8:	6838      	ldr	r0, [r7, #0]
 8001eca:	f7ff ff71 	bl	8001db0 <_ZSt7forwardIRPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEELb0EE7_M_headERS6_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEEE7_M_headERS7_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f856 	bl	8001fb0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEELb1EE7_M_headERS7_>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEE7_M_headERKS8_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 f854 	bl	8001fc6 <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEELb0EE7_M_headERKS6_>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEEC1Ev>:
      _Tuple_impl()
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f853 	bl	8001fdc <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEELb1EEC1Ev>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEELb0EEC1Ev>:
      constexpr _Head_base()
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEELb0EE7_M_headERS6_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEE7_M_headERS7_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f839 	bl	8001ff2 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEELb1EE7_M_headERS7_>
 8001f80:	4603      	mov	r3, r0
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEELb1EEC1IS0_INS2_10RingBufferIS4_Lj5EEEEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 8001f8a:	b590      	push	{r4, r7, lr}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8001f94:	687c      	ldr	r4, [r7, #4]
 8001f96:	6838      	ldr	r0, [r7, #0]
 8001f98:	f7ff fd95 	bl	8001ac6 <_ZSt7forwardISt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f000 f831 	bl	8002008 <_ZNSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEC1INS1_10RingBufferIS3_Lj5EEEvEERKS_IT_E>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd90      	pop	{r4, r7, pc}

08001fb0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEELb1EE7_M_headERS7_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEELb0EE7_M_headERKS6_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEELb1EEC1Ev>:
      constexpr _Head_base()
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEELb1EE7_M_headERS7_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_ZNSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEC1INS1_10RingBufferIS3_Lj5EEEvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002020:	b580      	push	{r7, lr}
 8002022:	b08e      	sub	sp, #56	; 0x38
 8002024:	af04      	add	r7, sp, #16
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b01      	cmp	r3, #1
 800202e:	f040 8130 	bne.w	8002292 <_Z41__static_initialization_and_destruction_0ii+0x272>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002038:	4293      	cmp	r3, r2
 800203a:	f040 812a 	bne.w	8002292 <_Z41__static_initialization_and_destruction_0ii+0x272>

extern USBD_HandleTypeDef hUsbDeviceFS;

namespace G24_STM32HAL::UsbCanBoard{
	//timer
	inline auto led_timer = CommonLib::InterruptionTimerHard(&htim17);
 800203e:	4ba7      	ldr	r3, [pc, #668]	; (80022dc <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	4aa5      	ldr	r2, [pc, #660]	; (80022dc <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4ba4      	ldr	r3, [pc, #656]	; (80022dc <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800205a:	49a1      	ldr	r1, [pc, #644]	; (80022e0 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800205c:	48a1      	ldr	r0, [pc, #644]	; (80022e4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800205e:	f7fe ffa3 	bl	8000fa8 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardC1EP17TIM_HandleTypeDef>

	//LEDs
	inline auto LED1_R = CommonLib::LEDPwm{&htim1,TIM_CHANNEL_1};
 8002062:	4ba1      	ldr	r3, [pc, #644]	; (80022e8 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3301      	adds	r3, #1
 8002068:	4a9f      	ldr	r2, [pc, #636]	; (80022e8 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	4b9e      	ldr	r3, [pc, #632]	; (80022e8 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d004      	beq.n	8002088 <_Z41__static_initialization_and_destruction_0ii+0x68>
 800207e:	2200      	movs	r2, #0
 8002080:	499a      	ldr	r1, [pc, #616]	; (80022ec <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8002082:	489b      	ldr	r0, [pc, #620]	; (80022f0 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8002084:	f7fe fedc 	bl	8000e40 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED1_G = CommonLib::LEDPwm{&htim1,TIM_CHANNEL_2};
 8002088:	4b9a      	ldr	r3, [pc, #616]	; (80022f4 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	4a99      	ldr	r2, [pc, #612]	; (80022f4 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b98      	ldr	r3, [pc, #608]	; (80022f4 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b01      	cmp	r3, #1
 8002098:	bf0c      	ite	eq
 800209a:	2301      	moveq	r3, #1
 800209c:	2300      	movne	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d004      	beq.n	80020ae <_Z41__static_initialization_and_destruction_0ii+0x8e>
 80020a4:	2204      	movs	r2, #4
 80020a6:	4991      	ldr	r1, [pc, #580]	; (80022ec <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80020a8:	4893      	ldr	r0, [pc, #588]	; (80022f8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80020aa:	f7fe fec9 	bl	8000e40 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED1_B = CommonLib::LEDPwm{&htim1,TIM_CHANNEL_4};
 80020ae:	4b93      	ldr	r3, [pc, #588]	; (80022fc <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	4a91      	ldr	r2, [pc, #580]	; (80022fc <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4b90      	ldr	r3, [pc, #576]	; (80022fc <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	bf0c      	ite	eq
 80020c0:	2301      	moveq	r3, #1
 80020c2:	2300      	movne	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d004      	beq.n	80020d4 <_Z41__static_initialization_and_destruction_0ii+0xb4>
 80020ca:	220c      	movs	r2, #12
 80020cc:	4987      	ldr	r1, [pc, #540]	; (80022ec <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80020ce:	488c      	ldr	r0, [pc, #560]	; (8002300 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80020d0:	f7fe feb6 	bl	8000e40 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>

	inline auto LED2_R = CommonLib::LEDPwm{&htim3,TIM_CHANNEL_1};
 80020d4:	4b8b      	ldr	r3, [pc, #556]	; (8002304 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	3301      	adds	r3, #1
 80020da:	4a8a      	ldr	r2, [pc, #552]	; (8002304 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b89      	ldr	r3, [pc, #548]	; (8002304 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	bf0c      	ite	eq
 80020e6:	2301      	moveq	r3, #1
 80020e8:	2300      	movne	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d004      	beq.n	80020fa <_Z41__static_initialization_and_destruction_0ii+0xda>
 80020f0:	2200      	movs	r2, #0
 80020f2:	4985      	ldr	r1, [pc, #532]	; (8002308 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 80020f4:	4885      	ldr	r0, [pc, #532]	; (800230c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80020f6:	f7fe fea3 	bl	8000e40 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED2_G = CommonLib::LEDPwm{&htim3,TIM_CHANNEL_2};
 80020fa:	4b85      	ldr	r3, [pc, #532]	; (8002310 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	4a83      	ldr	r2, [pc, #524]	; (8002310 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b82      	ldr	r3, [pc, #520]	; (8002310 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	bf0c      	ite	eq
 800210c:	2301      	moveq	r3, #1
 800210e:	2300      	movne	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <_Z41__static_initialization_and_destruction_0ii+0x100>
 8002116:	2204      	movs	r2, #4
 8002118:	497b      	ldr	r1, [pc, #492]	; (8002308 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800211a:	487e      	ldr	r0, [pc, #504]	; (8002314 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800211c:	f7fe fe90 	bl	8000e40 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED2_B = CommonLib::LEDPwm{&htim3,TIM_CHANNEL_3};
 8002120:	4b7d      	ldr	r3, [pc, #500]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3301      	adds	r3, #1
 8002126:	4a7c      	ldr	r2, [pc, #496]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b7b      	ldr	r3, [pc, #492]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b01      	cmp	r3, #1
 8002130:	bf0c      	ite	eq
 8002132:	2301      	moveq	r3, #1
 8002134:	2300      	movne	r3, #0
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <_Z41__static_initialization_and_destruction_0ii+0x126>
 800213c:	2208      	movs	r2, #8
 800213e:	4972      	ldr	r1, [pc, #456]	; (8002308 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8002140:	4876      	ldr	r0, [pc, #472]	; (800231c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8002142:	f7fe fe7d 	bl	8000e40 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>

	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 8002146:	4b76      	ldr	r3, [pc, #472]	; (8002320 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	4a74      	ldr	r2, [pc, #464]	; (8002320 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b73      	ldr	r3, [pc, #460]	; (8002320 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d03b      	beq.n	80021da <_Z41__static_initialization_and_destruction_0ii+0x1ba>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8002162:	f107 030c 	add.w	r3, r7, #12
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff faa2 	bl	80016b0 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 800216c:	f107 020c 	add.w	r2, r7, #12
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fae9 	bl	800174e <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fa95 	bl	80016b0 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 8002186:	f107 0214 	add.w	r2, r7, #20
 800218a:	f107 0310 	add.w	r3, r7, #16
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fadc 	bl	800174e <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
 8002196:	f107 0310 	add.w	r3, r7, #16
 800219a:	f107 0208 	add.w	r2, r7, #8
 800219e:	2101      	movs	r1, #1
 80021a0:	9102      	str	r1, [sp, #8]
 80021a2:	2101      	movs	r1, #1
 80021a4:	9101      	str	r1, [sp, #4]
 80021a6:	2140      	movs	r1, #64	; 0x40
 80021a8:	9100      	str	r1, [sp, #0]
 80021aa:	495e      	ldr	r1, [pc, #376]	; (8002324 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80021ac:	485e      	ldr	r0, [pc, #376]	; (8002328 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80021ae:	f7fe fc69 	bl	8000a84 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommC1EP19FDCAN_HandleTypeDefSt10unique_ptrINS_9CommonLib11IRingBufferINS5_8CanFrameEEESt14default_deleteIS8_EEOSB_mmm>
 80021b2:	f107 0310 	add.w	r3, r7, #16
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff f9a8 	bl	800150c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fa91 	bl	80016e8 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 80021c6:	f107 0308 	add.w	r3, r7, #8
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff f99e 	bl	800150c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 80021d0:	f107 030c 	add.w	r3, r7, #12
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fa87 	bl	80016e8 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
			FDCAN_RX_FIFO0,
			FDCAN_FILTER_TO_RXFIFO0,
			FDCAN_IT_RX_FIFO0_NEW_MESSAGE};

	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 80021da:	4b54      	ldr	r3, [pc, #336]	; (800232c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3301      	adds	r3, #1
 80021e0:	4a52      	ldr	r2, [pc, #328]	; (800232c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b51      	ldr	r3, [pc, #324]	; (800232c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d03b      	beq.n	800226e <_Z41__static_initialization_and_destruction_0ii+0x24e>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 80021f6:	f107 031c 	add.w	r3, r7, #28
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fa58 	bl	80016b0 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 8002200:	f107 021c 	add.w	r2, r7, #28
 8002204:	f107 0318 	add.w	r3, r7, #24
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fa9f 	bl	800174e <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8002210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fa4b 	bl	80016b0 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 800221a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800221e:	f107 0320 	add.w	r3, r7, #32
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fa92 	bl	800174e <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
 800222a:	f107 0320 	add.w	r3, r7, #32
 800222e:	f107 0218 	add.w	r2, r7, #24
 8002232:	2110      	movs	r1, #16
 8002234:	9102      	str	r1, [sp, #8]
 8002236:	2102      	movs	r1, #2
 8002238:	9101      	str	r1, [sp, #4]
 800223a:	2141      	movs	r1, #65	; 0x41
 800223c:	9100      	str	r1, [sp, #0]
 800223e:	493c      	ldr	r1, [pc, #240]	; (8002330 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8002240:	483c      	ldr	r0, [pc, #240]	; (8002334 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8002242:	f7fe fc1f 	bl	8000a84 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommC1EP19FDCAN_HandleTypeDefSt10unique_ptrINS_9CommonLib11IRingBufferINS5_8CanFrameEEESt14default_deleteIS8_EEOSB_mmm>
 8002246:	f107 0320 	add.w	r3, r7, #32
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff f95e 	bl	800150c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8002250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fa47 	bl	80016e8 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 800225a:	f107 0318 	add.w	r3, r7, #24
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff f954 	bl	800150c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8002264:	f107 031c 	add.w	r3, r7, #28
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fa3d 	bl	80016e8 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
			FDCAN_RX_FIFO1,
			FDCAN_FILTER_TO_RXFIFO1,
			FDCAN_IT_RX_FIFO1_NEW_MESSAGE};

	inline auto usb = CommonLib::UsbCdcComm<4,4>{&hUsbDeviceFS};
 800226e:	4b32      	ldr	r3, [pc, #200]	; (8002338 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3301      	adds	r3, #1
 8002274:	4a30      	ldr	r2, [pc, #192]	; (8002338 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	bf0c      	ite	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <_Z41__static_initialization_and_destruction_0ii+0x272>
 800228a:	492c      	ldr	r1, [pc, #176]	; (800233c <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800228c:	482c      	ldr	r0, [pc, #176]	; (8002340 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800228e:	f7ff fadb 	bl	8001848 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EEC1EP19_USBD_HandleTypeDef>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d16c      	bne.n	8002372 <_Z41__static_initialization_and_destruction_0ii+0x352>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800229e:	4293      	cmp	r3, r2
 80022a0:	d167      	bne.n	8002372 <_Z41__static_initialization_and_destruction_0ii+0x352>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	4a20      	ldr	r2, [pc, #128]	; (800232c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b1f      	ldr	r3, [pc, #124]	; (800232c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <_Z41__static_initialization_and_destruction_0ii+0x2a4>
 80022be:	481d      	ldr	r0, [pc, #116]	; (8002334 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80022c0:	f7fe ff48 	bl	8001154 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommD1Ev>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 80022c4:	4b16      	ldr	r3, [pc, #88]	; (8002320 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	4a15      	ldr	r2, [pc, #84]	; (8002320 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf0c      	ite	eq
 80022d6:	2301      	moveq	r3, #1
 80022d8:	2300      	movne	r3, #0
 80022da:	e033      	b.n	8002344 <_Z41__static_initialization_and_destruction_0ii+0x324>
 80022dc:	24000d0c 	.word	0x24000d0c
 80022e0:	24000e1c 	.word	0x24000e1c
 80022e4:	240002b4 	.word	0x240002b4
 80022e8:	24000d10 	.word	0x24000d10
 80022ec:	24000d38 	.word	0x24000d38
 80022f0:	240002d0 	.word	0x240002d0
 80022f4:	24000d14 	.word	0x24000d14
 80022f8:	240002fc 	.word	0x240002fc
 80022fc:	24000d18 	.word	0x24000d18
 8002300:	24000328 	.word	0x24000328
 8002304:	24000d1c 	.word	0x24000d1c
 8002308:	24000dd0 	.word	0x24000dd0
 800230c:	24000354 	.word	0x24000354
 8002310:	24000d20 	.word	0x24000d20
 8002314:	24000380 	.word	0x24000380
 8002318:	24000d24 	.word	0x24000d24
 800231c:	240003ac 	.word	0x240003ac
 8002320:	24000d28 	.word	0x24000d28
 8002324:	24000170 	.word	0x24000170
 8002328:	240003d8 	.word	0x240003d8
 800232c:	24000d2c 	.word	0x24000d2c
 8002330:	24000210 	.word	0x24000210
 8002334:	240003f4 	.word	0x240003f4
 8002338:	24000d30 	.word	0x24000d30
 800233c:	24000f98 	.word	0x24000f98
 8002340:	24000410 	.word	0x24000410
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <_Z41__static_initialization_and_destruction_0ii+0x330>
 800234a:	480c      	ldr	r0, [pc, #48]	; (800237c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800234c:	f7fe ff02 	bl	8001154 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommD1Ev>
	inline auto led_timer = CommonLib::InterruptionTimerHard(&htim17);
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	3b01      	subs	r3, #1
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf0c      	ite	eq
 8002362:	2301      	moveq	r3, #1
 8002364:	2300      	movne	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <_Z41__static_initialization_and_destruction_0ii+0x352>
 800236c:	4805      	ldr	r0, [pc, #20]	; (8002384 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800236e:	f7fe fedd 	bl	800112c <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardD1Ev>
 8002372:	bf00      	nop
 8002374:	3728      	adds	r7, #40	; 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	240003d8 	.word	0x240003d8
 8002380:	24000d0c 	.word	0x24000d0c
 8002384:	240002b4 	.word	0x240002b4

08002388 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE2txERKNS0_10SerialDataE>:
//////////////////////////////////////////////////////////////////////////
//CanComm function references
//////////////////////////////////////////////////////////////////////////

template<size_t TX_BUFF_N,size_t RX_BUFF_N>
bool UsbCdcComm<TX_BUFF_N,RX_BUFF_N>::tx(const SerialData &data){
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
	USBD_CDC_HandleTypeDef *cdc = (USBD_CDC_HandleTypeDef*)usb->pClassData;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800239a:	60fb      	str	r3, [r7, #12]

	if (cdc->TxState != 0){
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	bf14      	ite	ne
 80023a6:	2301      	movne	r3, #1
 80023a8:	2300      	moveq	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE2txERKNS0_10SerialDataE+0x38>
		tx_buff.push(data);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3308      	adds	r3, #8
 80023b4:	6839      	ldr	r1, [r7, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f84c 	bl	8002454 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE4pushERKS2_>
		return true;
 80023bc:	2301      	movs	r3, #1
 80023be:	e017      	b.n	80023f0 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE2txERKNS0_10SerialDataE+0x68>
	}

	USBD_CDC_SetTxBuffer(usb, const_cast<uint8_t*>(data.data), data.size);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6858      	ldr	r0, [r3, #4]
 80023c4:	6839      	ldr	r1, [r7, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	461a      	mov	r2, r3
 80023cc:	f00a ff4c 	bl	800d268 <USBD_CDC_SetTxBuffer>
	if(USBD_CDC_TransmitPacket(usb) != USBD_OK){
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f00a ff87 	bl	800d2e8 <USBD_CDC_TransmitPacket>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf14      	ite	ne
 80023e0:	2301      	movne	r3, #1
 80023e2:	2300      	moveq	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE2txERKNS0_10SerialDataE+0x66>
		return false;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e000      	b.n	80023f0 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE2txERKNS0_10SerialDataE+0x68>
	}
	return true;
 80023ee:	2301      	movs	r3, #1
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <_ZNK12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE12tx_availableEv>:
	size_t tx_available(void)const override{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
		return tx_buff.get_free_level();
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3308      	adds	r3, #8
 8002404:	4618      	mov	r0, r3
 8002406:	f000 f889 	bl	800251c <_ZNK12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE14get_free_levelEv>
 800240a:	4603      	mov	r3, r0
	}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE2rxERNS0_10SerialDataE>:
	bool rx(SerialData &data) override{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
		return rx_buff.pop(data);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8002424:	6839      	ldr	r1, [r7, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f84c 	bl	80024c4 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE3popERS2_>
 800242c:	4603      	mov	r3, r0
	}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_ZNK12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE12rx_availableEv>:
	size_t rx_available(void) const override{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
		return rx_buff.get_busy_level();
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f878 	bl	800253a <_ZNK12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE14get_busy_levelEv>
 800244a:	4603      	mov	r3, r0
	}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE4pushERKS2_>:
    size_t tail = 0;
    size_t data_count = 0;

    T data_buff[1<<n] = {0};
public:
    bool push(const T &input)override{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
        data_buff[head] = input;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	f103 0218 	add.w	r2, r3, #24
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	2344      	movs	r3, #68	; 0x44
 800247a:	461a      	mov	r2, r3
 800247c:	f00d fe76 	bl	801016c <memcpy>
        head = (head+1) & MASK;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	401a      	ands	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	60da      	str	r2, [r3, #12]
        data_count ++;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	615a      	str	r2, [r3, #20]
        if(data_count > SIZE){
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d909      	bls.n	80024ba <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE4pushERKS2_+0x66>
            data_count = SIZE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	615a      	str	r2, [r3, #20]
            tail = head;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	611a      	str	r2, [r3, #16]
            return false;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e000      	b.n	80024bc <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE4pushERKS2_+0x68>
        };
        return true;
 80024ba:	2301      	movs	r3, #1
    }
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE3popERS2_>:

    bool pop(T &output)override{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
        if(data_count > 0){
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d01d      	beq.n	8002512 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE3popERS2_+0x4e>
            output = data_buff[tail];
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	6838      	ldr	r0, [r7, #0]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	3318      	adds	r3, #24
 80024ea:	4619      	mov	r1, r3
 80024ec:	2344      	movs	r3, #68	; 0x44
 80024ee:	461a      	mov	r2, r3
 80024f0:	f00d fe3c 	bl	801016c <memcpy>
            tail = (tail + 1) & MASK;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	401a      	ands	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	611a      	str	r2, [r3, #16]
            data_count --;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	1e5a      	subs	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	615a      	str	r2, [r3, #20]
            if(data_count < 0) data_count = 0;
            return true;
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE3popERS2_+0x50>
        }else{
            return false;
 8002512:	2300      	movs	r3, #0
        }
    }
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_ZNK12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE14get_free_levelEv>:

    size_t get_free_level(void)const override{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
        return SIZE - data_count;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	1ad3      	subs	r3, r2, r3
    }
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_ZNK12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE14get_busy_levelEv>:
    size_t get_busy_level(void)const override{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
        return data_count;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
    }
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE5resetEv>:
    void reset(void)override{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
        head = 0;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	60da      	str	r2, [r3, #12]
        tail = 0;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
        data_count = 0;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]
    }
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE4pushERKS2_>:
    bool push(const T &input)override{
 8002578:	b4b0      	push	{r4, r5, r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
        data_buff[head] = input;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	f103 0218 	add.w	r2, r3, #24
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	4614      	mov	r4, r2
 800259a:	461d      	mov	r5, r3
 800259c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800259e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025a0:	682b      	ldr	r3, [r5, #0]
 80025a2:	6023      	str	r3, [r4, #0]
        head = (head+1) & MASK;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	401a      	ands	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	60da      	str	r2, [r3, #12]
        data_count ++;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	615a      	str	r2, [r3, #20]
        if(data_count > SIZE){
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d909      	bls.n	80025de <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE4pushERKS2_+0x66>
            data_count = SIZE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	615a      	str	r2, [r3, #20]
            tail = head;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	611a      	str	r2, [r3, #16]
            return false;
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE4pushERKS2_+0x68>
        return true;
 80025de:	2301      	movs	r3, #1
    }
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bcb0      	pop	{r4, r5, r7}
 80025e8:	4770      	bx	lr

080025ea <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE3popERS2_>:
    bool pop(T &output)override{
 80025ea:	b4b0      	push	{r4, r5, r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
        if(data_count > 0){
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01e      	beq.n	800263a <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE3popERS2_+0x50>
            output = data_buff[tail];
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	6838      	ldr	r0, [r7, #0]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3318      	adds	r3, #24
 8002610:	4604      	mov	r4, r0
 8002612:	461d      	mov	r5, r3
 8002614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002618:	682b      	ldr	r3, [r5, #0]
 800261a:	6023      	str	r3, [r4, #0]
            tail = (tail + 1) & MASK;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	401a      	ands	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	611a      	str	r2, [r3, #16]
            data_count --;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	1e5a      	subs	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	615a      	str	r2, [r3, #20]
            return true;
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE3popERS2_+0x52>
            return false;
 800263a:	2300      	movs	r3, #0
    }
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bcb0      	pop	{r4, r5, r7}
 8002644:	4770      	bx	lr

08002646 <_ZNK12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE14get_free_levelEv>:
    size_t get_free_level(void)const override{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
        return SIZE - data_count;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	1ad3      	subs	r3, r2, r3
    }
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_ZNK12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE14get_busy_levelEv>:
    size_t get_busy_level(void)const override{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
        return data_count;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
    }
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE5resetEv>:
    void reset(void)override{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
        head = 0;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	60da      	str	r2, [r3, #12]
        tail = 0;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
        data_count = 0;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	615a      	str	r2, [r3, #20]
    }
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <_GLOBAL__sub_I_HAL_TIM_PeriodElapsedCallback>:
 80026a2:	b580      	push	{r7, lr}
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026aa:	2001      	movs	r0, #1
 80026ac:	f7ff fcb8 	bl	8002020 <_Z41__static_initialization_and_destruction_0ii>
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <_GLOBAL__sub_D_HAL_TIM_PeriodElapsedCallback>:
 80026b2:	b580      	push	{r7, lr}
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7ff fcb0 	bl	8002020 <_Z41__static_initialization_and_destruction_0ii>
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_MspInit+0x30>)
 80026cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026d0:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <HAL_MspInit+0x30>)
 80026d2:	f043 0302 	orr.w	r3, r3, #2
 80026d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_MspInit+0x30>)
 80026dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	58024400 	.word	0x58024400

080026f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026fc:	e7fe      	b.n	80026fc <NMI_Handler+0x4>

080026fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002702:	e7fe      	b.n	8002702 <HardFault_Handler+0x4>

08002704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <MemManage_Handler+0x4>

0800270a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800270e:	e7fe      	b.n	800270e <BusFault_Handler+0x4>

08002710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <UsageFault_Handler+0x4>

08002716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002744:	f000 fe14 	bl	8003370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}

0800274c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <FDCAN1_IT0_IRQHandler+0x10>)
 8002752:	f001 fb9d 	bl	8003e90 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	24000170 	.word	0x24000170

08002760 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <FDCAN2_IT1_IRQHandler+0x10>)
 8002766:	f001 fb93 	bl	8003e90 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	24000210 	.word	0x24000210

08002774 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 800277a:	f002 fb78 	bl	8004e6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	24002474 	.word	0x24002474

08002788 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800278c:	4802      	ldr	r0, [pc, #8]	; (8002798 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 800278e:	f002 fb6e 	bl	8004e6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	24002474 	.word	0x24002474

0800279c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80027a0:	4802      	ldr	r0, [pc, #8]	; (80027ac <OTG_FS_IRQHandler+0x10>)
 80027a2:	f002 fb64 	bl	8004e6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	24002474 	.word	0x24002474

080027b0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <TIM17_IRQHandler+0x10>)
 80027b6:	f006 fc77 	bl	80090a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	24000e1c 	.word	0x24000e1c

080027c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return 1;
 80027c8:	2301      	movs	r3, #1
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <_kill>:

int _kill(int pid, int sig)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027de:	f00d fc99 	bl	8010114 <__errno>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2216      	movs	r2, #22
 80027e6:	601a      	str	r2, [r3, #0]
  return -1;
 80027e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <_exit>:

void _exit (int status)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ffe7 	bl	80027d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002806:	e7fe      	b.n	8002806 <_exit+0x12>

08002808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002810:	4a14      	ldr	r2, [pc, #80]	; (8002864 <_sbrk+0x5c>)
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <_sbrk+0x60>)
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <_sbrk+0x64>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <_sbrk+0x64>)
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <_sbrk+0x68>)
 8002828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <_sbrk+0x64>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	429a      	cmp	r2, r3
 8002836:	d207      	bcs.n	8002848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002838:	f00d fc6c 	bl	8010114 <__errno>
 800283c:	4603      	mov	r3, r0
 800283e:	220c      	movs	r2, #12
 8002840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
 8002846:	e009      	b.n	800285c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <_sbrk+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <_sbrk+0x64>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	4a05      	ldr	r2, [pc, #20]	; (800286c <_sbrk+0x64>)
 8002858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800285a:	68fb      	ldr	r3, [r7, #12]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	24080000 	.word	0x24080000
 8002868:	00000400 	.word	0x00000400
 800286c:	24000d34 	.word	0x24000d34
 8002870:	24002cf0 	.word	0x24002cf0

08002874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002878:	4b37      	ldr	r3, [pc, #220]	; (8002958 <SystemInit+0xe4>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	4a36      	ldr	r2, [pc, #216]	; (8002958 <SystemInit+0xe4>)
 8002880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002888:	4b34      	ldr	r3, [pc, #208]	; (800295c <SystemInit+0xe8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	2b06      	cmp	r3, #6
 8002892:	d807      	bhi.n	80028a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002894:	4b31      	ldr	r3, [pc, #196]	; (800295c <SystemInit+0xe8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 030f 	bic.w	r3, r3, #15
 800289c:	4a2f      	ldr	r2, [pc, #188]	; (800295c <SystemInit+0xe8>)
 800289e:	f043 0307 	orr.w	r3, r3, #7
 80028a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028a4:	4b2e      	ldr	r3, [pc, #184]	; (8002960 <SystemInit+0xec>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2d      	ldr	r2, [pc, #180]	; (8002960 <SystemInit+0xec>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028b0:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <SystemInit+0xec>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <SystemInit+0xec>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4929      	ldr	r1, [pc, #164]	; (8002960 <SystemInit+0xec>)
 80028bc:	4b29      	ldr	r3, [pc, #164]	; (8002964 <SystemInit+0xf0>)
 80028be:	4013      	ands	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028c2:	4b26      	ldr	r3, [pc, #152]	; (800295c <SystemInit+0xe8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028ce:	4b23      	ldr	r3, [pc, #140]	; (800295c <SystemInit+0xe8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 030f 	bic.w	r3, r3, #15
 80028d6:	4a21      	ldr	r2, [pc, #132]	; (800295c <SystemInit+0xe8>)
 80028d8:	f043 0307 	orr.w	r3, r3, #7
 80028dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <SystemInit+0xec>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80028e4:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <SystemInit+0xec>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80028ea:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <SystemInit+0xec>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <SystemInit+0xec>)
 80028f2:	4a1d      	ldr	r2, [pc, #116]	; (8002968 <SystemInit+0xf4>)
 80028f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <SystemInit+0xec>)
 80028f8:	4a1c      	ldr	r2, [pc, #112]	; (800296c <SystemInit+0xf8>)
 80028fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80028fc:	4b18      	ldr	r3, [pc, #96]	; (8002960 <SystemInit+0xec>)
 80028fe:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <SystemInit+0xfc>)
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <SystemInit+0xec>)
 8002904:	2200      	movs	r2, #0
 8002906:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002908:	4b15      	ldr	r3, [pc, #84]	; (8002960 <SystemInit+0xec>)
 800290a:	4a19      	ldr	r2, [pc, #100]	; (8002970 <SystemInit+0xfc>)
 800290c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <SystemInit+0xec>)
 8002910:	2200      	movs	r2, #0
 8002912:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <SystemInit+0xec>)
 8002916:	4a16      	ldr	r2, [pc, #88]	; (8002970 <SystemInit+0xfc>)
 8002918:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <SystemInit+0xec>)
 800291c:	2200      	movs	r2, #0
 800291e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <SystemInit+0xec>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <SystemInit+0xec>)
 8002926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <SystemInit+0xec>)
 800292e:	2200      	movs	r2, #0
 8002930:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <SystemInit+0x100>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <SystemInit+0x104>)
 8002938:	4013      	ands	r3, r2
 800293a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800293e:	d202      	bcs.n	8002946 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <SystemInit+0x108>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002946:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <SystemInit+0x10c>)
 8002948:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800294c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00
 800295c:	52002000 	.word	0x52002000
 8002960:	58024400 	.word	0x58024400
 8002964:	eaf6ed7f 	.word	0xeaf6ed7f
 8002968:	02020200 	.word	0x02020200
 800296c:	01ff0000 	.word	0x01ff0000
 8002970:	01010280 	.word	0x01010280
 8002974:	5c001000 	.word	0x5c001000
 8002978:	ffff0000 	.word	0xffff0000
 800297c:	51008108 	.word	0x51008108
 8002980:	52004000 	.word	0x52004000

08002984 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b09a      	sub	sp, #104	; 0x68
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800298a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002998:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
 80029b4:	615a      	str	r2, [r3, #20]
 80029b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	222c      	movs	r2, #44	; 0x2c
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f00d fb4c 	bl	801005c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029c4:	4b4f      	ldr	r3, [pc, #316]	; (8002b04 <MX_TIM1_Init+0x180>)
 80029c6:	4a50      	ldr	r2, [pc, #320]	; (8002b08 <MX_TIM1_Init+0x184>)
 80029c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029ca:	4b4e      	ldr	r3, [pc, #312]	; (8002b04 <MX_TIM1_Init+0x180>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d0:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <MX_TIM1_Init+0x180>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80029d6:	4b4b      	ldr	r3, [pc, #300]	; (8002b04 <MX_TIM1_Init+0x180>)
 80029d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029de:	4b49      	ldr	r3, [pc, #292]	; (8002b04 <MX_TIM1_Init+0x180>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029e4:	4b47      	ldr	r3, [pc, #284]	; (8002b04 <MX_TIM1_Init+0x180>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ea:	4b46      	ldr	r3, [pc, #280]	; (8002b04 <MX_TIM1_Init+0x180>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029f0:	4844      	ldr	r0, [pc, #272]	; (8002b04 <MX_TIM1_Init+0x180>)
 80029f2:	f006 f9f9 	bl	8008de8 <HAL_TIM_Base_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80029fc:	f7fe fd3a 	bl	8001474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a04:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	483d      	ldr	r0, [pc, #244]	; (8002b04 <MX_TIM1_Init+0x180>)
 8002a0e:	f006 fd7f 	bl	8009510 <HAL_TIM_ConfigClockSource>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002a18:	f7fe fd2c 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a1c:	4839      	ldr	r0, [pc, #228]	; (8002b04 <MX_TIM1_Init+0x180>)
 8002a1e:	f006 fae2 	bl	8008fe6 <HAL_TIM_PWM_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002a28:	f7fe fd24 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a30:	2300      	movs	r3, #0
 8002a32:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4831      	ldr	r0, [pc, #196]	; (8002b04 <MX_TIM1_Init+0x180>)
 8002a40:	f007 faa2 	bl	8009f88 <HAL_TIMEx_MasterConfigSynchronization>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002a4a:	f7fe fd13 	bl	8001474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a4e:	2360      	movs	r3, #96	; 0x60
 8002a50:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002a56:	2302      	movs	r3, #2
 8002a58:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a6e:	2200      	movs	r2, #0
 8002a70:	4619      	mov	r1, r3
 8002a72:	4824      	ldr	r0, [pc, #144]	; (8002b04 <MX_TIM1_Init+0x180>)
 8002a74:	f006 fc38 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002a7e:	f7fe fcf9 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a86:	2204      	movs	r2, #4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	481e      	ldr	r0, [pc, #120]	; (8002b04 <MX_TIM1_Init+0x180>)
 8002a8c:	f006 fc2c 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002a96:	f7fe fced 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a9e:	220c      	movs	r2, #12
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4818      	ldr	r0, [pc, #96]	; (8002b04 <MX_TIM1_Init+0x180>)
 8002aa4:	f006 fc20 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002aae:	f7fe fce1 	bl	8001474 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ae2:	1d3b      	adds	r3, r7, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4807      	ldr	r0, [pc, #28]	; (8002b04 <MX_TIM1_Init+0x180>)
 8002ae8:	f007 fadc 	bl	800a0a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002af2:	f7fe fcbf 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002af6:	4803      	ldr	r0, [pc, #12]	; (8002b04 <MX_TIM1_Init+0x180>)
 8002af8:	f000 f99e 	bl	8002e38 <HAL_TIM_MspPostInit>

}
 8002afc:	bf00      	nop
 8002afe:	3768      	adds	r7, #104	; 0x68
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	24000d38 	.word	0x24000d38
 8002b08:	40010000 	.word	0x40010000

08002b0c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08e      	sub	sp, #56	; 0x38
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b20:	f107 031c 	add.w	r3, r7, #28
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b2c:	463b      	mov	r3, r7
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	60da      	str	r2, [r3, #12]
 8002b38:	611a      	str	r2, [r3, #16]
 8002b3a:	615a      	str	r2, [r3, #20]
 8002b3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <MX_TIM2_Init+0xe8>)
 8002b40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b46:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <MX_TIM2_Init+0xe8>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4c:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <MX_TIM2_Init+0xe8>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002b52:	4b28      	ldr	r3, [pc, #160]	; (8002bf4 <MX_TIM2_Init+0xe8>)
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5a:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <MX_TIM2_Init+0xe8>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <MX_TIM2_Init+0xe8>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b66:	4823      	ldr	r0, [pc, #140]	; (8002bf4 <MX_TIM2_Init+0xe8>)
 8002b68:	f006 f93e 	bl	8008de8 <HAL_TIM_Base_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002b72:	f7fe fc7f 	bl	8001474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b80:	4619      	mov	r1, r3
 8002b82:	481c      	ldr	r0, [pc, #112]	; (8002bf4 <MX_TIM2_Init+0xe8>)
 8002b84:	f006 fcc4 	bl	8009510 <HAL_TIM_ConfigClockSource>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002b8e:	f7fe fc71 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b92:	4818      	ldr	r0, [pc, #96]	; (8002bf4 <MX_TIM2_Init+0xe8>)
 8002b94:	f006 fa27 	bl	8008fe6 <HAL_TIM_PWM_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002b9e:	f7fe fc69 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002baa:	f107 031c 	add.w	r3, r7, #28
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4810      	ldr	r0, [pc, #64]	; (8002bf4 <MX_TIM2_Init+0xe8>)
 8002bb2:	f007 f9e9 	bl	8009f88 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002bbc:	f7fe fc5a 	bl	8001474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc0:	2360      	movs	r3, #96	; 0x60
 8002bc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bd0:	463b      	mov	r3, r7
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4807      	ldr	r0, [pc, #28]	; (8002bf4 <MX_TIM2_Init+0xe8>)
 8002bd8:	f006 fb86 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002be2:	f7fe fc47 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002be6:	4803      	ldr	r0, [pc, #12]	; (8002bf4 <MX_TIM2_Init+0xe8>)
 8002be8:	f000 f926 	bl	8002e38 <HAL_TIM_MspPostInit>

}
 8002bec:	bf00      	nop
 8002bee:	3738      	adds	r7, #56	; 0x38
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	24000d84 	.word	0x24000d84

08002bf8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08e      	sub	sp, #56	; 0x38
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c18:	463b      	mov	r3, r7
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	60da      	str	r2, [r3, #12]
 8002c24:	611a      	str	r2, [r3, #16]
 8002c26:	615a      	str	r2, [r3, #20]
 8002c28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c2a:	4b38      	ldr	r3, [pc, #224]	; (8002d0c <MX_TIM3_Init+0x114>)
 8002c2c:	4a38      	ldr	r2, [pc, #224]	; (8002d10 <MX_TIM3_Init+0x118>)
 8002c2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c30:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <MX_TIM3_Init+0x114>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c36:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <MX_TIM3_Init+0x114>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c3c:	4b33      	ldr	r3, [pc, #204]	; (8002d0c <MX_TIM3_Init+0x114>)
 8002c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c44:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <MX_TIM3_Init+0x114>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c4a:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <MX_TIM3_Init+0x114>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c50:	482e      	ldr	r0, [pc, #184]	; (8002d0c <MX_TIM3_Init+0x114>)
 8002c52:	f006 f8c9 	bl	8008de8 <HAL_TIM_Base_Init>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002c5c:	f7fe fc0a 	bl	8001474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4827      	ldr	r0, [pc, #156]	; (8002d0c <MX_TIM3_Init+0x114>)
 8002c6e:	f006 fc4f 	bl	8009510 <HAL_TIM_ConfigClockSource>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002c78:	f7fe fbfc 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c7c:	4823      	ldr	r0, [pc, #140]	; (8002d0c <MX_TIM3_Init+0x114>)
 8002c7e:	f006 f9b2 	bl	8008fe6 <HAL_TIM_PWM_Init>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002c88:	f7fe fbf4 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c94:	f107 031c 	add.w	r3, r7, #28
 8002c98:	4619      	mov	r1, r3
 8002c9a:	481c      	ldr	r0, [pc, #112]	; (8002d0c <MX_TIM3_Init+0x114>)
 8002c9c:	f007 f974 	bl	8009f88 <HAL_TIMEx_MasterConfigSynchronization>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002ca6:	f7fe fbe5 	bl	8001474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002caa:	2360      	movs	r3, #96	; 0x60
 8002cac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cba:	463b      	mov	r3, r7
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4812      	ldr	r0, [pc, #72]	; (8002d0c <MX_TIM3_Init+0x114>)
 8002cc2:	f006 fb11 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002ccc:	f7fe fbd2 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cd0:	463b      	mov	r3, r7
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	480d      	ldr	r0, [pc, #52]	; (8002d0c <MX_TIM3_Init+0x114>)
 8002cd8:	f006 fb06 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002ce2:	f7fe fbc7 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ce6:	463b      	mov	r3, r7
 8002ce8:	2208      	movs	r2, #8
 8002cea:	4619      	mov	r1, r3
 8002cec:	4807      	ldr	r0, [pc, #28]	; (8002d0c <MX_TIM3_Init+0x114>)
 8002cee:	f006 fafb 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002cf8:	f7fe fbbc 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002cfc:	4803      	ldr	r0, [pc, #12]	; (8002d0c <MX_TIM3_Init+0x114>)
 8002cfe:	f000 f89b 	bl	8002e38 <HAL_TIM_MspPostInit>

}
 8002d02:	bf00      	nop
 8002d04:	3738      	adds	r7, #56	; 0x38
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	24000dd0 	.word	0x24000dd0
 8002d10:	40000400 	.word	0x40000400

08002d14 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <MX_TIM17_Init+0x44>)
 8002d1a:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <MX_TIM17_Init+0x48>)
 8002d1c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 240-1;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <MX_TIM17_Init+0x44>)
 8002d20:	22ef      	movs	r2, #239	; 0xef
 8002d22:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <MX_TIM17_Init+0x44>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <MX_TIM17_Init+0x44>)
 8002d2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d30:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <MX_TIM17_Init+0x44>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <MX_TIM17_Init+0x44>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <MX_TIM17_Init+0x44>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002d44:	4804      	ldr	r0, [pc, #16]	; (8002d58 <MX_TIM17_Init+0x44>)
 8002d46:	f006 f84f 	bl	8008de8 <HAL_TIM_Base_Init>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002d50:	f7fe fb90 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002d54:	bf00      	nop
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	24000e1c 	.word	0x24000e1c
 8002d5c:	40014800 	.word	0x40014800

08002d60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2e      	ldr	r2, [pc, #184]	; (8002e28 <HAL_TIM_Base_MspInit+0xc8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d10f      	bne.n	8002d92 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d72:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <HAL_TIM_Base_MspInit+0xcc>)
 8002d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d78:	4a2c      	ldr	r2, [pc, #176]	; (8002e2c <HAL_TIM_Base_MspInit+0xcc>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d82:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <HAL_TIM_Base_MspInit+0xcc>)
 8002d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002d90:	e045      	b.n	8002e1e <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM2)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9a:	d10f      	bne.n	8002dbc <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d9c:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <HAL_TIM_Base_MspInit+0xcc>)
 8002d9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002da2:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_TIM_Base_MspInit+0xcc>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dac:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <HAL_TIM_Base_MspInit+0xcc>)
 8002dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	693b      	ldr	r3, [r7, #16]
}
 8002dba:	e030      	b.n	8002e1e <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM3)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <HAL_TIM_Base_MspInit+0xd0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10f      	bne.n	8002de6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dc6:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <HAL_TIM_Base_MspInit+0xcc>)
 8002dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dcc:	4a17      	ldr	r2, [pc, #92]	; (8002e2c <HAL_TIM_Base_MspInit+0xcc>)
 8002dce:	f043 0302 	orr.w	r3, r3, #2
 8002dd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <HAL_TIM_Base_MspInit+0xcc>)
 8002dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
}
 8002de4:	e01b      	b.n	8002e1e <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM17)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a12      	ldr	r2, [pc, #72]	; (8002e34 <HAL_TIM_Base_MspInit+0xd4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d116      	bne.n	8002e1e <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <HAL_TIM_Base_MspInit+0xcc>)
 8002df2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002df6:	4a0d      	ldr	r2, [pc, #52]	; (8002e2c <HAL_TIM_Base_MspInit+0xcc>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e00:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <HAL_TIM_Base_MspInit+0xcc>)
 8002e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2100      	movs	r1, #0
 8002e12:	2076      	movs	r0, #118	; 0x76
 8002e14:	f000 fbd7 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002e18:	2076      	movs	r0, #118	; 0x76
 8002e1a:	f000 fbee 	bl	80035fa <HAL_NVIC_EnableIRQ>
}
 8002e1e:	bf00      	nop
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	58024400 	.word	0x58024400
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40014800 	.word	0x40014800

08002e38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08c      	sub	sp, #48	; 0x30
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e40:	f107 031c 	add.w	r3, r7, #28
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a47      	ldr	r2, [pc, #284]	; (8002f74 <HAL_TIM_MspPostInit+0x13c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d120      	bne.n	8002e9c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e5a:	4b47      	ldr	r3, [pc, #284]	; (8002f78 <HAL_TIM_MspPostInit+0x140>)
 8002e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e60:	4a45      	ldr	r2, [pc, #276]	; (8002f78 <HAL_TIM_MspPostInit+0x140>)
 8002e62:	f043 0310 	orr.w	r3, r3, #16
 8002e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e6a:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <HAL_TIM_MspPostInit+0x140>)
 8002e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8002e78:	f44f 4394 	mov.w	r3, #18944	; 0x4a00
 8002e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e86:	2300      	movs	r3, #0
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e8e:	f107 031c 	add.w	r3, r7, #28
 8002e92:	4619      	mov	r1, r3
 8002e94:	4839      	ldr	r0, [pc, #228]	; (8002f7c <HAL_TIM_MspPostInit+0x144>)
 8002e96:	f001 fce1 	bl	800485c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e9a:	e067      	b.n	8002f6c <HAL_TIM_MspPostInit+0x134>
  else if(timHandle->Instance==TIM2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea4:	d11f      	bne.n	8002ee6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea6:	4b34      	ldr	r3, [pc, #208]	; (8002f78 <HAL_TIM_MspPostInit+0x140>)
 8002ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eac:	4a32      	ldr	r2, [pc, #200]	; (8002f78 <HAL_TIM_MspPostInit+0x140>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eb6:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <HAL_TIM_MspPostInit+0x140>)
 8002eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed8:	f107 031c 	add.w	r3, r7, #28
 8002edc:	4619      	mov	r1, r3
 8002ede:	4828      	ldr	r0, [pc, #160]	; (8002f80 <HAL_TIM_MspPostInit+0x148>)
 8002ee0:	f001 fcbc 	bl	800485c <HAL_GPIO_Init>
}
 8002ee4:	e042      	b.n	8002f6c <HAL_TIM_MspPostInit+0x134>
  else if(timHandle->Instance==TIM3)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a26      	ldr	r2, [pc, #152]	; (8002f84 <HAL_TIM_MspPostInit+0x14c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d13d      	bne.n	8002f6c <HAL_TIM_MspPostInit+0x134>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef0:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <HAL_TIM_MspPostInit+0x140>)
 8002ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef6:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <HAL_TIM_MspPostInit+0x140>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_TIM_MspPostInit+0x140>)
 8002f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <HAL_TIM_MspPostInit+0x140>)
 8002f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f14:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <HAL_TIM_MspPostInit+0x140>)
 8002f16:	f043 0302 	orr.w	r3, r3, #2
 8002f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <HAL_TIM_MspPostInit+0x140>)
 8002f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f2c:	23c0      	movs	r3, #192	; 0xc0
 8002f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f30:	2302      	movs	r3, #2
 8002f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f40:	f107 031c 	add.w	r3, r7, #28
 8002f44:	4619      	mov	r1, r3
 8002f46:	480e      	ldr	r0, [pc, #56]	; (8002f80 <HAL_TIM_MspPostInit+0x148>)
 8002f48:	f001 fc88 	bl	800485c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	2302      	movs	r3, #2
 8002f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f60:	f107 031c 	add.w	r3, r7, #28
 8002f64:	4619      	mov	r1, r3
 8002f66:	4808      	ldr	r0, [pc, #32]	; (8002f88 <HAL_TIM_MspPostInit+0x150>)
 8002f68:	f001 fc78 	bl	800485c <HAL_GPIO_Init>
}
 8002f6c:	bf00      	nop
 8002f6e:	3730      	adds	r7, #48	; 0x30
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40010000 	.word	0x40010000
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	58021000 	.word	0x58021000
 8002f80:	58020000 	.word	0x58020000
 8002f84:	40000400 	.word	0x40000400
 8002f88:	58020400 	.word	0x58020400

08002f8c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f90:	4b22      	ldr	r3, [pc, #136]	; (800301c <MX_UART4_Init+0x90>)
 8002f92:	4a23      	ldr	r2, [pc, #140]	; (8003020 <MX_UART4_Init+0x94>)
 8002f94:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 7500000;
 8002f96:	4b21      	ldr	r3, [pc, #132]	; (800301c <MX_UART4_Init+0x90>)
 8002f98:	4a22      	ldr	r2, [pc, #136]	; (8003024 <MX_UART4_Init+0x98>)
 8002f9a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f9c:	4b1f      	ldr	r3, [pc, #124]	; (800301c <MX_UART4_Init+0x90>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002fa2:	4b1e      	ldr	r3, [pc, #120]	; (800301c <MX_UART4_Init+0x90>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002fa8:	4b1c      	ldr	r3, [pc, #112]	; (800301c <MX_UART4_Init+0x90>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <MX_UART4_Init+0x90>)
 8002fb0:	220c      	movs	r2, #12
 8002fb2:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <MX_UART4_Init+0x90>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fba:	4b18      	ldr	r3, [pc, #96]	; (800301c <MX_UART4_Init+0x90>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fc0:	4b16      	ldr	r3, [pc, #88]	; (800301c <MX_UART4_Init+0x90>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <MX_UART4_Init+0x90>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fcc:	4b13      	ldr	r3, [pc, #76]	; (800301c <MX_UART4_Init+0x90>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002fd2:	4812      	ldr	r0, [pc, #72]	; (800301c <MX_UART4_Init+0x90>)
 8002fd4:	f007 f902 	bl	800a1dc <HAL_UART_Init>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8002fde:	f7fe fa49 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	480d      	ldr	r0, [pc, #52]	; (800301c <MX_UART4_Init+0x90>)
 8002fe6:	f008 f904 	bl	800b1f2 <HAL_UARTEx_SetTxFifoThreshold>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8002ff0:	f7fe fa40 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4809      	ldr	r0, [pc, #36]	; (800301c <MX_UART4_Init+0x90>)
 8002ff8:	f008 f939 	bl	800b26e <HAL_UARTEx_SetRxFifoThreshold>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8003002:	f7fe fa37 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003006:	4805      	ldr	r0, [pc, #20]	; (800301c <MX_UART4_Init+0x90>)
 8003008:	f008 f8ba 	bl	800b180 <HAL_UARTEx_DisableFifoMode>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8003012:	f7fe fa2f 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	24000e68 	.word	0x24000e68
 8003020:	40004c00 	.word	0x40004c00
 8003024:	007270e0 	.word	0x007270e0

08003028 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800302c:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <MX_UART8_Init+0x90>)
 800302e:	4a23      	ldr	r2, [pc, #140]	; (80030bc <MX_UART8_Init+0x94>)
 8003030:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 7500000;
 8003032:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <MX_UART8_Init+0x90>)
 8003034:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <MX_UART8_Init+0x98>)
 8003036:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8003038:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <MX_UART8_Init+0x90>)
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800303e:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <MX_UART8_Init+0x90>)
 8003040:	2200      	movs	r2, #0
 8003042:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8003044:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <MX_UART8_Init+0x90>)
 8003046:	2200      	movs	r2, #0
 8003048:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800304a:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <MX_UART8_Init+0x90>)
 800304c:	220c      	movs	r2, #12
 800304e:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <MX_UART8_Init+0x90>)
 8003052:	2200      	movs	r2, #0
 8003054:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003056:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <MX_UART8_Init+0x90>)
 8003058:	2200      	movs	r2, #0
 800305a:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800305c:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <MX_UART8_Init+0x90>)
 800305e:	2200      	movs	r2, #0
 8003060:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <MX_UART8_Init+0x90>)
 8003064:	2200      	movs	r2, #0
 8003066:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <MX_UART8_Init+0x90>)
 800306a:	2200      	movs	r2, #0
 800306c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800306e:	4812      	ldr	r0, [pc, #72]	; (80030b8 <MX_UART8_Init+0x90>)
 8003070:	f007 f8b4 	bl	800a1dc <HAL_UART_Init>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <MX_UART8_Init+0x56>
  {
    Error_Handler();
 800307a:	f7fe f9fb 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800307e:	2100      	movs	r1, #0
 8003080:	480d      	ldr	r0, [pc, #52]	; (80030b8 <MX_UART8_Init+0x90>)
 8003082:	f008 f8b6 	bl	800b1f2 <HAL_UARTEx_SetTxFifoThreshold>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_UART8_Init+0x68>
  {
    Error_Handler();
 800308c:	f7fe f9f2 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003090:	2100      	movs	r1, #0
 8003092:	4809      	ldr	r0, [pc, #36]	; (80030b8 <MX_UART8_Init+0x90>)
 8003094:	f008 f8eb 	bl	800b26e <HAL_UARTEx_SetRxFifoThreshold>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_UART8_Init+0x7a>
  {
    Error_Handler();
 800309e:	f7fe f9e9 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80030a2:	4805      	ldr	r0, [pc, #20]	; (80030b8 <MX_UART8_Init+0x90>)
 80030a4:	f008 f86c 	bl	800b180 <HAL_UARTEx_DisableFifoMode>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 80030ae:	f7fe f9e1 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	24000efc 	.word	0x24000efc
 80030bc:	40007c00 	.word	0x40007c00
 80030c0:	007270e0 	.word	0x007270e0

080030c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b0bc      	sub	sp, #240	; 0xf0
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030dc:	f107 0318 	add.w	r3, r7, #24
 80030e0:	22c0      	movs	r2, #192	; 0xc0
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f00c ffb9 	bl	801005c <memset>
  if(uartHandle->Instance==UART4)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a4d      	ldr	r2, [pc, #308]	; (8003224 <HAL_UART_MspInit+0x160>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d147      	bne.n	8003184 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80030f4:	f04f 0202 	mov.w	r2, #2
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003106:	f107 0318 	add.w	r3, r7, #24
 800310a:	4618      	mov	r0, r3
 800310c:	f004 f840 	bl	8007190 <HAL_RCCEx_PeriphCLKConfig>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003116:	f7fe f9ad 	bl	8001474 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800311a:	4b43      	ldr	r3, [pc, #268]	; (8003228 <HAL_UART_MspInit+0x164>)
 800311c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003120:	4a41      	ldr	r2, [pc, #260]	; (8003228 <HAL_UART_MspInit+0x164>)
 8003122:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003126:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800312a:	4b3f      	ldr	r3, [pc, #252]	; (8003228 <HAL_UART_MspInit+0x164>)
 800312c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003130:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003138:	4b3b      	ldr	r3, [pc, #236]	; (8003228 <HAL_UART_MspInit+0x164>)
 800313a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800313e:	4a3a      	ldr	r2, [pc, #232]	; (8003228 <HAL_UART_MspInit+0x164>)
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003148:	4b37      	ldr	r3, [pc, #220]	; (8003228 <HAL_UART_MspInit+0x164>)
 800314a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003156:	f44f 7340 	mov.w	r3, #768	; 0x300
 800315a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315e:	2302      	movs	r3, #2
 8003160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316a:	2300      	movs	r3, #0
 800316c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003170:	2308      	movs	r3, #8
 8003172:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003176:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800317a:	4619      	mov	r1, r3
 800317c:	482b      	ldr	r0, [pc, #172]	; (800322c <HAL_UART_MspInit+0x168>)
 800317e:	f001 fb6d 	bl	800485c <HAL_GPIO_Init>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8003182:	e04a      	b.n	800321a <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==UART8)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a29      	ldr	r2, [pc, #164]	; (8003230 <HAL_UART_MspInit+0x16c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d145      	bne.n	800321a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800318e:	f04f 0202 	mov.w	r2, #2
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800319a:	2300      	movs	r3, #0
 800319c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031a0:	f107 0318 	add.w	r3, r7, #24
 80031a4:	4618      	mov	r0, r3
 80031a6:	f003 fff3 	bl	8007190 <HAL_RCCEx_PeriphCLKConfig>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80031b0:	f7fe f960 	bl	8001474 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80031b4:	4b1c      	ldr	r3, [pc, #112]	; (8003228 <HAL_UART_MspInit+0x164>)
 80031b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031ba:	4a1b      	ldr	r2, [pc, #108]	; (8003228 <HAL_UART_MspInit+0x164>)
 80031bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031c4:	4b18      	ldr	r3, [pc, #96]	; (8003228 <HAL_UART_MspInit+0x164>)
 80031c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <HAL_UART_MspInit+0x164>)
 80031d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d8:	4a13      	ldr	r2, [pc, #76]	; (8003228 <HAL_UART_MspInit+0x164>)
 80031da:	f043 0310 	orr.w	r3, r3, #16
 80031de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <HAL_UART_MspInit+0x164>)
 80031e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031f0:	2303      	movs	r3, #3
 80031f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f6:	2302      	movs	r3, #2
 80031f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003208:	2308      	movs	r3, #8
 800320a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800320e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003212:	4619      	mov	r1, r3
 8003214:	4807      	ldr	r0, [pc, #28]	; (8003234 <HAL_UART_MspInit+0x170>)
 8003216:	f001 fb21 	bl	800485c <HAL_GPIO_Init>
}
 800321a:	bf00      	nop
 800321c:	37f0      	adds	r7, #240	; 0xf0
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40004c00 	.word	0x40004c00
 8003228:	58024400 	.word	0x58024400
 800322c:	58020400 	.word	0x58020400
 8003230:	40007c00 	.word	0x40007c00
 8003234:	58021000 	.word	0x58021000

08003238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003270 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800323c:	f7ff fb1a 	bl	8002874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003240:	480c      	ldr	r0, [pc, #48]	; (8003274 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003242:	490d      	ldr	r1, [pc, #52]	; (8003278 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003244:	4a0d      	ldr	r2, [pc, #52]	; (800327c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003248:	e002      	b.n	8003250 <LoopCopyDataInit>

0800324a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800324a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800324c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800324e:	3304      	adds	r3, #4

08003250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003254:	d3f9      	bcc.n	800324a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003256:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003258:	4c0a      	ldr	r4, [pc, #40]	; (8003284 <LoopFillZerobss+0x22>)
  movs r3, #0
 800325a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800325c:	e001      	b.n	8003262 <LoopFillZerobss>

0800325e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800325e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003260:	3204      	adds	r2, #4

08003262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003264:	d3fb      	bcc.n	800325e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003266:	f00c ff5b 	bl	8010120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800326a:	f7fe f823 	bl	80012b4 <main>
  bx  lr
 800326e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003270:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003274:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003278:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 800327c:	0801048c 	.word	0x0801048c
  ldr r2, =_sbss
 8003280:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8003284:	24002cec 	.word	0x24002cec

08003288 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003288:	e7fe      	b.n	8003288 <ADC3_IRQHandler>
	...

0800328c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003292:	2003      	movs	r0, #3
 8003294:	f000 f98c 	bl	80035b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003298:	f003 fda4 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 800329c:	4602      	mov	r2, r0
 800329e:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <HAL_Init+0x68>)
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	4913      	ldr	r1, [pc, #76]	; (80032f8 <HAL_Init+0x6c>)
 80032aa:	5ccb      	ldrb	r3, [r1, r3]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
 80032b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <HAL_Init+0x68>)
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	4a0e      	ldr	r2, [pc, #56]	; (80032f8 <HAL_Init+0x6c>)
 80032c0:	5cd3      	ldrb	r3, [r2, r3]
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
 80032cc:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <HAL_Init+0x70>)
 80032ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032d0:	4a0b      	ldr	r2, [pc, #44]	; (8003300 <HAL_Init+0x74>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032d6:	200f      	movs	r0, #15
 80032d8:	f000 f814 	bl	8003304 <HAL_InitTick>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e002      	b.n	80032ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80032e6:	f7ff f9ed 	bl	80026c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	58024400 	.word	0x58024400
 80032f8:	08010418 	.word	0x08010418
 80032fc:	24000004 	.word	0x24000004
 8003300:	24000000 	.word	0x24000000

08003304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800330c:	4b15      	ldr	r3, [pc, #84]	; (8003364 <HAL_InitTick+0x60>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e021      	b.n	800335c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_InitTick+0x64>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b11      	ldr	r3, [pc, #68]	; (8003364 <HAL_InitTick+0x60>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	4619      	mov	r1, r3
 8003322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003326:	fbb3 f3f1 	udiv	r3, r3, r1
 800332a:	fbb2 f3f3 	udiv	r3, r2, r3
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f971 	bl	8003616 <HAL_SYSTICK_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e00e      	b.n	800335c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b0f      	cmp	r3, #15
 8003342:	d80a      	bhi.n	800335a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003344:	2200      	movs	r2, #0
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	f000 f93b 	bl	80035c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003350:	4a06      	ldr	r2, [pc, #24]	; (800336c <HAL_InitTick+0x68>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	2400000c 	.word	0x2400000c
 8003368:	24000000 	.word	0x24000000
 800336c:	24000008 	.word	0x24000008

08003370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_IncTick+0x20>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_IncTick+0x24>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4413      	add	r3, r2
 8003380:	4a04      	ldr	r2, [pc, #16]	; (8003394 <HAL_IncTick+0x24>)
 8003382:	6013      	str	r3, [r2, #0]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	2400000c 	.word	0x2400000c
 8003394:	24000f90 	.word	0x24000f90

08003398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return uwTick;
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <HAL_GetTick+0x14>)
 800339e:	681b      	ldr	r3, [r3, #0]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	24000f90 	.word	0x24000f90

080033b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7ff ffee 	bl	8003398 <HAL_GetTick>
 80033bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d005      	beq.n	80033d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_Delay+0x44>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033d6:	bf00      	nop
 80033d8:	f7ff ffde 	bl	8003398 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d8f7      	bhi.n	80033d8 <HAL_Delay+0x28>
  {
  }
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	2400000c 	.word	0x2400000c

080033f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80033fc:	4b03      	ldr	r3, [pc, #12]	; (800340c <HAL_GetREVID+0x14>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	0c1b      	lsrs	r3, r3, #16
}
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	5c001000 	.word	0x5c001000

08003410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <__NVIC_SetPriorityGrouping+0x40>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800342c:	4013      	ands	r3, r2
 800342e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <__NVIC_SetPriorityGrouping+0x44>)
 800343a:	4313      	orrs	r3, r2
 800343c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800343e:	4a04      	ldr	r2, [pc, #16]	; (8003450 <__NVIC_SetPriorityGrouping+0x40>)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	60d3      	str	r3, [r2, #12]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000ed00 	.word	0xe000ed00
 8003454:	05fa0000 	.word	0x05fa0000

08003458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <__NVIC_GetPriorityGrouping+0x18>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	0a1b      	lsrs	r3, r3, #8
 8003462:	f003 0307 	and.w	r3, r3, #7
}
 8003466:	4618      	mov	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800347e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003482:	2b00      	cmp	r3, #0
 8003484:	db0b      	blt.n	800349e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	f003 021f 	and.w	r2, r3, #31
 800348c:	4907      	ldr	r1, [pc, #28]	; (80034ac <__NVIC_EnableIRQ+0x38>)
 800348e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2001      	movs	r0, #1
 8003496:	fa00 f202 	lsl.w	r2, r0, r2
 800349a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	e000e100 	.word	0xe000e100

080034b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	6039      	str	r1, [r7, #0]
 80034ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	db0a      	blt.n	80034da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	490c      	ldr	r1, [pc, #48]	; (80034fc <__NVIC_SetPriority+0x4c>)
 80034ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ce:	0112      	lsls	r2, r2, #4
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	440b      	add	r3, r1
 80034d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034d8:	e00a      	b.n	80034f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	4908      	ldr	r1, [pc, #32]	; (8003500 <__NVIC_SetPriority+0x50>)
 80034e0:	88fb      	ldrh	r3, [r7, #6]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	3b04      	subs	r3, #4
 80034e8:	0112      	lsls	r2, r2, #4
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	440b      	add	r3, r1
 80034ee:	761a      	strb	r2, [r3, #24]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000e100 	.word	0xe000e100
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f1c3 0307 	rsb	r3, r3, #7
 800351e:	2b04      	cmp	r3, #4
 8003520:	bf28      	it	cs
 8003522:	2304      	movcs	r3, #4
 8003524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3304      	adds	r3, #4
 800352a:	2b06      	cmp	r3, #6
 800352c:	d902      	bls.n	8003534 <NVIC_EncodePriority+0x30>
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3b03      	subs	r3, #3
 8003532:	e000      	b.n	8003536 <NVIC_EncodePriority+0x32>
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	f04f 32ff 	mov.w	r2, #4294967295
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43da      	mvns	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	401a      	ands	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800354c:	f04f 31ff 	mov.w	r1, #4294967295
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	fa01 f303 	lsl.w	r3, r1, r3
 8003556:	43d9      	mvns	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	4313      	orrs	r3, r2
         );
}
 800355e:	4618      	mov	r0, r3
 8003560:	3724      	adds	r7, #36	; 0x24
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800357c:	d301      	bcc.n	8003582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800357e:	2301      	movs	r3, #1
 8003580:	e00f      	b.n	80035a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <SysTick_Config+0x40>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800358a:	210f      	movs	r1, #15
 800358c:	f04f 30ff 	mov.w	r0, #4294967295
 8003590:	f7ff ff8e 	bl	80034b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <SysTick_Config+0x40>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800359a:	4b04      	ldr	r3, [pc, #16]	; (80035ac <SysTick_Config+0x40>)
 800359c:	2207      	movs	r2, #7
 800359e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	e000e010 	.word	0xe000e010

080035b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ff29 	bl	8003410 <__NVIC_SetPriorityGrouping>
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	4603      	mov	r3, r0
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035d4:	f7ff ff40 	bl	8003458 <__NVIC_GetPriorityGrouping>
 80035d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	6978      	ldr	r0, [r7, #20]
 80035e0:	f7ff ff90 	bl	8003504 <NVIC_EncodePriority>
 80035e4:	4602      	mov	r2, r0
 80035e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035ea:	4611      	mov	r1, r2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff ff5f 	bl	80034b0 <__NVIC_SetPriority>
}
 80035f2:	bf00      	nop
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	4603      	mov	r3, r0
 8003602:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff ff33 	bl	8003474 <__NVIC_EnableIRQ>
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff ffa4 	bl	800356c <SysTick_Config>
 8003624:	4603      	mov	r3, r0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b098      	sub	sp, #96	; 0x60
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003638:	4a84      	ldr	r2, [pc, #528]	; (800384c <HAL_FDCAN_Init+0x21c>)
 800363a:	f107 030c 	add.w	r3, r7, #12
 800363e:	4611      	mov	r1, r2
 8003640:	224c      	movs	r2, #76	; 0x4c
 8003642:	4618      	mov	r0, r3
 8003644:	f00c fd92 	bl	801016c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e1c6      	b.n	80039e0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a7e      	ldr	r2, [pc, #504]	; (8003850 <HAL_FDCAN_Init+0x220>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d106      	bne.n	800366a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003664:	461a      	mov	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fd f870 	bl	8000764 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0210 	bic.w	r2, r2, #16
 8003692:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003694:	f7ff fe80 	bl	8003398 <HAL_GetTick>
 8003698:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800369a:	e014      	b.n	80036c6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800369c:	f7ff fe7c 	bl	8003398 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b0a      	cmp	r3, #10
 80036a8:	d90d      	bls.n	80036c6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036b0:	f043 0201 	orr.w	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2203      	movs	r2, #3
 80036be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e18c      	b.n	80039e0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d0e3      	beq.n	800369c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036e4:	f7ff fe58 	bl	8003398 <HAL_GetTick>
 80036e8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80036ea:	e014      	b.n	8003716 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80036ec:	f7ff fe54 	bl	8003398 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b0a      	cmp	r3, #10
 80036f8:	d90d      	bls.n	8003716 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003700:	f043 0201 	orr.w	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2203      	movs	r2, #3
 800370e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e164      	b.n	80039e0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0e3      	beq.n	80036ec <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699a      	ldr	r2, [r3, #24]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0202 	orr.w	r2, r2, #2
 8003732:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	7c1b      	ldrb	r3, [r3, #16]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d108      	bne.n	800374e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374a:	619a      	str	r2, [r3, #24]
 800374c:	e007      	b.n	800375e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699a      	ldr	r2, [r3, #24]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800375c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7c5b      	ldrb	r3, [r3, #17]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d108      	bne.n	8003778 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003774:	619a      	str	r2, [r3, #24]
 8003776:	e007      	b.n	8003788 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003786:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	7c9b      	ldrb	r3, [r3, #18]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d108      	bne.n	80037a2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800379e:	619a      	str	r2, [r3, #24]
 80037a0:	e007      	b.n	80037b2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699a      	ldr	r2, [r3, #24]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037b0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80037d6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0210 	bic.w	r2, r2, #16
 80037e6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d108      	bne.n	8003802 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0204 	orr.w	r2, r2, #4
 80037fe:	619a      	str	r2, [r3, #24]
 8003800:	e030      	b.n	8003864 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d02c      	beq.n	8003864 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d020      	beq.n	8003854 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003820:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0210 	orr.w	r2, r2, #16
 8003830:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b03      	cmp	r3, #3
 8003838:	d114      	bne.n	8003864 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0220 	orr.w	r2, r2, #32
 8003848:	619a      	str	r2, [r3, #24]
 800384a:	e00b      	b.n	8003864 <HAL_FDCAN_Init+0x234>
 800384c:	0801024c 	.word	0x0801024c
 8003850:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0220 	orr.w	r2, r2, #32
 8003862:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	3b01      	subs	r3, #1
 800386a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	3b01      	subs	r3, #1
 8003872:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003874:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800387c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	3b01      	subs	r3, #1
 8003886:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800388c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800388e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003898:	d115      	bne.n	80038c6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	3b01      	subs	r3, #1
 80038a6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80038a8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	3b01      	subs	r3, #1
 80038b0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80038b2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	3b01      	subs	r3, #1
 80038bc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80038c2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80038c4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ec:	4413      	add	r3, r2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d011      	beq.n	8003916 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80038fa:	f023 0107 	bic.w	r1, r3, #7
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	3360      	adds	r3, #96	; 0x60
 8003906:	443b      	add	r3, r7
 8003908:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d011      	beq.n	8003942 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003926:	f023 0107 	bic.w	r1, r3, #7
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	3360      	adds	r3, #96	; 0x60
 8003932:	443b      	add	r3, r7
 8003934:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003946:	2b00      	cmp	r3, #0
 8003948:	d012      	beq.n	8003970 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003952:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	3360      	adds	r3, #96	; 0x60
 800395e:	443b      	add	r3, r7
 8003960:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003964:	011a      	lsls	r2, r3, #4
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003974:	2b00      	cmp	r3, #0
 8003976:	d012      	beq.n	800399e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003980:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	3360      	adds	r3, #96	; 0x60
 800398c:	443b      	add	r3, r7
 800398e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003992:	021a      	lsls	r2, r3, #8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <HAL_FDCAN_Init+0x3b8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d107      	bne.n	80039b8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f022 0203 	bic.w	r2, r2, #3
 80039b6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fd3f 	bl	8004454 <FDCAN_CalcultateRamBlockAddresses>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80039dc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3760      	adds	r7, #96	; 0x60
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	4000a000 	.word	0x4000a000

080039ec <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80039fc:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d002      	beq.n	8003a0a <HAL_FDCAN_ConfigFilter+0x1e>
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d157      	bne.n	8003aba <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d12b      	bne.n	8003a6a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b07      	cmp	r3, #7
 8003a18:	d10d      	bne.n	8003a36 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003a26:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003a2c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003a2e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e00e      	b.n	8003a54 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003a42:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003a4a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e025      	b.n	8003ab6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	075a      	lsls	r2, r3, #29
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b07      	cmp	r3, #7
 8003a7e:	d103      	bne.n	8003a88 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	e006      	b.n	8003a96 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	079a      	lsls	r2, r3, #30
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	3304      	adds	r3, #4
 8003aae:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e008      	b.n	8003acc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ac0:	f043 0202 	orr.w	r2, r3, #2
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
  }
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d141      	bne.n	8003b74 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003af8:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b06:	f043 0220 	orr.w	r2, r3, #32
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e038      	b.n	8003b86 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d009      	beq.n	8003b38 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e026      	b.n	8003b86 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003b40:	0c1b      	lsrs	r3, r3, #16
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fe06 	bl	8004760 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2101      	movs	r1, #1
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b60:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003b64:	2201      	movs	r2, #1
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	409a      	lsls	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e008      	b.n	8003b86 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b7a:	f043 0208 	orr.w	r2, r3, #8
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b08b      	sub	sp, #44	; 0x2c
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003ba8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003baa:	7efb      	ldrb	r3, [r7, #27]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	f040 814b 	bne.w	8003e48 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b40      	cmp	r3, #64	; 0x40
 8003bb6:	d14d      	bne.n	8003c54 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bc0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bce:	f043 0220 	orr.w	r2, r3, #32
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e13e      	b.n	8003e5a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d109      	bne.n	8003c00 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e12c      	b.n	8003e5a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c08:	0e1b      	lsrs	r3, r3, #24
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10b      	bne.n	8003c2a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c1a:	0fdb      	lsrs	r3, r3, #31
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c24:	d101      	bne.n	8003c2a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003c26:	2301      	movs	r3, #1
 8003c28:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c32:	0a1b      	lsrs	r3, r3, #8
 8003c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	69f9      	ldr	r1, [r7, #28]
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
 8003c52:	e069      	b.n	8003d28 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b41      	cmp	r3, #65	; 0x41
 8003c58:	d14d      	bne.n	8003cf6 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c70:	f043 0220 	orr.w	r2, r3, #32
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0ed      	b.n	8003e5a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e0db      	b.n	8003e5a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003caa:	0e1b      	lsrs	r3, r3, #24
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d10b      	bne.n	8003ccc <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cbc:	0fdb      	lsrs	r3, r3, #31
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cc6:	d101      	bne.n	8003ccc <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	4413      	add	r3, r2
 8003cde:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce8:	69f9      	ldr	r1, [r7, #28]
 8003cea:	fb01 f303 	mul.w	r3, r1, r3
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf4:	e018      	b.n	8003d28 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d309      	bcc.n	8003d14 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d06:	f043 0220 	orr.w	r2, r3, #32
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0a2      	b.n	8003e5a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	fb01 f303 	mul.w	r3, r1, r3
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d107      	bne.n	8003d4c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	0c9b      	lsrs	r3, r3, #18
 8003d42:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	e005      	b.n	8003d58 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	3304      	adds	r3, #4
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	0e1b      	lsrs	r3, r3, #24
 8003daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	0fda      	lsrs	r2, r3, #31
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	623b      	str	r3, [r7, #32]
 8003dca:	e00a      	b.n	8003de2 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	441a      	add	r2, r3
 8003dd2:	6839      	ldr	r1, [r7, #0]
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	440b      	add	r3, r1
 8003dd8:	7812      	ldrb	r2, [r2, #0]
 8003dda:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	3301      	adds	r3, #1
 8003de0:	623b      	str	r3, [r7, #32]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	0c1b      	lsrs	r3, r3, #16
 8003de8:	4a1f      	ldr	r2, [pc, #124]	; (8003e68 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8003dea:	5cd3      	ldrb	r3, [r2, r3]
 8003dec:	461a      	mov	r2, r3
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d3eb      	bcc.n	8003dcc <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d105      	bne.n	8003e06 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003e04:	e01e      	b.n	8003e44 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b41      	cmp	r3, #65	; 0x41
 8003e0a:	d105      	bne.n	8003e18 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003e16:	e015      	b.n	8003e44 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b1f      	cmp	r3, #31
 8003e1c:	d808      	bhi.n	8003e30 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2101      	movs	r1, #1
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003e2e:	e009      	b.n	8003e44 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f003 021f 	and.w	r2, r3, #31
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e008      	b.n	8003e5a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e4e:	f043 0208 	orr.w	r2, r3, #8
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
  }
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	372c      	adds	r7, #44	; 0x2c
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	08010428 	.word	0x08010428

08003e6c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Level Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e80:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8003e82:	68fb      	ldr	r3, [r7, #12]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b096      	sub	sp, #88	; 0x58
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003e98:	4b95      	ldr	r3, [pc, #596]	; (80040f0 <HAL_FDCAN_IRQHandler+0x260>)
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	079b      	lsls	r3, r3, #30
 8003e9e:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003ea0:	4b93      	ldr	r3, [pc, #588]	; (80040f0 <HAL_FDCAN_IRQHandler+0x260>)
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	079b      	lsls	r3, r3, #30
 8003ea6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003eb6:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ed8:	4013      	ands	r3, r2
 8003eda:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee6:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efa:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8003efe:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f08:	4013      	ands	r3, r2
 8003f0a:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f12:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8003f16:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f20:	4013      	ands	r3, r2
 8003f22:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f32:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00f      	beq.n	8003f5e <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f50:	651a      	str	r2, [r3, #80]	; 0x50
 8003f52:	4b67      	ldr	r3, [pc, #412]	; (80040f0 <HAL_FDCAN_IRQHandler+0x260>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fa2e 	bl	80043ba <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01c      	beq.n	8003fa2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d017      	beq.n	8003fa2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f86:	4013      	ands	r3, r2
 8003f88:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f92:	651a      	str	r2, [r3, #80]	; 0x50
 8003f94:	4b56      	ldr	r3, [pc, #344]	; (80040f0 <HAL_FDCAN_IRQHandler+0x260>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003f9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f9e3 	bl	8004368 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fae:	4b51      	ldr	r3, [pc, #324]	; (80040f4 <HAL_FDCAN_IRQHandler+0x264>)
 8003fb0:	400b      	ands	r3, r1
 8003fb2:	6513      	str	r3, [r2, #80]	; 0x50
 8003fb4:	4a4e      	ldr	r2, [pc, #312]	; (80040f0 <HAL_FDCAN_IRQHandler+0x260>)
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb8:	0f9b      	lsrs	r3, r3, #30
 8003fba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003fbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f9b2 	bl	8004328 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00d      	beq.n	8003fe6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003fd0:	4b48      	ldr	r3, [pc, #288]	; (80040f4 <HAL_FDCAN_IRQHandler+0x264>)
 8003fd2:	400b      	ands	r3, r1
 8003fd4:	6513      	str	r3, [r2, #80]	; 0x50
 8003fd6:	4a46      	ldr	r2, [pc, #280]	; (80040f0 <HAL_FDCAN_IRQHandler+0x260>)
 8003fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fda:	0f9b      	lsrs	r3, r3, #30
 8003fdc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003fde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f9ac 	bl	800433e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00d      	beq.n	8004008 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003ff2:	4b40      	ldr	r3, [pc, #256]	; (80040f4 <HAL_FDCAN_IRQHandler+0x264>)
 8003ff4:	400b      	ands	r3, r1
 8003ff6:	6513      	str	r3, [r2, #80]	; 0x50
 8003ff8:	4a3d      	ldr	r2, [pc, #244]	; (80040f0 <HAL_FDCAN_IRQHandler+0x260>)
 8003ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffc:	0f9b      	lsrs	r3, r3, #30
 8003ffe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004000:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fd f8d8 	bl	80011b8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004014:	4b37      	ldr	r3, [pc, #220]	; (80040f4 <HAL_FDCAN_IRQHandler+0x264>)
 8004016:	400b      	ands	r3, r1
 8004018:	6513      	str	r3, [r2, #80]	; 0x50
 800401a:	4a35      	ldr	r2, [pc, #212]	; (80040f0 <HAL_FDCAN_IRQHandler+0x260>)
 800401c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401e:	0f9b      	lsrs	r3, r3, #30
 8004020:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004022:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fd f8e9 	bl	80011fc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800402a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00f      	beq.n	8004054 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004046:	651a      	str	r2, [r3, #80]	; 0x50
 8004048:	4b29      	ldr	r3, [pc, #164]	; (80040f0 <HAL_FDCAN_IRQHandler+0x260>)
 800404a:	2200      	movs	r2, #0
 800404c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f980 	bl	8004354 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01c      	beq.n	8004098 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004064:	2b00      	cmp	r3, #0
 8004066:	d017      	beq.n	8004098 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004070:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800407a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407c:	4013      	ands	r3, r2
 800407e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004088:	651a      	str	r2, [r3, #80]	; 0x50
 800408a:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <HAL_FDCAN_IRQHandler+0x260>)
 800408c:	2200      	movs	r2, #0
 800408e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004090:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fd f8d4 	bl	8001240 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00f      	beq.n	80040c2 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80040b4:	651a      	str	r2, [r3, #80]	; 0x50
 80040b6:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <HAL_FDCAN_IRQHandler+0x260>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f95e 	bl	800437e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80040c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d015      	beq.n	80040f8 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80040cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d010      	beq.n	80040f8 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040de:	651a      	str	r2, [r3, #80]	; 0x50
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <HAL_FDCAN_IRQHandler+0x260>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f953 	bl	8004392 <HAL_FDCAN_TimestampWraparoundCallback>
 80040ec:	e004      	b.n	80040f8 <HAL_FDCAN_IRQHandler+0x268>
 80040ee:	bf00      	nop
 80040f0:	4000a800 	.word	0x4000a800
 80040f4:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80040f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00f      	beq.n	8004122 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004114:	651a      	str	r2, [r3, #80]	; 0x50
 8004116:	4b81      	ldr	r3, [pc, #516]	; (800431c <HAL_FDCAN_IRQHandler+0x48c>)
 8004118:	2200      	movs	r2, #0
 800411a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f942 	bl	80043a6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d014      	beq.n	8004156 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800412c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00f      	beq.n	8004156 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800413e:	651a      	str	r2, [r3, #80]	; 0x50
 8004140:	4b76      	ldr	r3, [pc, #472]	; (800431c <HAL_FDCAN_IRQHandler+0x48c>)
 8004142:	2200      	movs	r2, #0
 8004144:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800414c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00d      	beq.n	8004178 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004162:	4b6f      	ldr	r3, [pc, #444]	; (8004320 <HAL_FDCAN_IRQHandler+0x490>)
 8004164:	400b      	ands	r3, r1
 8004166:	6513      	str	r3, [r2, #80]	; 0x50
 8004168:	4a6c      	ldr	r2, [pc, #432]	; (800431c <HAL_FDCAN_IRQHandler+0x48c>)
 800416a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416c:	0f9b      	lsrs	r3, r3, #30
 800416e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004170:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f935 	bl	80043e2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800417a:	2b00      	cmp	r3, #0
 800417c:	d011      	beq.n	80041a2 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004184:	4b66      	ldr	r3, [pc, #408]	; (8004320 <HAL_FDCAN_IRQHandler+0x490>)
 8004186:	400b      	ands	r3, r1
 8004188:	6513      	str	r3, [r2, #80]	; 0x50
 800418a:	4a64      	ldr	r2, [pc, #400]	; (800431c <HAL_FDCAN_IRQHandler+0x48c>)
 800418c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800418e:	0f9b      	lsrs	r3, r3, #30
 8004190:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a5f      	ldr	r2, [pc, #380]	; (8004324 <HAL_FDCAN_IRQHandler+0x494>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	f040 80aa 	bne.w	8004302 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80a2 	beq.w	8004302 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d2:	4013      	ands	r3, r2
 80041d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041e0:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ea:	4013      	ands	r3, r2
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004202:	4013      	ands	r3, r2
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8004210:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	6a3a      	ldr	r2, [r7, #32]
 800421a:	4013      	ands	r3, r2
 800421c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8004228:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	4013      	ands	r3, r2
 8004234:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d007      	beq.n	800425c <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004252:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004254:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f8ce 	bl	80043f8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004268:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800426a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f8ce 	bl	800440e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d019      	beq.n	80042b0 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d014      	beq.n	80042b0 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428c:	0c1b      	lsrs	r3, r3, #16
 800428e:	b29b      	uxth	r3, r3
 8004290:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800429c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2240      	movs	r2, #64	; 0x40
 80042a4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	6939      	ldr	r1, [r7, #16]
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8ba 	bl	8004424 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042bc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80042be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f8bb 	bl	800443c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00b      	beq.n	80042e4 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	6a3a      	ldr	r2, [r7, #32]
 80042d2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f85e 	bl	80043ce <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004312:	bf00      	nop
 8004314:	3758      	adds	r7, #88	; 0x58
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	4000a800 	.word	0x4000a800
 8004320:	3fcfffff 	.word	0x3fcfffff
 8004324:	4000a000 	.word	0x4000a000

08004328 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
 8004416:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004460:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800446a:	4ba7      	ldr	r3, [pc, #668]	; (8004708 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800446c:	4013      	ands	r3, r2
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	0091      	lsls	r1, r2, #2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	430b      	orrs	r3, r1
 8004478:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004484:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	041a      	lsls	r2, r3, #16
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	4413      	add	r3, r2
 80044a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044aa:	4b97      	ldr	r3, [pc, #604]	; (8004708 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	0091      	lsls	r1, r2, #2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	430b      	orrs	r3, r1
 80044b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044cc:	041a      	lsls	r2, r3, #16
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	4413      	add	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80044ec:	4b86      	ldr	r3, [pc, #536]	; (8004708 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	0091      	lsls	r1, r2, #2
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6812      	ldr	r2, [r2, #0]
 80044f8:	430b      	orrs	r3, r1
 80044fa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004506:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	041a      	lsls	r2, r3, #16
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004522:	fb02 f303 	mul.w	r3, r2, r3
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	4413      	add	r3, r2
 800452a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004534:	4b74      	ldr	r3, [pc, #464]	; (8004708 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004536:	4013      	ands	r3, r2
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	0091      	lsls	r1, r2, #2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	430b      	orrs	r3, r1
 8004542:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800454e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004556:	041a      	lsls	r2, r3, #16
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	4413      	add	r3, r2
 8004572:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800457c:	4b62      	ldr	r3, [pc, #392]	; (8004708 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800457e:	4013      	ands	r3, r2
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	0091      	lsls	r1, r2, #2
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6812      	ldr	r2, [r2, #0]
 8004588:	430b      	orrs	r3, r1
 800458a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	4413      	add	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80045a8:	4b57      	ldr	r3, [pc, #348]	; (8004708 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	0091      	lsls	r1, r2, #2
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	430b      	orrs	r3, r1
 80045b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045c2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ca:	041a      	lsls	r2, r3, #16
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	4413      	add	r3, r2
 80045e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045ea:	4b47      	ldr	r3, [pc, #284]	; (8004708 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	0091      	lsls	r1, r2, #2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	430b      	orrs	r3, r1
 80045f8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004604:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460c:	041a      	lsls	r2, r3, #16
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004620:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004628:	061a      	lsls	r2, r3, #24
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004638:	4b34      	ldr	r3, [pc, #208]	; (800470c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800463a:	4413      	add	r3, r2
 800463c:	009a      	lsls	r2, r3, #2
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	441a      	add	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	441a      	add	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800466e:	fb01 f303 	mul.w	r3, r1, r3
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	441a      	add	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	441a      	add	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800469e:	fb01 f303 	mul.w	r3, r1, r3
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	441a      	add	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	441a      	add	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80046ea:	fb01 f303 	mul.w	r3, r1, r3
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	441a      	add	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fe:	4a04      	ldr	r2, [pc, #16]	; (8004710 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d915      	bls.n	8004730 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004704:	e006      	b.n	8004714 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004706:	bf00      	nop
 8004708:	ffff0003 	.word	0xffff0003
 800470c:	10002b00 	.word	0x10002b00
 8004710:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800471a:	f043 0220 	orr.w	r2, r3, #32
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2203      	movs	r2, #3
 8004728:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e010      	b.n	8004752 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	e005      	b.n	8004744 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3304      	adds	r3, #4
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	429a      	cmp	r2, r3
 800474e:	d3f3      	bcc.n	8004738 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop

08004760 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8004760:	b480      	push	{r7}
 8004762:	b089      	sub	sp, #36	; 0x24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800477e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004786:	4313      	orrs	r3, r2
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	e00a      	b.n	80047a2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004794:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800479a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800479c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047a0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80047ac:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80047b2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80047b8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047cc:	6839      	ldr	r1, [r7, #0]
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	3304      	adds	r3, #4
 80047e2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	3304      	adds	r3, #4
 80047ee:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	e020      	b.n	8004838 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	3303      	adds	r3, #3
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	4413      	add	r3, r2
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	3302      	adds	r3, #2
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	440b      	add	r3, r1
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800480e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	3301      	adds	r3, #1
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	440b      	add	r3, r1
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800481c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	440a      	add	r2, r1
 8004824:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004826:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	3304      	adds	r3, #4
 8004830:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	3304      	adds	r3, #4
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	0c1b      	lsrs	r3, r3, #16
 800483e:	4a06      	ldr	r2, [pc, #24]	; (8004858 <FDCAN_CopyMessageToRAM+0xf8>)
 8004840:	5cd3      	ldrb	r3, [r2, r3]
 8004842:	461a      	mov	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	4293      	cmp	r3, r2
 8004848:	d3d5      	bcc.n	80047f6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800484a:	bf00      	nop
 800484c:	bf00      	nop
 800484e:	3724      	adds	r7, #36	; 0x24
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	08010428 	.word	0x08010428

0800485c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800485c:	b480      	push	{r7}
 800485e:	b089      	sub	sp, #36	; 0x24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800486a:	4b89      	ldr	r3, [pc, #548]	; (8004a90 <HAL_GPIO_Init+0x234>)
 800486c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800486e:	e194      	b.n	8004b9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	2101      	movs	r1, #1
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	fa01 f303 	lsl.w	r3, r1, r3
 800487c:	4013      	ands	r3, r2
 800487e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8186 	beq.w	8004b94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d005      	beq.n	80048a0 <HAL_GPIO_Init+0x44>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d130      	bne.n	8004902 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	2203      	movs	r2, #3
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	43db      	mvns	r3, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4013      	ands	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048d6:	2201      	movs	r2, #1
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43db      	mvns	r3, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4013      	ands	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	f003 0201 	and.w	r2, r3, #1
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b03      	cmp	r3, #3
 800490c:	d017      	beq.n	800493e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	2203      	movs	r2, #3
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43db      	mvns	r3, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	4313      	orrs	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d123      	bne.n	8004992 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	08da      	lsrs	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3208      	adds	r2, #8
 8004952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	220f      	movs	r2, #15
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	43db      	mvns	r3, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4013      	ands	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4313      	orrs	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	08da      	lsrs	r2, r3, #3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3208      	adds	r2, #8
 800498c:	69b9      	ldr	r1, [r7, #24]
 800498e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	2203      	movs	r2, #3
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4013      	ands	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f003 0203 	and.w	r2, r3, #3
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4313      	orrs	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80e0 	beq.w	8004b94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049d4:	4b2f      	ldr	r3, [pc, #188]	; (8004a94 <HAL_GPIO_Init+0x238>)
 80049d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049da:	4a2e      	ldr	r2, [pc, #184]	; (8004a94 <HAL_GPIO_Init+0x238>)
 80049dc:	f043 0302 	orr.w	r3, r3, #2
 80049e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80049e4:	4b2b      	ldr	r3, [pc, #172]	; (8004a94 <HAL_GPIO_Init+0x238>)
 80049e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049f2:	4a29      	ldr	r2, [pc, #164]	; (8004a98 <HAL_GPIO_Init+0x23c>)
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	3302      	adds	r3, #2
 80049fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	220f      	movs	r2, #15
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	43db      	mvns	r3, r3
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	4013      	ands	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a20      	ldr	r2, [pc, #128]	; (8004a9c <HAL_GPIO_Init+0x240>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d052      	beq.n	8004ac4 <HAL_GPIO_Init+0x268>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a1f      	ldr	r2, [pc, #124]	; (8004aa0 <HAL_GPIO_Init+0x244>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d031      	beq.n	8004a8a <HAL_GPIO_Init+0x22e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <HAL_GPIO_Init+0x248>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d02b      	beq.n	8004a86 <HAL_GPIO_Init+0x22a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a1d      	ldr	r2, [pc, #116]	; (8004aa8 <HAL_GPIO_Init+0x24c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d025      	beq.n	8004a82 <HAL_GPIO_Init+0x226>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a1c      	ldr	r2, [pc, #112]	; (8004aac <HAL_GPIO_Init+0x250>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01f      	beq.n	8004a7e <HAL_GPIO_Init+0x222>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a1b      	ldr	r2, [pc, #108]	; (8004ab0 <HAL_GPIO_Init+0x254>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d019      	beq.n	8004a7a <HAL_GPIO_Init+0x21e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a1a      	ldr	r2, [pc, #104]	; (8004ab4 <HAL_GPIO_Init+0x258>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <HAL_GPIO_Init+0x21a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a19      	ldr	r2, [pc, #100]	; (8004ab8 <HAL_GPIO_Init+0x25c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00d      	beq.n	8004a72 <HAL_GPIO_Init+0x216>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a18      	ldr	r2, [pc, #96]	; (8004abc <HAL_GPIO_Init+0x260>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d007      	beq.n	8004a6e <HAL_GPIO_Init+0x212>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a17      	ldr	r2, [pc, #92]	; (8004ac0 <HAL_GPIO_Init+0x264>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d101      	bne.n	8004a6a <HAL_GPIO_Init+0x20e>
 8004a66:	2309      	movs	r3, #9
 8004a68:	e02d      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a6a:	230a      	movs	r3, #10
 8004a6c:	e02b      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a6e:	2308      	movs	r3, #8
 8004a70:	e029      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a72:	2307      	movs	r3, #7
 8004a74:	e027      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a76:	2306      	movs	r3, #6
 8004a78:	e025      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a7a:	2305      	movs	r3, #5
 8004a7c:	e023      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a7e:	2304      	movs	r3, #4
 8004a80:	e021      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a82:	2303      	movs	r3, #3
 8004a84:	e01f      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e01d      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e01b      	b.n	8004ac6 <HAL_GPIO_Init+0x26a>
 8004a8e:	bf00      	nop
 8004a90:	58000080 	.word	0x58000080
 8004a94:	58024400 	.word	0x58024400
 8004a98:	58000400 	.word	0x58000400
 8004a9c:	58020000 	.word	0x58020000
 8004aa0:	58020400 	.word	0x58020400
 8004aa4:	58020800 	.word	0x58020800
 8004aa8:	58020c00 	.word	0x58020c00
 8004aac:	58021000 	.word	0x58021000
 8004ab0:	58021400 	.word	0x58021400
 8004ab4:	58021800 	.word	0x58021800
 8004ab8:	58021c00 	.word	0x58021c00
 8004abc:	58022000 	.word	0x58022000
 8004ac0:	58022400 	.word	0x58022400
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	f002 0203 	and.w	r2, r2, #3
 8004acc:	0092      	lsls	r2, r2, #2
 8004ace:	4093      	lsls	r3, r2
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ad6:	4938      	ldr	r1, [pc, #224]	; (8004bb8 <HAL_GPIO_Init+0x35c>)
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	089b      	lsrs	r3, r3, #2
 8004adc:	3302      	adds	r3, #2
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	43db      	mvns	r3, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4013      	ands	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	43db      	mvns	r3, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4013      	ands	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	3301      	adds	r3, #1
 8004b98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f47f ae63 	bne.w	8004870 <HAL_GPIO_Init+0x14>
  }
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	3724      	adds	r7, #36	; 0x24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	58000400 	.word	0x58000400

08004bbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bbe:	b08f      	sub	sp, #60	; 0x3c
 8004bc0:	af0a      	add	r7, sp, #40	; 0x28
 8004bc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e116      	b.n	8004dfc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d106      	bne.n	8004bee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f00a f8f7 	bl	800eddc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d102      	bne.n	8004c08 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f006 fcdc 	bl	800b5ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	687e      	ldr	r6, [r7, #4]
 8004c1a:	466d      	mov	r5, sp
 8004c1c:	f106 0410 	add.w	r4, r6, #16
 8004c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c30:	1d33      	adds	r3, r6, #4
 8004c32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c34:	6838      	ldr	r0, [r7, #0]
 8004c36:	f006 fba7 	bl	800b388 <USB_CoreInit>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d005      	beq.n	8004c4c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0d7      	b.n	8004dfc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2100      	movs	r1, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	f006 fcca 	bl	800b5ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	73fb      	strb	r3, [r7, #15]
 8004c5c:	e04a      	b.n	8004cf4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c5e:	7bfa      	ldrb	r2, [r7, #15]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	333d      	adds	r3, #61	; 0x3d
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c72:	7bfa      	ldrb	r2, [r7, #15]
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	333c      	adds	r3, #60	; 0x3c
 8004c82:	7bfa      	ldrb	r2, [r7, #15]
 8004c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c86:	7bfa      	ldrb	r2, [r7, #15]
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	b298      	uxth	r0, r3
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	3356      	adds	r3, #86	; 0x56
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	3340      	adds	r3, #64	; 0x40
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004cb2:	7bfa      	ldrb	r2, [r7, #15]
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	4413      	add	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	3344      	adds	r3, #68	; 0x44
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cc6:	7bfa      	ldrb	r2, [r7, #15]
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3348      	adds	r3, #72	; 0x48
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cda:	7bfa      	ldrb	r2, [r7, #15]
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	334c      	adds	r3, #76	; 0x4c
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	73fb      	strb	r3, [r7, #15]
 8004cf4:	7bfa      	ldrb	r2, [r7, #15]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d3af      	bcc.n	8004c5e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cfe:	2300      	movs	r3, #0
 8004d00:	73fb      	strb	r3, [r7, #15]
 8004d02:	e044      	b.n	8004d8e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d04:	7bfa      	ldrb	r2, [r7, #15]
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d1a:	7bfa      	ldrb	r2, [r7, #15]
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004d2c:	7bfa      	ldrb	r2, [r7, #15]
 8004d2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d30:	7bfa      	ldrb	r2, [r7, #15]
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d46:	7bfa      	ldrb	r2, [r7, #15]
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	4413      	add	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d5c:	7bfa      	ldrb	r2, [r7, #15]
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d72:	7bfa      	ldrb	r2, [r7, #15]
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
 8004d8e:	7bfa      	ldrb	r2, [r7, #15]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d3b5      	bcc.n	8004d04 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	603b      	str	r3, [r7, #0]
 8004d9e:	687e      	ldr	r6, [r7, #4]
 8004da0:	466d      	mov	r5, sp
 8004da2:	f106 0410 	add.w	r4, r6, #16
 8004da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004db2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004db6:	1d33      	adds	r3, r6, #4
 8004db8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dba:	6838      	ldr	r0, [r7, #0]
 8004dbc:	f006 fc62 	bl	800b684 <USB_DevInit>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d005      	beq.n	8004dd2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e014      	b.n	8004dfc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d102      	bne.n	8004df0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f001 f970 	bl	80060d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f007 fca4 	bl	800c742 <USB_DevDisconnect>

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_PCD_Start+0x1c>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e022      	b.n	8004e66 <HAL_PCD_Start+0x62>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d109      	bne.n	8004e48 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d105      	bne.n	8004e48 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f006 fbab 	bl	800b5a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f007 fc52 	bl	800c700 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e6e:	b590      	push	{r4, r7, lr}
 8004e70:	b08d      	sub	sp, #52	; 0x34
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f007 fd10 	bl	800c8aa <USB_GetMode>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f040 84b7 	bne.w	8005800 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f007 fc74 	bl	800c784 <USB_ReadInterrupts>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 84ad 	beq.w	80057fe <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	0a1b      	lsrs	r3, r3, #8
 8004eae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f007 fc61 	bl	800c784 <USB_ReadInterrupts>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d107      	bne.n	8004edc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f002 0202 	and.w	r2, r2, #2
 8004eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f007 fc4f 	bl	800c784 <USB_ReadInterrupts>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d161      	bne.n	8004fb4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0210 	bic.w	r2, r2, #16
 8004efe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	f003 020f 	and.w	r2, r3, #15
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	0c5b      	lsrs	r3, r3, #17
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d124      	bne.n	8004f76 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d035      	beq.n	8004fa4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	091b      	lsrs	r3, r3, #4
 8004f40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	6a38      	ldr	r0, [r7, #32]
 8004f4c:	f007 fa86 	bl	800c45c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	091b      	lsrs	r3, r3, #4
 8004f58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f5c:	441a      	add	r2, r3
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	695a      	ldr	r2, [r3, #20]
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	091b      	lsrs	r3, r3, #4
 8004f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f6e:	441a      	add	r2, r3
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	615a      	str	r2, [r3, #20]
 8004f74:	e016      	b.n	8004fa4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	0c5b      	lsrs	r3, r3, #17
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	2b06      	cmp	r3, #6
 8004f80:	d110      	bne.n	8004fa4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f88:	2208      	movs	r2, #8
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6a38      	ldr	r0, [r7, #32]
 8004f8e:	f007 fa65 	bl	800c45c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	695a      	ldr	r2, [r3, #20]
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f9e:	441a      	add	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0210 	orr.w	r2, r2, #16
 8004fb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f007 fbe3 	bl	800c784 <USB_ReadInterrupts>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fc8:	f040 80a7 	bne.w	800511a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f007 fbe8 	bl	800c7aa <USB_ReadDevAllOutEpInterrupt>
 8004fda:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004fdc:	e099      	b.n	8005112 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 808e 	beq.w	8005106 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f007 fc0c 	bl	800c812 <USB_ReadDevOutEPInterrupt>
 8004ffa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00c      	beq.n	8005020 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005012:	461a      	mov	r2, r3
 8005014:	2301      	movs	r3, #1
 8005016:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fed2 	bl	8005dc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00c      	beq.n	8005044 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005036:	461a      	mov	r2, r3
 8005038:	2308      	movs	r3, #8
 800503a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800503c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 ffa8 	bl	8005f94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b00      	cmp	r3, #0
 800504c:	d008      	beq.n	8005060 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505a:	461a      	mov	r2, r3
 800505c:	2310      	movs	r3, #16
 800505e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d030      	beq.n	80050cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d109      	bne.n	800508a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	69fa      	ldr	r2, [r7, #28]
 8005080:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005084:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005088:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800508a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508c:	4613      	mov	r3, r2
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	4413      	add	r3, r2
 800509c:	3304      	adds	r3, #4
 800509e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	78db      	ldrb	r3, [r3, #3]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d108      	bne.n	80050ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2200      	movs	r2, #0
 80050ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	4619      	mov	r1, r3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f009 ffc7 	bl	800f048 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c6:	461a      	mov	r2, r3
 80050c8:	2302      	movs	r3, #2
 80050ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d008      	beq.n	80050e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	461a      	mov	r2, r3
 80050e4:	2320      	movs	r3, #32
 80050e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fe:	461a      	mov	r2, r3
 8005100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005104:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	3301      	adds	r3, #1
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	085b      	lsrs	r3, r3, #1
 8005110:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	2b00      	cmp	r3, #0
 8005116:	f47f af62 	bne.w	8004fde <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f007 fb30 	bl	800c784 <USB_ReadInterrupts>
 8005124:	4603      	mov	r3, r0
 8005126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800512a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800512e:	f040 80db 	bne.w	80052e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f007 fb51 	bl	800c7de <USB_ReadDevAllInEpInterrupt>
 800513c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005142:	e0cd      	b.n	80052e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 80c2 	beq.w	80052d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	4611      	mov	r1, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f007 fb77 	bl	800c84e <USB_ReadDevInEPInterrupt>
 8005160:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d057      	beq.n	800521c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	2201      	movs	r2, #1
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	43db      	mvns	r3, r3
 8005186:	69f9      	ldr	r1, [r7, #28]
 8005188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800518c:	4013      	ands	r3, r2
 800518e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519c:	461a      	mov	r2, r3
 800519e:	2301      	movs	r3, #1
 80051a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d132      	bne.n	8005210 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ae:	4613      	mov	r3, r2
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	3348      	adds	r3, #72	; 0x48
 80051ba:	6819      	ldr	r1, [r3, #0]
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c0:	4613      	mov	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4403      	add	r3, r0
 80051ca:	3344      	adds	r3, #68	; 0x44
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4419      	add	r1, r3
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d4:	4613      	mov	r3, r2
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4403      	add	r3, r0
 80051de:	3348      	adds	r3, #72	; 0x48
 80051e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d113      	bne.n	8005210 <HAL_PCD_IRQHandler+0x3a2>
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ec:	4613      	mov	r3, r2
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	334c      	adds	r3, #76	; 0x4c
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d108      	bne.n	8005210 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005208:	461a      	mov	r2, r3
 800520a:	2101      	movs	r1, #1
 800520c:	f007 fb80 	bl	800c910 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	b2db      	uxtb	r3, r3
 8005214:	4619      	mov	r1, r3
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f009 fe91 	bl	800ef3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d008      	beq.n	8005238 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005232:	461a      	mov	r2, r3
 8005234:	2308      	movs	r3, #8
 8005236:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b00      	cmp	r3, #0
 8005240:	d008      	beq.n	8005254 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524e:	461a      	mov	r2, r3
 8005250:	2310      	movs	r3, #16
 8005252:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	461a      	mov	r2, r3
 800526c:	2340      	movs	r3, #64	; 0x40
 800526e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d023      	beq.n	80052c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800527a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800527c:	6a38      	ldr	r0, [r7, #32]
 800527e:	f006 fb5f 	bl	800b940 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005284:	4613      	mov	r3, r2
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	4413      	add	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	3338      	adds	r3, #56	; 0x38
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4413      	add	r3, r2
 8005292:	3304      	adds	r3, #4
 8005294:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	78db      	ldrb	r3, [r3, #3]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d108      	bne.n	80052b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2200      	movs	r2, #0
 80052a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	4619      	mov	r1, r3
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f009 fede 	bl	800f06c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052bc:	461a      	mov	r2, r3
 80052be:	2302      	movs	r3, #2
 80052c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80052cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fcea 	bl	8005ca8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	3301      	adds	r3, #1
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f47f af2e 	bne.w	8005144 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f007 fa49 	bl	800c784 <USB_ReadInterrupts>
 80052f2:	4603      	mov	r3, r0
 80052f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052fc:	d122      	bne.n	8005344 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005318:	2b01      	cmp	r3, #1
 800531a:	d108      	bne.n	800532e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005324:	2100      	movs	r1, #0
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fef6 	bl	8006118 <HAL_PCDEx_LPM_Callback>
 800532c:	e002      	b.n	8005334 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f009 fe7c 	bl	800f02c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695a      	ldr	r2, [r3, #20]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005342:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	f007 fa1b 	bl	800c784 <USB_ReadInterrupts>
 800534e:	4603      	mov	r3, r0
 8005350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005358:	d112      	bne.n	8005380 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b01      	cmp	r3, #1
 8005368:	d102      	bne.n	8005370 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f009 fe38 	bl	800efe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695a      	ldr	r2, [r3, #20]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800537e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f007 f9fd 	bl	800c784 <USB_ReadInterrupts>
 800538a:	4603      	mov	r3, r0
 800538c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005394:	d121      	bne.n	80053da <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695a      	ldr	r2, [r3, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80053a4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d111      	bne.n	80053d4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	089b      	lsrs	r3, r3, #2
 80053c0:	f003 020f 	and.w	r2, r3, #15
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80053ca:	2101      	movs	r1, #1
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fea3 	bl	8006118 <HAL_PCDEx_LPM_Callback>
 80053d2:	e002      	b.n	80053da <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f009 fe03 	bl	800efe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f007 f9d0 	bl	800c784 <USB_ReadInterrupts>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ee:	f040 80b7 	bne.w	8005560 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005400:	f023 0301 	bic.w	r3, r3, #1
 8005404:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2110      	movs	r1, #16
 800540c:	4618      	mov	r0, r3
 800540e:	f006 fa97 	bl	800b940 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005412:	2300      	movs	r3, #0
 8005414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005416:	e046      	b.n	80054a6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005424:	461a      	mov	r2, r3
 8005426:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800542a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800542c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800543c:	0151      	lsls	r1, r2, #5
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	440a      	add	r2, r1
 8005442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005446:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800544a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	461a      	mov	r2, r3
 800545a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800545e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800547a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800547e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	440a      	add	r2, r1
 8005496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800549a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800549e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a2:	3301      	adds	r3, #1
 80054a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d3b3      	bcc.n	8005418 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80054c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d016      	beq.n	80054fa <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054dc:	f043 030b 	orr.w	r3, r3, #11
 80054e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ec:	69fa      	ldr	r2, [r7, #28]
 80054ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054f2:	f043 030b 	orr.w	r3, r3, #11
 80054f6:	6453      	str	r3, [r2, #68]	; 0x44
 80054f8:	e015      	b.n	8005526 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005500:	695a      	ldr	r2, [r3, #20]
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005508:	4619      	mov	r1, r3
 800550a:	f242 032b 	movw	r3, #8235	; 0x202b
 800550e:	4313      	orrs	r3, r2
 8005510:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005520:	f043 030b 	orr.w	r3, r3, #11
 8005524:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005534:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005538:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800554a:	461a      	mov	r2, r3
 800554c:	f007 f9e0 	bl	800c910 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695a      	ldr	r2, [r3, #20]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800555e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4618      	mov	r0, r3
 8005566:	f007 f90d 	bl	800c784 <USB_ReadInterrupts>
 800556a:	4603      	mov	r3, r0
 800556c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005574:	d124      	bne.n	80055c0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f007 f9a4 	bl	800c8c8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f006 fa58 	bl	800ba3a <USB_GetDevSpeed>
 800558a:	4603      	mov	r3, r0
 800558c:	461a      	mov	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681c      	ldr	r4, [r3, #0]
 8005596:	f001 fd9f 	bl	80070d8 <HAL_RCC_GetHCLKFreq>
 800559a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	4620      	mov	r0, r4
 80055a6:	f005 ff5d 	bl	800b464 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f009 fcef 	bl	800ef8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695a      	ldr	r2, [r3, #20]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80055be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f007 f8dd 	bl	800c784 <USB_ReadInterrupts>
 80055ca:	4603      	mov	r3, r0
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d10a      	bne.n	80055ea <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f009 fccc 	bl	800ef72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f002 0208 	and.w	r2, r2, #8
 80055e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f007 f8c8 	bl	800c784 <USB_ReadInterrupts>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fa:	2b80      	cmp	r3, #128	; 0x80
 80055fc:	d122      	bne.n	8005644 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800560a:	2301      	movs	r3, #1
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
 800560e:	e014      	b.n	800563a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005614:	4613      	mov	r3, r2
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	4413      	add	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d105      	bne.n	8005634 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	b2db      	uxtb	r3, r3
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fb09 	bl	8005c46 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	3301      	adds	r3, #1
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005640:	429a      	cmp	r2, r3
 8005642:	d3e5      	bcc.n	8005610 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f007 f89b 	bl	800c784 <USB_ReadInterrupts>
 800564e:	4603      	mov	r3, r0
 8005650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005658:	d13b      	bne.n	80056d2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800565a:	2301      	movs	r3, #1
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
 800565e:	e02b      	b.n	80056b8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005674:	4613      	mov	r3, r2
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	3340      	adds	r3, #64	; 0x40
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d115      	bne.n	80056b2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005686:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005688:	2b00      	cmp	r3, #0
 800568a:	da12      	bge.n	80056b2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	333f      	adds	r3, #63	; 0x3f
 800569c:	2201      	movs	r2, #1
 800569e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 faca 	bl	8005c46 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	3301      	adds	r3, #1
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056be:	429a      	cmp	r2, r3
 80056c0:	d3ce      	bcc.n	8005660 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695a      	ldr	r2, [r3, #20]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80056d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f007 f854 	bl	800c784 <USB_ReadInterrupts>
 80056dc:	4603      	mov	r3, r0
 80056de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056e6:	d155      	bne.n	8005794 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056e8:	2301      	movs	r3, #1
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
 80056ec:	e045      	b.n	800577a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005702:	4613      	mov	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d12e      	bne.n	8005774 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005716:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005718:	2b00      	cmp	r3, #0
 800571a:	da2b      	bge.n	8005774 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005728:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800572c:	429a      	cmp	r2, r3
 800572e:	d121      	bne.n	8005774 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005734:	4613      	mov	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005742:	2201      	movs	r2, #1
 8005744:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800576c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005770:	6053      	str	r3, [r2, #4]
            break;
 8005772:	e007      	b.n	8005784 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	3301      	adds	r3, #1
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005780:	429a      	cmp	r2, r3
 8005782:	d3b4      	bcc.n	80056ee <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695a      	ldr	r2, [r3, #20]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005792:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f006 fff3 	bl	800c784 <USB_ReadInterrupts>
 800579e:	4603      	mov	r3, r0
 80057a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a8:	d10a      	bne.n	80057c0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f009 fc70 	bl	800f090 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695a      	ldr	r2, [r3, #20]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80057be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f006 ffdd 	bl	800c784 <USB_ReadInterrupts>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d115      	bne.n	8005800 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f009 fc60 	bl	800f0ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6859      	ldr	r1, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
 80057fc:	e000      	b.n	8005800 <HAL_PCD_IRQHandler+0x992>
      return;
 80057fe:	bf00      	nop
    }
  }
}
 8005800:	3734      	adds	r7, #52	; 0x34
 8005802:	46bd      	mov	sp, r7
 8005804:	bd90      	pop	{r4, r7, pc}

08005806 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b082      	sub	sp, #8
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	460b      	mov	r3, r1
 8005810:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_PCD_SetAddress+0x1a>
 800581c:	2302      	movs	r3, #2
 800581e:	e013      	b.n	8005848 <HAL_PCD_SetAddress+0x42>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	78fa      	ldrb	r2, [r7, #3]
 800582c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	78fa      	ldrb	r2, [r7, #3]
 8005836:	4611      	mov	r1, r2
 8005838:	4618      	mov	r0, r3
 800583a:	f006 ff3b 	bl	800c6b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	4608      	mov	r0, r1
 800585a:	4611      	mov	r1, r2
 800585c:	461a      	mov	r2, r3
 800585e:	4603      	mov	r3, r0
 8005860:	70fb      	strb	r3, [r7, #3]
 8005862:	460b      	mov	r3, r1
 8005864:	803b      	strh	r3, [r7, #0]
 8005866:	4613      	mov	r3, r2
 8005868:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800586e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005872:	2b00      	cmp	r3, #0
 8005874:	da0f      	bge.n	8005896 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005876:	78fb      	ldrb	r3, [r7, #3]
 8005878:	f003 020f 	and.w	r2, r3, #15
 800587c:	4613      	mov	r3, r2
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	4413      	add	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	3338      	adds	r3, #56	; 0x38
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	4413      	add	r3, r2
 800588a:	3304      	adds	r3, #4
 800588c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2201      	movs	r2, #1
 8005892:	705a      	strb	r2, [r3, #1]
 8005894:	e00f      	b.n	80058b6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	f003 020f 	and.w	r2, r3, #15
 800589c:	4613      	mov	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	4413      	add	r3, r2
 80058ac:	3304      	adds	r3, #4
 80058ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80058b6:	78fb      	ldrb	r3, [r7, #3]
 80058b8:	f003 030f 	and.w	r3, r3, #15
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80058c2:	883a      	ldrh	r2, [r7, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	78ba      	ldrb	r2, [r7, #2]
 80058cc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d004      	beq.n	80058e0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80058e0:	78bb      	ldrb	r3, [r7, #2]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d102      	bne.n	80058ec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_PCD_EP_Open+0xaa>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e00e      	b.n	8005918 <HAL_PCD_EP_Open+0xc8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68f9      	ldr	r1, [r7, #12]
 8005908:	4618      	mov	r0, r3
 800590a:	f006 f8bb 	bl	800ba84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005916:	7afb      	ldrb	r3, [r7, #11]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800592c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005930:	2b00      	cmp	r3, #0
 8005932:	da0f      	bge.n	8005954 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	f003 020f 	and.w	r2, r3, #15
 800593a:	4613      	mov	r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	4413      	add	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	3338      	adds	r3, #56	; 0x38
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	4413      	add	r3, r2
 8005948:	3304      	adds	r3, #4
 800594a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	705a      	strb	r2, [r3, #1]
 8005952:	e00f      	b.n	8005974 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	f003 020f 	and.w	r2, r3, #15
 800595a:	4613      	mov	r3, r2
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4413      	add	r3, r2
 800596a:	3304      	adds	r3, #4
 800596c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	b2da      	uxtb	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_PCD_EP_Close+0x6e>
 800598a:	2302      	movs	r3, #2
 800598c:	e00e      	b.n	80059ac <HAL_PCD_EP_Close+0x8c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68f9      	ldr	r1, [r7, #12]
 800599c:	4618      	mov	r0, r3
 800599e:	f006 f8f9 	bl	800bb94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	607a      	str	r2, [r7, #4]
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	460b      	mov	r3, r1
 80059c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059c4:	7afb      	ldrb	r3, [r7, #11]
 80059c6:	f003 020f 	and.w	r2, r3, #15
 80059ca:	4613      	mov	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4413      	add	r3, r2
 80059da:	3304      	adds	r3, #4
 80059dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2200      	movs	r2, #0
 80059ee:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2200      	movs	r2, #0
 80059f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059f6:	7afb      	ldrb	r3, [r7, #11]
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d102      	bne.n	8005a10 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	6979      	ldr	r1, [r7, #20]
 8005a1e:	f006 f995 	bl	800bd4c <USB_EPStartXfer>

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	f003 020f 	and.w	r2, r3, #15
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8005a4e:	681b      	ldr	r3, [r3, #0]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	607a      	str	r2, [r7, #4]
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a6c:	7afb      	ldrb	r3, [r7, #11]
 8005a6e:	f003 020f 	and.w	r2, r3, #15
 8005a72:	4613      	mov	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	3338      	adds	r3, #56	; 0x38
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	3304      	adds	r3, #4
 8005a82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2200      	movs	r2, #0
 8005a94:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a9c:	7afb      	ldrb	r3, [r7, #11]
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d102      	bne.n	8005ab6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6979      	ldr	r1, [r7, #20]
 8005ac4:	f006 f942 	bl	800bd4c <USB_EPStartXfer>

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	460b      	mov	r3, r1
 8005adc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	f003 020f 	and.w	r2, r3, #15
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d901      	bls.n	8005af0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e050      	b.n	8005b92 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	da0f      	bge.n	8005b18 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005af8:	78fb      	ldrb	r3, [r7, #3]
 8005afa:	f003 020f 	and.w	r2, r3, #15
 8005afe:	4613      	mov	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	3338      	adds	r3, #56	; 0x38
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	705a      	strb	r2, [r3, #1]
 8005b16:	e00d      	b.n	8005b34 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b18:	78fa      	ldrb	r2, [r7, #3]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4413      	add	r3, r2
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_PCD_EP_SetStall+0x82>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e01e      	b.n	8005b92 <HAL_PCD_EP_SetStall+0xc0>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68f9      	ldr	r1, [r7, #12]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f006 fcd2 	bl	800c50c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b68:	78fb      	ldrb	r3, [r7, #3]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	b2d9      	uxtb	r1, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b82:	461a      	mov	r2, r3
 8005b84:	f006 fec4 	bl	800c910 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ba6:	78fb      	ldrb	r3, [r7, #3]
 8005ba8:	f003 020f 	and.w	r2, r3, #15
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d901      	bls.n	8005bb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e042      	b.n	8005c3e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	da0f      	bge.n	8005be0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	f003 020f 	and.w	r2, r3, #15
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	3338      	adds	r3, #56	; 0x38
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	705a      	strb	r2, [r3, #1]
 8005bde:	e00f      	b.n	8005c00 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	f003 020f 	and.w	r2, r3, #15
 8005be6:	4613      	mov	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	f003 030f 	and.w	r3, r3, #15
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_PCD_EP_ClrStall+0x86>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e00e      	b.n	8005c3e <HAL_PCD_EP_ClrStall+0xa4>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68f9      	ldr	r1, [r7, #12]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f006 fcda 	bl	800c5e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	460b      	mov	r3, r1
 8005c50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005c52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	da0c      	bge.n	8005c74 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	f003 020f 	and.w	r2, r3, #15
 8005c60:	4613      	mov	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	4413      	add	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	3338      	adds	r3, #56	; 0x38
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3304      	adds	r3, #4
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	e00c      	b.n	8005c8e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	f003 020f 	and.w	r2, r3, #15
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	4413      	add	r3, r2
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68f9      	ldr	r1, [r7, #12]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f006 faf9 	bl	800c28c <USB_EPStopXfer>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005c9e:	7afb      	ldrb	r3, [r7, #11]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08a      	sub	sp, #40	; 0x28
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	3338      	adds	r3, #56	; 0x38
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	4413      	add	r3, r2
 8005ccc:	3304      	adds	r3, #4
 8005cce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	695a      	ldr	r2, [r3, #20]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d901      	bls.n	8005ce0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e06c      	b.n	8005dba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d902      	bls.n	8005cfc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	3303      	adds	r3, #3
 8005d00:	089b      	lsrs	r3, r3, #2
 8005d02:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d04:	e02b      	b.n	8005d5e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d902      	bls.n	8005d22 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	3303      	adds	r3, #3
 8005d26:	089b      	lsrs	r3, r3, #2
 8005d28:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	68d9      	ldr	r1, [r3, #12]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	4603      	mov	r3, r0
 8005d40:	6978      	ldr	r0, [r7, #20]
 8005d42:	f006 fb4d 	bl	800c3e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	441a      	add	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	441a      	add	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d809      	bhi.n	8005d88 <PCD_WriteEmptyTxFifo+0xe0>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	695a      	ldr	r2, [r3, #20]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d203      	bcs.n	8005d88 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1be      	bne.n	8005d06 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	691a      	ldr	r2, [r3, #16]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d811      	bhi.n	8005db8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	43db      	mvns	r3, r3
 8005dae:	6939      	ldr	r1, [r7, #16]
 8005db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005db4:	4013      	ands	r3, r2
 8005db6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	333c      	adds	r3, #60	; 0x3c
 8005ddc:	3304      	adds	r3, #4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d17b      	bne.n	8005ef2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d015      	beq.n	8005e30 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	4a61      	ldr	r2, [pc, #388]	; (8005f8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	f240 80b9 	bls.w	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 80b3 	beq.w	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e26:	461a      	mov	r2, r3
 8005e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e2c:	6093      	str	r3, [r2, #8]
 8005e2e:	e0a7      	b.n	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d009      	beq.n	8005e4e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	461a      	mov	r2, r3
 8005e48:	2320      	movs	r3, #32
 8005e4a:	6093      	str	r3, [r2, #8]
 8005e4c:	e098      	b.n	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f040 8093 	bne.w	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	4a4b      	ldr	r2, [pc, #300]	; (8005f8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d90f      	bls.n	8005e82 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e7e:	6093      	str	r3, [r2, #8]
 8005e80:	e07e      	b.n	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	4613      	mov	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	4413      	add	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4413      	add	r3, r2
 8005e94:	3304      	adds	r3, #4
 8005e96:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a1a      	ldr	r2, [r3, #32]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	0159      	lsls	r1, r3, #5
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	440b      	add	r3, r1
 8005ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d114      	bne.n	8005ee4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ecc:	461a      	mov	r2, r3
 8005ece:	2101      	movs	r1, #1
 8005ed0:	f006 fd1e 	bl	800c910 <USB_EP0_OutStart>
 8005ed4:	e006      	b.n	8005ee4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	441a      	add	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f009 f80c 	bl	800ef08 <HAL_PCD_DataOutStageCallback>
 8005ef0:	e046      	b.n	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	4a26      	ldr	r2, [pc, #152]	; (8005f90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d124      	bne.n	8005f44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f10:	461a      	mov	r2, r3
 8005f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f16:	6093      	str	r3, [r2, #8]
 8005f18:	e032      	b.n	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d008      	beq.n	8005f36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f30:	461a      	mov	r2, r3
 8005f32:	2320      	movs	r3, #32
 8005f34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f008 ffe3 	bl	800ef08 <HAL_PCD_DataOutStageCallback>
 8005f42:	e01d      	b.n	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d114      	bne.n	8005f74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d108      	bne.n	8005f74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	2100      	movs	r1, #0
 8005f70:	f006 fcce 	bl	800c910 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f008 ffc4 	bl	800ef08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3720      	adds	r7, #32
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	4f54300a 	.word	0x4f54300a
 8005f90:	4f54310a 	.word	0x4f54310a

08005f94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	333c      	adds	r3, #60	; 0x3c
 8005fac:	3304      	adds	r3, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4a15      	ldr	r2, [pc, #84]	; (800601c <PCD_EP_OutSetupPacket_int+0x88>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d90e      	bls.n	8005fe8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d009      	beq.n	8005fe8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fe6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f008 ff7b 	bl	800eee4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4a0a      	ldr	r2, [pc, #40]	; (800601c <PCD_EP_OutSetupPacket_int+0x88>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d90c      	bls.n	8006010 <PCD_EP_OutSetupPacket_int+0x7c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d108      	bne.n	8006010 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006008:	461a      	mov	r2, r3
 800600a:	2101      	movs	r1, #1
 800600c:	f006 fc80 	bl	800c910 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	4f54300a 	.word	0x4f54300a

08006020 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	70fb      	strb	r3, [r7, #3]
 800602c:	4613      	mov	r3, r2
 800602e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d107      	bne.n	800604e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800603e:	883b      	ldrh	r3, [r7, #0]
 8006040:	0419      	lsls	r1, r3, #16
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	430a      	orrs	r2, r1
 800604a:	629a      	str	r2, [r3, #40]	; 0x28
 800604c:	e028      	b.n	80060a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	0c1b      	lsrs	r3, r3, #16
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	4413      	add	r3, r2
 800605a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800605c:	2300      	movs	r3, #0
 800605e:	73fb      	strb	r3, [r7, #15]
 8006060:	e00d      	b.n	800607e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	3340      	adds	r3, #64	; 0x40
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	0c1b      	lsrs	r3, r3, #16
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	4413      	add	r3, r2
 8006076:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	3301      	adds	r3, #1
 800607c:	73fb      	strb	r3, [r7, #15]
 800607e:	7bfa      	ldrb	r2, [r7, #15]
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	3b01      	subs	r3, #1
 8006084:	429a      	cmp	r2, r3
 8006086:	d3ec      	bcc.n	8006062 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006088:	883b      	ldrh	r3, [r7, #0]
 800608a:	0418      	lsls	r0, r3, #16
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6819      	ldr	r1, [r3, #0]
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	3b01      	subs	r3, #1
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	4302      	orrs	r2, r0
 8006098:	3340      	adds	r3, #64	; 0x40
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	440b      	add	r3, r1
 800609e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	460b      	mov	r3, r1
 80060b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	887a      	ldrh	r2, [r7, #2]
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_PCDEx_ActivateLPM+0x44>)
 8006100:	4313      	orrs	r3, r2
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	10000003 	.word	0x10000003

08006118 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006138:	4b19      	ldr	r3, [pc, #100]	; (80061a0 <HAL_PWREx_ConfigSupply+0x70>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b04      	cmp	r3, #4
 8006142:	d00a      	beq.n	800615a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006144:	4b16      	ldr	r3, [pc, #88]	; (80061a0 <HAL_PWREx_ConfigSupply+0x70>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	429a      	cmp	r2, r3
 8006150:	d001      	beq.n	8006156 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e01f      	b.n	8006196 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	e01d      	b.n	8006196 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800615a:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <HAL_PWREx_ConfigSupply+0x70>)
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f023 0207 	bic.w	r2, r3, #7
 8006162:	490f      	ldr	r1, [pc, #60]	; (80061a0 <HAL_PWREx_ConfigSupply+0x70>)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4313      	orrs	r3, r2
 8006168:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800616a:	f7fd f915 	bl	8003398 <HAL_GetTick>
 800616e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006170:	e009      	b.n	8006186 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006172:	f7fd f911 	bl	8003398 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006180:	d901      	bls.n	8006186 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e007      	b.n	8006196 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006186:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <HAL_PWREx_ConfigSupply+0x70>)
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800618e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006192:	d1ee      	bne.n	8006172 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	58024800 	.word	0x58024800

080061a4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80061a8:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	4a04      	ldr	r2, [pc, #16]	; (80061c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80061ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061b2:	60d3      	str	r3, [r2, #12]
}
 80061b4:	bf00      	nop
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	58024800 	.word	0x58024800

080061c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08c      	sub	sp, #48	; 0x30
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d102      	bne.n	80061d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	f000 bc48 	b.w	8006a68 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8088 	beq.w	80062f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061e6:	4b99      	ldr	r3, [pc, #612]	; (800644c <HAL_RCC_OscConfig+0x288>)
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061f0:	4b96      	ldr	r3, [pc, #600]	; (800644c <HAL_RCC_OscConfig+0x288>)
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	2b10      	cmp	r3, #16
 80061fa:	d007      	beq.n	800620c <HAL_RCC_OscConfig+0x48>
 80061fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fe:	2b18      	cmp	r3, #24
 8006200:	d111      	bne.n	8006226 <HAL_RCC_OscConfig+0x62>
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	f003 0303 	and.w	r3, r3, #3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d10c      	bne.n	8006226 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800620c:	4b8f      	ldr	r3, [pc, #572]	; (800644c <HAL_RCC_OscConfig+0x288>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d06d      	beq.n	80062f4 <HAL_RCC_OscConfig+0x130>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d169      	bne.n	80062f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	f000 bc21 	b.w	8006a68 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622e:	d106      	bne.n	800623e <HAL_RCC_OscConfig+0x7a>
 8006230:	4b86      	ldr	r3, [pc, #536]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a85      	ldr	r2, [pc, #532]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	e02e      	b.n	800629c <HAL_RCC_OscConfig+0xd8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10c      	bne.n	8006260 <HAL_RCC_OscConfig+0x9c>
 8006246:	4b81      	ldr	r3, [pc, #516]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a80      	ldr	r2, [pc, #512]	; (800644c <HAL_RCC_OscConfig+0x288>)
 800624c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	4b7e      	ldr	r3, [pc, #504]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a7d      	ldr	r2, [pc, #500]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006258:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	e01d      	b.n	800629c <HAL_RCC_OscConfig+0xd8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006268:	d10c      	bne.n	8006284 <HAL_RCC_OscConfig+0xc0>
 800626a:	4b78      	ldr	r3, [pc, #480]	; (800644c <HAL_RCC_OscConfig+0x288>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a77      	ldr	r2, [pc, #476]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	4b75      	ldr	r3, [pc, #468]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a74      	ldr	r2, [pc, #464]	; (800644c <HAL_RCC_OscConfig+0x288>)
 800627c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	e00b      	b.n	800629c <HAL_RCC_OscConfig+0xd8>
 8006284:	4b71      	ldr	r3, [pc, #452]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a70      	ldr	r2, [pc, #448]	; (800644c <HAL_RCC_OscConfig+0x288>)
 800628a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	4b6e      	ldr	r3, [pc, #440]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a6d      	ldr	r2, [pc, #436]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800629a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d013      	beq.n	80062cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a4:	f7fd f878 	bl	8003398 <HAL_GetTick>
 80062a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062ac:	f7fd f874 	bl	8003398 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b64      	cmp	r3, #100	; 0x64
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e3d4      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062be:	4b63      	ldr	r3, [pc, #396]	; (800644c <HAL_RCC_OscConfig+0x288>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0f0      	beq.n	80062ac <HAL_RCC_OscConfig+0xe8>
 80062ca:	e014      	b.n	80062f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062cc:	f7fd f864 	bl	8003398 <HAL_GetTick>
 80062d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062d4:	f7fd f860 	bl	8003398 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b64      	cmp	r3, #100	; 0x64
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e3c0      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062e6:	4b59      	ldr	r3, [pc, #356]	; (800644c <HAL_RCC_OscConfig+0x288>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f0      	bne.n	80062d4 <HAL_RCC_OscConfig+0x110>
 80062f2:	e000      	b.n	80062f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 80ca 	beq.w	8006498 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006304:	4b51      	ldr	r3, [pc, #324]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800630c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800630e:	4b4f      	ldr	r3, [pc, #316]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <HAL_RCC_OscConfig+0x166>
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	2b18      	cmp	r3, #24
 800631e:	d156      	bne.n	80063ce <HAL_RCC_OscConfig+0x20a>
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	f003 0303 	and.w	r3, r3, #3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d151      	bne.n	80063ce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800632a:	4b48      	ldr	r3, [pc, #288]	; (800644c <HAL_RCC_OscConfig+0x288>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0304 	and.w	r3, r3, #4
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <HAL_RCC_OscConfig+0x17e>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e392      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006342:	4b42      	ldr	r3, [pc, #264]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f023 0219 	bic.w	r2, r3, #25
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	493f      	ldr	r1, [pc, #252]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006350:	4313      	orrs	r3, r2
 8006352:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006354:	f7fd f820 	bl	8003398 <HAL_GetTick>
 8006358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800635c:	f7fd f81c 	bl	8003398 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e37c      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800636e:	4b37      	ldr	r3, [pc, #220]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0f0      	beq.n	800635c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800637a:	f7fd f83d 	bl	80033f8 <HAL_GetREVID>
 800637e:	4603      	mov	r3, r0
 8006380:	f241 0203 	movw	r2, #4099	; 0x1003
 8006384:	4293      	cmp	r3, r2
 8006386:	d817      	bhi.n	80063b8 <HAL_RCC_OscConfig+0x1f4>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	d108      	bne.n	80063a2 <HAL_RCC_OscConfig+0x1de>
 8006390:	4b2e      	ldr	r3, [pc, #184]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006398:	4a2c      	ldr	r2, [pc, #176]	; (800644c <HAL_RCC_OscConfig+0x288>)
 800639a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800639e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063a0:	e07a      	b.n	8006498 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a2:	4b2a      	ldr	r3, [pc, #168]	; (800644c <HAL_RCC_OscConfig+0x288>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	031b      	lsls	r3, r3, #12
 80063b0:	4926      	ldr	r1, [pc, #152]	; (800644c <HAL_RCC_OscConfig+0x288>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063b6:	e06f      	b.n	8006498 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b8:	4b24      	ldr	r3, [pc, #144]	; (800644c <HAL_RCC_OscConfig+0x288>)
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	061b      	lsls	r3, r3, #24
 80063c6:	4921      	ldr	r1, [pc, #132]	; (800644c <HAL_RCC_OscConfig+0x288>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063cc:	e064      	b.n	8006498 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d047      	beq.n	8006466 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80063d6:	4b1d      	ldr	r3, [pc, #116]	; (800644c <HAL_RCC_OscConfig+0x288>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f023 0219 	bic.w	r2, r3, #25
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	491a      	ldr	r1, [pc, #104]	; (800644c <HAL_RCC_OscConfig+0x288>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e8:	f7fc ffd6 	bl	8003398 <HAL_GetTick>
 80063ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063f0:	f7fc ffd2 	bl	8003398 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e332      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006402:	4b12      	ldr	r3, [pc, #72]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0304 	and.w	r3, r3, #4
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0f0      	beq.n	80063f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800640e:	f7fc fff3 	bl	80033f8 <HAL_GetREVID>
 8006412:	4603      	mov	r3, r0
 8006414:	f241 0203 	movw	r2, #4099	; 0x1003
 8006418:	4293      	cmp	r3, r2
 800641a:	d819      	bhi.n	8006450 <HAL_RCC_OscConfig+0x28c>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d108      	bne.n	8006436 <HAL_RCC_OscConfig+0x272>
 8006424:	4b09      	ldr	r3, [pc, #36]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800642c:	4a07      	ldr	r2, [pc, #28]	; (800644c <HAL_RCC_OscConfig+0x288>)
 800642e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006432:	6053      	str	r3, [r2, #4]
 8006434:	e030      	b.n	8006498 <HAL_RCC_OscConfig+0x2d4>
 8006436:	4b05      	ldr	r3, [pc, #20]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	031b      	lsls	r3, r3, #12
 8006444:	4901      	ldr	r1, [pc, #4]	; (800644c <HAL_RCC_OscConfig+0x288>)
 8006446:	4313      	orrs	r3, r2
 8006448:	604b      	str	r3, [r1, #4]
 800644a:	e025      	b.n	8006498 <HAL_RCC_OscConfig+0x2d4>
 800644c:	58024400 	.word	0x58024400
 8006450:	4b9a      	ldr	r3, [pc, #616]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	061b      	lsls	r3, r3, #24
 800645e:	4997      	ldr	r1, [pc, #604]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006460:	4313      	orrs	r3, r2
 8006462:	604b      	str	r3, [r1, #4]
 8006464:	e018      	b.n	8006498 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006466:	4b95      	ldr	r3, [pc, #596]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a94      	ldr	r2, [pc, #592]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006472:	f7fc ff91 	bl	8003398 <HAL_GetTick>
 8006476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800647a:	f7fc ff8d 	bl	8003398 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e2ed      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800648c:	4b8b      	ldr	r3, [pc, #556]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1f0      	bne.n	800647a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0310 	and.w	r3, r3, #16
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80a9 	beq.w	80065f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064a6:	4b85      	ldr	r3, [pc, #532]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064b0:	4b82      	ldr	r3, [pc, #520]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 80064b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d007      	beq.n	80064cc <HAL_RCC_OscConfig+0x308>
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	2b18      	cmp	r3, #24
 80064c0:	d13a      	bne.n	8006538 <HAL_RCC_OscConfig+0x374>
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f003 0303 	and.w	r3, r3, #3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d135      	bne.n	8006538 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064cc:	4b7b      	ldr	r3, [pc, #492]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <HAL_RCC_OscConfig+0x320>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	2b80      	cmp	r3, #128	; 0x80
 80064de:	d001      	beq.n	80064e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e2c1      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064e4:	f7fc ff88 	bl	80033f8 <HAL_GetREVID>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d817      	bhi.n	8006522 <HAL_RCC_OscConfig+0x35e>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	d108      	bne.n	800650c <HAL_RCC_OscConfig+0x348>
 80064fa:	4b70      	ldr	r3, [pc, #448]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006502:	4a6e      	ldr	r2, [pc, #440]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006508:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800650a:	e075      	b.n	80065f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800650c:	4b6b      	ldr	r3, [pc, #428]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	069b      	lsls	r3, r3, #26
 800651a:	4968      	ldr	r1, [pc, #416]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 800651c:	4313      	orrs	r3, r2
 800651e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006520:	e06a      	b.n	80065f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006522:	4b66      	ldr	r3, [pc, #408]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	061b      	lsls	r3, r3, #24
 8006530:	4962      	ldr	r1, [pc, #392]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006532:	4313      	orrs	r3, r2
 8006534:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006536:	e05f      	b.n	80065f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d042      	beq.n	80065c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006540:	4b5e      	ldr	r3, [pc, #376]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a5d      	ldr	r2, [pc, #372]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800654a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654c:	f7fc ff24 	bl	8003398 <HAL_GetTick>
 8006550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006552:	e008      	b.n	8006566 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006554:	f7fc ff20 	bl	8003398 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b02      	cmp	r3, #2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e280      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006566:	4b55      	ldr	r3, [pc, #340]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0f0      	beq.n	8006554 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006572:	f7fc ff41 	bl	80033f8 <HAL_GetREVID>
 8006576:	4603      	mov	r3, r0
 8006578:	f241 0203 	movw	r2, #4099	; 0x1003
 800657c:	4293      	cmp	r3, r2
 800657e:	d817      	bhi.n	80065b0 <HAL_RCC_OscConfig+0x3ec>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	2b20      	cmp	r3, #32
 8006586:	d108      	bne.n	800659a <HAL_RCC_OscConfig+0x3d6>
 8006588:	4b4c      	ldr	r3, [pc, #304]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006590:	4a4a      	ldr	r2, [pc, #296]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006592:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006596:	6053      	str	r3, [r2, #4]
 8006598:	e02e      	b.n	80065f8 <HAL_RCC_OscConfig+0x434>
 800659a:	4b48      	ldr	r3, [pc, #288]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	069b      	lsls	r3, r3, #26
 80065a8:	4944      	ldr	r1, [pc, #272]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	604b      	str	r3, [r1, #4]
 80065ae:	e023      	b.n	80065f8 <HAL_RCC_OscConfig+0x434>
 80065b0:	4b42      	ldr	r3, [pc, #264]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	061b      	lsls	r3, r3, #24
 80065be:	493f      	ldr	r1, [pc, #252]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60cb      	str	r3, [r1, #12]
 80065c4:	e018      	b.n	80065f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80065c6:	4b3d      	ldr	r3, [pc, #244]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a3c      	ldr	r2, [pc, #240]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 80065cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d2:	f7fc fee1 	bl	8003398 <HAL_GetTick>
 80065d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80065da:	f7fc fedd 	bl	8003398 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e23d      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80065ec:	4b33      	ldr	r3, [pc, #204]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1f0      	bne.n	80065da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b00      	cmp	r3, #0
 8006602:	d036      	beq.n	8006672 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d019      	beq.n	8006640 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800660c:	4b2b      	ldr	r3, [pc, #172]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 800660e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006610:	4a2a      	ldr	r2, [pc, #168]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006612:	f043 0301 	orr.w	r3, r3, #1
 8006616:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006618:	f7fc febe 	bl	8003398 <HAL_GetTick>
 800661c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006620:	f7fc feba 	bl	8003398 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e21a      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006632:	4b22      	ldr	r3, [pc, #136]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0f0      	beq.n	8006620 <HAL_RCC_OscConfig+0x45c>
 800663e:	e018      	b.n	8006672 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006640:	4b1e      	ldr	r3, [pc, #120]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006644:	4a1d      	ldr	r2, [pc, #116]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664c:	f7fc fea4 	bl	8003398 <HAL_GetTick>
 8006650:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006654:	f7fc fea0 	bl	8003398 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e200      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006666:	4b15      	ldr	r3, [pc, #84]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f0      	bne.n	8006654 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0320 	and.w	r3, r3, #32
 800667a:	2b00      	cmp	r3, #0
 800667c:	d039      	beq.n	80066f2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d01c      	beq.n	80066c0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006686:	4b0d      	ldr	r3, [pc, #52]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a0c      	ldr	r2, [pc, #48]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 800668c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006690:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006692:	f7fc fe81 	bl	8003398 <HAL_GetTick>
 8006696:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800669a:	f7fc fe7d 	bl	8003398 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e1dd      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066ac:	4b03      	ldr	r3, [pc, #12]	; (80066bc <HAL_RCC_OscConfig+0x4f8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0f0      	beq.n	800669a <HAL_RCC_OscConfig+0x4d6>
 80066b8:	e01b      	b.n	80066f2 <HAL_RCC_OscConfig+0x52e>
 80066ba:	bf00      	nop
 80066bc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066c0:	4b9b      	ldr	r3, [pc, #620]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a9a      	ldr	r2, [pc, #616]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80066c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066cc:	f7fc fe64 	bl	8003398 <HAL_GetTick>
 80066d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066d4:	f7fc fe60 	bl	8003398 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e1c0      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066e6:	4b92      	ldr	r3, [pc, #584]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f0      	bne.n	80066d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 8081 	beq.w	8006802 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006700:	4b8c      	ldr	r3, [pc, #560]	; (8006934 <HAL_RCC_OscConfig+0x770>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a8b      	ldr	r2, [pc, #556]	; (8006934 <HAL_RCC_OscConfig+0x770>)
 8006706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800670a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800670c:	f7fc fe44 	bl	8003398 <HAL_GetTick>
 8006710:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006714:	f7fc fe40 	bl	8003398 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b64      	cmp	r3, #100	; 0x64
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e1a0      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006726:	4b83      	ldr	r3, [pc, #524]	; (8006934 <HAL_RCC_OscConfig+0x770>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0f0      	beq.n	8006714 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d106      	bne.n	8006748 <HAL_RCC_OscConfig+0x584>
 800673a:	4b7d      	ldr	r3, [pc, #500]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 800673c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673e:	4a7c      	ldr	r2, [pc, #496]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006740:	f043 0301 	orr.w	r3, r3, #1
 8006744:	6713      	str	r3, [r2, #112]	; 0x70
 8006746:	e02d      	b.n	80067a4 <HAL_RCC_OscConfig+0x5e0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10c      	bne.n	800676a <HAL_RCC_OscConfig+0x5a6>
 8006750:	4b77      	ldr	r3, [pc, #476]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006754:	4a76      	ldr	r2, [pc, #472]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006756:	f023 0301 	bic.w	r3, r3, #1
 800675a:	6713      	str	r3, [r2, #112]	; 0x70
 800675c:	4b74      	ldr	r3, [pc, #464]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 800675e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006760:	4a73      	ldr	r2, [pc, #460]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006762:	f023 0304 	bic.w	r3, r3, #4
 8006766:	6713      	str	r3, [r2, #112]	; 0x70
 8006768:	e01c      	b.n	80067a4 <HAL_RCC_OscConfig+0x5e0>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b05      	cmp	r3, #5
 8006770:	d10c      	bne.n	800678c <HAL_RCC_OscConfig+0x5c8>
 8006772:	4b6f      	ldr	r3, [pc, #444]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006776:	4a6e      	ldr	r2, [pc, #440]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006778:	f043 0304 	orr.w	r3, r3, #4
 800677c:	6713      	str	r3, [r2, #112]	; 0x70
 800677e:	4b6c      	ldr	r3, [pc, #432]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006782:	4a6b      	ldr	r2, [pc, #428]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006784:	f043 0301 	orr.w	r3, r3, #1
 8006788:	6713      	str	r3, [r2, #112]	; 0x70
 800678a:	e00b      	b.n	80067a4 <HAL_RCC_OscConfig+0x5e0>
 800678c:	4b68      	ldr	r3, [pc, #416]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 800678e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006790:	4a67      	ldr	r2, [pc, #412]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006792:	f023 0301 	bic.w	r3, r3, #1
 8006796:	6713      	str	r3, [r2, #112]	; 0x70
 8006798:	4b65      	ldr	r3, [pc, #404]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 800679a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679c:	4a64      	ldr	r2, [pc, #400]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 800679e:	f023 0304 	bic.w	r3, r3, #4
 80067a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d015      	beq.n	80067d8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ac:	f7fc fdf4 	bl	8003398 <HAL_GetTick>
 80067b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067b2:	e00a      	b.n	80067ca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067b4:	f7fc fdf0 	bl	8003398 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e14e      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067ca:	4b59      	ldr	r3, [pc, #356]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80067cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0ee      	beq.n	80067b4 <HAL_RCC_OscConfig+0x5f0>
 80067d6:	e014      	b.n	8006802 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d8:	f7fc fdde 	bl	8003398 <HAL_GetTick>
 80067dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067de:	e00a      	b.n	80067f6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e0:	f7fc fdda 	bl	8003398 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e138      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067f6:	4b4e      	ldr	r3, [pc, #312]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80067f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1ee      	bne.n	80067e0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 812d 	beq.w	8006a66 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800680c:	4b48      	ldr	r3, [pc, #288]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006814:	2b18      	cmp	r3, #24
 8006816:	f000 80bd 	beq.w	8006994 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	2b02      	cmp	r3, #2
 8006820:	f040 809e 	bne.w	8006960 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006824:	4b42      	ldr	r3, [pc, #264]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a41      	ldr	r2, [pc, #260]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 800682a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800682e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006830:	f7fc fdb2 	bl	8003398 <HAL_GetTick>
 8006834:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006836:	e008      	b.n	800684a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006838:	f7fc fdae 	bl	8003398 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b02      	cmp	r3, #2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e10e      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800684a:	4b39      	ldr	r3, [pc, #228]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1f0      	bne.n	8006838 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006856:	4b36      	ldr	r3, [pc, #216]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800685a:	4b37      	ldr	r3, [pc, #220]	; (8006938 <HAL_RCC_OscConfig+0x774>)
 800685c:	4013      	ands	r3, r2
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006866:	0112      	lsls	r2, r2, #4
 8006868:	430a      	orrs	r2, r1
 800686a:	4931      	ldr	r1, [pc, #196]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 800686c:	4313      	orrs	r3, r2
 800686e:	628b      	str	r3, [r1, #40]	; 0x28
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	3b01      	subs	r3, #1
 8006876:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687e:	3b01      	subs	r3, #1
 8006880:	025b      	lsls	r3, r3, #9
 8006882:	b29b      	uxth	r3, r3
 8006884:	431a      	orrs	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688a:	3b01      	subs	r3, #1
 800688c:	041b      	lsls	r3, r3, #16
 800688e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006898:	3b01      	subs	r3, #1
 800689a:	061b      	lsls	r3, r3, #24
 800689c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068a0:	4923      	ldr	r1, [pc, #140]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80068a6:	4b22      	ldr	r3, [pc, #136]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80068a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068aa:	4a21      	ldr	r2, [pc, #132]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80068ac:	f023 0301 	bic.w	r3, r3, #1
 80068b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80068b2:	4b1f      	ldr	r3, [pc, #124]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80068b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b6:	4b21      	ldr	r3, [pc, #132]	; (800693c <HAL_RCC_OscConfig+0x778>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80068be:	00d2      	lsls	r2, r2, #3
 80068c0:	491b      	ldr	r1, [pc, #108]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80068c6:	4b1a      	ldr	r3, [pc, #104]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80068c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ca:	f023 020c 	bic.w	r2, r3, #12
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	4917      	ldr	r1, [pc, #92]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80068d8:	4b15      	ldr	r3, [pc, #84]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	f023 0202 	bic.w	r2, r3, #2
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e4:	4912      	ldr	r1, [pc, #72]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068ea:	4b11      	ldr	r3, [pc, #68]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80068ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ee:	4a10      	ldr	r2, [pc, #64]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80068f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068f6:	4b0e      	ldr	r3, [pc, #56]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80068f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fa:	4a0d      	ldr	r2, [pc, #52]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 80068fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006900:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006902:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	4a0a      	ldr	r2, [pc, #40]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800690c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800690e:	4b08      	ldr	r3, [pc, #32]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006912:	4a07      	ldr	r2, [pc, #28]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006914:	f043 0301 	orr.w	r3, r3, #1
 8006918:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800691a:	4b05      	ldr	r3, [pc, #20]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a04      	ldr	r2, [pc, #16]	; (8006930 <HAL_RCC_OscConfig+0x76c>)
 8006920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006926:	f7fc fd37 	bl	8003398 <HAL_GetTick>
 800692a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800692c:	e011      	b.n	8006952 <HAL_RCC_OscConfig+0x78e>
 800692e:	bf00      	nop
 8006930:	58024400 	.word	0x58024400
 8006934:	58024800 	.word	0x58024800
 8006938:	fffffc0c 	.word	0xfffffc0c
 800693c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006940:	f7fc fd2a 	bl	8003398 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e08a      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006952:	4b47      	ldr	r3, [pc, #284]	; (8006a70 <HAL_RCC_OscConfig+0x8ac>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0f0      	beq.n	8006940 <HAL_RCC_OscConfig+0x77c>
 800695e:	e082      	b.n	8006a66 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006960:	4b43      	ldr	r3, [pc, #268]	; (8006a70 <HAL_RCC_OscConfig+0x8ac>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a42      	ldr	r2, [pc, #264]	; (8006a70 <HAL_RCC_OscConfig+0x8ac>)
 8006966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800696a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696c:	f7fc fd14 	bl	8003398 <HAL_GetTick>
 8006970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006974:	f7fc fd10 	bl	8003398 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e070      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006986:	4b3a      	ldr	r3, [pc, #232]	; (8006a70 <HAL_RCC_OscConfig+0x8ac>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f0      	bne.n	8006974 <HAL_RCC_OscConfig+0x7b0>
 8006992:	e068      	b.n	8006a66 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006994:	4b36      	ldr	r3, [pc, #216]	; (8006a70 <HAL_RCC_OscConfig+0x8ac>)
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800699a:	4b35      	ldr	r3, [pc, #212]	; (8006a70 <HAL_RCC_OscConfig+0x8ac>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d031      	beq.n	8006a0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f003 0203 	and.w	r2, r3, #3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d12a      	bne.n	8006a0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	091b      	lsrs	r3, r3, #4
 80069ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d122      	bne.n	8006a0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d11a      	bne.n	8006a0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	0a5b      	lsrs	r3, r3, #9
 80069da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d111      	bne.n	8006a0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	0c1b      	lsrs	r3, r3, #16
 80069ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d108      	bne.n	8006a0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	0e1b      	lsrs	r3, r3, #24
 80069fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d001      	beq.n	8006a10 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e02b      	b.n	8006a68 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006a10:	4b17      	ldr	r3, [pc, #92]	; (8006a70 <HAL_RCC_OscConfig+0x8ac>)
 8006a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a14:	08db      	lsrs	r3, r3, #3
 8006a16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a1a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d01f      	beq.n	8006a66 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006a26:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <HAL_RCC_OscConfig+0x8ac>)
 8006a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2a:	4a11      	ldr	r2, [pc, #68]	; (8006a70 <HAL_RCC_OscConfig+0x8ac>)
 8006a2c:	f023 0301 	bic.w	r3, r3, #1
 8006a30:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a32:	f7fc fcb1 	bl	8003398 <HAL_GetTick>
 8006a36:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006a38:	bf00      	nop
 8006a3a:	f7fc fcad 	bl	8003398 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d0f9      	beq.n	8006a3a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a46:	4b0a      	ldr	r3, [pc, #40]	; (8006a70 <HAL_RCC_OscConfig+0x8ac>)
 8006a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <HAL_RCC_OscConfig+0x8b0>)
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a52:	00d2      	lsls	r2, r2, #3
 8006a54:	4906      	ldr	r1, [pc, #24]	; (8006a70 <HAL_RCC_OscConfig+0x8ac>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006a5a:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <HAL_RCC_OscConfig+0x8ac>)
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	4a04      	ldr	r2, [pc, #16]	; (8006a70 <HAL_RCC_OscConfig+0x8ac>)
 8006a60:	f043 0301 	orr.w	r3, r3, #1
 8006a64:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3730      	adds	r7, #48	; 0x30
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	58024400 	.word	0x58024400
 8006a74:	ffff0007 	.word	0xffff0007

08006a78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e19c      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a8c:	4b8a      	ldr	r3, [pc, #552]	; (8006cb8 <HAL_RCC_ClockConfig+0x240>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d910      	bls.n	8006abc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a9a:	4b87      	ldr	r3, [pc, #540]	; (8006cb8 <HAL_RCC_ClockConfig+0x240>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f023 020f 	bic.w	r2, r3, #15
 8006aa2:	4985      	ldr	r1, [pc, #532]	; (8006cb8 <HAL_RCC_ClockConfig+0x240>)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aaa:	4b83      	ldr	r3, [pc, #524]	; (8006cb8 <HAL_RCC_ClockConfig+0x240>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 030f 	and.w	r3, r3, #15
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d001      	beq.n	8006abc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e184      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d010      	beq.n	8006aea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691a      	ldr	r2, [r3, #16]
 8006acc:	4b7b      	ldr	r3, [pc, #492]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d908      	bls.n	8006aea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ad8:	4b78      	ldr	r3, [pc, #480]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	4975      	ldr	r1, [pc, #468]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d010      	beq.n	8006b18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695a      	ldr	r2, [r3, #20]
 8006afa:	4b70      	ldr	r3, [pc, #448]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d908      	bls.n	8006b18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b06:	4b6d      	ldr	r3, [pc, #436]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	496a      	ldr	r1, [pc, #424]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0310 	and.w	r3, r3, #16
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d010      	beq.n	8006b46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	699a      	ldr	r2, [r3, #24]
 8006b28:	4b64      	ldr	r3, [pc, #400]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d908      	bls.n	8006b46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b34:	4b61      	ldr	r3, [pc, #388]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	495e      	ldr	r1, [pc, #376]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d010      	beq.n	8006b74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69da      	ldr	r2, [r3, #28]
 8006b56:	4b59      	ldr	r3, [pc, #356]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d908      	bls.n	8006b74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b62:	4b56      	ldr	r3, [pc, #344]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	4953      	ldr	r1, [pc, #332]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d010      	beq.n	8006ba2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68da      	ldr	r2, [r3, #12]
 8006b84:	4b4d      	ldr	r3, [pc, #308]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	f003 030f 	and.w	r3, r3, #15
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d908      	bls.n	8006ba2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b90:	4b4a      	ldr	r3, [pc, #296]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	f023 020f 	bic.w	r2, r3, #15
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	4947      	ldr	r1, [pc, #284]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d055      	beq.n	8006c5a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006bae:	4b43      	ldr	r3, [pc, #268]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	4940      	ldr	r1, [pc, #256]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d107      	bne.n	8006bd8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bc8:	4b3c      	ldr	r3, [pc, #240]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d121      	bne.n	8006c18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e0f6      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d107      	bne.n	8006bf0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006be0:	4b36      	ldr	r3, [pc, #216]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d115      	bne.n	8006c18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e0ea      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d107      	bne.n	8006c08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bf8:	4b30      	ldr	r3, [pc, #192]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d109      	bne.n	8006c18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e0de      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c08:	4b2c      	ldr	r3, [pc, #176]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e0d6      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c18:	4b28      	ldr	r3, [pc, #160]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	f023 0207 	bic.w	r2, r3, #7
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	4925      	ldr	r1, [pc, #148]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c2a:	f7fc fbb5 	bl	8003398 <HAL_GetTick>
 8006c2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c30:	e00a      	b.n	8006c48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c32:	f7fc fbb1 	bl	8003398 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e0be      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c48:	4b1c      	ldr	r3, [pc, #112]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d1eb      	bne.n	8006c32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d010      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d208      	bcs.n	8006c88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c76:	4b11      	ldr	r3, [pc, #68]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	f023 020f 	bic.w	r2, r3, #15
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	490e      	ldr	r1, [pc, #56]	; (8006cbc <HAL_RCC_ClockConfig+0x244>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c88:	4b0b      	ldr	r3, [pc, #44]	; (8006cb8 <HAL_RCC_ClockConfig+0x240>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d214      	bcs.n	8006cc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c96:	4b08      	ldr	r3, [pc, #32]	; (8006cb8 <HAL_RCC_ClockConfig+0x240>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f023 020f 	bic.w	r2, r3, #15
 8006c9e:	4906      	ldr	r1, [pc, #24]	; (8006cb8 <HAL_RCC_ClockConfig+0x240>)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ca6:	4b04      	ldr	r3, [pc, #16]	; (8006cb8 <HAL_RCC_ClockConfig+0x240>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 030f 	and.w	r3, r3, #15
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d005      	beq.n	8006cc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e086      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x34e>
 8006cb8:	52002000 	.word	0x52002000
 8006cbc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d010      	beq.n	8006cee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	691a      	ldr	r2, [r3, #16]
 8006cd0:	4b3f      	ldr	r3, [pc, #252]	; (8006dd0 <HAL_RCC_ClockConfig+0x358>)
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d208      	bcs.n	8006cee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006cdc:	4b3c      	ldr	r3, [pc, #240]	; (8006dd0 <HAL_RCC_ClockConfig+0x358>)
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	4939      	ldr	r1, [pc, #228]	; (8006dd0 <HAL_RCC_ClockConfig+0x358>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d010      	beq.n	8006d1c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695a      	ldr	r2, [r3, #20]
 8006cfe:	4b34      	ldr	r3, [pc, #208]	; (8006dd0 <HAL_RCC_ClockConfig+0x358>)
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d208      	bcs.n	8006d1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d0a:	4b31      	ldr	r3, [pc, #196]	; (8006dd0 <HAL_RCC_ClockConfig+0x358>)
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	492e      	ldr	r1, [pc, #184]	; (8006dd0 <HAL_RCC_ClockConfig+0x358>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d010      	beq.n	8006d4a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	699a      	ldr	r2, [r3, #24]
 8006d2c:	4b28      	ldr	r3, [pc, #160]	; (8006dd0 <HAL_RCC_ClockConfig+0x358>)
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d208      	bcs.n	8006d4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d38:	4b25      	ldr	r3, [pc, #148]	; (8006dd0 <HAL_RCC_ClockConfig+0x358>)
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	4922      	ldr	r1, [pc, #136]	; (8006dd0 <HAL_RCC_ClockConfig+0x358>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0320 	and.w	r3, r3, #32
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d010      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	69da      	ldr	r2, [r3, #28]
 8006d5a:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <HAL_RCC_ClockConfig+0x358>)
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d208      	bcs.n	8006d78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d66:	4b1a      	ldr	r3, [pc, #104]	; (8006dd0 <HAL_RCC_ClockConfig+0x358>)
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	4917      	ldr	r1, [pc, #92]	; (8006dd0 <HAL_RCC_ClockConfig+0x358>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d78:	f000 f834 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	4b14      	ldr	r3, [pc, #80]	; (8006dd0 <HAL_RCC_ClockConfig+0x358>)
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	0a1b      	lsrs	r3, r3, #8
 8006d84:	f003 030f 	and.w	r3, r3, #15
 8006d88:	4912      	ldr	r1, [pc, #72]	; (8006dd4 <HAL_RCC_ClockConfig+0x35c>)
 8006d8a:	5ccb      	ldrb	r3, [r1, r3]
 8006d8c:	f003 031f 	and.w	r3, r3, #31
 8006d90:	fa22 f303 	lsr.w	r3, r2, r3
 8006d94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d96:	4b0e      	ldr	r3, [pc, #56]	; (8006dd0 <HAL_RCC_ClockConfig+0x358>)
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	4a0d      	ldr	r2, [pc, #52]	; (8006dd4 <HAL_RCC_ClockConfig+0x35c>)
 8006da0:	5cd3      	ldrb	r3, [r2, r3]
 8006da2:	f003 031f 	and.w	r3, r3, #31
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dac:	4a0a      	ldr	r2, [pc, #40]	; (8006dd8 <HAL_RCC_ClockConfig+0x360>)
 8006dae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006db0:	4a0a      	ldr	r2, [pc, #40]	; (8006ddc <HAL_RCC_ClockConfig+0x364>)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006db6:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <HAL_RCC_ClockConfig+0x368>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fc faa2 	bl	8003304 <HAL_InitTick>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	58024400 	.word	0x58024400
 8006dd4:	08010418 	.word	0x08010418
 8006dd8:	24000004 	.word	0x24000004
 8006ddc:	24000000 	.word	0x24000000
 8006de0:	24000008 	.word	0x24000008

08006de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b089      	sub	sp, #36	; 0x24
 8006de8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dea:	4bb3      	ldr	r3, [pc, #716]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006df2:	2b18      	cmp	r3, #24
 8006df4:	f200 8155 	bhi.w	80070a2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006df8:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfe:	bf00      	nop
 8006e00:	08006e65 	.word	0x08006e65
 8006e04:	080070a3 	.word	0x080070a3
 8006e08:	080070a3 	.word	0x080070a3
 8006e0c:	080070a3 	.word	0x080070a3
 8006e10:	080070a3 	.word	0x080070a3
 8006e14:	080070a3 	.word	0x080070a3
 8006e18:	080070a3 	.word	0x080070a3
 8006e1c:	080070a3 	.word	0x080070a3
 8006e20:	08006e8b 	.word	0x08006e8b
 8006e24:	080070a3 	.word	0x080070a3
 8006e28:	080070a3 	.word	0x080070a3
 8006e2c:	080070a3 	.word	0x080070a3
 8006e30:	080070a3 	.word	0x080070a3
 8006e34:	080070a3 	.word	0x080070a3
 8006e38:	080070a3 	.word	0x080070a3
 8006e3c:	080070a3 	.word	0x080070a3
 8006e40:	08006e91 	.word	0x08006e91
 8006e44:	080070a3 	.word	0x080070a3
 8006e48:	080070a3 	.word	0x080070a3
 8006e4c:	080070a3 	.word	0x080070a3
 8006e50:	080070a3 	.word	0x080070a3
 8006e54:	080070a3 	.word	0x080070a3
 8006e58:	080070a3 	.word	0x080070a3
 8006e5c:	080070a3 	.word	0x080070a3
 8006e60:	08006e97 	.word	0x08006e97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e64:	4b94      	ldr	r3, [pc, #592]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d009      	beq.n	8006e84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e70:	4b91      	ldr	r3, [pc, #580]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	08db      	lsrs	r3, r3, #3
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	4a90      	ldr	r2, [pc, #576]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006e82:	e111      	b.n	80070a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e84:	4b8d      	ldr	r3, [pc, #564]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e86:	61bb      	str	r3, [r7, #24]
      break;
 8006e88:	e10e      	b.n	80070a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006e8a:	4b8d      	ldr	r3, [pc, #564]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e8c:	61bb      	str	r3, [r7, #24]
      break;
 8006e8e:	e10b      	b.n	80070a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006e90:	4b8c      	ldr	r3, [pc, #560]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006e92:	61bb      	str	r3, [r7, #24]
      break;
 8006e94:	e108      	b.n	80070a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e96:	4b88      	ldr	r3, [pc, #544]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006ea0:	4b85      	ldr	r3, [pc, #532]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea4:	091b      	lsrs	r3, r3, #4
 8006ea6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eaa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006eac:	4b82      	ldr	r3, [pc, #520]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006eb6:	4b80      	ldr	r3, [pc, #512]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	08db      	lsrs	r3, r3, #3
 8006ebc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	fb02 f303 	mul.w	r3, r2, r3
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ece:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 80e1 	beq.w	800709c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	f000 8083 	beq.w	8006fe8 <HAL_RCC_GetSysClockFreq+0x204>
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	f200 80a1 	bhi.w	800702c <HAL_RCC_GetSysClockFreq+0x248>
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_RCC_GetSysClockFreq+0x114>
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d056      	beq.n	8006fa4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006ef6:	e099      	b.n	800702c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ef8:	4b6f      	ldr	r3, [pc, #444]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0320 	and.w	r3, r3, #32
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d02d      	beq.n	8006f60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f04:	4b6c      	ldr	r3, [pc, #432]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	08db      	lsrs	r3, r3, #3
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	4a6b      	ldr	r2, [pc, #428]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f10:	fa22 f303 	lsr.w	r3, r2, r3
 8006f14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	ee07 3a90 	vmov	s15, r3
 8006f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2e:	4b62      	ldr	r3, [pc, #392]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f42:	eddf 5a61 	vldr	s11, [pc, #388]	; 80070c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006f5e:	e087      	b.n	8007070 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80070cc <HAL_RCC_GetSysClockFreq+0x2e8>
 8006f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f72:	4b51      	ldr	r3, [pc, #324]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f86:	eddf 5a50 	vldr	s11, [pc, #320]	; 80070c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fa2:	e065      	b.n	8007070 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80070d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb6:	4b40      	ldr	r3, [pc, #256]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80070c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fe6:	e043      	b.n	8007070 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80070d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffa:	4b2f      	ldr	r3, [pc, #188]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700a:	ed97 6a02 	vldr	s12, [r7, #8]
 800700e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80070c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800701e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007026:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800702a:	e021      	b.n	8007070 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007036:	eddf 6a26 	vldr	s13, [pc, #152]	; 80070d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800703a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800703e:	4b1e      	ldr	r3, [pc, #120]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007052:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80070c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800706e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007070:	4b11      	ldr	r3, [pc, #68]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007074:	0a5b      	lsrs	r3, r3, #9
 8007076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707a:	3301      	adds	r3, #1
 800707c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	ee07 3a90 	vmov	s15, r3
 8007084:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007088:	edd7 6a07 	vldr	s13, [r7, #28]
 800708c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007094:	ee17 3a90 	vmov	r3, s15
 8007098:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800709a:	e005      	b.n	80070a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	61bb      	str	r3, [r7, #24]
      break;
 80070a0:	e002      	b.n	80070a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80070a2:	4b07      	ldr	r3, [pc, #28]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80070a4:	61bb      	str	r3, [r7, #24]
      break;
 80070a6:	bf00      	nop
  }

  return sysclockfreq;
 80070a8:	69bb      	ldr	r3, [r7, #24]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3724      	adds	r7, #36	; 0x24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	58024400 	.word	0x58024400
 80070bc:	03d09000 	.word	0x03d09000
 80070c0:	003d0900 	.word	0x003d0900
 80070c4:	00f42400 	.word	0x00f42400
 80070c8:	46000000 	.word	0x46000000
 80070cc:	4c742400 	.word	0x4c742400
 80070d0:	4a742400 	.word	0x4a742400
 80070d4:	4b742400 	.word	0x4b742400

080070d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80070de:	f7ff fe81 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 80070e2:	4602      	mov	r2, r0
 80070e4:	4b10      	ldr	r3, [pc, #64]	; (8007128 <HAL_RCC_GetHCLKFreq+0x50>)
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	0a1b      	lsrs	r3, r3, #8
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	490f      	ldr	r1, [pc, #60]	; (800712c <HAL_RCC_GetHCLKFreq+0x54>)
 80070f0:	5ccb      	ldrb	r3, [r1, r3]
 80070f2:	f003 031f 	and.w	r3, r3, #31
 80070f6:	fa22 f303 	lsr.w	r3, r2, r3
 80070fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070fc:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <HAL_RCC_GetHCLKFreq+0x50>)
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	4a09      	ldr	r2, [pc, #36]	; (800712c <HAL_RCC_GetHCLKFreq+0x54>)
 8007106:	5cd3      	ldrb	r3, [r2, r3]
 8007108:	f003 031f 	and.w	r3, r3, #31
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	fa22 f303 	lsr.w	r3, r2, r3
 8007112:	4a07      	ldr	r2, [pc, #28]	; (8007130 <HAL_RCC_GetHCLKFreq+0x58>)
 8007114:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007116:	4a07      	ldr	r2, [pc, #28]	; (8007134 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800711c:	4b04      	ldr	r3, [pc, #16]	; (8007130 <HAL_RCC_GetHCLKFreq+0x58>)
 800711e:	681b      	ldr	r3, [r3, #0]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	58024400 	.word	0x58024400
 800712c:	08010418 	.word	0x08010418
 8007130:	24000004 	.word	0x24000004
 8007134:	24000000 	.word	0x24000000

08007138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800713c:	f7ff ffcc 	bl	80070d8 <HAL_RCC_GetHCLKFreq>
 8007140:	4602      	mov	r2, r0
 8007142:	4b06      	ldr	r3, [pc, #24]	; (800715c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	091b      	lsrs	r3, r3, #4
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	4904      	ldr	r1, [pc, #16]	; (8007160 <HAL_RCC_GetPCLK1Freq+0x28>)
 800714e:	5ccb      	ldrb	r3, [r1, r3]
 8007150:	f003 031f 	and.w	r3, r3, #31
 8007154:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007158:	4618      	mov	r0, r3
 800715a:	bd80      	pop	{r7, pc}
 800715c:	58024400 	.word	0x58024400
 8007160:	08010418 	.word	0x08010418

08007164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007168:	f7ff ffb6 	bl	80070d8 <HAL_RCC_GetHCLKFreq>
 800716c:	4602      	mov	r2, r0
 800716e:	4b06      	ldr	r3, [pc, #24]	; (8007188 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	0a1b      	lsrs	r3, r3, #8
 8007174:	f003 0307 	and.w	r3, r3, #7
 8007178:	4904      	ldr	r1, [pc, #16]	; (800718c <HAL_RCC_GetPCLK2Freq+0x28>)
 800717a:	5ccb      	ldrb	r3, [r1, r3]
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007184:	4618      	mov	r0, r3
 8007186:	bd80      	pop	{r7, pc}
 8007188:	58024400 	.word	0x58024400
 800718c:	08010418 	.word	0x08010418

08007190 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007194:	b0ca      	sub	sp, #296	; 0x128
 8007196:	af00      	add	r7, sp, #0
 8007198:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800719c:	2300      	movs	r3, #0
 800719e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071a2:	2300      	movs	r3, #0
 80071a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80071b4:	2500      	movs	r5, #0
 80071b6:	ea54 0305 	orrs.w	r3, r4, r5
 80071ba:	d049      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80071bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071c6:	d02f      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80071c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071cc:	d828      	bhi.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80071ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071d2:	d01a      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80071d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071d8:	d822      	bhi.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80071de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071e2:	d007      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80071e4:	e01c      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e6:	4bb8      	ldr	r3, [pc, #736]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ea:	4ab7      	ldr	r2, [pc, #732]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80071f2:	e01a      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f8:	3308      	adds	r3, #8
 80071fa:	2102      	movs	r1, #2
 80071fc:	4618      	mov	r0, r3
 80071fe:	f001 fc8f 	bl	8008b20 <RCCEx_PLL2_Config>
 8007202:	4603      	mov	r3, r0
 8007204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007208:	e00f      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800720a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800720e:	3328      	adds	r3, #40	; 0x28
 8007210:	2102      	movs	r1, #2
 8007212:	4618      	mov	r0, r3
 8007214:	f001 fd36 	bl	8008c84 <RCCEx_PLL3_Config>
 8007218:	4603      	mov	r3, r0
 800721a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800721e:	e004      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007226:	e000      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800722a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10a      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007232:	4ba5      	ldr	r3, [pc, #660]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007236:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800723a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800723e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007240:	4aa1      	ldr	r2, [pc, #644]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007242:	430b      	orrs	r3, r1
 8007244:	6513      	str	r3, [r2, #80]	; 0x50
 8007246:	e003      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007248:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800724c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800725c:	f04f 0900 	mov.w	r9, #0
 8007260:	ea58 0309 	orrs.w	r3, r8, r9
 8007264:	d047      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800726a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726c:	2b04      	cmp	r3, #4
 800726e:	d82a      	bhi.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007270:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007276:	bf00      	nop
 8007278:	0800728d 	.word	0x0800728d
 800727c:	0800729b 	.word	0x0800729b
 8007280:	080072b1 	.word	0x080072b1
 8007284:	080072cf 	.word	0x080072cf
 8007288:	080072cf 	.word	0x080072cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800728c:	4b8e      	ldr	r3, [pc, #568]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	4a8d      	ldr	r2, [pc, #564]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007296:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007298:	e01a      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800729a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800729e:	3308      	adds	r3, #8
 80072a0:	2100      	movs	r1, #0
 80072a2:	4618      	mov	r0, r3
 80072a4:	f001 fc3c 	bl	8008b20 <RCCEx_PLL2_Config>
 80072a8:	4603      	mov	r3, r0
 80072aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072ae:	e00f      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b4:	3328      	adds	r3, #40	; 0x28
 80072b6:	2100      	movs	r1, #0
 80072b8:	4618      	mov	r0, r3
 80072ba:	f001 fce3 	bl	8008c84 <RCCEx_PLL3_Config>
 80072be:	4603      	mov	r3, r0
 80072c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072c4:	e004      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072cc:	e000      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80072ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072d8:	4b7b      	ldr	r3, [pc, #492]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072dc:	f023 0107 	bic.w	r1, r3, #7
 80072e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e6:	4a78      	ldr	r2, [pc, #480]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072e8:	430b      	orrs	r3, r1
 80072ea:	6513      	str	r3, [r2, #80]	; 0x50
 80072ec:	e003      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80072f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007302:	f04f 0b00 	mov.w	fp, #0
 8007306:	ea5a 030b 	orrs.w	r3, sl, fp
 800730a:	d04c      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800730c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007316:	d030      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800731c:	d829      	bhi.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800731e:	2bc0      	cmp	r3, #192	; 0xc0
 8007320:	d02d      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007322:	2bc0      	cmp	r3, #192	; 0xc0
 8007324:	d825      	bhi.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007326:	2b80      	cmp	r3, #128	; 0x80
 8007328:	d018      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800732a:	2b80      	cmp	r3, #128	; 0x80
 800732c:	d821      	bhi.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007332:	2b40      	cmp	r3, #64	; 0x40
 8007334:	d007      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007336:	e01c      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007338:	4b63      	ldr	r3, [pc, #396]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733c:	4a62      	ldr	r2, [pc, #392]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800733e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007342:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007344:	e01c      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800734a:	3308      	adds	r3, #8
 800734c:	2100      	movs	r1, #0
 800734e:	4618      	mov	r0, r3
 8007350:	f001 fbe6 	bl	8008b20 <RCCEx_PLL2_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800735a:	e011      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800735c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007360:	3328      	adds	r3, #40	; 0x28
 8007362:	2100      	movs	r1, #0
 8007364:	4618      	mov	r0, r3
 8007366:	f001 fc8d 	bl	8008c84 <RCCEx_PLL3_Config>
 800736a:	4603      	mov	r3, r0
 800736c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007370:	e006      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007378:	e002      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800737a:	bf00      	nop
 800737c:	e000      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800737e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007388:	4b4f      	ldr	r3, [pc, #316]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800738a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007396:	4a4c      	ldr	r2, [pc, #304]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007398:	430b      	orrs	r3, r1
 800739a:	6513      	str	r3, [r2, #80]	; 0x50
 800739c:	e003      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80073a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80073b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80073b6:	2300      	movs	r3, #0
 80073b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80073bc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80073c0:	460b      	mov	r3, r1
 80073c2:	4313      	orrs	r3, r2
 80073c4:	d053      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073d2:	d035      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80073d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073d8:	d82e      	bhi.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80073da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80073de:	d031      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80073e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80073e4:	d828      	bhi.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80073e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073ea:	d01a      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80073ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073f0:	d822      	bhi.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80073f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073fa:	d007      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80073fc:	e01c      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073fe:	4b32      	ldr	r3, [pc, #200]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	4a31      	ldr	r2, [pc, #196]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007408:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800740a:	e01c      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800740c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007410:	3308      	adds	r3, #8
 8007412:	2100      	movs	r1, #0
 8007414:	4618      	mov	r0, r3
 8007416:	f001 fb83 	bl	8008b20 <RCCEx_PLL2_Config>
 800741a:	4603      	mov	r3, r0
 800741c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007420:	e011      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007426:	3328      	adds	r3, #40	; 0x28
 8007428:	2100      	movs	r1, #0
 800742a:	4618      	mov	r0, r3
 800742c:	f001 fc2a 	bl	8008c84 <RCCEx_PLL3_Config>
 8007430:	4603      	mov	r3, r0
 8007432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007436:	e006      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800743e:	e002      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007440:	bf00      	nop
 8007442:	e000      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007446:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10b      	bne.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800744e:	4b1e      	ldr	r3, [pc, #120]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007452:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800745a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800745e:	4a1a      	ldr	r2, [pc, #104]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007460:	430b      	orrs	r3, r1
 8007462:	6593      	str	r3, [r2, #88]	; 0x58
 8007464:	e003      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800746a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800746e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800747a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800747e:	2300      	movs	r3, #0
 8007480:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007484:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007488:	460b      	mov	r3, r1
 800748a:	4313      	orrs	r3, r2
 800748c:	d056      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800748e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007492:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007496:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800749a:	d038      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800749c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074a0:	d831      	bhi.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80074a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074a6:	d034      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80074a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074ac:	d82b      	bhi.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80074ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074b2:	d01d      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80074b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074b8:	d825      	bhi.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d006      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80074be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074c2:	d00a      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80074c4:	e01f      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80074c6:	bf00      	nop
 80074c8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074cc:	4ba2      	ldr	r3, [pc, #648]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d0:	4aa1      	ldr	r2, [pc, #644]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074d8:	e01c      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074de:	3308      	adds	r3, #8
 80074e0:	2100      	movs	r1, #0
 80074e2:	4618      	mov	r0, r3
 80074e4:	f001 fb1c 	bl	8008b20 <RCCEx_PLL2_Config>
 80074e8:	4603      	mov	r3, r0
 80074ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80074ee:	e011      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074f4:	3328      	adds	r3, #40	; 0x28
 80074f6:	2100      	movs	r1, #0
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 fbc3 	bl	8008c84 <RCCEx_PLL3_Config>
 80074fe:	4603      	mov	r3, r0
 8007500:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007504:	e006      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800750c:	e002      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800750e:	bf00      	nop
 8007510:	e000      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007514:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10b      	bne.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800751c:	4b8e      	ldr	r3, [pc, #568]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800751e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007520:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007528:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800752c:	4a8a      	ldr	r2, [pc, #552]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800752e:	430b      	orrs	r3, r1
 8007530:	6593      	str	r3, [r2, #88]	; 0x58
 8007532:	e003      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007534:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007538:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800753c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007544:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007548:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800754c:	2300      	movs	r3, #0
 800754e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007552:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007556:	460b      	mov	r3, r1
 8007558:	4313      	orrs	r3, r2
 800755a:	d03a      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800755c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007562:	2b30      	cmp	r3, #48	; 0x30
 8007564:	d01f      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007566:	2b30      	cmp	r3, #48	; 0x30
 8007568:	d819      	bhi.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800756a:	2b20      	cmp	r3, #32
 800756c:	d00c      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800756e:	2b20      	cmp	r3, #32
 8007570:	d815      	bhi.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007572:	2b00      	cmp	r3, #0
 8007574:	d019      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007576:	2b10      	cmp	r3, #16
 8007578:	d111      	bne.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800757a:	4b77      	ldr	r3, [pc, #476]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	4a76      	ldr	r2, [pc, #472]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007584:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007586:	e011      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800758c:	3308      	adds	r3, #8
 800758e:	2102      	movs	r1, #2
 8007590:	4618      	mov	r0, r3
 8007592:	f001 fac5 	bl	8008b20 <RCCEx_PLL2_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800759c:	e006      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075a4:	e002      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80075a6:	bf00      	nop
 80075a8:	e000      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80075aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10a      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075b4:	4b68      	ldr	r3, [pc, #416]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80075bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c2:	4a65      	ldr	r2, [pc, #404]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075c4:	430b      	orrs	r3, r1
 80075c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075c8:	e003      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80075de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80075e2:	2300      	movs	r3, #0
 80075e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80075ec:	460b      	mov	r3, r1
 80075ee:	4313      	orrs	r3, r2
 80075f0:	d051      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075fc:	d035      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80075fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007602:	d82e      	bhi.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007604:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007608:	d031      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800760a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800760e:	d828      	bhi.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007614:	d01a      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800761a:	d822      	bhi.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007624:	d007      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007626:	e01c      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007628:	4b4b      	ldr	r3, [pc, #300]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	4a4a      	ldr	r2, [pc, #296]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800762e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007632:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007634:	e01c      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800763a:	3308      	adds	r3, #8
 800763c:	2100      	movs	r1, #0
 800763e:	4618      	mov	r0, r3
 8007640:	f001 fa6e 	bl	8008b20 <RCCEx_PLL2_Config>
 8007644:	4603      	mov	r3, r0
 8007646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800764a:	e011      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800764c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007650:	3328      	adds	r3, #40	; 0x28
 8007652:	2100      	movs	r1, #0
 8007654:	4618      	mov	r0, r3
 8007656:	f001 fb15 	bl	8008c84 <RCCEx_PLL3_Config>
 800765a:	4603      	mov	r3, r0
 800765c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007660:	e006      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007668:	e002      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800766a:	bf00      	nop
 800766c:	e000      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800766e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10a      	bne.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007678:	4b37      	ldr	r3, [pc, #220]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800767a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007686:	4a34      	ldr	r2, [pc, #208]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007688:	430b      	orrs	r3, r1
 800768a:	6513      	str	r3, [r2, #80]	; 0x50
 800768c:	e003      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80076a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076a6:	2300      	movs	r3, #0
 80076a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80076b0:	460b      	mov	r3, r1
 80076b2:	4313      	orrs	r3, r2
 80076b4:	d056      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80076b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076c0:	d033      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80076c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076c6:	d82c      	bhi.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80076c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076cc:	d02f      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80076ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076d2:	d826      	bhi.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80076d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076d8:	d02b      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80076da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076de:	d820      	bhi.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80076e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076e4:	d012      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80076e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076ea:	d81a      	bhi.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d022      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80076f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f4:	d115      	bne.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076fa:	3308      	adds	r3, #8
 80076fc:	2101      	movs	r1, #1
 80076fe:	4618      	mov	r0, r3
 8007700:	f001 fa0e 	bl	8008b20 <RCCEx_PLL2_Config>
 8007704:	4603      	mov	r3, r0
 8007706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800770a:	e015      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800770c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007710:	3328      	adds	r3, #40	; 0x28
 8007712:	2101      	movs	r1, #1
 8007714:	4618      	mov	r0, r3
 8007716:	f001 fab5 	bl	8008c84 <RCCEx_PLL3_Config>
 800771a:	4603      	mov	r3, r0
 800771c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007720:	e00a      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007728:	e006      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800772a:	bf00      	nop
 800772c:	e004      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800772e:	bf00      	nop
 8007730:	e002      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007732:	bf00      	nop
 8007734:	e000      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007738:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10d      	bne.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007740:	4b05      	ldr	r3, [pc, #20]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007744:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800774c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800774e:	4a02      	ldr	r2, [pc, #8]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007750:	430b      	orrs	r3, r1
 8007752:	6513      	str	r3, [r2, #80]	; 0x50
 8007754:	e006      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007756:	bf00      	nop
 8007758:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007760:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007770:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007774:	2300      	movs	r3, #0
 8007776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800777a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800777e:	460b      	mov	r3, r1
 8007780:	4313      	orrs	r3, r2
 8007782:	d055      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007788:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800778c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007790:	d033      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007792:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007796:	d82c      	bhi.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800779c:	d02f      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800779e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a2:	d826      	bhi.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80077a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077a8:	d02b      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80077aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077ae:	d820      	bhi.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80077b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077b4:	d012      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80077b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077ba:	d81a      	bhi.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d022      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80077c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077c4:	d115      	bne.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ca:	3308      	adds	r3, #8
 80077cc:	2101      	movs	r1, #1
 80077ce:	4618      	mov	r0, r3
 80077d0:	f001 f9a6 	bl	8008b20 <RCCEx_PLL2_Config>
 80077d4:	4603      	mov	r3, r0
 80077d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80077da:	e015      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e0:	3328      	adds	r3, #40	; 0x28
 80077e2:	2101      	movs	r1, #1
 80077e4:	4618      	mov	r0, r3
 80077e6:	f001 fa4d 	bl	8008c84 <RCCEx_PLL3_Config>
 80077ea:	4603      	mov	r3, r0
 80077ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80077f0:	e00a      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077f8:	e006      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80077fa:	bf00      	nop
 80077fc:	e004      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80077fe:	bf00      	nop
 8007800:	e002      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007802:	bf00      	nop
 8007804:	e000      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10b      	bne.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007810:	4ba3      	ldr	r3, [pc, #652]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007814:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800781c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007820:	4a9f      	ldr	r2, [pc, #636]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007822:	430b      	orrs	r3, r1
 8007824:	6593      	str	r3, [r2, #88]	; 0x58
 8007826:	e003      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800782c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800783c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007840:	2300      	movs	r3, #0
 8007842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007846:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800784a:	460b      	mov	r3, r1
 800784c:	4313      	orrs	r3, r2
 800784e:	d037      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800785a:	d00e      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800785c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007860:	d816      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d018      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800786a:	d111      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800786c:	4b8c      	ldr	r3, [pc, #560]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007870:	4a8b      	ldr	r2, [pc, #556]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007878:	e00f      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800787a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800787e:	3308      	adds	r3, #8
 8007880:	2101      	movs	r1, #1
 8007882:	4618      	mov	r0, r3
 8007884:	f001 f94c 	bl	8008b20 <RCCEx_PLL2_Config>
 8007888:	4603      	mov	r3, r0
 800788a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800788e:	e004      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007896:	e000      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80078a2:	4b7f      	ldr	r3, [pc, #508]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80078aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b0:	4a7b      	ldr	r2, [pc, #492]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078b2:	430b      	orrs	r3, r1
 80078b4:	6513      	str	r3, [r2, #80]	; 0x50
 80078b6:	e003      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80078c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80078cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078d0:	2300      	movs	r3, #0
 80078d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80078d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80078da:	460b      	mov	r3, r1
 80078dc:	4313      	orrs	r3, r2
 80078de:	d039      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80078e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d81c      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80078ea:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80078ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f0:	0800792d 	.word	0x0800792d
 80078f4:	08007901 	.word	0x08007901
 80078f8:	0800790f 	.word	0x0800790f
 80078fc:	0800792d 	.word	0x0800792d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007900:	4b67      	ldr	r3, [pc, #412]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	4a66      	ldr	r2, [pc, #408]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800790a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800790c:	e00f      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800790e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007912:	3308      	adds	r3, #8
 8007914:	2102      	movs	r1, #2
 8007916:	4618      	mov	r0, r3
 8007918:	f001 f902 	bl	8008b20 <RCCEx_PLL2_Config>
 800791c:	4603      	mov	r3, r0
 800791e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007922:	e004      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800792a:	e000      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800792c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800792e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10a      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007936:	4b5a      	ldr	r3, [pc, #360]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800793a:	f023 0103 	bic.w	r1, r3, #3
 800793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007944:	4a56      	ldr	r2, [pc, #344]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007946:	430b      	orrs	r3, r1
 8007948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800794a:	e003      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007950:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007960:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007964:	2300      	movs	r3, #0
 8007966:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800796a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800796e:	460b      	mov	r3, r1
 8007970:	4313      	orrs	r3, r2
 8007972:	f000 809f 	beq.w	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007976:	4b4b      	ldr	r3, [pc, #300]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a4a      	ldr	r2, [pc, #296]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800797c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007980:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007982:	f7fb fd09 	bl	8003398 <HAL_GetTick>
 8007986:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800798a:	e00b      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800798c:	f7fb fd04 	bl	8003398 <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	2b64      	cmp	r3, #100	; 0x64
 800799a:	d903      	bls.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079a2:	e005      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079a4:	4b3f      	ldr	r3, [pc, #252]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0ed      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80079b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d179      	bne.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80079b8:	4b39      	ldr	r3, [pc, #228]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80079c4:	4053      	eors	r3, r2
 80079c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d015      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079ce:	4b34      	ldr	r3, [pc, #208]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079da:	4b31      	ldr	r3, [pc, #196]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079de:	4a30      	ldr	r2, [pc, #192]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079e4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079e6:	4b2e      	ldr	r3, [pc, #184]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ea:	4a2d      	ldr	r2, [pc, #180]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079f0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80079f2:	4a2b      	ldr	r2, [pc, #172]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80079f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80079fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a06:	d118      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a08:	f7fb fcc6 	bl	8003398 <HAL_GetTick>
 8007a0c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a10:	e00d      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a12:	f7fb fcc1 	bl	8003398 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a1c:	1ad2      	subs	r2, r2, r3
 8007a1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d903      	bls.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007a2c:	e005      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a2e:	4b1c      	ldr	r3, [pc, #112]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0eb      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d129      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a52:	d10e      	bne.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007a54:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a64:	091a      	lsrs	r2, r3, #4
 8007a66:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007a68:	4013      	ands	r3, r2
 8007a6a:	4a0d      	ldr	r2, [pc, #52]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	6113      	str	r3, [r2, #16]
 8007a70:	e005      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007a72:	4b0b      	ldr	r3, [pc, #44]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	4a0a      	ldr	r2, [pc, #40]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007a7c:	6113      	str	r3, [r2, #16]
 8007a7e:	4b08      	ldr	r3, [pc, #32]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a80:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a8e:	4a04      	ldr	r2, [pc, #16]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a90:	430b      	orrs	r3, r1
 8007a92:	6713      	str	r3, [r2, #112]	; 0x70
 8007a94:	e00e      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007a9e:	e009      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007aa0:	58024400 	.word	0x58024400
 8007aa4:	58024800 	.word	0x58024800
 8007aa8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ab0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	f002 0301 	and.w	r3, r2, #1
 8007ac0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	f000 8089 	beq.w	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007adc:	2b28      	cmp	r3, #40	; 0x28
 8007ade:	d86b      	bhi.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007ae0:	a201      	add	r2, pc, #4	; (adr r2, 8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae6:	bf00      	nop
 8007ae8:	08007bc1 	.word	0x08007bc1
 8007aec:	08007bb9 	.word	0x08007bb9
 8007af0:	08007bb9 	.word	0x08007bb9
 8007af4:	08007bb9 	.word	0x08007bb9
 8007af8:	08007bb9 	.word	0x08007bb9
 8007afc:	08007bb9 	.word	0x08007bb9
 8007b00:	08007bb9 	.word	0x08007bb9
 8007b04:	08007bb9 	.word	0x08007bb9
 8007b08:	08007b8d 	.word	0x08007b8d
 8007b0c:	08007bb9 	.word	0x08007bb9
 8007b10:	08007bb9 	.word	0x08007bb9
 8007b14:	08007bb9 	.word	0x08007bb9
 8007b18:	08007bb9 	.word	0x08007bb9
 8007b1c:	08007bb9 	.word	0x08007bb9
 8007b20:	08007bb9 	.word	0x08007bb9
 8007b24:	08007bb9 	.word	0x08007bb9
 8007b28:	08007ba3 	.word	0x08007ba3
 8007b2c:	08007bb9 	.word	0x08007bb9
 8007b30:	08007bb9 	.word	0x08007bb9
 8007b34:	08007bb9 	.word	0x08007bb9
 8007b38:	08007bb9 	.word	0x08007bb9
 8007b3c:	08007bb9 	.word	0x08007bb9
 8007b40:	08007bb9 	.word	0x08007bb9
 8007b44:	08007bb9 	.word	0x08007bb9
 8007b48:	08007bc1 	.word	0x08007bc1
 8007b4c:	08007bb9 	.word	0x08007bb9
 8007b50:	08007bb9 	.word	0x08007bb9
 8007b54:	08007bb9 	.word	0x08007bb9
 8007b58:	08007bb9 	.word	0x08007bb9
 8007b5c:	08007bb9 	.word	0x08007bb9
 8007b60:	08007bb9 	.word	0x08007bb9
 8007b64:	08007bb9 	.word	0x08007bb9
 8007b68:	08007bc1 	.word	0x08007bc1
 8007b6c:	08007bb9 	.word	0x08007bb9
 8007b70:	08007bb9 	.word	0x08007bb9
 8007b74:	08007bb9 	.word	0x08007bb9
 8007b78:	08007bb9 	.word	0x08007bb9
 8007b7c:	08007bb9 	.word	0x08007bb9
 8007b80:	08007bb9 	.word	0x08007bb9
 8007b84:	08007bb9 	.word	0x08007bb9
 8007b88:	08007bc1 	.word	0x08007bc1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b90:	3308      	adds	r3, #8
 8007b92:	2101      	movs	r1, #1
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 ffc3 	bl	8008b20 <RCCEx_PLL2_Config>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ba0:	e00f      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba6:	3328      	adds	r3, #40	; 0x28
 8007ba8:	2101      	movs	r1, #1
 8007baa:	4618      	mov	r0, r3
 8007bac:	f001 f86a 	bl	8008c84 <RCCEx_PLL3_Config>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007bb6:	e004      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bbe:	e000      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10a      	bne.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007bca:	4bbf      	ldr	r3, [pc, #764]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bce:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bd8:	4abb      	ldr	r2, [pc, #748]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bda:	430b      	orrs	r3, r1
 8007bdc:	6553      	str	r3, [r2, #84]	; 0x54
 8007bde:	e003      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007be4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f002 0302 	and.w	r3, r2, #2
 8007bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007bfe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007c02:	460b      	mov	r3, r1
 8007c04:	4313      	orrs	r3, r2
 8007c06:	d041      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c0e:	2b05      	cmp	r3, #5
 8007c10:	d824      	bhi.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007c12:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c65 	.word	0x08007c65
 8007c1c:	08007c31 	.word	0x08007c31
 8007c20:	08007c47 	.word	0x08007c47
 8007c24:	08007c65 	.word	0x08007c65
 8007c28:	08007c65 	.word	0x08007c65
 8007c2c:	08007c65 	.word	0x08007c65
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c34:	3308      	adds	r3, #8
 8007c36:	2101      	movs	r1, #1
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 ff71 	bl	8008b20 <RCCEx_PLL2_Config>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007c44:	e00f      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c4a:	3328      	adds	r3, #40	; 0x28
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f001 f818 	bl	8008c84 <RCCEx_PLL3_Config>
 8007c54:	4603      	mov	r3, r0
 8007c56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007c5a:	e004      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c62:	e000      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10a      	bne.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c6e:	4b96      	ldr	r3, [pc, #600]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c72:	f023 0107 	bic.w	r1, r3, #7
 8007c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c7c:	4a92      	ldr	r2, [pc, #584]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c7e:	430b      	orrs	r3, r1
 8007c80:	6553      	str	r3, [r2, #84]	; 0x54
 8007c82:	e003      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	f002 0304 	and.w	r3, r2, #4
 8007c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ca2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	d044      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cb4:	2b05      	cmp	r3, #5
 8007cb6:	d825      	bhi.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007cb8:	a201      	add	r2, pc, #4	; (adr r2, 8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbe:	bf00      	nop
 8007cc0:	08007d0d 	.word	0x08007d0d
 8007cc4:	08007cd9 	.word	0x08007cd9
 8007cc8:	08007cef 	.word	0x08007cef
 8007ccc:	08007d0d 	.word	0x08007d0d
 8007cd0:	08007d0d 	.word	0x08007d0d
 8007cd4:	08007d0d 	.word	0x08007d0d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cdc:	3308      	adds	r3, #8
 8007cde:	2101      	movs	r1, #1
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 ff1d 	bl	8008b20 <RCCEx_PLL2_Config>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007cec:	e00f      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf2:	3328      	adds	r3, #40	; 0x28
 8007cf4:	2101      	movs	r1, #1
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 ffc4 	bl	8008c84 <RCCEx_PLL3_Config>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007d02:	e004      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d0a:	e000      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10b      	bne.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d16:	4b6c      	ldr	r3, [pc, #432]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1a:	f023 0107 	bic.w	r1, r3, #7
 8007d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d26:	4a68      	ldr	r2, [pc, #416]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	6593      	str	r3, [r2, #88]	; 0x58
 8007d2c:	e003      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	f002 0320 	and.w	r3, r2, #32
 8007d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d46:	2300      	movs	r3, #0
 8007d48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d50:	460b      	mov	r3, r1
 8007d52:	4313      	orrs	r3, r2
 8007d54:	d055      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d62:	d033      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d68:	d82c      	bhi.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6e:	d02f      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d74:	d826      	bhi.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d7a:	d02b      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007d7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d80:	d820      	bhi.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d86:	d012      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d8c:	d81a      	bhi.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d022      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007d92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d96:	d115      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	2100      	movs	r1, #0
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 febd 	bl	8008b20 <RCCEx_PLL2_Config>
 8007da6:	4603      	mov	r3, r0
 8007da8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007dac:	e015      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db2:	3328      	adds	r3, #40	; 0x28
 8007db4:	2102      	movs	r1, #2
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 ff64 	bl	8008c84 <RCCEx_PLL3_Config>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007dc2:	e00a      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007dca:	e006      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007dcc:	bf00      	nop
 8007dce:	e004      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007dd0:	bf00      	nop
 8007dd2:	e002      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007dd4:	bf00      	nop
 8007dd6:	e000      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10b      	bne.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007de2:	4b39      	ldr	r3, [pc, #228]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df2:	4a35      	ldr	r2, [pc, #212]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007df4:	430b      	orrs	r3, r1
 8007df6:	6553      	str	r3, [r2, #84]	; 0x54
 8007df8:	e003      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e12:	2300      	movs	r3, #0
 8007e14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e18:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	d058      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e2a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e2e:	d033      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007e30:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e34:	d82c      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e3a:	d02f      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e40:	d826      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e46:	d02b      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007e48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e4c:	d820      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e52:	d012      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e58:	d81a      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d022      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e62:	d115      	bne.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e68:	3308      	adds	r3, #8
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 fe57 	bl	8008b20 <RCCEx_PLL2_Config>
 8007e72:	4603      	mov	r3, r0
 8007e74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e78:	e015      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e7e:	3328      	adds	r3, #40	; 0x28
 8007e80:	2102      	movs	r1, #2
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fefe 	bl	8008c84 <RCCEx_PLL3_Config>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e8e:	e00a      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e96:	e006      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e98:	bf00      	nop
 8007e9a:	e004      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e9c:	bf00      	nop
 8007e9e:	e002      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ea0:	bf00      	nop
 8007ea2:	e000      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10e      	bne.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007eae:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ebe:	4a02      	ldr	r2, [pc, #8]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8007ec4:	e006      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007ec6:	bf00      	nop
 8007ec8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ed0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007edc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007eea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	d055      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007efc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f00:	d033      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007f02:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f06:	d82c      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f0c:	d02f      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f12:	d826      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007f14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f18:	d02b      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007f1a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f1e:	d820      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007f20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f24:	d012      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007f26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f2a:	d81a      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d022      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f34:	d115      	bne.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 fdee 	bl	8008b20 <RCCEx_PLL2_Config>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007f4a:	e015      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f50:	3328      	adds	r3, #40	; 0x28
 8007f52:	2102      	movs	r1, #2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 fe95 	bl	8008c84 <RCCEx_PLL3_Config>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007f60:	e00a      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f68:	e006      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f6a:	bf00      	nop
 8007f6c:	e004      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f6e:	bf00      	nop
 8007f70:	e002      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f72:	bf00      	nop
 8007f74:	e000      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10b      	bne.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f80:	4ba1      	ldr	r3, [pc, #644]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f84:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f90:	4a9d      	ldr	r2, [pc, #628]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f92:	430b      	orrs	r3, r1
 8007f94:	6593      	str	r3, [r2, #88]	; 0x58
 8007f96:	e003      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	f002 0308 	and.w	r3, r2, #8
 8007fac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007fb6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	d01e      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fcc:	d10c      	bne.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fd2:	3328      	adds	r3, #40	; 0x28
 8007fd4:	2102      	movs	r1, #2
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fe54 	bl	8008c84 <RCCEx_PLL3_Config>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007fe8:	4b87      	ldr	r3, [pc, #540]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ff8:	4a83      	ldr	r2, [pc, #524]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ffa:	430b      	orrs	r3, r1
 8007ffc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008006:	f002 0310 	and.w	r3, r2, #16
 800800a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800800e:	2300      	movs	r3, #0
 8008010:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008014:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008018:	460b      	mov	r3, r1
 800801a:	4313      	orrs	r3, r2
 800801c:	d01e      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800801e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008022:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800802a:	d10c      	bne.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800802c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008030:	3328      	adds	r3, #40	; 0x28
 8008032:	2102      	movs	r1, #2
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fe25 	bl	8008c84 <RCCEx_PLL3_Config>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008046:	4b70      	ldr	r3, [pc, #448]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800804a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800804e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008052:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008056:	4a6c      	ldr	r2, [pc, #432]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008058:	430b      	orrs	r3, r1
 800805a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800805c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800806c:	2300      	movs	r3, #0
 800806e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008072:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008076:	460b      	mov	r3, r1
 8008078:	4313      	orrs	r3, r2
 800807a:	d03e      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800807c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008080:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008088:	d022      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800808a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800808e:	d81b      	bhi.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008098:	d00b      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800809a:	e015      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800809c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080a0:	3308      	adds	r3, #8
 80080a2:	2100      	movs	r1, #0
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 fd3b 	bl	8008b20 <RCCEx_PLL2_Config>
 80080aa:	4603      	mov	r3, r0
 80080ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80080b0:	e00f      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b6:	3328      	adds	r3, #40	; 0x28
 80080b8:	2102      	movs	r1, #2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fde2 	bl	8008c84 <RCCEx_PLL3_Config>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80080c6:	e004      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080ce:	e000      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80080d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10b      	bne.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80080da:	4b4b      	ldr	r3, [pc, #300]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80080e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080ea:	4a47      	ldr	r2, [pc, #284]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080ec:	430b      	orrs	r3, r1
 80080ee:	6593      	str	r3, [r2, #88]	; 0x58
 80080f0:	e003      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008102:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008106:	67bb      	str	r3, [r7, #120]	; 0x78
 8008108:	2300      	movs	r3, #0
 800810a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800810c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008110:	460b      	mov	r3, r1
 8008112:	4313      	orrs	r3, r2
 8008114:	d03b      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800811a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008122:	d01f      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008124:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008128:	d818      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800812a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800812e:	d003      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008130:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008134:	d007      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008136:	e011      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008138:	4b33      	ldr	r3, [pc, #204]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	4a32      	ldr	r2, [pc, #200]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800813e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008142:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008144:	e00f      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800814a:	3328      	adds	r3, #40	; 0x28
 800814c:	2101      	movs	r1, #1
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fd98 	bl	8008c84 <RCCEx_PLL3_Config>
 8008154:	4603      	mov	r3, r0
 8008156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800815a:	e004      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008162:	e000      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10b      	bne.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800816e:	4b26      	ldr	r3, [pc, #152]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008172:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800817a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800817e:	4a22      	ldr	r2, [pc, #136]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008180:	430b      	orrs	r3, r1
 8008182:	6553      	str	r3, [r2, #84]	; 0x54
 8008184:	e003      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800818a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800818e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800819a:	673b      	str	r3, [r7, #112]	; 0x70
 800819c:	2300      	movs	r3, #0
 800819e:	677b      	str	r3, [r7, #116]	; 0x74
 80081a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80081a4:	460b      	mov	r3, r1
 80081a6:	4313      	orrs	r3, r2
 80081a8:	d034      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80081aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80081b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081b8:	d007      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80081ba:	e011      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081bc:	4b12      	ldr	r3, [pc, #72]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c0:	4a11      	ldr	r2, [pc, #68]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80081c8:	e00e      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ce:	3308      	adds	r3, #8
 80081d0:	2102      	movs	r1, #2
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fca4 	bl	8008b20 <RCCEx_PLL2_Config>
 80081d8:	4603      	mov	r3, r0
 80081da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80081de:	e003      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10d      	bne.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80081f0:	4b05      	ldr	r3, [pc, #20]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081fe:	4a02      	ldr	r2, [pc, #8]	; (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008200:	430b      	orrs	r3, r1
 8008202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008204:	e006      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008206:	bf00      	nop
 8008208:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800820c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008210:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008220:	66bb      	str	r3, [r7, #104]	; 0x68
 8008222:	2300      	movs	r3, #0
 8008224:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008226:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800822a:	460b      	mov	r3, r1
 800822c:	4313      	orrs	r3, r2
 800822e:	d00c      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008234:	3328      	adds	r3, #40	; 0x28
 8008236:	2102      	movs	r1, #2
 8008238:	4618      	mov	r0, r3
 800823a:	f000 fd23 	bl	8008c84 <RCCEx_PLL3_Config>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800824a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008256:	663b      	str	r3, [r7, #96]	; 0x60
 8008258:	2300      	movs	r3, #0
 800825a:	667b      	str	r3, [r7, #100]	; 0x64
 800825c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008260:	460b      	mov	r3, r1
 8008262:	4313      	orrs	r3, r2
 8008264:	d038      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800826a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800826e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008272:	d018      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008278:	d811      	bhi.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800827a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800827e:	d014      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008284:	d80b      	bhi.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008286:	2b00      	cmp	r3, #0
 8008288:	d011      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800828a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800828e:	d106      	bne.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008290:	4bc3      	ldr	r3, [pc, #780]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	4ac2      	ldr	r2, [pc, #776]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800829a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800829c:	e008      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082a4:	e004      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80082a6:	bf00      	nop
 80082a8:	e002      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80082aa:	bf00      	nop
 80082ac:	e000      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80082ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10b      	bne.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082b8:	4bb9      	ldr	r3, [pc, #740]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80082c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082c8:	4ab5      	ldr	r2, [pc, #724]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082ca:	430b      	orrs	r3, r1
 80082cc:	6553      	str	r3, [r2, #84]	; 0x54
 80082ce:	e003      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80082d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80082e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80082e6:	2300      	movs	r3, #0
 80082e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082ea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80082ee:	460b      	mov	r3, r1
 80082f0:	4313      	orrs	r3, r2
 80082f2:	d009      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80082f4:	4baa      	ldr	r3, [pc, #680]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80082fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008302:	4aa7      	ldr	r2, [pc, #668]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008304:	430b      	orrs	r3, r1
 8008306:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008314:	653b      	str	r3, [r7, #80]	; 0x50
 8008316:	2300      	movs	r3, #0
 8008318:	657b      	str	r3, [r7, #84]	; 0x54
 800831a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800831e:	460b      	mov	r3, r1
 8008320:	4313      	orrs	r3, r2
 8008322:	d00a      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008324:	4b9e      	ldr	r3, [pc, #632]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800832c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008330:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008334:	4a9a      	ldr	r2, [pc, #616]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008336:	430b      	orrs	r3, r1
 8008338:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800833a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008346:	64bb      	str	r3, [r7, #72]	; 0x48
 8008348:	2300      	movs	r3, #0
 800834a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800834c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008350:	460b      	mov	r3, r1
 8008352:	4313      	orrs	r3, r2
 8008354:	d009      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008356:	4b92      	ldr	r3, [pc, #584]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800835e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008364:	4a8e      	ldr	r2, [pc, #568]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008366:	430b      	orrs	r3, r1
 8008368:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008372:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008376:	643b      	str	r3, [r7, #64]	; 0x40
 8008378:	2300      	movs	r3, #0
 800837a:	647b      	str	r3, [r7, #68]	; 0x44
 800837c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008380:	460b      	mov	r3, r1
 8008382:	4313      	orrs	r3, r2
 8008384:	d00e      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008386:	4b86      	ldr	r3, [pc, #536]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	4a85      	ldr	r2, [pc, #532]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800838c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008390:	6113      	str	r3, [r2, #16]
 8008392:	4b83      	ldr	r3, [pc, #524]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008394:	6919      	ldr	r1, [r3, #16]
 8008396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800839a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800839e:	4a80      	ldr	r2, [pc, #512]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083a0:	430b      	orrs	r3, r1
 80083a2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80083a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80083b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80083b2:	2300      	movs	r3, #0
 80083b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80083ba:	460b      	mov	r3, r1
 80083bc:	4313      	orrs	r3, r2
 80083be:	d009      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80083c0:	4b77      	ldr	r3, [pc, #476]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083c4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80083c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ce:	4a74      	ldr	r2, [pc, #464]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083d0:	430b      	orrs	r3, r1
 80083d2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80083d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80083e0:	633b      	str	r3, [r7, #48]	; 0x30
 80083e2:	2300      	movs	r3, #0
 80083e4:	637b      	str	r3, [r7, #52]	; 0x34
 80083e6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80083ea:	460b      	mov	r3, r1
 80083ec:	4313      	orrs	r3, r2
 80083ee:	d00a      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80083f0:	4b6b      	ldr	r3, [pc, #428]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80083f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008400:	4a67      	ldr	r2, [pc, #412]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008402:	430b      	orrs	r3, r1
 8008404:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	2100      	movs	r1, #0
 8008410:	62b9      	str	r1, [r7, #40]	; 0x28
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008418:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800841c:	460b      	mov	r3, r1
 800841e:	4313      	orrs	r3, r2
 8008420:	d011      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008426:	3308      	adds	r3, #8
 8008428:	2100      	movs	r1, #0
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fb78 	bl	8008b20 <RCCEx_PLL2_Config>
 8008430:	4603      	mov	r3, r0
 8008432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800843e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008442:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	2100      	movs	r1, #0
 8008450:	6239      	str	r1, [r7, #32]
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	627b      	str	r3, [r7, #36]	; 0x24
 8008458:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800845c:	460b      	mov	r3, r1
 800845e:	4313      	orrs	r3, r2
 8008460:	d011      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008466:	3308      	adds	r3, #8
 8008468:	2101      	movs	r1, #1
 800846a:	4618      	mov	r0, r3
 800846c:	f000 fb58 	bl	8008b20 <RCCEx_PLL2_Config>
 8008470:	4603      	mov	r3, r0
 8008472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800847e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008482:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	2100      	movs	r1, #0
 8008490:	61b9      	str	r1, [r7, #24]
 8008492:	f003 0304 	and.w	r3, r3, #4
 8008496:	61fb      	str	r3, [r7, #28]
 8008498:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800849c:	460b      	mov	r3, r1
 800849e:	4313      	orrs	r3, r2
 80084a0:	d011      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a6:	3308      	adds	r3, #8
 80084a8:	2102      	movs	r1, #2
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fb38 	bl	8008b20 <RCCEx_PLL2_Config>
 80084b0:	4603      	mov	r3, r0
 80084b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80084b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80084c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	2100      	movs	r1, #0
 80084d0:	6139      	str	r1, [r7, #16]
 80084d2:	f003 0308 	and.w	r3, r3, #8
 80084d6:	617b      	str	r3, [r7, #20]
 80084d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80084dc:	460b      	mov	r3, r1
 80084de:	4313      	orrs	r3, r2
 80084e0:	d011      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e6:	3328      	adds	r3, #40	; 0x28
 80084e8:	2100      	movs	r1, #0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 fbca 	bl	8008c84 <RCCEx_PLL3_Config>
 80084f0:	4603      	mov	r3, r0
 80084f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80084f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008502:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	2100      	movs	r1, #0
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	f003 0310 	and.w	r3, r3, #16
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800851c:	460b      	mov	r3, r1
 800851e:	4313      	orrs	r3, r2
 8008520:	d011      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008526:	3328      	adds	r3, #40	; 0x28
 8008528:	2101      	movs	r1, #1
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fbaa 	bl	8008c84 <RCCEx_PLL3_Config>
 8008530:	4603      	mov	r3, r0
 8008532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008536:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800853e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008542:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	2100      	movs	r1, #0
 8008550:	6039      	str	r1, [r7, #0]
 8008552:	f003 0320 	and.w	r3, r3, #32
 8008556:	607b      	str	r3, [r7, #4]
 8008558:	e9d7 1200 	ldrd	r1, r2, [r7]
 800855c:	460b      	mov	r3, r1
 800855e:	4313      	orrs	r3, r2
 8008560:	d011      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008566:	3328      	adds	r3, #40	; 0x28
 8008568:	2102      	movs	r1, #2
 800856a:	4618      	mov	r0, r3
 800856c:	f000 fb8a 	bl	8008c84 <RCCEx_PLL3_Config>
 8008570:	4603      	mov	r3, r0
 8008572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008582:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008586:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800858a:	2b00      	cmp	r3, #0
 800858c:	d101      	bne.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	e000      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
}
 8008594:	4618      	mov	r0, r3
 8008596:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800859a:	46bd      	mov	sp, r7
 800859c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085a0:	58024400 	.word	0x58024400

080085a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80085a8:	f7fe fd96 	bl	80070d8 <HAL_RCC_GetHCLKFreq>
 80085ac:	4602      	mov	r2, r0
 80085ae:	4b06      	ldr	r3, [pc, #24]	; (80085c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	091b      	lsrs	r3, r3, #4
 80085b4:	f003 0307 	and.w	r3, r3, #7
 80085b8:	4904      	ldr	r1, [pc, #16]	; (80085cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80085ba:	5ccb      	ldrb	r3, [r1, r3]
 80085bc:	f003 031f 	and.w	r3, r3, #31
 80085c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	58024400 	.word	0x58024400
 80085cc:	08010418 	.word	0x08010418

080085d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b089      	sub	sp, #36	; 0x24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085d8:	4ba1      	ldr	r3, [pc, #644]	; (8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085dc:	f003 0303 	and.w	r3, r3, #3
 80085e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80085e2:	4b9f      	ldr	r3, [pc, #636]	; (8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e6:	0b1b      	lsrs	r3, r3, #12
 80085e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80085ee:	4b9c      	ldr	r3, [pc, #624]	; (8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f2:	091b      	lsrs	r3, r3, #4
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80085fa:	4b99      	ldr	r3, [pc, #612]	; (8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fe:	08db      	lsrs	r3, r3, #3
 8008600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	fb02 f303 	mul.w	r3, r2, r3
 800860a:	ee07 3a90 	vmov	s15, r3
 800860e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008612:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 8111 	beq.w	8008840 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	2b02      	cmp	r3, #2
 8008622:	f000 8083 	beq.w	800872c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	2b02      	cmp	r3, #2
 800862a:	f200 80a1 	bhi.w	8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d056      	beq.n	80086e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800863a:	e099      	b.n	8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800863c:	4b88      	ldr	r3, [pc, #544]	; (8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0320 	and.w	r3, r3, #32
 8008644:	2b00      	cmp	r3, #0
 8008646:	d02d      	beq.n	80086a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008648:	4b85      	ldr	r3, [pc, #532]	; (8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	08db      	lsrs	r3, r3, #3
 800864e:	f003 0303 	and.w	r3, r3, #3
 8008652:	4a84      	ldr	r2, [pc, #528]	; (8008864 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008654:	fa22 f303 	lsr.w	r3, r2, r3
 8008658:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	ee07 3a90 	vmov	s15, r3
 8008660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	ee07 3a90 	vmov	s15, r3
 800866a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008672:	4b7b      	ldr	r3, [pc, #492]	; (8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008682:	ed97 6a03 	vldr	s12, [r7, #12]
 8008686:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008868 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800868a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800869a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80086a2:	e087      	b.n	80087b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	ee07 3a90 	vmov	s15, r3
 80086aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800886c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80086b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b6:	4b6a      	ldr	r3, [pc, #424]	; (8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008868 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086e6:	e065      	b.n	80087b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008870 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80086f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086fa:	4b59      	ldr	r3, [pc, #356]	; (8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800870a:	ed97 6a03 	vldr	s12, [r7, #12]
 800870e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008868 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800871a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800871e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800872a:	e043      	b.n	80087b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008736:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008874 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800873a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873e:	4b48      	ldr	r3, [pc, #288]	; (8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008752:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008868 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800875a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800875e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800876e:	e021      	b.n	80087b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008870 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800877e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008782:	4b37      	ldr	r3, [pc, #220]	; (8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008792:	ed97 6a03 	vldr	s12, [r7, #12]
 8008796:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008868 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800879a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800879e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80087b4:	4b2a      	ldr	r3, [pc, #168]	; (8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b8:	0a5b      	lsrs	r3, r3, #9
 80087ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80087d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087da:	ee17 2a90 	vmov	r2, s15
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80087e2:	4b1f      	ldr	r3, [pc, #124]	; (8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e6:	0c1b      	lsrs	r3, r3, #16
 80087e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ec:	ee07 3a90 	vmov	s15, r3
 80087f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008808:	ee17 2a90 	vmov	r2, s15
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008810:	4b13      	ldr	r3, [pc, #76]	; (8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008814:	0e1b      	lsrs	r3, r3, #24
 8008816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800882a:	edd7 6a07 	vldr	s13, [r7, #28]
 800882e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008836:	ee17 2a90 	vmov	r2, s15
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800883e:	e008      	b.n	8008852 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	609a      	str	r2, [r3, #8]
}
 8008852:	bf00      	nop
 8008854:	3724      	adds	r7, #36	; 0x24
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	58024400 	.word	0x58024400
 8008864:	03d09000 	.word	0x03d09000
 8008868:	46000000 	.word	0x46000000
 800886c:	4c742400 	.word	0x4c742400
 8008870:	4a742400 	.word	0x4a742400
 8008874:	4b742400 	.word	0x4b742400

08008878 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008878:	b480      	push	{r7}
 800887a:	b089      	sub	sp, #36	; 0x24
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008880:	4ba1      	ldr	r3, [pc, #644]	; (8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008884:	f003 0303 	and.w	r3, r3, #3
 8008888:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800888a:	4b9f      	ldr	r3, [pc, #636]	; (8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800888c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888e:	0d1b      	lsrs	r3, r3, #20
 8008890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008894:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008896:	4b9c      	ldr	r3, [pc, #624]	; (8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889a:	0a1b      	lsrs	r3, r3, #8
 800889c:	f003 0301 	and.w	r3, r3, #1
 80088a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80088a2:	4b99      	ldr	r3, [pc, #612]	; (8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a6:	08db      	lsrs	r3, r3, #3
 80088a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	fb02 f303 	mul.w	r3, r2, r3
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 8111 	beq.w	8008ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	f000 8083 	beq.w	80089d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	f200 80a1 	bhi.w	8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d003      	beq.n	80088e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d056      	beq.n	8008990 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80088e2:	e099      	b.n	8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088e4:	4b88      	ldr	r3, [pc, #544]	; (8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0320 	and.w	r3, r3, #32
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d02d      	beq.n	800894c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088f0:	4b85      	ldr	r3, [pc, #532]	; (8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	08db      	lsrs	r3, r3, #3
 80088f6:	f003 0303 	and.w	r3, r3, #3
 80088fa:	4a84      	ldr	r2, [pc, #528]	; (8008b0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80088fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008900:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	ee07 3a90 	vmov	s15, r3
 8008908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	ee07 3a90 	vmov	s15, r3
 8008912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800891a:	4b7b      	ldr	r3, [pc, #492]	; (8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800891c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008922:	ee07 3a90 	vmov	s15, r3
 8008926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800892a:	ed97 6a03 	vldr	s12, [r7, #12]
 800892e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800893a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800893e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008946:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800894a:	e087      	b.n	8008a5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	ee07 3a90 	vmov	s15, r3
 8008952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008956:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800895a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800895e:	4b6a      	ldr	r3, [pc, #424]	; (8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800896e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008972:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800897a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800897e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800898a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800898e:	e065      	b.n	8008a5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	ee07 3a90 	vmov	s15, r3
 8008996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800899e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089a2:	4b59      	ldr	r3, [pc, #356]	; (8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089d2:	e043      	b.n	8008a5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	ee07 3a90 	vmov	s15, r3
 80089da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80089e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089e6:	4b48      	ldr	r3, [pc, #288]	; (8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a16:	e021      	b.n	8008a5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	ee07 3a90 	vmov	s15, r3
 8008a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a2a:	4b37      	ldr	r3, [pc, #220]	; (8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008a5c:	4b2a      	ldr	r3, [pc, #168]	; (8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a60:	0a5b      	lsrs	r3, r3, #9
 8008a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a76:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a82:	ee17 2a90 	vmov	r2, s15
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008a8a:	4b1f      	ldr	r3, [pc, #124]	; (8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8e:	0c1b      	lsrs	r3, r3, #16
 8008a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a94:	ee07 3a90 	vmov	s15, r3
 8008a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ab0:	ee17 2a90 	vmov	r2, s15
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008ab8:	4b13      	ldr	r3, [pc, #76]	; (8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abc:	0e1b      	lsrs	r3, r3, #24
 8008abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ace:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ad2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ade:	ee17 2a90 	vmov	r2, s15
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008ae6:	e008      	b.n	8008afa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	609a      	str	r2, [r3, #8]
}
 8008afa:	bf00      	nop
 8008afc:	3724      	adds	r7, #36	; 0x24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	58024400 	.word	0x58024400
 8008b0c:	03d09000 	.word	0x03d09000
 8008b10:	46000000 	.word	0x46000000
 8008b14:	4c742400 	.word	0x4c742400
 8008b18:	4a742400 	.word	0x4a742400
 8008b1c:	4b742400 	.word	0x4b742400

08008b20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b2e:	4b53      	ldr	r3, [pc, #332]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b32:	f003 0303 	and.w	r3, r3, #3
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d101      	bne.n	8008b3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e099      	b.n	8008c72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008b3e:	4b4f      	ldr	r3, [pc, #316]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a4e      	ldr	r2, [pc, #312]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008b44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b4a:	f7fa fc25 	bl	8003398 <HAL_GetTick>
 8008b4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b50:	e008      	b.n	8008b64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b52:	f7fa fc21 	bl	8003398 <HAL_GetTick>
 8008b56:	4602      	mov	r2, r0
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d901      	bls.n	8008b64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e086      	b.n	8008c72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b64:	4b45      	ldr	r3, [pc, #276]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1f0      	bne.n	8008b52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b70:	4b42      	ldr	r3, [pc, #264]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	031b      	lsls	r3, r3, #12
 8008b7e:	493f      	ldr	r1, [pc, #252]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	628b      	str	r3, [r1, #40]	; 0x28
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	3b01      	subs	r3, #1
 8008b94:	025b      	lsls	r3, r3, #9
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	041b      	lsls	r3, r3, #16
 8008ba2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	061b      	lsls	r3, r3, #24
 8008bb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008bb4:	4931      	ldr	r1, [pc, #196]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008bba:	4b30      	ldr	r3, [pc, #192]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	492d      	ldr	r1, [pc, #180]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008bcc:	4b2b      	ldr	r3, [pc, #172]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd0:	f023 0220 	bic.w	r2, r3, #32
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	4928      	ldr	r1, [pc, #160]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008bde:	4b27      	ldr	r3, [pc, #156]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be2:	4a26      	ldr	r2, [pc, #152]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008be4:	f023 0310 	bic.w	r3, r3, #16
 8008be8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008bea:	4b24      	ldr	r3, [pc, #144]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008bec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bee:	4b24      	ldr	r3, [pc, #144]	; (8008c80 <RCCEx_PLL2_Config+0x160>)
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	69d2      	ldr	r2, [r2, #28]
 8008bf6:	00d2      	lsls	r2, r2, #3
 8008bf8:	4920      	ldr	r1, [pc, #128]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008bfe:	4b1f      	ldr	r3, [pc, #124]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c02:	4a1e      	ldr	r2, [pc, #120]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008c04:	f043 0310 	orr.w	r3, r3, #16
 8008c08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d106      	bne.n	8008c1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c10:	4b1a      	ldr	r3, [pc, #104]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c14:	4a19      	ldr	r2, [pc, #100]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008c16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c1c:	e00f      	b.n	8008c3e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d106      	bne.n	8008c32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008c24:	4b15      	ldr	r3, [pc, #84]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c28:	4a14      	ldr	r2, [pc, #80]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008c2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c30:	e005      	b.n	8008c3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c32:	4b12      	ldr	r3, [pc, #72]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	4a11      	ldr	r2, [pc, #68]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c3e:	4b0f      	ldr	r3, [pc, #60]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a0e      	ldr	r2, [pc, #56]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008c44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c4a:	f7fa fba5 	bl	8003398 <HAL_GetTick>
 8008c4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c50:	e008      	b.n	8008c64 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c52:	f7fa fba1 	bl	8003398 <HAL_GetTick>
 8008c56:	4602      	mov	r2, r0
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d901      	bls.n	8008c64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e006      	b.n	8008c72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c64:	4b05      	ldr	r3, [pc, #20]	; (8008c7c <RCCEx_PLL2_Config+0x15c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d0f0      	beq.n	8008c52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	58024400 	.word	0x58024400
 8008c80:	ffff0007 	.word	0xffff0007

08008c84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c92:	4b53      	ldr	r3, [pc, #332]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c96:	f003 0303 	and.w	r3, r3, #3
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d101      	bne.n	8008ca2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e099      	b.n	8008dd6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008ca2:	4b4f      	ldr	r3, [pc, #316]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a4e      	ldr	r2, [pc, #312]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cae:	f7fa fb73 	bl	8003398 <HAL_GetTick>
 8008cb2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cb4:	e008      	b.n	8008cc8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cb6:	f7fa fb6f 	bl	8003398 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d901      	bls.n	8008cc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e086      	b.n	8008dd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cc8:	4b45      	ldr	r3, [pc, #276]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1f0      	bne.n	8008cb6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008cd4:	4b42      	ldr	r3, [pc, #264]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	051b      	lsls	r3, r3, #20
 8008ce2:	493f      	ldr	r1, [pc, #252]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	628b      	str	r3, [r1, #40]	; 0x28
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	025b      	lsls	r3, r3, #9
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	3b01      	subs	r3, #1
 8008d04:	041b      	lsls	r3, r3, #16
 8008d06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	3b01      	subs	r3, #1
 8008d12:	061b      	lsls	r3, r3, #24
 8008d14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d18:	4931      	ldr	r1, [pc, #196]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008d1e:	4b30      	ldr	r3, [pc, #192]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	492d      	ldr	r1, [pc, #180]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008d30:	4b2b      	ldr	r3, [pc, #172]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	4928      	ldr	r1, [pc, #160]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008d42:	4b27      	ldr	r3, [pc, #156]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d46:	4a26      	ldr	r2, [pc, #152]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d4e:	4b24      	ldr	r3, [pc, #144]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d52:	4b24      	ldr	r3, [pc, #144]	; (8008de4 <RCCEx_PLL3_Config+0x160>)
 8008d54:	4013      	ands	r3, r2
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	69d2      	ldr	r2, [r2, #28]
 8008d5a:	00d2      	lsls	r2, r2, #3
 8008d5c:	4920      	ldr	r1, [pc, #128]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d62:	4b1f      	ldr	r3, [pc, #124]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d66:	4a1e      	ldr	r2, [pc, #120]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d106      	bne.n	8008d82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d74:	4b1a      	ldr	r3, [pc, #104]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d78:	4a19      	ldr	r2, [pc, #100]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d80:	e00f      	b.n	8008da2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d106      	bne.n	8008d96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d88:	4b15      	ldr	r3, [pc, #84]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	4a14      	ldr	r2, [pc, #80]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d94:	e005      	b.n	8008da2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d96:	4b12      	ldr	r3, [pc, #72]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9a:	4a11      	ldr	r2, [pc, #68]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008d9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008da0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008da2:	4b0f      	ldr	r3, [pc, #60]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a0e      	ldr	r2, [pc, #56]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dae:	f7fa faf3 	bl	8003398 <HAL_GetTick>
 8008db2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008db4:	e008      	b.n	8008dc8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008db6:	f7fa faef 	bl	8003398 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d901      	bls.n	8008dc8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e006      	b.n	8008dd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008dc8:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <RCCEx_PLL3_Config+0x15c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d0f0      	beq.n	8008db6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	58024400 	.word	0x58024400
 8008de4:	ffff0007 	.word	0xffff0007

08008de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e049      	b.n	8008e8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d106      	bne.n	8008e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7f9 ffa6 	bl	8002d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	3304      	adds	r3, #4
 8008e24:	4619      	mov	r1, r3
 8008e26:	4610      	mov	r0, r2
 8008e28:	f000 fca0 	bl	800976c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d001      	beq.n	8008eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e054      	b.n	8008f5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68da      	ldr	r2, [r3, #12]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f042 0201 	orr.w	r2, r2, #1
 8008ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a26      	ldr	r2, [pc, #152]	; (8008f68 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d022      	beq.n	8008f18 <HAL_TIM_Base_Start_IT+0x80>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eda:	d01d      	beq.n	8008f18 <HAL_TIM_Base_Start_IT+0x80>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a22      	ldr	r2, [pc, #136]	; (8008f6c <HAL_TIM_Base_Start_IT+0xd4>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d018      	beq.n	8008f18 <HAL_TIM_Base_Start_IT+0x80>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a21      	ldr	r2, [pc, #132]	; (8008f70 <HAL_TIM_Base_Start_IT+0xd8>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d013      	beq.n	8008f18 <HAL_TIM_Base_Start_IT+0x80>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a1f      	ldr	r2, [pc, #124]	; (8008f74 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d00e      	beq.n	8008f18 <HAL_TIM_Base_Start_IT+0x80>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a1e      	ldr	r2, [pc, #120]	; (8008f78 <HAL_TIM_Base_Start_IT+0xe0>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d009      	beq.n	8008f18 <HAL_TIM_Base_Start_IT+0x80>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a1c      	ldr	r2, [pc, #112]	; (8008f7c <HAL_TIM_Base_Start_IT+0xe4>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d004      	beq.n	8008f18 <HAL_TIM_Base_Start_IT+0x80>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a1b      	ldr	r2, [pc, #108]	; (8008f80 <HAL_TIM_Base_Start_IT+0xe8>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d115      	bne.n	8008f44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	689a      	ldr	r2, [r3, #8]
 8008f1e:	4b19      	ldr	r3, [pc, #100]	; (8008f84 <HAL_TIM_Base_Start_IT+0xec>)
 8008f20:	4013      	ands	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b06      	cmp	r3, #6
 8008f28:	d015      	beq.n	8008f56 <HAL_TIM_Base_Start_IT+0xbe>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f30:	d011      	beq.n	8008f56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f042 0201 	orr.w	r2, r2, #1
 8008f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f42:	e008      	b.n	8008f56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f042 0201 	orr.w	r2, r2, #1
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	e000      	b.n	8008f58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	40010000 	.word	0x40010000
 8008f6c:	40000400 	.word	0x40000400
 8008f70:	40000800 	.word	0x40000800
 8008f74:	40000c00 	.word	0x40000c00
 8008f78:	40010400 	.word	0x40010400
 8008f7c:	40001800 	.word	0x40001800
 8008f80:	40014000 	.word	0x40014000
 8008f84:	00010007 	.word	0x00010007

08008f88 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f022 0201 	bic.w	r2, r2, #1
 8008f9e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6a1a      	ldr	r2, [r3, #32]
 8008fa6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008faa:	4013      	ands	r3, r2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10f      	bne.n	8008fd0 <HAL_TIM_Base_Stop_IT+0x48>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6a1a      	ldr	r2, [r3, #32]
 8008fb6:	f240 4344 	movw	r3, #1092	; 0x444
 8008fba:	4013      	ands	r3, r2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d107      	bne.n	8008fd0 <HAL_TIM_Base_Stop_IT+0x48>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 0201 	bic.w	r2, r2, #1
 8008fce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b082      	sub	sp, #8
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e049      	b.n	800908c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b00      	cmp	r3, #0
 8009002:	d106      	bne.n	8009012 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f841 	bl	8009094 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2202      	movs	r2, #2
 8009016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3304      	adds	r3, #4
 8009022:	4619      	mov	r1, r3
 8009024:	4610      	mov	r0, r2
 8009026:	f000 fba1 	bl	800976c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d122      	bne.n	8009104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d11b      	bne.n	8009104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f06f 0202 	mvn.w	r2, #2
 80090d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fb12 	bl	8009714 <HAL_TIM_IC_CaptureCallback>
 80090f0:	e005      	b.n	80090fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fb04 	bl	8009700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fb15 	bl	8009728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	f003 0304 	and.w	r3, r3, #4
 800910e:	2b04      	cmp	r3, #4
 8009110:	d122      	bne.n	8009158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f003 0304 	and.w	r3, r3, #4
 800911c:	2b04      	cmp	r3, #4
 800911e:	d11b      	bne.n	8009158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f06f 0204 	mvn.w	r2, #4
 8009128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2202      	movs	r2, #2
 800912e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800913a:	2b00      	cmp	r3, #0
 800913c:	d003      	beq.n	8009146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fae8 	bl	8009714 <HAL_TIM_IC_CaptureCallback>
 8009144:	e005      	b.n	8009152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fada 	bl	8009700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 faeb 	bl	8009728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	f003 0308 	and.w	r3, r3, #8
 8009162:	2b08      	cmp	r3, #8
 8009164:	d122      	bne.n	80091ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f003 0308 	and.w	r3, r3, #8
 8009170:	2b08      	cmp	r3, #8
 8009172:	d11b      	bne.n	80091ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f06f 0208 	mvn.w	r2, #8
 800917c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2204      	movs	r2, #4
 8009182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	f003 0303 	and.w	r3, r3, #3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fabe 	bl	8009714 <HAL_TIM_IC_CaptureCallback>
 8009198:	e005      	b.n	80091a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fab0 	bl	8009700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fac1 	bl	8009728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	f003 0310 	and.w	r3, r3, #16
 80091b6:	2b10      	cmp	r3, #16
 80091b8:	d122      	bne.n	8009200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f003 0310 	and.w	r3, r3, #16
 80091c4:	2b10      	cmp	r3, #16
 80091c6:	d11b      	bne.n	8009200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f06f 0210 	mvn.w	r2, #16
 80091d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2208      	movs	r2, #8
 80091d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fa94 	bl	8009714 <HAL_TIM_IC_CaptureCallback>
 80091ec:	e005      	b.n	80091fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fa86 	bl	8009700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fa97 	bl	8009728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b01      	cmp	r3, #1
 800920c:	d10e      	bne.n	800922c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f003 0301 	and.w	r3, r3, #1
 8009218:	2b01      	cmp	r3, #1
 800921a:	d107      	bne.n	800922c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f06f 0201 	mvn.w	r2, #1
 8009224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7f7 ffac 	bl	8001184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009236:	2b80      	cmp	r3, #128	; 0x80
 8009238:	d10e      	bne.n	8009258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009244:	2b80      	cmp	r3, #128	; 0x80
 8009246:	d107      	bne.n	8009258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 ffae 	bl	800a1b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009266:	d10e      	bne.n	8009286 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009272:	2b80      	cmp	r3, #128	; 0x80
 8009274:	d107      	bne.n	8009286 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800927e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 ffa1 	bl	800a1c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009290:	2b40      	cmp	r3, #64	; 0x40
 8009292:	d10e      	bne.n	80092b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800929e:	2b40      	cmp	r3, #64	; 0x40
 80092a0:	d107      	bne.n	80092b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fa45 	bl	800973c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	f003 0320 	and.w	r3, r3, #32
 80092bc:	2b20      	cmp	r3, #32
 80092be:	d10e      	bne.n	80092de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	f003 0320 	and.w	r3, r3, #32
 80092ca:	2b20      	cmp	r3, #32
 80092cc:	d107      	bne.n	80092de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f06f 0220 	mvn.w	r2, #32
 80092d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 ff61 	bl	800a1a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092de:	bf00      	nop
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
	...

080092e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d101      	bne.n	8009306 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009302:	2302      	movs	r3, #2
 8009304:	e0ff      	b.n	8009506 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b14      	cmp	r3, #20
 8009312:	f200 80f0 	bhi.w	80094f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009316:	a201      	add	r2, pc, #4	; (adr r2, 800931c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931c:	08009371 	.word	0x08009371
 8009320:	080094f7 	.word	0x080094f7
 8009324:	080094f7 	.word	0x080094f7
 8009328:	080094f7 	.word	0x080094f7
 800932c:	080093b1 	.word	0x080093b1
 8009330:	080094f7 	.word	0x080094f7
 8009334:	080094f7 	.word	0x080094f7
 8009338:	080094f7 	.word	0x080094f7
 800933c:	080093f3 	.word	0x080093f3
 8009340:	080094f7 	.word	0x080094f7
 8009344:	080094f7 	.word	0x080094f7
 8009348:	080094f7 	.word	0x080094f7
 800934c:	08009433 	.word	0x08009433
 8009350:	080094f7 	.word	0x080094f7
 8009354:	080094f7 	.word	0x080094f7
 8009358:	080094f7 	.word	0x080094f7
 800935c:	08009475 	.word	0x08009475
 8009360:	080094f7 	.word	0x080094f7
 8009364:	080094f7 	.word	0x080094f7
 8009368:	080094f7 	.word	0x080094f7
 800936c:	080094b5 	.word	0x080094b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68b9      	ldr	r1, [r7, #8]
 8009376:	4618      	mov	r0, r3
 8009378:	f000 fa92 	bl	80098a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	699a      	ldr	r2, [r3, #24]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f042 0208 	orr.w	r2, r2, #8
 800938a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	699a      	ldr	r2, [r3, #24]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f022 0204 	bic.w	r2, r2, #4
 800939a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6999      	ldr	r1, [r3, #24]
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	691a      	ldr	r2, [r3, #16]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	619a      	str	r2, [r3, #24]
      break;
 80093ae:	e0a5      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68b9      	ldr	r1, [r7, #8]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 fb02 	bl	80099c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699a      	ldr	r2, [r3, #24]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	699a      	ldr	r2, [r3, #24]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6999      	ldr	r1, [r3, #24]
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	021a      	lsls	r2, r3, #8
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	430a      	orrs	r2, r1
 80093ee:	619a      	str	r2, [r3, #24]
      break;
 80093f0:	e084      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68b9      	ldr	r1, [r7, #8]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 fb6b 	bl	8009ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	69da      	ldr	r2, [r3, #28]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f042 0208 	orr.w	r2, r2, #8
 800940c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	69da      	ldr	r2, [r3, #28]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f022 0204 	bic.w	r2, r2, #4
 800941c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	69d9      	ldr	r1, [r3, #28]
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	691a      	ldr	r2, [r3, #16]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	430a      	orrs	r2, r1
 800942e:	61da      	str	r2, [r3, #28]
      break;
 8009430:	e064      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68b9      	ldr	r1, [r7, #8]
 8009438:	4618      	mov	r0, r3
 800943a:	f000 fbd3 	bl	8009be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	69da      	ldr	r2, [r3, #28]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800944c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	69da      	ldr	r2, [r3, #28]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800945c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69d9      	ldr	r1, [r3, #28]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	021a      	lsls	r2, r3, #8
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	430a      	orrs	r2, r1
 8009470:	61da      	str	r2, [r3, #28]
      break;
 8009472:	e043      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68b9      	ldr	r1, [r7, #8]
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fc1c 	bl	8009cb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f042 0208 	orr.w	r2, r2, #8
 800948e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f022 0204 	bic.w	r2, r2, #4
 800949e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	691a      	ldr	r2, [r3, #16]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094b2:	e023      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68b9      	ldr	r1, [r7, #8]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 fc60 	bl	8009d80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	021a      	lsls	r2, r3, #8
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	430a      	orrs	r2, r1
 80094f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094f4:	e002      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	75fb      	strb	r3, [r7, #23]
      break;
 80094fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009504:	7dfb      	ldrb	r3, [r7, #23]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop

08009510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009524:	2b01      	cmp	r3, #1
 8009526:	d101      	bne.n	800952c <HAL_TIM_ConfigClockSource+0x1c>
 8009528:	2302      	movs	r3, #2
 800952a:	e0dc      	b.n	80096e6 <HAL_TIM_ConfigClockSource+0x1d6>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2202      	movs	r2, #2
 8009538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	4b6a      	ldr	r3, [pc, #424]	; (80096f0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009548:	4013      	ands	r3, r2
 800954a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a64      	ldr	r2, [pc, #400]	; (80096f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009562:	4293      	cmp	r3, r2
 8009564:	f000 80a9 	beq.w	80096ba <HAL_TIM_ConfigClockSource+0x1aa>
 8009568:	4a62      	ldr	r2, [pc, #392]	; (80096f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800956a:	4293      	cmp	r3, r2
 800956c:	f200 80ae 	bhi.w	80096cc <HAL_TIM_ConfigClockSource+0x1bc>
 8009570:	4a61      	ldr	r2, [pc, #388]	; (80096f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009572:	4293      	cmp	r3, r2
 8009574:	f000 80a1 	beq.w	80096ba <HAL_TIM_ConfigClockSource+0x1aa>
 8009578:	4a5f      	ldr	r2, [pc, #380]	; (80096f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800957a:	4293      	cmp	r3, r2
 800957c:	f200 80a6 	bhi.w	80096cc <HAL_TIM_ConfigClockSource+0x1bc>
 8009580:	4a5e      	ldr	r2, [pc, #376]	; (80096fc <HAL_TIM_ConfigClockSource+0x1ec>)
 8009582:	4293      	cmp	r3, r2
 8009584:	f000 8099 	beq.w	80096ba <HAL_TIM_ConfigClockSource+0x1aa>
 8009588:	4a5c      	ldr	r2, [pc, #368]	; (80096fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800958a:	4293      	cmp	r3, r2
 800958c:	f200 809e 	bhi.w	80096cc <HAL_TIM_ConfigClockSource+0x1bc>
 8009590:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009594:	f000 8091 	beq.w	80096ba <HAL_TIM_ConfigClockSource+0x1aa>
 8009598:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800959c:	f200 8096 	bhi.w	80096cc <HAL_TIM_ConfigClockSource+0x1bc>
 80095a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095a4:	f000 8089 	beq.w	80096ba <HAL_TIM_ConfigClockSource+0x1aa>
 80095a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095ac:	f200 808e 	bhi.w	80096cc <HAL_TIM_ConfigClockSource+0x1bc>
 80095b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095b4:	d03e      	beq.n	8009634 <HAL_TIM_ConfigClockSource+0x124>
 80095b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095ba:	f200 8087 	bhi.w	80096cc <HAL_TIM_ConfigClockSource+0x1bc>
 80095be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095c2:	f000 8086 	beq.w	80096d2 <HAL_TIM_ConfigClockSource+0x1c2>
 80095c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ca:	d87f      	bhi.n	80096cc <HAL_TIM_ConfigClockSource+0x1bc>
 80095cc:	2b70      	cmp	r3, #112	; 0x70
 80095ce:	d01a      	beq.n	8009606 <HAL_TIM_ConfigClockSource+0xf6>
 80095d0:	2b70      	cmp	r3, #112	; 0x70
 80095d2:	d87b      	bhi.n	80096cc <HAL_TIM_ConfigClockSource+0x1bc>
 80095d4:	2b60      	cmp	r3, #96	; 0x60
 80095d6:	d050      	beq.n	800967a <HAL_TIM_ConfigClockSource+0x16a>
 80095d8:	2b60      	cmp	r3, #96	; 0x60
 80095da:	d877      	bhi.n	80096cc <HAL_TIM_ConfigClockSource+0x1bc>
 80095dc:	2b50      	cmp	r3, #80	; 0x50
 80095de:	d03c      	beq.n	800965a <HAL_TIM_ConfigClockSource+0x14a>
 80095e0:	2b50      	cmp	r3, #80	; 0x50
 80095e2:	d873      	bhi.n	80096cc <HAL_TIM_ConfigClockSource+0x1bc>
 80095e4:	2b40      	cmp	r3, #64	; 0x40
 80095e6:	d058      	beq.n	800969a <HAL_TIM_ConfigClockSource+0x18a>
 80095e8:	2b40      	cmp	r3, #64	; 0x40
 80095ea:	d86f      	bhi.n	80096cc <HAL_TIM_ConfigClockSource+0x1bc>
 80095ec:	2b30      	cmp	r3, #48	; 0x30
 80095ee:	d064      	beq.n	80096ba <HAL_TIM_ConfigClockSource+0x1aa>
 80095f0:	2b30      	cmp	r3, #48	; 0x30
 80095f2:	d86b      	bhi.n	80096cc <HAL_TIM_ConfigClockSource+0x1bc>
 80095f4:	2b20      	cmp	r3, #32
 80095f6:	d060      	beq.n	80096ba <HAL_TIM_ConfigClockSource+0x1aa>
 80095f8:	2b20      	cmp	r3, #32
 80095fa:	d867      	bhi.n	80096cc <HAL_TIM_ConfigClockSource+0x1bc>
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d05c      	beq.n	80096ba <HAL_TIM_ConfigClockSource+0x1aa>
 8009600:	2b10      	cmp	r3, #16
 8009602:	d05a      	beq.n	80096ba <HAL_TIM_ConfigClockSource+0x1aa>
 8009604:	e062      	b.n	80096cc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009616:	f000 fc97 	bl	8009f48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	609a      	str	r2, [r3, #8]
      break;
 8009632:	e04f      	b.n	80096d4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009644:	f000 fc80 	bl	8009f48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689a      	ldr	r2, [r3, #8]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009656:	609a      	str	r2, [r3, #8]
      break;
 8009658:	e03c      	b.n	80096d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009666:	461a      	mov	r2, r3
 8009668:	f000 fbf0 	bl	8009e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2150      	movs	r1, #80	; 0x50
 8009672:	4618      	mov	r0, r3
 8009674:	f000 fc4a 	bl	8009f0c <TIM_ITRx_SetConfig>
      break;
 8009678:	e02c      	b.n	80096d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009686:	461a      	mov	r2, r3
 8009688:	f000 fc0f 	bl	8009eaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2160      	movs	r1, #96	; 0x60
 8009692:	4618      	mov	r0, r3
 8009694:	f000 fc3a 	bl	8009f0c <TIM_ITRx_SetConfig>
      break;
 8009698:	e01c      	b.n	80096d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096a6:	461a      	mov	r2, r3
 80096a8:	f000 fbd0 	bl	8009e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2140      	movs	r1, #64	; 0x40
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 fc2a 	bl	8009f0c <TIM_ITRx_SetConfig>
      break;
 80096b8:	e00c      	b.n	80096d4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4619      	mov	r1, r3
 80096c4:	4610      	mov	r0, r2
 80096c6:	f000 fc21 	bl	8009f0c <TIM_ITRx_SetConfig>
      break;
 80096ca:	e003      	b.n	80096d4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	73fb      	strb	r3, [r7, #15]
      break;
 80096d0:	e000      	b.n	80096d4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80096d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	ffceff88 	.word	0xffceff88
 80096f4:	00100040 	.word	0x00100040
 80096f8:	00100030 	.word	0x00100030
 80096fc:	00100020 	.word	0x00100020

08009700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(const TIM_HandleTypeDef *htim)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  return htim->State;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800975e:	b2db      	uxtb	r3, r3
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a40      	ldr	r2, [pc, #256]	; (8009880 <TIM_Base_SetConfig+0x114>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d013      	beq.n	80097ac <TIM_Base_SetConfig+0x40>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800978a:	d00f      	beq.n	80097ac <TIM_Base_SetConfig+0x40>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a3d      	ldr	r2, [pc, #244]	; (8009884 <TIM_Base_SetConfig+0x118>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d00b      	beq.n	80097ac <TIM_Base_SetConfig+0x40>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a3c      	ldr	r2, [pc, #240]	; (8009888 <TIM_Base_SetConfig+0x11c>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d007      	beq.n	80097ac <TIM_Base_SetConfig+0x40>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a3b      	ldr	r2, [pc, #236]	; (800988c <TIM_Base_SetConfig+0x120>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d003      	beq.n	80097ac <TIM_Base_SetConfig+0x40>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a3a      	ldr	r2, [pc, #232]	; (8009890 <TIM_Base_SetConfig+0x124>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d108      	bne.n	80097be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a2f      	ldr	r2, [pc, #188]	; (8009880 <TIM_Base_SetConfig+0x114>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d01f      	beq.n	8009806 <TIM_Base_SetConfig+0x9a>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097cc:	d01b      	beq.n	8009806 <TIM_Base_SetConfig+0x9a>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a2c      	ldr	r2, [pc, #176]	; (8009884 <TIM_Base_SetConfig+0x118>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d017      	beq.n	8009806 <TIM_Base_SetConfig+0x9a>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4a2b      	ldr	r2, [pc, #172]	; (8009888 <TIM_Base_SetConfig+0x11c>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d013      	beq.n	8009806 <TIM_Base_SetConfig+0x9a>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a2a      	ldr	r2, [pc, #168]	; (800988c <TIM_Base_SetConfig+0x120>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d00f      	beq.n	8009806 <TIM_Base_SetConfig+0x9a>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a29      	ldr	r2, [pc, #164]	; (8009890 <TIM_Base_SetConfig+0x124>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d00b      	beq.n	8009806 <TIM_Base_SetConfig+0x9a>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a28      	ldr	r2, [pc, #160]	; (8009894 <TIM_Base_SetConfig+0x128>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d007      	beq.n	8009806 <TIM_Base_SetConfig+0x9a>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a27      	ldr	r2, [pc, #156]	; (8009898 <TIM_Base_SetConfig+0x12c>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d003      	beq.n	8009806 <TIM_Base_SetConfig+0x9a>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a26      	ldr	r2, [pc, #152]	; (800989c <TIM_Base_SetConfig+0x130>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d108      	bne.n	8009818 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800980c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	4313      	orrs	r3, r2
 8009816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	4313      	orrs	r3, r2
 8009824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	689a      	ldr	r2, [r3, #8]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a10      	ldr	r2, [pc, #64]	; (8009880 <TIM_Base_SetConfig+0x114>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d00f      	beq.n	8009864 <TIM_Base_SetConfig+0xf8>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a12      	ldr	r2, [pc, #72]	; (8009890 <TIM_Base_SetConfig+0x124>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d00b      	beq.n	8009864 <TIM_Base_SetConfig+0xf8>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a11      	ldr	r2, [pc, #68]	; (8009894 <TIM_Base_SetConfig+0x128>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d007      	beq.n	8009864 <TIM_Base_SetConfig+0xf8>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a10      	ldr	r2, [pc, #64]	; (8009898 <TIM_Base_SetConfig+0x12c>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d003      	beq.n	8009864 <TIM_Base_SetConfig+0xf8>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a0f      	ldr	r2, [pc, #60]	; (800989c <TIM_Base_SetConfig+0x130>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d103      	bne.n	800986c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	691a      	ldr	r2, [r3, #16]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	615a      	str	r2, [r3, #20]
}
 8009872:	bf00      	nop
 8009874:	3714      	adds	r7, #20
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	40010000 	.word	0x40010000
 8009884:	40000400 	.word	0x40000400
 8009888:	40000800 	.word	0x40000800
 800988c:	40000c00 	.word	0x40000c00
 8009890:	40010400 	.word	0x40010400
 8009894:	40014000 	.word	0x40014000
 8009898:	40014400 	.word	0x40014400
 800989c:	40014800 	.word	0x40014800

080098a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b087      	sub	sp, #28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	f023 0201 	bic.w	r2, r3, #1
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	4b37      	ldr	r3, [pc, #220]	; (80099a8 <TIM_OC1_SetConfig+0x108>)
 80098cc:	4013      	ands	r3, r2
 80098ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f023 0303 	bic.w	r3, r3, #3
 80098d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	4313      	orrs	r3, r2
 80098e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f023 0302 	bic.w	r3, r3, #2
 80098e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a2d      	ldr	r2, [pc, #180]	; (80099ac <TIM_OC1_SetConfig+0x10c>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d00f      	beq.n	800991c <TIM_OC1_SetConfig+0x7c>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a2c      	ldr	r2, [pc, #176]	; (80099b0 <TIM_OC1_SetConfig+0x110>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d00b      	beq.n	800991c <TIM_OC1_SetConfig+0x7c>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a2b      	ldr	r2, [pc, #172]	; (80099b4 <TIM_OC1_SetConfig+0x114>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d007      	beq.n	800991c <TIM_OC1_SetConfig+0x7c>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a2a      	ldr	r2, [pc, #168]	; (80099b8 <TIM_OC1_SetConfig+0x118>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d003      	beq.n	800991c <TIM_OC1_SetConfig+0x7c>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a29      	ldr	r2, [pc, #164]	; (80099bc <TIM_OC1_SetConfig+0x11c>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d10c      	bne.n	8009936 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	f023 0308 	bic.w	r3, r3, #8
 8009922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	4313      	orrs	r3, r2
 800992c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f023 0304 	bic.w	r3, r3, #4
 8009934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a1c      	ldr	r2, [pc, #112]	; (80099ac <TIM_OC1_SetConfig+0x10c>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d00f      	beq.n	800995e <TIM_OC1_SetConfig+0xbe>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a1b      	ldr	r2, [pc, #108]	; (80099b0 <TIM_OC1_SetConfig+0x110>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d00b      	beq.n	800995e <TIM_OC1_SetConfig+0xbe>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a1a      	ldr	r2, [pc, #104]	; (80099b4 <TIM_OC1_SetConfig+0x114>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d007      	beq.n	800995e <TIM_OC1_SetConfig+0xbe>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a19      	ldr	r2, [pc, #100]	; (80099b8 <TIM_OC1_SetConfig+0x118>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d003      	beq.n	800995e <TIM_OC1_SetConfig+0xbe>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a18      	ldr	r2, [pc, #96]	; (80099bc <TIM_OC1_SetConfig+0x11c>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d111      	bne.n	8009982 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800996c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	4313      	orrs	r3, r2
 8009976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	693a      	ldr	r2, [r7, #16]
 800997e:	4313      	orrs	r3, r2
 8009980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	621a      	str	r2, [r3, #32]
}
 800999c:	bf00      	nop
 800999e:	371c      	adds	r7, #28
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	fffeff8f 	.word	0xfffeff8f
 80099ac:	40010000 	.word	0x40010000
 80099b0:	40010400 	.word	0x40010400
 80099b4:	40014000 	.word	0x40014000
 80099b8:	40014400 	.word	0x40014400
 80099bc:	40014800 	.word	0x40014800

080099c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b087      	sub	sp, #28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	f023 0210 	bic.w	r2, r3, #16
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	4b34      	ldr	r3, [pc, #208]	; (8009abc <TIM_OC2_SetConfig+0xfc>)
 80099ec:	4013      	ands	r3, r2
 80099ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	021b      	lsls	r3, r3, #8
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f023 0320 	bic.w	r3, r3, #32
 8009a0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	011b      	lsls	r3, r3, #4
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a29      	ldr	r2, [pc, #164]	; (8009ac0 <TIM_OC2_SetConfig+0x100>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d003      	beq.n	8009a28 <TIM_OC2_SetConfig+0x68>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a28      	ldr	r2, [pc, #160]	; (8009ac4 <TIM_OC2_SetConfig+0x104>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d10d      	bne.n	8009a44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	011b      	lsls	r3, r3, #4
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a1e      	ldr	r2, [pc, #120]	; (8009ac0 <TIM_OC2_SetConfig+0x100>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d00f      	beq.n	8009a6c <TIM_OC2_SetConfig+0xac>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a1d      	ldr	r2, [pc, #116]	; (8009ac4 <TIM_OC2_SetConfig+0x104>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d00b      	beq.n	8009a6c <TIM_OC2_SetConfig+0xac>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a1c      	ldr	r2, [pc, #112]	; (8009ac8 <TIM_OC2_SetConfig+0x108>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d007      	beq.n	8009a6c <TIM_OC2_SetConfig+0xac>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a1b      	ldr	r2, [pc, #108]	; (8009acc <TIM_OC2_SetConfig+0x10c>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d003      	beq.n	8009a6c <TIM_OC2_SetConfig+0xac>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a1a      	ldr	r2, [pc, #104]	; (8009ad0 <TIM_OC2_SetConfig+0x110>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d113      	bne.n	8009a94 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	695b      	ldr	r3, [r3, #20]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	693a      	ldr	r2, [r7, #16]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	699b      	ldr	r3, [r3, #24]
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	693a      	ldr	r2, [r7, #16]
 8009a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	621a      	str	r2, [r3, #32]
}
 8009aae:	bf00      	nop
 8009ab0:	371c      	adds	r7, #28
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	feff8fff 	.word	0xfeff8fff
 8009ac0:	40010000 	.word	0x40010000
 8009ac4:	40010400 	.word	0x40010400
 8009ac8:	40014000 	.word	0x40014000
 8009acc:	40014400 	.word	0x40014400
 8009ad0:	40014800 	.word	0x40014800

08009ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	69db      	ldr	r3, [r3, #28]
 8009afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	4b33      	ldr	r3, [pc, #204]	; (8009bcc <TIM_OC3_SetConfig+0xf8>)
 8009b00:	4013      	ands	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f023 0303 	bic.w	r3, r3, #3
 8009b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a28      	ldr	r2, [pc, #160]	; (8009bd0 <TIM_OC3_SetConfig+0xfc>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d003      	beq.n	8009b3a <TIM_OC3_SetConfig+0x66>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a27      	ldr	r2, [pc, #156]	; (8009bd4 <TIM_OC3_SetConfig+0x100>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d10d      	bne.n	8009b56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	021b      	lsls	r3, r3, #8
 8009b48:	697a      	ldr	r2, [r7, #20]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a1d      	ldr	r2, [pc, #116]	; (8009bd0 <TIM_OC3_SetConfig+0xfc>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d00f      	beq.n	8009b7e <TIM_OC3_SetConfig+0xaa>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a1c      	ldr	r2, [pc, #112]	; (8009bd4 <TIM_OC3_SetConfig+0x100>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d00b      	beq.n	8009b7e <TIM_OC3_SetConfig+0xaa>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a1b      	ldr	r2, [pc, #108]	; (8009bd8 <TIM_OC3_SetConfig+0x104>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d007      	beq.n	8009b7e <TIM_OC3_SetConfig+0xaa>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a1a      	ldr	r2, [pc, #104]	; (8009bdc <TIM_OC3_SetConfig+0x108>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d003      	beq.n	8009b7e <TIM_OC3_SetConfig+0xaa>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a19      	ldr	r2, [pc, #100]	; (8009be0 <TIM_OC3_SetConfig+0x10c>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d113      	bne.n	8009ba6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	695b      	ldr	r3, [r3, #20]
 8009b92:	011b      	lsls	r3, r3, #4
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	011b      	lsls	r3, r3, #4
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	621a      	str	r2, [r3, #32]
}
 8009bc0:	bf00      	nop
 8009bc2:	371c      	adds	r7, #28
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	fffeff8f 	.word	0xfffeff8f
 8009bd0:	40010000 	.word	0x40010000
 8009bd4:	40010400 	.word	0x40010400
 8009bd8:	40014000 	.word	0x40014000
 8009bdc:	40014400 	.word	0x40014400
 8009be0:	40014800 	.word	0x40014800

08009be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b087      	sub	sp, #28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	69db      	ldr	r3, [r3, #28]
 8009c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	4b24      	ldr	r3, [pc, #144]	; (8009ca0 <TIM_OC4_SetConfig+0xbc>)
 8009c10:	4013      	ands	r3, r2
 8009c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	021b      	lsls	r3, r3, #8
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	031b      	lsls	r3, r3, #12
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a19      	ldr	r2, [pc, #100]	; (8009ca4 <TIM_OC4_SetConfig+0xc0>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d00f      	beq.n	8009c64 <TIM_OC4_SetConfig+0x80>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a18      	ldr	r2, [pc, #96]	; (8009ca8 <TIM_OC4_SetConfig+0xc4>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d00b      	beq.n	8009c64 <TIM_OC4_SetConfig+0x80>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a17      	ldr	r2, [pc, #92]	; (8009cac <TIM_OC4_SetConfig+0xc8>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d007      	beq.n	8009c64 <TIM_OC4_SetConfig+0x80>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a16      	ldr	r2, [pc, #88]	; (8009cb0 <TIM_OC4_SetConfig+0xcc>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d003      	beq.n	8009c64 <TIM_OC4_SetConfig+0x80>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a15      	ldr	r2, [pc, #84]	; (8009cb4 <TIM_OC4_SetConfig+0xd0>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d109      	bne.n	8009c78 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	019b      	lsls	r3, r3, #6
 8009c72:	697a      	ldr	r2, [r7, #20]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	621a      	str	r2, [r3, #32]
}
 8009c92:	bf00      	nop
 8009c94:	371c      	adds	r7, #28
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	feff8fff 	.word	0xfeff8fff
 8009ca4:	40010000 	.word	0x40010000
 8009ca8:	40010400 	.word	0x40010400
 8009cac:	40014000 	.word	0x40014000
 8009cb0:	40014400 	.word	0x40014400
 8009cb4:	40014800 	.word	0x40014800

08009cb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	4b21      	ldr	r3, [pc, #132]	; (8009d68 <TIM_OC5_SetConfig+0xb0>)
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009cf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	041b      	lsls	r3, r3, #16
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a18      	ldr	r2, [pc, #96]	; (8009d6c <TIM_OC5_SetConfig+0xb4>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d00f      	beq.n	8009d2e <TIM_OC5_SetConfig+0x76>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a17      	ldr	r2, [pc, #92]	; (8009d70 <TIM_OC5_SetConfig+0xb8>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d00b      	beq.n	8009d2e <TIM_OC5_SetConfig+0x76>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a16      	ldr	r2, [pc, #88]	; (8009d74 <TIM_OC5_SetConfig+0xbc>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d007      	beq.n	8009d2e <TIM_OC5_SetConfig+0x76>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a15      	ldr	r2, [pc, #84]	; (8009d78 <TIM_OC5_SetConfig+0xc0>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d003      	beq.n	8009d2e <TIM_OC5_SetConfig+0x76>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a14      	ldr	r2, [pc, #80]	; (8009d7c <TIM_OC5_SetConfig+0xc4>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d109      	bne.n	8009d42 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	021b      	lsls	r3, r3, #8
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	697a      	ldr	r2, [r7, #20]
 8009d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	621a      	str	r2, [r3, #32]
}
 8009d5c:	bf00      	nop
 8009d5e:	371c      	adds	r7, #28
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	fffeff8f 	.word	0xfffeff8f
 8009d6c:	40010000 	.word	0x40010000
 8009d70:	40010400 	.word	0x40010400
 8009d74:	40014000 	.word	0x40014000
 8009d78:	40014400 	.word	0x40014400
 8009d7c:	40014800 	.word	0x40014800

08009d80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b087      	sub	sp, #28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	4b22      	ldr	r3, [pc, #136]	; (8009e34 <TIM_OC6_SetConfig+0xb4>)
 8009dac:	4013      	ands	r3, r2
 8009dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	021b      	lsls	r3, r3, #8
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009dc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	051b      	lsls	r3, r3, #20
 8009dca:	693a      	ldr	r2, [r7, #16]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a19      	ldr	r2, [pc, #100]	; (8009e38 <TIM_OC6_SetConfig+0xb8>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d00f      	beq.n	8009df8 <TIM_OC6_SetConfig+0x78>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a18      	ldr	r2, [pc, #96]	; (8009e3c <TIM_OC6_SetConfig+0xbc>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d00b      	beq.n	8009df8 <TIM_OC6_SetConfig+0x78>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a17      	ldr	r2, [pc, #92]	; (8009e40 <TIM_OC6_SetConfig+0xc0>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d007      	beq.n	8009df8 <TIM_OC6_SetConfig+0x78>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a16      	ldr	r2, [pc, #88]	; (8009e44 <TIM_OC6_SetConfig+0xc4>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d003      	beq.n	8009df8 <TIM_OC6_SetConfig+0x78>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a15      	ldr	r2, [pc, #84]	; (8009e48 <TIM_OC6_SetConfig+0xc8>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d109      	bne.n	8009e0c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	029b      	lsls	r3, r3, #10
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	621a      	str	r2, [r3, #32]
}
 8009e26:	bf00      	nop
 8009e28:	371c      	adds	r7, #28
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	feff8fff 	.word	0xfeff8fff
 8009e38:	40010000 	.word	0x40010000
 8009e3c:	40010400 	.word	0x40010400
 8009e40:	40014000 	.word	0x40014000
 8009e44:	40014400 	.word	0x40014400
 8009e48:	40014800 	.word	0x40014800

08009e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b087      	sub	sp, #28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6a1b      	ldr	r3, [r3, #32]
 8009e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	f023 0201 	bic.w	r2, r3, #1
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	011b      	lsls	r3, r3, #4
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f023 030a 	bic.w	r3, r3, #10
 8009e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	693a      	ldr	r2, [r7, #16]
 8009e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	621a      	str	r2, [r3, #32]
}
 8009e9e:	bf00      	nop
 8009ea0:	371c      	adds	r7, #28
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b087      	sub	sp, #28
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	60f8      	str	r0, [r7, #12]
 8009eb2:	60b9      	str	r1, [r7, #8]
 8009eb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	f023 0210 	bic.w	r2, r3, #16
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6a1b      	ldr	r3, [r3, #32]
 8009ecc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ed4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	031b      	lsls	r3, r3, #12
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ee6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	011b      	lsls	r3, r3, #4
 8009eec:	693a      	ldr	r2, [r7, #16]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	621a      	str	r2, [r3, #32]
}
 8009efe:	bf00      	nop
 8009f00:	371c      	adds	r7, #28
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
	...

08009f0c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <TIM_ITRx_SetConfig+0x38>)
 8009f20:	4013      	ands	r3, r2
 8009f22:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	f043 0307 	orr.w	r3, r3, #7
 8009f2e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	609a      	str	r2, [r3, #8]
}
 8009f36:	bf00      	nop
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	ffcfff8f 	.word	0xffcfff8f

08009f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b087      	sub	sp, #28
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	607a      	str	r2, [r7, #4]
 8009f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	021a      	lsls	r2, r3, #8
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	431a      	orrs	r2, r3
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	697a      	ldr	r2, [r7, #20]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	609a      	str	r2, [r3, #8]
}
 8009f7c:	bf00      	nop
 8009f7e:	371c      	adds	r7, #28
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d101      	bne.n	8009fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	e06d      	b.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2202      	movs	r2, #2
 8009fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a30      	ldr	r2, [pc, #192]	; (800a088 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d004      	beq.n	8009fd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a2f      	ldr	r2, [pc, #188]	; (800a08c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d108      	bne.n	8009fe6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009fda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a20      	ldr	r2, [pc, #128]	; (800a088 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d022      	beq.n	800a050 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a012:	d01d      	beq.n	800a050 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a1d      	ldr	r2, [pc, #116]	; (800a090 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d018      	beq.n	800a050 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a1c      	ldr	r2, [pc, #112]	; (800a094 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d013      	beq.n	800a050 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a1a      	ldr	r2, [pc, #104]	; (800a098 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d00e      	beq.n	800a050 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a15      	ldr	r2, [pc, #84]	; (800a08c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d009      	beq.n	800a050 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a16      	ldr	r2, [pc, #88]	; (800a09c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d004      	beq.n	800a050 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a15      	ldr	r2, [pc, #84]	; (800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d10c      	bne.n	800a06a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a056:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	4313      	orrs	r3, r2
 800a060:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	40010000 	.word	0x40010000
 800a08c:	40010400 	.word	0x40010400
 800a090:	40000400 	.word	0x40000400
 800a094:	40000800 	.word	0x40000800
 800a098:	40000c00 	.word	0x40000c00
 800a09c:	40001800 	.word	0x40001800
 800a0a0:	40014000 	.word	0x40014000

0800a0a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d101      	bne.n	800a0c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a0bc:	2302      	movs	r3, #2
 800a0be:	e065      	b.n	800a18c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	4313      	orrs	r3, r2
 800a11a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a126:	4313      	orrs	r3, r2
 800a128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	699b      	ldr	r3, [r3, #24]
 800a134:	041b      	lsls	r3, r3, #16
 800a136:	4313      	orrs	r3, r2
 800a138:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a16      	ldr	r2, [pc, #88]	; (800a198 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d004      	beq.n	800a14e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a14      	ldr	r2, [pc, #80]	; (800a19c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d115      	bne.n	800a17a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	051b      	lsls	r3, r3, #20
 800a15a:	4313      	orrs	r3, r2
 800a15c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	4313      	orrs	r3, r2
 800a16a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	4313      	orrs	r3, r2
 800a178:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	40010000 	.word	0x40010000
 800a19c:	40010400 	.word	0x40010400

0800a1a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1a8:	bf00      	nop
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e042      	b.n	800a274 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d106      	bne.n	800a206 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f7f8 ff5f 	bl	80030c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2224      	movs	r2, #36	; 0x24
 800a20a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f022 0201 	bic.w	r2, r2, #1
 800a21c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f82c 	bl	800a27c <UART_SetConfig>
 800a224:	4603      	mov	r3, r0
 800a226:	2b01      	cmp	r3, #1
 800a228:	d101      	bne.n	800a22e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e022      	b.n	800a274 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a232:	2b00      	cmp	r3, #0
 800a234:	d002      	beq.n	800a23c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 fd88 	bl	800ad4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a24a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	689a      	ldr	r2, [r3, #8]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a25a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f042 0201 	orr.w	r2, r2, #1
 800a26a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fe0f 	bl	800ae90 <UART_CheckIdleState>
 800a272:	4603      	mov	r3, r0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a27c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a280:	b092      	sub	sp, #72	; 0x48
 800a282:	af00      	add	r7, sp, #0
 800a284:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	689a      	ldr	r2, [r3, #8]
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	431a      	orrs	r2, r3
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	431a      	orrs	r2, r3
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	69db      	ldr	r3, [r3, #28]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	4bbe      	ldr	r3, [pc, #760]	; (800a5a4 <UART_SetConfig+0x328>)
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	6812      	ldr	r2, [r2, #0]
 800a2b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2b4:	430b      	orrs	r3, r1
 800a2b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	68da      	ldr	r2, [r3, #12]
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4ab3      	ldr	r2, [pc, #716]	; (800a5a8 <UART_SetConfig+0x32c>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d004      	beq.n	800a2e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	6a1b      	ldr	r3, [r3, #32]
 800a2e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	689a      	ldr	r2, [r3, #8]
 800a2ee:	4baf      	ldr	r3, [pc, #700]	; (800a5ac <UART_SetConfig+0x330>)
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	697a      	ldr	r2, [r7, #20]
 800a2f4:	6812      	ldr	r2, [r2, #0]
 800a2f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2f8:	430b      	orrs	r3, r1
 800a2fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a302:	f023 010f 	bic.w	r1, r3, #15
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	430a      	orrs	r2, r1
 800a310:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4aa6      	ldr	r2, [pc, #664]	; (800a5b0 <UART_SetConfig+0x334>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d177      	bne.n	800a40c <UART_SetConfig+0x190>
 800a31c:	4ba5      	ldr	r3, [pc, #660]	; (800a5b4 <UART_SetConfig+0x338>)
 800a31e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a320:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a324:	2b28      	cmp	r3, #40	; 0x28
 800a326:	d86d      	bhi.n	800a404 <UART_SetConfig+0x188>
 800a328:	a201      	add	r2, pc, #4	; (adr r2, 800a330 <UART_SetConfig+0xb4>)
 800a32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a32e:	bf00      	nop
 800a330:	0800a3d5 	.word	0x0800a3d5
 800a334:	0800a405 	.word	0x0800a405
 800a338:	0800a405 	.word	0x0800a405
 800a33c:	0800a405 	.word	0x0800a405
 800a340:	0800a405 	.word	0x0800a405
 800a344:	0800a405 	.word	0x0800a405
 800a348:	0800a405 	.word	0x0800a405
 800a34c:	0800a405 	.word	0x0800a405
 800a350:	0800a3dd 	.word	0x0800a3dd
 800a354:	0800a405 	.word	0x0800a405
 800a358:	0800a405 	.word	0x0800a405
 800a35c:	0800a405 	.word	0x0800a405
 800a360:	0800a405 	.word	0x0800a405
 800a364:	0800a405 	.word	0x0800a405
 800a368:	0800a405 	.word	0x0800a405
 800a36c:	0800a405 	.word	0x0800a405
 800a370:	0800a3e5 	.word	0x0800a3e5
 800a374:	0800a405 	.word	0x0800a405
 800a378:	0800a405 	.word	0x0800a405
 800a37c:	0800a405 	.word	0x0800a405
 800a380:	0800a405 	.word	0x0800a405
 800a384:	0800a405 	.word	0x0800a405
 800a388:	0800a405 	.word	0x0800a405
 800a38c:	0800a405 	.word	0x0800a405
 800a390:	0800a3ed 	.word	0x0800a3ed
 800a394:	0800a405 	.word	0x0800a405
 800a398:	0800a405 	.word	0x0800a405
 800a39c:	0800a405 	.word	0x0800a405
 800a3a0:	0800a405 	.word	0x0800a405
 800a3a4:	0800a405 	.word	0x0800a405
 800a3a8:	0800a405 	.word	0x0800a405
 800a3ac:	0800a405 	.word	0x0800a405
 800a3b0:	0800a3f5 	.word	0x0800a3f5
 800a3b4:	0800a405 	.word	0x0800a405
 800a3b8:	0800a405 	.word	0x0800a405
 800a3bc:	0800a405 	.word	0x0800a405
 800a3c0:	0800a405 	.word	0x0800a405
 800a3c4:	0800a405 	.word	0x0800a405
 800a3c8:	0800a405 	.word	0x0800a405
 800a3cc:	0800a405 	.word	0x0800a405
 800a3d0:	0800a3fd 	.word	0x0800a3fd
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3da:	e222      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a3dc:	2304      	movs	r3, #4
 800a3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3e2:	e21e      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a3e4:	2308      	movs	r3, #8
 800a3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ea:	e21a      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a3ec:	2310      	movs	r3, #16
 800a3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3f2:	e216      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a3f4:	2320      	movs	r3, #32
 800a3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3fa:	e212      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a3fc:	2340      	movs	r3, #64	; 0x40
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a402:	e20e      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a404:	2380      	movs	r3, #128	; 0x80
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a40a:	e20a      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a69      	ldr	r2, [pc, #420]	; (800a5b8 <UART_SetConfig+0x33c>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d130      	bne.n	800a478 <UART_SetConfig+0x1fc>
 800a416:	4b67      	ldr	r3, [pc, #412]	; (800a5b4 <UART_SetConfig+0x338>)
 800a418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a41a:	f003 0307 	and.w	r3, r3, #7
 800a41e:	2b05      	cmp	r3, #5
 800a420:	d826      	bhi.n	800a470 <UART_SetConfig+0x1f4>
 800a422:	a201      	add	r2, pc, #4	; (adr r2, 800a428 <UART_SetConfig+0x1ac>)
 800a424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a428:	0800a441 	.word	0x0800a441
 800a42c:	0800a449 	.word	0x0800a449
 800a430:	0800a451 	.word	0x0800a451
 800a434:	0800a459 	.word	0x0800a459
 800a438:	0800a461 	.word	0x0800a461
 800a43c:	0800a469 	.word	0x0800a469
 800a440:	2300      	movs	r3, #0
 800a442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a446:	e1ec      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a448:	2304      	movs	r3, #4
 800a44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a44e:	e1e8      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a450:	2308      	movs	r3, #8
 800a452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a456:	e1e4      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a458:	2310      	movs	r3, #16
 800a45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a45e:	e1e0      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a460:	2320      	movs	r3, #32
 800a462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a466:	e1dc      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a468:	2340      	movs	r3, #64	; 0x40
 800a46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a46e:	e1d8      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a470:	2380      	movs	r3, #128	; 0x80
 800a472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a476:	e1d4      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a4f      	ldr	r2, [pc, #316]	; (800a5bc <UART_SetConfig+0x340>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d130      	bne.n	800a4e4 <UART_SetConfig+0x268>
 800a482:	4b4c      	ldr	r3, [pc, #304]	; (800a5b4 <UART_SetConfig+0x338>)
 800a484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a486:	f003 0307 	and.w	r3, r3, #7
 800a48a:	2b05      	cmp	r3, #5
 800a48c:	d826      	bhi.n	800a4dc <UART_SetConfig+0x260>
 800a48e:	a201      	add	r2, pc, #4	; (adr r2, 800a494 <UART_SetConfig+0x218>)
 800a490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a494:	0800a4ad 	.word	0x0800a4ad
 800a498:	0800a4b5 	.word	0x0800a4b5
 800a49c:	0800a4bd 	.word	0x0800a4bd
 800a4a0:	0800a4c5 	.word	0x0800a4c5
 800a4a4:	0800a4cd 	.word	0x0800a4cd
 800a4a8:	0800a4d5 	.word	0x0800a4d5
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4b2:	e1b6      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a4b4:	2304      	movs	r3, #4
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ba:	e1b2      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a4bc:	2308      	movs	r3, #8
 800a4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4c2:	e1ae      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a4c4:	2310      	movs	r3, #16
 800a4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ca:	e1aa      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a4cc:	2320      	movs	r3, #32
 800a4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4d2:	e1a6      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a4d4:	2340      	movs	r3, #64	; 0x40
 800a4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4da:	e1a2      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a4dc:	2380      	movs	r3, #128	; 0x80
 800a4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4e2:	e19e      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a35      	ldr	r2, [pc, #212]	; (800a5c0 <UART_SetConfig+0x344>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d130      	bne.n	800a550 <UART_SetConfig+0x2d4>
 800a4ee:	4b31      	ldr	r3, [pc, #196]	; (800a5b4 <UART_SetConfig+0x338>)
 800a4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f2:	f003 0307 	and.w	r3, r3, #7
 800a4f6:	2b05      	cmp	r3, #5
 800a4f8:	d826      	bhi.n	800a548 <UART_SetConfig+0x2cc>
 800a4fa:	a201      	add	r2, pc, #4	; (adr r2, 800a500 <UART_SetConfig+0x284>)
 800a4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a500:	0800a519 	.word	0x0800a519
 800a504:	0800a521 	.word	0x0800a521
 800a508:	0800a529 	.word	0x0800a529
 800a50c:	0800a531 	.word	0x0800a531
 800a510:	0800a539 	.word	0x0800a539
 800a514:	0800a541 	.word	0x0800a541
 800a518:	2300      	movs	r3, #0
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a51e:	e180      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a520:	2304      	movs	r3, #4
 800a522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a526:	e17c      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a528:	2308      	movs	r3, #8
 800a52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a52e:	e178      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a530:	2310      	movs	r3, #16
 800a532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a536:	e174      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a538:	2320      	movs	r3, #32
 800a53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a53e:	e170      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a540:	2340      	movs	r3, #64	; 0x40
 800a542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a546:	e16c      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a548:	2380      	movs	r3, #128	; 0x80
 800a54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a54e:	e168      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a1b      	ldr	r2, [pc, #108]	; (800a5c4 <UART_SetConfig+0x348>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d142      	bne.n	800a5e0 <UART_SetConfig+0x364>
 800a55a:	4b16      	ldr	r3, [pc, #88]	; (800a5b4 <UART_SetConfig+0x338>)
 800a55c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a55e:	f003 0307 	and.w	r3, r3, #7
 800a562:	2b05      	cmp	r3, #5
 800a564:	d838      	bhi.n	800a5d8 <UART_SetConfig+0x35c>
 800a566:	a201      	add	r2, pc, #4	; (adr r2, 800a56c <UART_SetConfig+0x2f0>)
 800a568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56c:	0800a585 	.word	0x0800a585
 800a570:	0800a58d 	.word	0x0800a58d
 800a574:	0800a595 	.word	0x0800a595
 800a578:	0800a59d 	.word	0x0800a59d
 800a57c:	0800a5c9 	.word	0x0800a5c9
 800a580:	0800a5d1 	.word	0x0800a5d1
 800a584:	2300      	movs	r3, #0
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a58a:	e14a      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a58c:	2304      	movs	r3, #4
 800a58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a592:	e146      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a594:	2308      	movs	r3, #8
 800a596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a59a:	e142      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a59c:	2310      	movs	r3, #16
 800a59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5a2:	e13e      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a5a4:	cfff69f3 	.word	0xcfff69f3
 800a5a8:	58000c00 	.word	0x58000c00
 800a5ac:	11fff4ff 	.word	0x11fff4ff
 800a5b0:	40011000 	.word	0x40011000
 800a5b4:	58024400 	.word	0x58024400
 800a5b8:	40004400 	.word	0x40004400
 800a5bc:	40004800 	.word	0x40004800
 800a5c0:	40004c00 	.word	0x40004c00
 800a5c4:	40005000 	.word	0x40005000
 800a5c8:	2320      	movs	r3, #32
 800a5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ce:	e128      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a5d0:	2340      	movs	r3, #64	; 0x40
 800a5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5d6:	e124      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a5d8:	2380      	movs	r3, #128	; 0x80
 800a5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5de:	e120      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4acb      	ldr	r2, [pc, #812]	; (800a914 <UART_SetConfig+0x698>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d176      	bne.n	800a6d8 <UART_SetConfig+0x45c>
 800a5ea:	4bcb      	ldr	r3, [pc, #812]	; (800a918 <UART_SetConfig+0x69c>)
 800a5ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5f2:	2b28      	cmp	r3, #40	; 0x28
 800a5f4:	d86c      	bhi.n	800a6d0 <UART_SetConfig+0x454>
 800a5f6:	a201      	add	r2, pc, #4	; (adr r2, 800a5fc <UART_SetConfig+0x380>)
 800a5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5fc:	0800a6a1 	.word	0x0800a6a1
 800a600:	0800a6d1 	.word	0x0800a6d1
 800a604:	0800a6d1 	.word	0x0800a6d1
 800a608:	0800a6d1 	.word	0x0800a6d1
 800a60c:	0800a6d1 	.word	0x0800a6d1
 800a610:	0800a6d1 	.word	0x0800a6d1
 800a614:	0800a6d1 	.word	0x0800a6d1
 800a618:	0800a6d1 	.word	0x0800a6d1
 800a61c:	0800a6a9 	.word	0x0800a6a9
 800a620:	0800a6d1 	.word	0x0800a6d1
 800a624:	0800a6d1 	.word	0x0800a6d1
 800a628:	0800a6d1 	.word	0x0800a6d1
 800a62c:	0800a6d1 	.word	0x0800a6d1
 800a630:	0800a6d1 	.word	0x0800a6d1
 800a634:	0800a6d1 	.word	0x0800a6d1
 800a638:	0800a6d1 	.word	0x0800a6d1
 800a63c:	0800a6b1 	.word	0x0800a6b1
 800a640:	0800a6d1 	.word	0x0800a6d1
 800a644:	0800a6d1 	.word	0x0800a6d1
 800a648:	0800a6d1 	.word	0x0800a6d1
 800a64c:	0800a6d1 	.word	0x0800a6d1
 800a650:	0800a6d1 	.word	0x0800a6d1
 800a654:	0800a6d1 	.word	0x0800a6d1
 800a658:	0800a6d1 	.word	0x0800a6d1
 800a65c:	0800a6b9 	.word	0x0800a6b9
 800a660:	0800a6d1 	.word	0x0800a6d1
 800a664:	0800a6d1 	.word	0x0800a6d1
 800a668:	0800a6d1 	.word	0x0800a6d1
 800a66c:	0800a6d1 	.word	0x0800a6d1
 800a670:	0800a6d1 	.word	0x0800a6d1
 800a674:	0800a6d1 	.word	0x0800a6d1
 800a678:	0800a6d1 	.word	0x0800a6d1
 800a67c:	0800a6c1 	.word	0x0800a6c1
 800a680:	0800a6d1 	.word	0x0800a6d1
 800a684:	0800a6d1 	.word	0x0800a6d1
 800a688:	0800a6d1 	.word	0x0800a6d1
 800a68c:	0800a6d1 	.word	0x0800a6d1
 800a690:	0800a6d1 	.word	0x0800a6d1
 800a694:	0800a6d1 	.word	0x0800a6d1
 800a698:	0800a6d1 	.word	0x0800a6d1
 800a69c:	0800a6c9 	.word	0x0800a6c9
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6a6:	e0bc      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a6a8:	2304      	movs	r3, #4
 800a6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ae:	e0b8      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a6b0:	2308      	movs	r3, #8
 800a6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6b6:	e0b4      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a6b8:	2310      	movs	r3, #16
 800a6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6be:	e0b0      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a6c0:	2320      	movs	r3, #32
 800a6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6c6:	e0ac      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a6c8:	2340      	movs	r3, #64	; 0x40
 800a6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ce:	e0a8      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a6d0:	2380      	movs	r3, #128	; 0x80
 800a6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6d6:	e0a4      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a8f      	ldr	r2, [pc, #572]	; (800a91c <UART_SetConfig+0x6a0>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d130      	bne.n	800a744 <UART_SetConfig+0x4c8>
 800a6e2:	4b8d      	ldr	r3, [pc, #564]	; (800a918 <UART_SetConfig+0x69c>)
 800a6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6e6:	f003 0307 	and.w	r3, r3, #7
 800a6ea:	2b05      	cmp	r3, #5
 800a6ec:	d826      	bhi.n	800a73c <UART_SetConfig+0x4c0>
 800a6ee:	a201      	add	r2, pc, #4	; (adr r2, 800a6f4 <UART_SetConfig+0x478>)
 800a6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f4:	0800a70d 	.word	0x0800a70d
 800a6f8:	0800a715 	.word	0x0800a715
 800a6fc:	0800a71d 	.word	0x0800a71d
 800a700:	0800a725 	.word	0x0800a725
 800a704:	0800a72d 	.word	0x0800a72d
 800a708:	0800a735 	.word	0x0800a735
 800a70c:	2300      	movs	r3, #0
 800a70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a712:	e086      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a714:	2304      	movs	r3, #4
 800a716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a71a:	e082      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a71c:	2308      	movs	r3, #8
 800a71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a722:	e07e      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a724:	2310      	movs	r3, #16
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72a:	e07a      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a72c:	2320      	movs	r3, #32
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a732:	e076      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a734:	2340      	movs	r3, #64	; 0x40
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a73a:	e072      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a73c:	2380      	movs	r3, #128	; 0x80
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a742:	e06e      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a75      	ldr	r2, [pc, #468]	; (800a920 <UART_SetConfig+0x6a4>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d130      	bne.n	800a7b0 <UART_SetConfig+0x534>
 800a74e:	4b72      	ldr	r3, [pc, #456]	; (800a918 <UART_SetConfig+0x69c>)
 800a750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a752:	f003 0307 	and.w	r3, r3, #7
 800a756:	2b05      	cmp	r3, #5
 800a758:	d826      	bhi.n	800a7a8 <UART_SetConfig+0x52c>
 800a75a:	a201      	add	r2, pc, #4	; (adr r2, 800a760 <UART_SetConfig+0x4e4>)
 800a75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a760:	0800a779 	.word	0x0800a779
 800a764:	0800a781 	.word	0x0800a781
 800a768:	0800a789 	.word	0x0800a789
 800a76c:	0800a791 	.word	0x0800a791
 800a770:	0800a799 	.word	0x0800a799
 800a774:	0800a7a1 	.word	0x0800a7a1
 800a778:	2300      	movs	r3, #0
 800a77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a77e:	e050      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a780:	2304      	movs	r3, #4
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a786:	e04c      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a788:	2308      	movs	r3, #8
 800a78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a78e:	e048      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a790:	2310      	movs	r3, #16
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a796:	e044      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a798:	2320      	movs	r3, #32
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a79e:	e040      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a7a0:	2340      	movs	r3, #64	; 0x40
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7a6:	e03c      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a7a8:	2380      	movs	r3, #128	; 0x80
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ae:	e038      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a5b      	ldr	r2, [pc, #364]	; (800a924 <UART_SetConfig+0x6a8>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d130      	bne.n	800a81c <UART_SetConfig+0x5a0>
 800a7ba:	4b57      	ldr	r3, [pc, #348]	; (800a918 <UART_SetConfig+0x69c>)
 800a7bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7be:	f003 0307 	and.w	r3, r3, #7
 800a7c2:	2b05      	cmp	r3, #5
 800a7c4:	d826      	bhi.n	800a814 <UART_SetConfig+0x598>
 800a7c6:	a201      	add	r2, pc, #4	; (adr r2, 800a7cc <UART_SetConfig+0x550>)
 800a7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7cc:	0800a7e5 	.word	0x0800a7e5
 800a7d0:	0800a7ed 	.word	0x0800a7ed
 800a7d4:	0800a7f5 	.word	0x0800a7f5
 800a7d8:	0800a7fd 	.word	0x0800a7fd
 800a7dc:	0800a805 	.word	0x0800a805
 800a7e0:	0800a80d 	.word	0x0800a80d
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ea:	e01a      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a7ec:	2304      	movs	r3, #4
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7f2:	e016      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a7f4:	2308      	movs	r3, #8
 800a7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7fa:	e012      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a7fc:	2310      	movs	r3, #16
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a802:	e00e      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a804:	2320      	movs	r3, #32
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a80a:	e00a      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a80c:	2340      	movs	r3, #64	; 0x40
 800a80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a812:	e006      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a814:	2380      	movs	r3, #128	; 0x80
 800a816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a81a:	e002      	b.n	800a822 <UART_SetConfig+0x5a6>
 800a81c:	2380      	movs	r3, #128	; 0x80
 800a81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a3f      	ldr	r2, [pc, #252]	; (800a924 <UART_SetConfig+0x6a8>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	f040 80f8 	bne.w	800aa1e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a82e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a832:	2b20      	cmp	r3, #32
 800a834:	dc46      	bgt.n	800a8c4 <UART_SetConfig+0x648>
 800a836:	2b02      	cmp	r3, #2
 800a838:	f2c0 8082 	blt.w	800a940 <UART_SetConfig+0x6c4>
 800a83c:	3b02      	subs	r3, #2
 800a83e:	2b1e      	cmp	r3, #30
 800a840:	d87e      	bhi.n	800a940 <UART_SetConfig+0x6c4>
 800a842:	a201      	add	r2, pc, #4	; (adr r2, 800a848 <UART_SetConfig+0x5cc>)
 800a844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a848:	0800a8cb 	.word	0x0800a8cb
 800a84c:	0800a941 	.word	0x0800a941
 800a850:	0800a8d3 	.word	0x0800a8d3
 800a854:	0800a941 	.word	0x0800a941
 800a858:	0800a941 	.word	0x0800a941
 800a85c:	0800a941 	.word	0x0800a941
 800a860:	0800a8e3 	.word	0x0800a8e3
 800a864:	0800a941 	.word	0x0800a941
 800a868:	0800a941 	.word	0x0800a941
 800a86c:	0800a941 	.word	0x0800a941
 800a870:	0800a941 	.word	0x0800a941
 800a874:	0800a941 	.word	0x0800a941
 800a878:	0800a941 	.word	0x0800a941
 800a87c:	0800a941 	.word	0x0800a941
 800a880:	0800a8f3 	.word	0x0800a8f3
 800a884:	0800a941 	.word	0x0800a941
 800a888:	0800a941 	.word	0x0800a941
 800a88c:	0800a941 	.word	0x0800a941
 800a890:	0800a941 	.word	0x0800a941
 800a894:	0800a941 	.word	0x0800a941
 800a898:	0800a941 	.word	0x0800a941
 800a89c:	0800a941 	.word	0x0800a941
 800a8a0:	0800a941 	.word	0x0800a941
 800a8a4:	0800a941 	.word	0x0800a941
 800a8a8:	0800a941 	.word	0x0800a941
 800a8ac:	0800a941 	.word	0x0800a941
 800a8b0:	0800a941 	.word	0x0800a941
 800a8b4:	0800a941 	.word	0x0800a941
 800a8b8:	0800a941 	.word	0x0800a941
 800a8bc:	0800a941 	.word	0x0800a941
 800a8c0:	0800a933 	.word	0x0800a933
 800a8c4:	2b40      	cmp	r3, #64	; 0x40
 800a8c6:	d037      	beq.n	800a938 <UART_SetConfig+0x6bc>
 800a8c8:	e03a      	b.n	800a940 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a8ca:	f7fd fe6b 	bl	80085a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a8ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8d0:	e03c      	b.n	800a94c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fd fe7a 	bl	80085d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e0:	e034      	b.n	800a94c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8e2:	f107 0318 	add.w	r3, r7, #24
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fd ffc6 	bl	8008878 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8f0:	e02c      	b.n	800a94c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8f2:	4b09      	ldr	r3, [pc, #36]	; (800a918 <UART_SetConfig+0x69c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0320 	and.w	r3, r3, #32
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d016      	beq.n	800a92c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8fe:	4b06      	ldr	r3, [pc, #24]	; (800a918 <UART_SetConfig+0x69c>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	08db      	lsrs	r3, r3, #3
 800a904:	f003 0303 	and.w	r3, r3, #3
 800a908:	4a07      	ldr	r2, [pc, #28]	; (800a928 <UART_SetConfig+0x6ac>)
 800a90a:	fa22 f303 	lsr.w	r3, r2, r3
 800a90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a910:	e01c      	b.n	800a94c <UART_SetConfig+0x6d0>
 800a912:	bf00      	nop
 800a914:	40011400 	.word	0x40011400
 800a918:	58024400 	.word	0x58024400
 800a91c:	40007800 	.word	0x40007800
 800a920:	40007c00 	.word	0x40007c00
 800a924:	58000c00 	.word	0x58000c00
 800a928:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a92c:	4b9d      	ldr	r3, [pc, #628]	; (800aba4 <UART_SetConfig+0x928>)
 800a92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a930:	e00c      	b.n	800a94c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a932:	4b9d      	ldr	r3, [pc, #628]	; (800aba8 <UART_SetConfig+0x92c>)
 800a934:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a936:	e009      	b.n	800a94c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a93c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a93e:	e005      	b.n	800a94c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a940:	2300      	movs	r3, #0
 800a942:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a94a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f000 81de 	beq.w	800ad10 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a958:	4a94      	ldr	r2, [pc, #592]	; (800abac <UART_SetConfig+0x930>)
 800a95a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a95e:	461a      	mov	r2, r3
 800a960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a962:	fbb3 f3f2 	udiv	r3, r3, r2
 800a966:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	4613      	mov	r3, r2
 800a96e:	005b      	lsls	r3, r3, #1
 800a970:	4413      	add	r3, r2
 800a972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a974:	429a      	cmp	r2, r3
 800a976:	d305      	bcc.n	800a984 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a97e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a980:	429a      	cmp	r2, r3
 800a982:	d903      	bls.n	800a98c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a98a:	e1c1      	b.n	800ad10 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a98c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a98e:	2200      	movs	r2, #0
 800a990:	60bb      	str	r3, [r7, #8]
 800a992:	60fa      	str	r2, [r7, #12]
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	4a84      	ldr	r2, [pc, #528]	; (800abac <UART_SetConfig+0x930>)
 800a99a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	603b      	str	r3, [r7, #0]
 800a9a4:	607a      	str	r2, [r7, #4]
 800a9a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9ae:	f7f5 fc93 	bl	80002d8 <__aeabi_uldivmod>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4610      	mov	r0, r2
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	f04f 0200 	mov.w	r2, #0
 800a9be:	f04f 0300 	mov.w	r3, #0
 800a9c2:	020b      	lsls	r3, r1, #8
 800a9c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a9c8:	0202      	lsls	r2, r0, #8
 800a9ca:	6979      	ldr	r1, [r7, #20]
 800a9cc:	6849      	ldr	r1, [r1, #4]
 800a9ce:	0849      	lsrs	r1, r1, #1
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	eb12 0804 	adds.w	r8, r2, r4
 800a9da:	eb43 0905 	adc.w	r9, r3, r5
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	469a      	mov	sl, r3
 800a9e6:	4693      	mov	fp, r2
 800a9e8:	4652      	mov	r2, sl
 800a9ea:	465b      	mov	r3, fp
 800a9ec:	4640      	mov	r0, r8
 800a9ee:	4649      	mov	r1, r9
 800a9f0:	f7f5 fc72 	bl	80002d8 <__aeabi_uldivmod>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa02:	d308      	bcc.n	800aa16 <UART_SetConfig+0x79a>
 800aa04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa0a:	d204      	bcs.n	800aa16 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa12:	60da      	str	r2, [r3, #12]
 800aa14:	e17c      	b.n	800ad10 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aa1c:	e178      	b.n	800ad10 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	69db      	ldr	r3, [r3, #28]
 800aa22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa26:	f040 80c5 	bne.w	800abb4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800aa2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aa2e:	2b20      	cmp	r3, #32
 800aa30:	dc48      	bgt.n	800aac4 <UART_SetConfig+0x848>
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	db7b      	blt.n	800ab2e <UART_SetConfig+0x8b2>
 800aa36:	2b20      	cmp	r3, #32
 800aa38:	d879      	bhi.n	800ab2e <UART_SetConfig+0x8b2>
 800aa3a:	a201      	add	r2, pc, #4	; (adr r2, 800aa40 <UART_SetConfig+0x7c4>)
 800aa3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa40:	0800aacb 	.word	0x0800aacb
 800aa44:	0800aad3 	.word	0x0800aad3
 800aa48:	0800ab2f 	.word	0x0800ab2f
 800aa4c:	0800ab2f 	.word	0x0800ab2f
 800aa50:	0800aadb 	.word	0x0800aadb
 800aa54:	0800ab2f 	.word	0x0800ab2f
 800aa58:	0800ab2f 	.word	0x0800ab2f
 800aa5c:	0800ab2f 	.word	0x0800ab2f
 800aa60:	0800aaeb 	.word	0x0800aaeb
 800aa64:	0800ab2f 	.word	0x0800ab2f
 800aa68:	0800ab2f 	.word	0x0800ab2f
 800aa6c:	0800ab2f 	.word	0x0800ab2f
 800aa70:	0800ab2f 	.word	0x0800ab2f
 800aa74:	0800ab2f 	.word	0x0800ab2f
 800aa78:	0800ab2f 	.word	0x0800ab2f
 800aa7c:	0800ab2f 	.word	0x0800ab2f
 800aa80:	0800aafb 	.word	0x0800aafb
 800aa84:	0800ab2f 	.word	0x0800ab2f
 800aa88:	0800ab2f 	.word	0x0800ab2f
 800aa8c:	0800ab2f 	.word	0x0800ab2f
 800aa90:	0800ab2f 	.word	0x0800ab2f
 800aa94:	0800ab2f 	.word	0x0800ab2f
 800aa98:	0800ab2f 	.word	0x0800ab2f
 800aa9c:	0800ab2f 	.word	0x0800ab2f
 800aaa0:	0800ab2f 	.word	0x0800ab2f
 800aaa4:	0800ab2f 	.word	0x0800ab2f
 800aaa8:	0800ab2f 	.word	0x0800ab2f
 800aaac:	0800ab2f 	.word	0x0800ab2f
 800aab0:	0800ab2f 	.word	0x0800ab2f
 800aab4:	0800ab2f 	.word	0x0800ab2f
 800aab8:	0800ab2f 	.word	0x0800ab2f
 800aabc:	0800ab2f 	.word	0x0800ab2f
 800aac0:	0800ab21 	.word	0x0800ab21
 800aac4:	2b40      	cmp	r3, #64	; 0x40
 800aac6:	d02e      	beq.n	800ab26 <UART_SetConfig+0x8aa>
 800aac8:	e031      	b.n	800ab2e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaca:	f7fc fb35 	bl	8007138 <HAL_RCC_GetPCLK1Freq>
 800aace:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aad0:	e033      	b.n	800ab3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aad2:	f7fc fb47 	bl	8007164 <HAL_RCC_GetPCLK2Freq>
 800aad6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aad8:	e02f      	b.n	800ab3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aade:	4618      	mov	r0, r3
 800aae0:	f7fd fd76 	bl	80085d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aae8:	e027      	b.n	800ab3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaea:	f107 0318 	add.w	r3, r7, #24
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fd fec2 	bl	8008878 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaf8:	e01f      	b.n	800ab3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aafa:	4b2d      	ldr	r3, [pc, #180]	; (800abb0 <UART_SetConfig+0x934>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 0320 	and.w	r3, r3, #32
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d009      	beq.n	800ab1a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab06:	4b2a      	ldr	r3, [pc, #168]	; (800abb0 <UART_SetConfig+0x934>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	08db      	lsrs	r3, r3, #3
 800ab0c:	f003 0303 	and.w	r3, r3, #3
 800ab10:	4a24      	ldr	r2, [pc, #144]	; (800aba4 <UART_SetConfig+0x928>)
 800ab12:	fa22 f303 	lsr.w	r3, r2, r3
 800ab16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab18:	e00f      	b.n	800ab3a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ab1a:	4b22      	ldr	r3, [pc, #136]	; (800aba4 <UART_SetConfig+0x928>)
 800ab1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab1e:	e00c      	b.n	800ab3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab20:	4b21      	ldr	r3, [pc, #132]	; (800aba8 <UART_SetConfig+0x92c>)
 800ab22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab24:	e009      	b.n	800ab3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab2c:	e005      	b.n	800ab3a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ab38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 80e7 	beq.w	800ad10 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab46:	4a19      	ldr	r2, [pc, #100]	; (800abac <UART_SetConfig+0x930>)
 800ab48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab50:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab54:	005a      	lsls	r2, r3, #1
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	085b      	lsrs	r3, r3, #1
 800ab5c:	441a      	add	r2, r3
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab66:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6a:	2b0f      	cmp	r3, #15
 800ab6c:	d916      	bls.n	800ab9c <UART_SetConfig+0x920>
 800ab6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab74:	d212      	bcs.n	800ab9c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	f023 030f 	bic.w	r3, r3, #15
 800ab7e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab82:	085b      	lsrs	r3, r3, #1
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	f003 0307 	and.w	r3, r3, #7
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ab98:	60da      	str	r2, [r3, #12]
 800ab9a:	e0b9      	b.n	800ad10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aba2:	e0b5      	b.n	800ad10 <UART_SetConfig+0xa94>
 800aba4:	03d09000 	.word	0x03d09000
 800aba8:	003d0900 	.word	0x003d0900
 800abac:	08010438 	.word	0x08010438
 800abb0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800abb4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800abb8:	2b20      	cmp	r3, #32
 800abba:	dc49      	bgt.n	800ac50 <UART_SetConfig+0x9d4>
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	db7c      	blt.n	800acba <UART_SetConfig+0xa3e>
 800abc0:	2b20      	cmp	r3, #32
 800abc2:	d87a      	bhi.n	800acba <UART_SetConfig+0xa3e>
 800abc4:	a201      	add	r2, pc, #4	; (adr r2, 800abcc <UART_SetConfig+0x950>)
 800abc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abca:	bf00      	nop
 800abcc:	0800ac57 	.word	0x0800ac57
 800abd0:	0800ac5f 	.word	0x0800ac5f
 800abd4:	0800acbb 	.word	0x0800acbb
 800abd8:	0800acbb 	.word	0x0800acbb
 800abdc:	0800ac67 	.word	0x0800ac67
 800abe0:	0800acbb 	.word	0x0800acbb
 800abe4:	0800acbb 	.word	0x0800acbb
 800abe8:	0800acbb 	.word	0x0800acbb
 800abec:	0800ac77 	.word	0x0800ac77
 800abf0:	0800acbb 	.word	0x0800acbb
 800abf4:	0800acbb 	.word	0x0800acbb
 800abf8:	0800acbb 	.word	0x0800acbb
 800abfc:	0800acbb 	.word	0x0800acbb
 800ac00:	0800acbb 	.word	0x0800acbb
 800ac04:	0800acbb 	.word	0x0800acbb
 800ac08:	0800acbb 	.word	0x0800acbb
 800ac0c:	0800ac87 	.word	0x0800ac87
 800ac10:	0800acbb 	.word	0x0800acbb
 800ac14:	0800acbb 	.word	0x0800acbb
 800ac18:	0800acbb 	.word	0x0800acbb
 800ac1c:	0800acbb 	.word	0x0800acbb
 800ac20:	0800acbb 	.word	0x0800acbb
 800ac24:	0800acbb 	.word	0x0800acbb
 800ac28:	0800acbb 	.word	0x0800acbb
 800ac2c:	0800acbb 	.word	0x0800acbb
 800ac30:	0800acbb 	.word	0x0800acbb
 800ac34:	0800acbb 	.word	0x0800acbb
 800ac38:	0800acbb 	.word	0x0800acbb
 800ac3c:	0800acbb 	.word	0x0800acbb
 800ac40:	0800acbb 	.word	0x0800acbb
 800ac44:	0800acbb 	.word	0x0800acbb
 800ac48:	0800acbb 	.word	0x0800acbb
 800ac4c:	0800acad 	.word	0x0800acad
 800ac50:	2b40      	cmp	r3, #64	; 0x40
 800ac52:	d02e      	beq.n	800acb2 <UART_SetConfig+0xa36>
 800ac54:	e031      	b.n	800acba <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac56:	f7fc fa6f 	bl	8007138 <HAL_RCC_GetPCLK1Freq>
 800ac5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac5c:	e033      	b.n	800acc6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac5e:	f7fc fa81 	bl	8007164 <HAL_RCC_GetPCLK2Freq>
 800ac62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac64:	e02f      	b.n	800acc6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fd fcb0 	bl	80085d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac74:	e027      	b.n	800acc6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac76:	f107 0318 	add.w	r3, r7, #24
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7fd fdfc 	bl	8008878 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac84:	e01f      	b.n	800acc6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac86:	4b2d      	ldr	r3, [pc, #180]	; (800ad3c <UART_SetConfig+0xac0>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0320 	and.w	r3, r3, #32
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d009      	beq.n	800aca6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac92:	4b2a      	ldr	r3, [pc, #168]	; (800ad3c <UART_SetConfig+0xac0>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	08db      	lsrs	r3, r3, #3
 800ac98:	f003 0303 	and.w	r3, r3, #3
 800ac9c:	4a28      	ldr	r2, [pc, #160]	; (800ad40 <UART_SetConfig+0xac4>)
 800ac9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aca4:	e00f      	b.n	800acc6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aca6:	4b26      	ldr	r3, [pc, #152]	; (800ad40 <UART_SetConfig+0xac4>)
 800aca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acaa:	e00c      	b.n	800acc6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acac:	4b25      	ldr	r3, [pc, #148]	; (800ad44 <UART_SetConfig+0xac8>)
 800acae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acb0:	e009      	b.n	800acc6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acb8:	e005      	b.n	800acc6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800acba:	2300      	movs	r3, #0
 800acbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800acc4:	bf00      	nop
    }

    if (pclk != 0U)
 800acc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d021      	beq.n	800ad10 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd0:	4a1d      	ldr	r2, [pc, #116]	; (800ad48 <UART_SetConfig+0xacc>)
 800acd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acd6:	461a      	mov	r2, r3
 800acd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acda:	fbb3 f2f2 	udiv	r2, r3, r2
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	085b      	lsrs	r3, r3, #1
 800ace4:	441a      	add	r2, r3
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	fbb2 f3f3 	udiv	r3, r2, r3
 800acee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf2:	2b0f      	cmp	r3, #15
 800acf4:	d909      	bls.n	800ad0a <UART_SetConfig+0xa8e>
 800acf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acfc:	d205      	bcs.n	800ad0a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800acfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	60da      	str	r2, [r3, #12]
 800ad08:	e002      	b.n	800ad10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	2200      	movs	r2, #0
 800ad24:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ad2c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3748      	adds	r7, #72	; 0x48
 800ad34:	46bd      	mov	sp, r7
 800ad36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad3a:	bf00      	nop
 800ad3c:	58024400 	.word	0x58024400
 800ad40:	03d09000 	.word	0x03d09000
 800ad44:	003d0900 	.word	0x003d0900
 800ad48:	08010438 	.word	0x08010438

0800ad4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad58:	f003 0301 	and.w	r3, r3, #1
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00a      	beq.n	800ad76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	430a      	orrs	r2, r1
 800ad74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad7a:	f003 0302 	and.w	r3, r3, #2
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	430a      	orrs	r2, r1
 800ad96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9c:	f003 0304 	and.w	r3, r3, #4
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00a      	beq.n	800adba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adbe:	f003 0308 	and.w	r3, r3, #8
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00a      	beq.n	800addc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	430a      	orrs	r2, r1
 800adda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade0:	f003 0310 	and.w	r3, r3, #16
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00a      	beq.n	800adfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	430a      	orrs	r2, r1
 800adfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae02:	f003 0320 	and.w	r3, r3, #32
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00a      	beq.n	800ae20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d01a      	beq.n	800ae62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	430a      	orrs	r2, r1
 800ae40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae4a:	d10a      	bne.n	800ae62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	430a      	orrs	r2, r1
 800ae60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00a      	beq.n	800ae84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	430a      	orrs	r2, r1
 800ae82:	605a      	str	r2, [r3, #4]
  }
}
 800ae84:	bf00      	nop
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b098      	sub	sp, #96	; 0x60
 800ae94:	af02      	add	r7, sp, #8
 800ae96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aea0:	f7f8 fa7a 	bl	8003398 <HAL_GetTick>
 800aea4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 0308 	and.w	r3, r3, #8
 800aeb0:	2b08      	cmp	r3, #8
 800aeb2:	d12f      	bne.n	800af14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aeb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aebc:	2200      	movs	r2, #0
 800aebe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f88e 	bl	800afe4 <UART_WaitOnFlagUntilTimeout>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d022      	beq.n	800af14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed6:	e853 3f00 	ldrex	r3, [r3]
 800aeda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aedc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aee2:	653b      	str	r3, [r7, #80]	; 0x50
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	461a      	mov	r2, r3
 800aeea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeec:	647b      	str	r3, [r7, #68]	; 0x44
 800aeee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aef4:	e841 2300 	strex	r3, r2, [r1]
 800aef8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aefa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1e6      	bne.n	800aece <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2220      	movs	r2, #32
 800af04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af10:	2303      	movs	r3, #3
 800af12:	e063      	b.n	800afdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f003 0304 	and.w	r3, r3, #4
 800af1e:	2b04      	cmp	r3, #4
 800af20:	d149      	bne.n	800afb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af2a:	2200      	movs	r2, #0
 800af2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f857 	bl	800afe4 <UART_WaitOnFlagUntilTimeout>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d03c      	beq.n	800afb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af44:	e853 3f00 	ldrex	r3, [r3]
 800af48:	623b      	str	r3, [r7, #32]
   return(result);
 800af4a:	6a3b      	ldr	r3, [r7, #32]
 800af4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af50:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	461a      	mov	r2, r3
 800af58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af5a:	633b      	str	r3, [r7, #48]	; 0x30
 800af5c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af62:	e841 2300 	strex	r3, r2, [r1]
 800af66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d1e6      	bne.n	800af3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	3308      	adds	r3, #8
 800af74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	e853 3f00 	ldrex	r3, [r3]
 800af7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f023 0301 	bic.w	r3, r3, #1
 800af84:	64bb      	str	r3, [r7, #72]	; 0x48
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	3308      	adds	r3, #8
 800af8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af8e:	61fa      	str	r2, [r7, #28]
 800af90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af92:	69b9      	ldr	r1, [r7, #24]
 800af94:	69fa      	ldr	r2, [r7, #28]
 800af96:	e841 2300 	strex	r3, r2, [r1]
 800af9a:	617b      	str	r3, [r7, #20]
   return(result);
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1e5      	bne.n	800af6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2220      	movs	r2, #32
 800afa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e012      	b.n	800afdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2220      	movs	r2, #32
 800afba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2220      	movs	r2, #32
 800afc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3758      	adds	r7, #88	; 0x58
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	603b      	str	r3, [r7, #0]
 800aff0:	4613      	mov	r3, r2
 800aff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aff4:	e049      	b.n	800b08a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800affc:	d045      	beq.n	800b08a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800affe:	f7f8 f9cb 	bl	8003398 <HAL_GetTick>
 800b002:	4602      	mov	r2, r0
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	1ad3      	subs	r3, r2, r3
 800b008:	69ba      	ldr	r2, [r7, #24]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d302      	bcc.n	800b014 <UART_WaitOnFlagUntilTimeout+0x30>
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b014:	2303      	movs	r3, #3
 800b016:	e048      	b.n	800b0aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f003 0304 	and.w	r3, r3, #4
 800b022:	2b00      	cmp	r3, #0
 800b024:	d031      	beq.n	800b08a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	69db      	ldr	r3, [r3, #28]
 800b02c:	f003 0308 	and.w	r3, r3, #8
 800b030:	2b08      	cmp	r3, #8
 800b032:	d110      	bne.n	800b056 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2208      	movs	r2, #8
 800b03a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f000 f839 	bl	800b0b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2208      	movs	r2, #8
 800b046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e029      	b.n	800b0aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	69db      	ldr	r3, [r3, #28]
 800b05c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b064:	d111      	bne.n	800b08a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b06e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f000 f81f 	bl	800b0b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2220      	movs	r2, #32
 800b07a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e00f      	b.n	800b0aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	69da      	ldr	r2, [r3, #28]
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	4013      	ands	r3, r2
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	429a      	cmp	r2, r3
 800b098:	bf0c      	ite	eq
 800b09a:	2301      	moveq	r3, #1
 800b09c:	2300      	movne	r3, #0
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	79fb      	ldrb	r3, [r7, #7]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d0a6      	beq.n	800aff6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b095      	sub	sp, #84	; 0x54
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0c4:	e853 3f00 	ldrex	r3, [r3]
 800b0c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0da:	643b      	str	r3, [r7, #64]	; 0x40
 800b0dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0e2:	e841 2300 	strex	r3, r2, [r1]
 800b0e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1e6      	bne.n	800b0bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3308      	adds	r3, #8
 800b0f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f6:	6a3b      	ldr	r3, [r7, #32]
 800b0f8:	e853 3f00 	ldrex	r3, [r3]
 800b0fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0fe:	69fa      	ldr	r2, [r7, #28]
 800b100:	4b1e      	ldr	r3, [pc, #120]	; (800b17c <UART_EndRxTransfer+0xc8>)
 800b102:	4013      	ands	r3, r2
 800b104:	64bb      	str	r3, [r7, #72]	; 0x48
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3308      	adds	r3, #8
 800b10c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b10e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b110:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b112:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b116:	e841 2300 	strex	r3, r2, [r1]
 800b11a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1e5      	bne.n	800b0ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b126:	2b01      	cmp	r3, #1
 800b128:	d118      	bne.n	800b15c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	e853 3f00 	ldrex	r3, [r3]
 800b136:	60bb      	str	r3, [r7, #8]
   return(result);
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	f023 0310 	bic.w	r3, r3, #16
 800b13e:	647b      	str	r3, [r7, #68]	; 0x44
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	461a      	mov	r2, r3
 800b146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b148:	61bb      	str	r3, [r7, #24]
 800b14a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14c:	6979      	ldr	r1, [r7, #20]
 800b14e:	69ba      	ldr	r2, [r7, #24]
 800b150:	e841 2300 	strex	r3, r2, [r1]
 800b154:	613b      	str	r3, [r7, #16]
   return(result);
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1e6      	bne.n	800b12a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2220      	movs	r2, #32
 800b160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b170:	bf00      	nop
 800b172:	3754      	adds	r7, #84	; 0x54
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	effffffe 	.word	0xeffffffe

0800b180 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d101      	bne.n	800b196 <HAL_UARTEx_DisableFifoMode+0x16>
 800b192:	2302      	movs	r3, #2
 800b194:	e027      	b.n	800b1e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2201      	movs	r2, #1
 800b19a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2224      	movs	r2, #36	; 0x24
 800b1a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f022 0201 	bic.w	r2, r2, #1
 800b1bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b1c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2220      	movs	r2, #32
 800b1d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3714      	adds	r7, #20
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr

0800b1f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b202:	2b01      	cmp	r3, #1
 800b204:	d101      	bne.n	800b20a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b206:	2302      	movs	r3, #2
 800b208:	e02d      	b.n	800b266 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2201      	movs	r2, #1
 800b20e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2224      	movs	r2, #36	; 0x24
 800b216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f022 0201 	bic.w	r2, r2, #1
 800b230:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	430a      	orrs	r2, r1
 800b244:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f850 	bl	800b2ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2220      	movs	r2, #32
 800b258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b084      	sub	sp, #16
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d101      	bne.n	800b286 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b282:	2302      	movs	r3, #2
 800b284:	e02d      	b.n	800b2e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2201      	movs	r2, #1
 800b28a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2224      	movs	r2, #36	; 0x24
 800b292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f022 0201 	bic.w	r2, r2, #1
 800b2ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	683a      	ldr	r2, [r7, #0]
 800b2be:	430a      	orrs	r2, r1
 800b2c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 f812 	bl	800b2ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2220      	movs	r2, #32
 800b2d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
	...

0800b2ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d108      	bne.n	800b30e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2201      	movs	r2, #1
 800b300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b30c:	e031      	b.n	800b372 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b30e:	2310      	movs	r3, #16
 800b310:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b312:	2310      	movs	r3, #16
 800b314:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	0e5b      	lsrs	r3, r3, #25
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	f003 0307 	and.w	r3, r3, #7
 800b324:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	0f5b      	lsrs	r3, r3, #29
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	f003 0307 	and.w	r3, r3, #7
 800b334:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b336:	7bbb      	ldrb	r3, [r7, #14]
 800b338:	7b3a      	ldrb	r2, [r7, #12]
 800b33a:	4911      	ldr	r1, [pc, #68]	; (800b380 <UARTEx_SetNbDataToProcess+0x94>)
 800b33c:	5c8a      	ldrb	r2, [r1, r2]
 800b33e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b342:	7b3a      	ldrb	r2, [r7, #12]
 800b344:	490f      	ldr	r1, [pc, #60]	; (800b384 <UARTEx_SetNbDataToProcess+0x98>)
 800b346:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b348:	fb93 f3f2 	sdiv	r3, r3, r2
 800b34c:	b29a      	uxth	r2, r3
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b354:	7bfb      	ldrb	r3, [r7, #15]
 800b356:	7b7a      	ldrb	r2, [r7, #13]
 800b358:	4909      	ldr	r1, [pc, #36]	; (800b380 <UARTEx_SetNbDataToProcess+0x94>)
 800b35a:	5c8a      	ldrb	r2, [r1, r2]
 800b35c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b360:	7b7a      	ldrb	r2, [r7, #13]
 800b362:	4908      	ldr	r1, [pc, #32]	; (800b384 <UARTEx_SetNbDataToProcess+0x98>)
 800b364:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b366:	fb93 f3f2 	sdiv	r3, r3, r2
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b372:	bf00      	nop
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	08010450 	.word	0x08010450
 800b384:	08010458 	.word	0x08010458

0800b388 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b388:	b084      	sub	sp, #16
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b084      	sub	sp, #16
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	f107 001c 	add.w	r0, r7, #28
 800b396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d120      	bne.n	800b3e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	68da      	ldr	r2, [r3, #12]
 800b3b0:	4b2a      	ldr	r3, [pc, #168]	; (800b45c <USB_CoreInit+0xd4>)
 800b3b2:	4013      	ands	r3, r2
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b3c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d105      	bne.n	800b3d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f001 faf8 	bl	800c9cc <USB_CoreReset>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	73fb      	strb	r3, [r7, #15]
 800b3e0:	e01a      	b.n	800b418 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f001 faec 	bl	800c9cc <USB_CoreReset>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b3f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d106      	bne.n	800b40c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b402:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	639a      	str	r2, [r3, #56]	; 0x38
 800b40a:	e005      	b.n	800b418 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b410:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d116      	bne.n	800b44c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b422:	b29a      	uxth	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b42c:	4b0c      	ldr	r3, [pc, #48]	; (800b460 <USB_CoreInit+0xd8>)
 800b42e:	4313      	orrs	r3, r2
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	f043 0206 	orr.w	r2, r3, #6
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	f043 0220 	orr.w	r2, r3, #32
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b458:	b004      	add	sp, #16
 800b45a:	4770      	bx	lr
 800b45c:	ffbdffbf 	.word	0xffbdffbf
 800b460:	03ee0000 	.word	0x03ee0000

0800b464 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b464:	b480      	push	{r7}
 800b466:	b087      	sub	sp, #28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	4613      	mov	r3, r2
 800b470:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b472:	79fb      	ldrb	r3, [r7, #7]
 800b474:	2b02      	cmp	r3, #2
 800b476:	d165      	bne.n	800b544 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	4a41      	ldr	r2, [pc, #260]	; (800b580 <USB_SetTurnaroundTime+0x11c>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d906      	bls.n	800b48e <USB_SetTurnaroundTime+0x2a>
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	4a40      	ldr	r2, [pc, #256]	; (800b584 <USB_SetTurnaroundTime+0x120>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d202      	bcs.n	800b48e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b488:	230f      	movs	r3, #15
 800b48a:	617b      	str	r3, [r7, #20]
 800b48c:	e062      	b.n	800b554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	4a3c      	ldr	r2, [pc, #240]	; (800b584 <USB_SetTurnaroundTime+0x120>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d306      	bcc.n	800b4a4 <USB_SetTurnaroundTime+0x40>
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	4a3b      	ldr	r2, [pc, #236]	; (800b588 <USB_SetTurnaroundTime+0x124>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d202      	bcs.n	800b4a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b49e:	230e      	movs	r3, #14
 800b4a0:	617b      	str	r3, [r7, #20]
 800b4a2:	e057      	b.n	800b554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	4a38      	ldr	r2, [pc, #224]	; (800b588 <USB_SetTurnaroundTime+0x124>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d306      	bcc.n	800b4ba <USB_SetTurnaroundTime+0x56>
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	4a37      	ldr	r2, [pc, #220]	; (800b58c <USB_SetTurnaroundTime+0x128>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d202      	bcs.n	800b4ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b4b4:	230d      	movs	r3, #13
 800b4b6:	617b      	str	r3, [r7, #20]
 800b4b8:	e04c      	b.n	800b554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	4a33      	ldr	r2, [pc, #204]	; (800b58c <USB_SetTurnaroundTime+0x128>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d306      	bcc.n	800b4d0 <USB_SetTurnaroundTime+0x6c>
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	4a32      	ldr	r2, [pc, #200]	; (800b590 <USB_SetTurnaroundTime+0x12c>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d802      	bhi.n	800b4d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b4ca:	230c      	movs	r3, #12
 800b4cc:	617b      	str	r3, [r7, #20]
 800b4ce:	e041      	b.n	800b554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	4a2f      	ldr	r2, [pc, #188]	; (800b590 <USB_SetTurnaroundTime+0x12c>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d906      	bls.n	800b4e6 <USB_SetTurnaroundTime+0x82>
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	4a2e      	ldr	r2, [pc, #184]	; (800b594 <USB_SetTurnaroundTime+0x130>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d802      	bhi.n	800b4e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b4e0:	230b      	movs	r3, #11
 800b4e2:	617b      	str	r3, [r7, #20]
 800b4e4:	e036      	b.n	800b554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	4a2a      	ldr	r2, [pc, #168]	; (800b594 <USB_SetTurnaroundTime+0x130>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d906      	bls.n	800b4fc <USB_SetTurnaroundTime+0x98>
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	4a29      	ldr	r2, [pc, #164]	; (800b598 <USB_SetTurnaroundTime+0x134>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d802      	bhi.n	800b4fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b4f6:	230a      	movs	r3, #10
 800b4f8:	617b      	str	r3, [r7, #20]
 800b4fa:	e02b      	b.n	800b554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	4a26      	ldr	r2, [pc, #152]	; (800b598 <USB_SetTurnaroundTime+0x134>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d906      	bls.n	800b512 <USB_SetTurnaroundTime+0xae>
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	4a25      	ldr	r2, [pc, #148]	; (800b59c <USB_SetTurnaroundTime+0x138>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d202      	bcs.n	800b512 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b50c:	2309      	movs	r3, #9
 800b50e:	617b      	str	r3, [r7, #20]
 800b510:	e020      	b.n	800b554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	4a21      	ldr	r2, [pc, #132]	; (800b59c <USB_SetTurnaroundTime+0x138>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d306      	bcc.n	800b528 <USB_SetTurnaroundTime+0xc4>
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	4a20      	ldr	r2, [pc, #128]	; (800b5a0 <USB_SetTurnaroundTime+0x13c>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d802      	bhi.n	800b528 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b522:	2308      	movs	r3, #8
 800b524:	617b      	str	r3, [r7, #20]
 800b526:	e015      	b.n	800b554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	4a1d      	ldr	r2, [pc, #116]	; (800b5a0 <USB_SetTurnaroundTime+0x13c>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d906      	bls.n	800b53e <USB_SetTurnaroundTime+0xda>
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	4a1c      	ldr	r2, [pc, #112]	; (800b5a4 <USB_SetTurnaroundTime+0x140>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d202      	bcs.n	800b53e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b538:	2307      	movs	r3, #7
 800b53a:	617b      	str	r3, [r7, #20]
 800b53c:	e00a      	b.n	800b554 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b53e:	2306      	movs	r3, #6
 800b540:	617b      	str	r3, [r7, #20]
 800b542:	e007      	b.n	800b554 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b544:	79fb      	ldrb	r3, [r7, #7]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d102      	bne.n	800b550 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b54a:	2309      	movs	r3, #9
 800b54c:	617b      	str	r3, [r7, #20]
 800b54e:	e001      	b.n	800b554 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b550:	2309      	movs	r3, #9
 800b552:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	68da      	ldr	r2, [r3, #12]
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	029b      	lsls	r3, r3, #10
 800b568:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b56c:	431a      	orrs	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	371c      	adds	r7, #28
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr
 800b580:	00d8acbf 	.word	0x00d8acbf
 800b584:	00e4e1c0 	.word	0x00e4e1c0
 800b588:	00f42400 	.word	0x00f42400
 800b58c:	01067380 	.word	0x01067380
 800b590:	011a499f 	.word	0x011a499f
 800b594:	01312cff 	.word	0x01312cff
 800b598:	014ca43f 	.word	0x014ca43f
 800b59c:	016e3600 	.word	0x016e3600
 800b5a0:	01a6ab1f 	.word	0x01a6ab1f
 800b5a4:	01e84800 	.word	0x01e84800

0800b5a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	f043 0201 	orr.w	r2, r3, #1
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b083      	sub	sp, #12
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	f023 0201 	bic.w	r2, r3, #1
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b608:	78fb      	ldrb	r3, [r7, #3]
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d115      	bne.n	800b63a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b61a:	2001      	movs	r0, #1
 800b61c:	f7f7 fec8 	bl	80033b0 <HAL_Delay>
      ms++;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	3301      	adds	r3, #1
 800b624:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f001 f93f 	bl	800c8aa <USB_GetMode>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d01e      	beq.n	800b670 <USB_SetCurrentMode+0x84>
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2b31      	cmp	r3, #49	; 0x31
 800b636:	d9f0      	bls.n	800b61a <USB_SetCurrentMode+0x2e>
 800b638:	e01a      	b.n	800b670 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b63a:	78fb      	ldrb	r3, [r7, #3]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d115      	bne.n	800b66c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b64c:	2001      	movs	r0, #1
 800b64e:	f7f7 feaf 	bl	80033b0 <HAL_Delay>
      ms++;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	3301      	adds	r3, #1
 800b656:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f001 f926 	bl	800c8aa <USB_GetMode>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d005      	beq.n	800b670 <USB_SetCurrentMode+0x84>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2b31      	cmp	r3, #49	; 0x31
 800b668:	d9f0      	bls.n	800b64c <USB_SetCurrentMode+0x60>
 800b66a:	e001      	b.n	800b670 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	e005      	b.n	800b67c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2b32      	cmp	r3, #50	; 0x32
 800b674:	d101      	bne.n	800b67a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	e000      	b.n	800b67c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b684:	b084      	sub	sp, #16
 800b686:	b580      	push	{r7, lr}
 800b688:	b086      	sub	sp, #24
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
 800b68e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b69e:	2300      	movs	r3, #0
 800b6a0:	613b      	str	r3, [r7, #16]
 800b6a2:	e009      	b.n	800b6b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	3340      	adds	r3, #64	; 0x40
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4413      	add	r3, r2
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	613b      	str	r3, [r7, #16]
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	2b0e      	cmp	r3, #14
 800b6bc:	d9f2      	bls.n	800b6a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b6be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d11c      	bne.n	800b6fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6d2:	f043 0302 	orr.w	r3, r3, #2
 800b6d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	601a      	str	r2, [r3, #0]
 800b6fc:	e005      	b.n	800b70a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b702:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b710:	461a      	mov	r2, r3
 800b712:	2300      	movs	r3, #0
 800b714:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b71c:	4619      	mov	r1, r3
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b724:	461a      	mov	r2, r3
 800b726:	680b      	ldr	r3, [r1, #0]
 800b728:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d10c      	bne.n	800b74a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b732:	2b00      	cmp	r3, #0
 800b734:	d104      	bne.n	800b740 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b736:	2100      	movs	r1, #0
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f965 	bl	800ba08 <USB_SetDevSpeed>
 800b73e:	e008      	b.n	800b752 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b740:	2101      	movs	r1, #1
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 f960 	bl	800ba08 <USB_SetDevSpeed>
 800b748:	e003      	b.n	800b752 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b74a:	2103      	movs	r1, #3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 f95b 	bl	800ba08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b752:	2110      	movs	r1, #16
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f8f3 	bl	800b940 <USB_FlushTxFifo>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d001      	beq.n	800b764 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b760:	2301      	movs	r3, #1
 800b762:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 f91f 	bl	800b9a8 <USB_FlushRxFifo>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d001      	beq.n	800b774 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b77a:	461a      	mov	r2, r3
 800b77c:	2300      	movs	r3, #0
 800b77e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b786:	461a      	mov	r2, r3
 800b788:	2300      	movs	r3, #0
 800b78a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b792:	461a      	mov	r2, r3
 800b794:	2300      	movs	r3, #0
 800b796:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b798:	2300      	movs	r3, #0
 800b79a:	613b      	str	r3, [r7, #16]
 800b79c:	e043      	b.n	800b826 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	015a      	lsls	r2, r3, #5
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7b4:	d118      	bne.n	800b7e8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10a      	bne.n	800b7d2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	015a      	lsls	r2, r3, #5
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b7ce:	6013      	str	r3, [r2, #0]
 800b7d0:	e013      	b.n	800b7fa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	015a      	lsls	r2, r3, #5
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	4413      	add	r3, r2
 800b7da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7de:	461a      	mov	r2, r3
 800b7e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b7e4:	6013      	str	r3, [r2, #0]
 800b7e6:	e008      	b.n	800b7fa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	015a      	lsls	r2, r3, #5
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	015a      	lsls	r2, r3, #5
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	4413      	add	r3, r2
 800b802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b806:	461a      	mov	r2, r3
 800b808:	2300      	movs	r3, #0
 800b80a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	015a      	lsls	r2, r3, #5
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	4413      	add	r3, r2
 800b814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b818:	461a      	mov	r2, r3
 800b81a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b81e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	3301      	adds	r3, #1
 800b824:	613b      	str	r3, [r7, #16]
 800b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d3b7      	bcc.n	800b79e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b82e:	2300      	movs	r3, #0
 800b830:	613b      	str	r3, [r7, #16]
 800b832:	e043      	b.n	800b8bc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	015a      	lsls	r2, r3, #5
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	4413      	add	r3, r2
 800b83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b84a:	d118      	bne.n	800b87e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10a      	bne.n	800b868 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	015a      	lsls	r2, r3, #5
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	4413      	add	r3, r2
 800b85a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b85e:	461a      	mov	r2, r3
 800b860:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b864:	6013      	str	r3, [r2, #0]
 800b866:	e013      	b.n	800b890 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	015a      	lsls	r2, r3, #5
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	4413      	add	r3, r2
 800b870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b874:	461a      	mov	r2, r3
 800b876:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b87a:	6013      	str	r3, [r2, #0]
 800b87c:	e008      	b.n	800b890 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	015a      	lsls	r2, r3, #5
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	4413      	add	r3, r2
 800b886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b88a:	461a      	mov	r2, r3
 800b88c:	2300      	movs	r3, #0
 800b88e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	015a      	lsls	r2, r3, #5
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	4413      	add	r3, r2
 800b898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b89c:	461a      	mov	r2, r3
 800b89e:	2300      	movs	r3, #0
 800b8a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	015a      	lsls	r2, r3, #5
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b8b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	613b      	str	r3, [r7, #16]
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	693a      	ldr	r2, [r7, #16]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d3b7      	bcc.n	800b834 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b8e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d105      	bne.n	800b8f8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	699b      	ldr	r3, [r3, #24]
 800b8f0:	f043 0210 	orr.w	r2, r3, #16
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	699a      	ldr	r2, [r3, #24]
 800b8fc:	4b0e      	ldr	r3, [pc, #56]	; (800b938 <USB_DevInit+0x2b4>)
 800b8fe:	4313      	orrs	r3, r2
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b906:	2b00      	cmp	r3, #0
 800b908:	d005      	beq.n	800b916 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	f043 0208 	orr.w	r2, r3, #8
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d105      	bne.n	800b928 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	699a      	ldr	r2, [r3, #24]
 800b920:	4b06      	ldr	r3, [pc, #24]	; (800b93c <USB_DevInit+0x2b8>)
 800b922:	4313      	orrs	r3, r2
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b928:	7dfb      	ldrb	r3, [r7, #23]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3718      	adds	r7, #24
 800b92e:	46bd      	mov	sp, r7
 800b930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b934:	b004      	add	sp, #16
 800b936:	4770      	bx	lr
 800b938:	803c3800 	.word	0x803c3800
 800b93c:	40000004 	.word	0x40000004

0800b940 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b94a:	2300      	movs	r3, #0
 800b94c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	3301      	adds	r3, #1
 800b952:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	4a13      	ldr	r2, [pc, #76]	; (800b9a4 <USB_FlushTxFifo+0x64>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d901      	bls.n	800b960 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b95c:	2303      	movs	r3, #3
 800b95e:	e01b      	b.n	800b998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	daf2      	bge.n	800b94e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b968:	2300      	movs	r3, #0
 800b96a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	019b      	lsls	r3, r3, #6
 800b970:	f043 0220 	orr.w	r2, r3, #32
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	3301      	adds	r3, #1
 800b97c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	4a08      	ldr	r2, [pc, #32]	; (800b9a4 <USB_FlushTxFifo+0x64>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d901      	bls.n	800b98a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b986:	2303      	movs	r3, #3
 800b988:	e006      	b.n	800b998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	691b      	ldr	r3, [r3, #16]
 800b98e:	f003 0320 	and.w	r3, r3, #32
 800b992:	2b20      	cmp	r3, #32
 800b994:	d0f0      	beq.n	800b978 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3714      	adds	r7, #20
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr
 800b9a4:	00030d40 	.word	0x00030d40

0800b9a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	4a11      	ldr	r2, [pc, #68]	; (800ba04 <USB_FlushRxFifo+0x5c>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d901      	bls.n	800b9c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	e018      	b.n	800b9f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	691b      	ldr	r3, [r3, #16]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	daf2      	bge.n	800b9b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2210      	movs	r2, #16
 800b9d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	4a08      	ldr	r2, [pc, #32]	; (800ba04 <USB_FlushRxFifo+0x5c>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d901      	bls.n	800b9ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	e006      	b.n	800b9f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	f003 0310 	and.w	r3, r3, #16
 800b9f2:	2b10      	cmp	r3, #16
 800b9f4:	d0f0      	beq.n	800b9d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3714      	adds	r7, #20
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	00030d40 	.word	0x00030d40

0800ba08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	460b      	mov	r3, r1
 800ba12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	78fb      	ldrb	r3, [r7, #3]
 800ba22:	68f9      	ldr	r1, [r7, #12]
 800ba24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ba3a:	b480      	push	{r7}
 800ba3c:	b087      	sub	sp, #28
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	f003 0306 	and.w	r3, r3, #6
 800ba52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d102      	bne.n	800ba60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	75fb      	strb	r3, [r7, #23]
 800ba5e:	e00a      	b.n	800ba76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2b02      	cmp	r3, #2
 800ba64:	d002      	beq.n	800ba6c <USB_GetDevSpeed+0x32>
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2b06      	cmp	r3, #6
 800ba6a:	d102      	bne.n	800ba72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	75fb      	strb	r3, [r7, #23]
 800ba70:	e001      	b.n	800ba76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ba72:	230f      	movs	r3, #15
 800ba74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ba76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	371c      	adds	r7, #28
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	785b      	ldrb	r3, [r3, #1]
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d139      	bne.n	800bb14 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baa6:	69da      	ldr	r2, [r3, #28]
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	f003 030f 	and.w	r3, r3, #15
 800bab0:	2101      	movs	r1, #1
 800bab2:	fa01 f303 	lsl.w	r3, r1, r3
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	68f9      	ldr	r1, [r7, #12]
 800baba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800babe:	4313      	orrs	r3, r2
 800bac0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	015a      	lsls	r2, r3, #5
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	4413      	add	r3, r2
 800baca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d153      	bne.n	800bb80 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	015a      	lsls	r2, r3, #5
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	4413      	add	r3, r2
 800bae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	791b      	ldrb	r3, [r3, #4]
 800baf2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800baf4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	059b      	lsls	r3, r3, #22
 800bafa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bafc:	431a      	orrs	r2, r3
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	0159      	lsls	r1, r3, #5
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	440b      	add	r3, r1
 800bb06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	4b20      	ldr	r3, [pc, #128]	; (800bb90 <USB_ActivateEndpoint+0x10c>)
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	600b      	str	r3, [r1, #0]
 800bb12:	e035      	b.n	800bb80 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb1a:	69da      	ldr	r2, [r3, #28]
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	f003 030f 	and.w	r3, r3, #15
 800bb24:	2101      	movs	r1, #1
 800bb26:	fa01 f303 	lsl.w	r3, r1, r3
 800bb2a:	041b      	lsls	r3, r3, #16
 800bb2c:	68f9      	ldr	r1, [r7, #12]
 800bb2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb32:	4313      	orrs	r3, r2
 800bb34:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	015a      	lsls	r2, r3, #5
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d119      	bne.n	800bb80 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	015a      	lsls	r2, r3, #5
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4413      	add	r3, r2
 800bb54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	791b      	ldrb	r3, [r3, #4]
 800bb66:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bb68:	430b      	orrs	r3, r1
 800bb6a:	431a      	orrs	r2, r3
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	0159      	lsls	r1, r3, #5
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	440b      	add	r3, r1
 800bb74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb78:	4619      	mov	r1, r3
 800bb7a:	4b05      	ldr	r3, [pc, #20]	; (800bb90 <USB_ActivateEndpoint+0x10c>)
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3714      	adds	r7, #20
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	10008000 	.word	0x10008000

0800bb94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	785b      	ldrb	r3, [r3, #1]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d161      	bne.n	800bc74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	015a      	lsls	r2, r3, #5
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbc6:	d11f      	bne.n	800bc08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	015a      	lsls	r2, r3, #5
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	4413      	add	r3, r2
 800bbd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	0151      	lsls	r1, r2, #5
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	440a      	add	r2, r1
 800bbde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbe2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bbe6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	015a      	lsls	r2, r3, #5
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4413      	add	r3, r2
 800bbf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	68ba      	ldr	r2, [r7, #8]
 800bbf8:	0151      	lsls	r1, r2, #5
 800bbfa:	68fa      	ldr	r2, [r7, #12]
 800bbfc:	440a      	add	r2, r1
 800bbfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	f003 030f 	and.w	r3, r3, #15
 800bc18:	2101      	movs	r1, #1
 800bc1a:	fa01 f303 	lsl.w	r3, r1, r3
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	43db      	mvns	r3, r3
 800bc22:	68f9      	ldr	r1, [r7, #12]
 800bc24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc28:	4013      	ands	r3, r2
 800bc2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc32:	69da      	ldr	r2, [r3, #28]
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	f003 030f 	and.w	r3, r3, #15
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	fa01 f303 	lsl.w	r3, r1, r3
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	43db      	mvns	r3, r3
 800bc46:	68f9      	ldr	r1, [r7, #12]
 800bc48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	015a      	lsls	r2, r3, #5
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	4413      	add	r3, r2
 800bc58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	0159      	lsls	r1, r3, #5
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	440b      	add	r3, r1
 800bc66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	4b35      	ldr	r3, [pc, #212]	; (800bd44 <USB_DeactivateEndpoint+0x1b0>)
 800bc6e:	4013      	ands	r3, r2
 800bc70:	600b      	str	r3, [r1, #0]
 800bc72:	e060      	b.n	800bd36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	015a      	lsls	r2, r3, #5
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc8a:	d11f      	bne.n	800bccc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	015a      	lsls	r2, r3, #5
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	4413      	add	r3, r2
 800bc94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	0151      	lsls	r1, r2, #5
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	440a      	add	r2, r1
 800bca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bca6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bcaa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	015a      	lsls	r2, r3, #5
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	0151      	lsls	r1, r2, #5
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	440a      	add	r2, r1
 800bcc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bcca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	f003 030f 	and.w	r3, r3, #15
 800bcdc:	2101      	movs	r1, #1
 800bcde:	fa01 f303 	lsl.w	r3, r1, r3
 800bce2:	041b      	lsls	r3, r3, #16
 800bce4:	43db      	mvns	r3, r3
 800bce6:	68f9      	ldr	r1, [r7, #12]
 800bce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcec:	4013      	ands	r3, r2
 800bcee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcf6:	69da      	ldr	r2, [r3, #28]
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	f003 030f 	and.w	r3, r3, #15
 800bd00:	2101      	movs	r1, #1
 800bd02:	fa01 f303 	lsl.w	r3, r1, r3
 800bd06:	041b      	lsls	r3, r3, #16
 800bd08:	43db      	mvns	r3, r3
 800bd0a:	68f9      	ldr	r1, [r7, #12]
 800bd0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd10:	4013      	ands	r3, r2
 800bd12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	015a      	lsls	r2, r3, #5
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	0159      	lsls	r1, r3, #5
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	440b      	add	r3, r1
 800bd2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd2e:	4619      	mov	r1, r3
 800bd30:	4b05      	ldr	r3, [pc, #20]	; (800bd48 <USB_DeactivateEndpoint+0x1b4>)
 800bd32:	4013      	ands	r3, r2
 800bd34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3714      	adds	r7, #20
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	ec337800 	.word	0xec337800
 800bd48:	eff37800 	.word	0xeff37800

0800bd4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b08a      	sub	sp, #40	; 0x28
 800bd50:	af02      	add	r7, sp, #8
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	4613      	mov	r3, r2
 800bd58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	785b      	ldrb	r3, [r3, #1]
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	f040 8181 	bne.w	800c070 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d132      	bne.n	800bddc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	015a      	lsls	r2, r3, #5
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd82:	691a      	ldr	r2, [r3, #16]
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	0159      	lsls	r1, r3, #5
 800bd88:	69fb      	ldr	r3, [r7, #28]
 800bd8a:	440b      	add	r3, r1
 800bd8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd90:	4619      	mov	r1, r3
 800bd92:	4ba5      	ldr	r3, [pc, #660]	; (800c028 <USB_EPStartXfer+0x2dc>)
 800bd94:	4013      	ands	r3, r2
 800bd96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bd98:	69bb      	ldr	r3, [r7, #24]
 800bd9a:	015a      	lsls	r2, r3, #5
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	4413      	add	r3, r2
 800bda0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	69ba      	ldr	r2, [r7, #24]
 800bda8:	0151      	lsls	r1, r2, #5
 800bdaa:	69fa      	ldr	r2, [r7, #28]
 800bdac:	440a      	add	r2, r1
 800bdae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bdb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	015a      	lsls	r2, r3, #5
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdc4:	691a      	ldr	r2, [r3, #16]
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	0159      	lsls	r1, r3, #5
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	440b      	add	r3, r1
 800bdce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	4b95      	ldr	r3, [pc, #596]	; (800c02c <USB_EPStartXfer+0x2e0>)
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	610b      	str	r3, [r1, #16]
 800bdda:	e092      	b.n	800bf02 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	015a      	lsls	r2, r3, #5
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	4413      	add	r3, r2
 800bde4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bde8:	691a      	ldr	r2, [r3, #16]
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	0159      	lsls	r1, r3, #5
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	440b      	add	r3, r1
 800bdf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	4b8c      	ldr	r3, [pc, #560]	; (800c02c <USB_EPStartXfer+0x2e0>)
 800bdfa:	4013      	ands	r3, r2
 800bdfc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	015a      	lsls	r2, r3, #5
 800be02:	69fb      	ldr	r3, [r7, #28]
 800be04:	4413      	add	r3, r2
 800be06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be0a:	691a      	ldr	r2, [r3, #16]
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	0159      	lsls	r1, r3, #5
 800be10:	69fb      	ldr	r3, [r7, #28]
 800be12:	440b      	add	r3, r1
 800be14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be18:	4619      	mov	r1, r3
 800be1a:	4b83      	ldr	r3, [pc, #524]	; (800c028 <USB_EPStartXfer+0x2dc>)
 800be1c:	4013      	ands	r3, r2
 800be1e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d11a      	bne.n	800be5c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	691a      	ldr	r2, [r3, #16]
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d903      	bls.n	800be3a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	689a      	ldr	r2, [r3, #8]
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	015a      	lsls	r2, r3, #5
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	4413      	add	r3, r2
 800be42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	69ba      	ldr	r2, [r7, #24]
 800be4a:	0151      	lsls	r1, r2, #5
 800be4c:	69fa      	ldr	r2, [r7, #28]
 800be4e:	440a      	add	r2, r1
 800be50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be58:	6113      	str	r3, [r2, #16]
 800be5a:	e01b      	b.n	800be94 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	015a      	lsls	r2, r3, #5
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	4413      	add	r3, r2
 800be64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be68:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	6919      	ldr	r1, [r3, #16]
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	440b      	add	r3, r1
 800be74:	1e59      	subs	r1, r3, #1
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	fbb1 f3f3 	udiv	r3, r1, r3
 800be7e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800be80:	4b6b      	ldr	r3, [pc, #428]	; (800c030 <USB_EPStartXfer+0x2e4>)
 800be82:	400b      	ands	r3, r1
 800be84:	69b9      	ldr	r1, [r7, #24]
 800be86:	0148      	lsls	r0, r1, #5
 800be88:	69f9      	ldr	r1, [r7, #28]
 800be8a:	4401      	add	r1, r0
 800be8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800be90:	4313      	orrs	r3, r2
 800be92:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800be94:	69bb      	ldr	r3, [r7, #24]
 800be96:	015a      	lsls	r2, r3, #5
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	4413      	add	r3, r2
 800be9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bea0:	691a      	ldr	r2, [r3, #16]
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800beaa:	69b9      	ldr	r1, [r7, #24]
 800beac:	0148      	lsls	r0, r1, #5
 800beae:	69f9      	ldr	r1, [r7, #28]
 800beb0:	4401      	add	r1, r0
 800beb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800beb6:	4313      	orrs	r3, r2
 800beb8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	791b      	ldrb	r3, [r3, #4]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d11f      	bne.n	800bf02 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	015a      	lsls	r2, r3, #5
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	4413      	add	r3, r2
 800beca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	69ba      	ldr	r2, [r7, #24]
 800bed2:	0151      	lsls	r1, r2, #5
 800bed4:	69fa      	ldr	r2, [r7, #28]
 800bed6:	440a      	add	r2, r1
 800bed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bedc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bee0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	015a      	lsls	r2, r3, #5
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	4413      	add	r3, r2
 800beea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	69ba      	ldr	r2, [r7, #24]
 800bef2:	0151      	lsls	r1, r2, #5
 800bef4:	69fa      	ldr	r2, [r7, #28]
 800bef6:	440a      	add	r2, r1
 800bef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800befc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bf02:	79fb      	ldrb	r3, [r7, #7]
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d14b      	bne.n	800bfa0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	69db      	ldr	r3, [r3, #28]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d009      	beq.n	800bf24 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	015a      	lsls	r2, r3, #5
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	4413      	add	r3, r2
 800bf18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	69db      	ldr	r3, [r3, #28]
 800bf22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	791b      	ldrb	r3, [r3, #4]
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d128      	bne.n	800bf7e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d110      	bne.n	800bf5e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	015a      	lsls	r2, r3, #5
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	4413      	add	r3, r2
 800bf44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	69ba      	ldr	r2, [r7, #24]
 800bf4c:	0151      	lsls	r1, r2, #5
 800bf4e:	69fa      	ldr	r2, [r7, #28]
 800bf50:	440a      	add	r2, r1
 800bf52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf5a:	6013      	str	r3, [r2, #0]
 800bf5c:	e00f      	b.n	800bf7e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bf5e:	69bb      	ldr	r3, [r7, #24]
 800bf60:	015a      	lsls	r2, r3, #5
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	4413      	add	r3, r2
 800bf66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	69ba      	ldr	r2, [r7, #24]
 800bf6e:	0151      	lsls	r1, r2, #5
 800bf70:	69fa      	ldr	r2, [r7, #28]
 800bf72:	440a      	add	r2, r1
 800bf74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	015a      	lsls	r2, r3, #5
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	4413      	add	r3, r2
 800bf86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	69ba      	ldr	r2, [r7, #24]
 800bf8e:	0151      	lsls	r1, r2, #5
 800bf90:	69fa      	ldr	r2, [r7, #28]
 800bf92:	440a      	add	r2, r1
 800bf94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf9c:	6013      	str	r3, [r2, #0]
 800bf9e:	e16a      	b.n	800c276 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	015a      	lsls	r2, r3, #5
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	69ba      	ldr	r2, [r7, #24]
 800bfb0:	0151      	lsls	r1, r2, #5
 800bfb2:	69fa      	ldr	r2, [r7, #28]
 800bfb4:	440a      	add	r2, r1
 800bfb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bfbe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	791b      	ldrb	r3, [r3, #4]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d015      	beq.n	800bff4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	691b      	ldr	r3, [r3, #16]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f000 8152 	beq.w	800c276 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	f003 030f 	and.w	r3, r3, #15
 800bfe2:	2101      	movs	r1, #1
 800bfe4:	fa01 f303 	lsl.w	r3, r1, r3
 800bfe8:	69f9      	ldr	r1, [r7, #28]
 800bfea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfee:	4313      	orrs	r3, r2
 800bff0:	634b      	str	r3, [r1, #52]	; 0x34
 800bff2:	e140      	b.n	800c276 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c000:	2b00      	cmp	r3, #0
 800c002:	d117      	bne.n	800c034 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	015a      	lsls	r2, r3, #5
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	4413      	add	r3, r2
 800c00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	69ba      	ldr	r2, [r7, #24]
 800c014:	0151      	lsls	r1, r2, #5
 800c016:	69fa      	ldr	r2, [r7, #28]
 800c018:	440a      	add	r2, r1
 800c01a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c01e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c022:	6013      	str	r3, [r2, #0]
 800c024:	e016      	b.n	800c054 <USB_EPStartXfer+0x308>
 800c026:	bf00      	nop
 800c028:	e007ffff 	.word	0xe007ffff
 800c02c:	fff80000 	.word	0xfff80000
 800c030:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	015a      	lsls	r2, r3, #5
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	4413      	add	r3, r2
 800c03c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	69ba      	ldr	r2, [r7, #24]
 800c044:	0151      	lsls	r1, r2, #5
 800c046:	69fa      	ldr	r2, [r7, #28]
 800c048:	440a      	add	r2, r1
 800c04a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c04e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c052:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	68d9      	ldr	r1, [r3, #12]
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	781a      	ldrb	r2, [r3, #0]
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	691b      	ldr	r3, [r3, #16]
 800c060:	b298      	uxth	r0, r3
 800c062:	79fb      	ldrb	r3, [r7, #7]
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	4603      	mov	r3, r0
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f000 f9b9 	bl	800c3e0 <USB_WritePacket>
 800c06e:	e102      	b.n	800c276 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	015a      	lsls	r2, r3, #5
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	4413      	add	r3, r2
 800c078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c07c:	691a      	ldr	r2, [r3, #16]
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	0159      	lsls	r1, r3, #5
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	440b      	add	r3, r1
 800c086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c08a:	4619      	mov	r1, r3
 800c08c:	4b7c      	ldr	r3, [pc, #496]	; (800c280 <USB_EPStartXfer+0x534>)
 800c08e:	4013      	ands	r3, r2
 800c090:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	015a      	lsls	r2, r3, #5
 800c096:	69fb      	ldr	r3, [r7, #28]
 800c098:	4413      	add	r3, r2
 800c09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c09e:	691a      	ldr	r2, [r3, #16]
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	0159      	lsls	r1, r3, #5
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	440b      	add	r3, r1
 800c0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	4b75      	ldr	r3, [pc, #468]	; (800c284 <USB_EPStartXfer+0x538>)
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d12f      	bne.n	800c11a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d003      	beq.n	800c0ca <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	689a      	ldr	r2, [r3, #8]
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	689a      	ldr	r2, [r3, #8]
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	015a      	lsls	r2, r3, #5
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	4413      	add	r3, r2
 800c0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0de:	691a      	ldr	r2, [r3, #16]
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	6a1b      	ldr	r3, [r3, #32]
 800c0e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0e8:	69b9      	ldr	r1, [r7, #24]
 800c0ea:	0148      	lsls	r0, r1, #5
 800c0ec:	69f9      	ldr	r1, [r7, #28]
 800c0ee:	4401      	add	r1, r0
 800c0f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	015a      	lsls	r2, r3, #5
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	4413      	add	r3, r2
 800c100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c104:	691b      	ldr	r3, [r3, #16]
 800c106:	69ba      	ldr	r2, [r7, #24]
 800c108:	0151      	lsls	r1, r2, #5
 800c10a:	69fa      	ldr	r2, [r7, #28]
 800c10c:	440a      	add	r2, r1
 800c10e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c112:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c116:	6113      	str	r3, [r2, #16]
 800c118:	e05f      	b.n	800c1da <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d123      	bne.n	800c16a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	015a      	lsls	r2, r3, #5
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	4413      	add	r3, r2
 800c12a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c12e:	691a      	ldr	r2, [r3, #16]
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c138:	69b9      	ldr	r1, [r7, #24]
 800c13a:	0148      	lsls	r0, r1, #5
 800c13c:	69f9      	ldr	r1, [r7, #28]
 800c13e:	4401      	add	r1, r0
 800c140:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c144:	4313      	orrs	r3, r2
 800c146:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	015a      	lsls	r2, r3, #5
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	4413      	add	r3, r2
 800c150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c154:	691b      	ldr	r3, [r3, #16]
 800c156:	69ba      	ldr	r2, [r7, #24]
 800c158:	0151      	lsls	r1, r2, #5
 800c15a:	69fa      	ldr	r2, [r7, #28]
 800c15c:	440a      	add	r2, r1
 800c15e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c162:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c166:	6113      	str	r3, [r2, #16]
 800c168:	e037      	b.n	800c1da <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	691a      	ldr	r2, [r3, #16]
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	4413      	add	r3, r2
 800c174:	1e5a      	subs	r2, r3, #1
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c17e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	8afa      	ldrh	r2, [r7, #22]
 800c186:	fb03 f202 	mul.w	r2, r3, r2
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	015a      	lsls	r2, r3, #5
 800c192:	69fb      	ldr	r3, [r7, #28]
 800c194:	4413      	add	r3, r2
 800c196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c19a:	691a      	ldr	r2, [r3, #16]
 800c19c:	8afb      	ldrh	r3, [r7, #22]
 800c19e:	04d9      	lsls	r1, r3, #19
 800c1a0:	4b39      	ldr	r3, [pc, #228]	; (800c288 <USB_EPStartXfer+0x53c>)
 800c1a2:	400b      	ands	r3, r1
 800c1a4:	69b9      	ldr	r1, [r7, #24]
 800c1a6:	0148      	lsls	r0, r1, #5
 800c1a8:	69f9      	ldr	r1, [r7, #28]
 800c1aa:	4401      	add	r1, r0
 800c1ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	015a      	lsls	r2, r3, #5
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1c0:	691a      	ldr	r2, [r3, #16]
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	6a1b      	ldr	r3, [r3, #32]
 800c1c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1ca:	69b9      	ldr	r1, [r7, #24]
 800c1cc:	0148      	lsls	r0, r1, #5
 800c1ce:	69f9      	ldr	r1, [r7, #28]
 800c1d0:	4401      	add	r1, r0
 800c1d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c1da:	79fb      	ldrb	r3, [r7, #7]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d10d      	bne.n	800c1fc <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d009      	beq.n	800c1fc <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	68d9      	ldr	r1, [r3, #12]
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	015a      	lsls	r2, r3, #5
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1f8:	460a      	mov	r2, r1
 800c1fa:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	791b      	ldrb	r3, [r3, #4]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d128      	bne.n	800c256 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c210:	2b00      	cmp	r3, #0
 800c212:	d110      	bne.n	800c236 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	015a      	lsls	r2, r3, #5
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	4413      	add	r3, r2
 800c21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	69ba      	ldr	r2, [r7, #24]
 800c224:	0151      	lsls	r1, r2, #5
 800c226:	69fa      	ldr	r2, [r7, #28]
 800c228:	440a      	add	r2, r1
 800c22a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c22e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c232:	6013      	str	r3, [r2, #0]
 800c234:	e00f      	b.n	800c256 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	015a      	lsls	r2, r3, #5
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	4413      	add	r3, r2
 800c23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	69ba      	ldr	r2, [r7, #24]
 800c246:	0151      	lsls	r1, r2, #5
 800c248:	69fa      	ldr	r2, [r7, #28]
 800c24a:	440a      	add	r2, r1
 800c24c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c254:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	015a      	lsls	r2, r3, #5
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	69ba      	ldr	r2, [r7, #24]
 800c266:	0151      	lsls	r1, r2, #5
 800c268:	69fa      	ldr	r2, [r7, #28]
 800c26a:	440a      	add	r2, r1
 800c26c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c270:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c274:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3720      	adds	r7, #32
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	fff80000 	.word	0xfff80000
 800c284:	e007ffff 	.word	0xe007ffff
 800c288:	1ff80000 	.word	0x1ff80000

0800c28c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b087      	sub	sp, #28
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c296:	2300      	movs	r3, #0
 800c298:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	785b      	ldrb	r3, [r3, #1]
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d14a      	bne.n	800c340 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	015a      	lsls	r2, r3, #5
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2c2:	f040 8086 	bne.w	800c3d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	015a      	lsls	r2, r3, #5
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	7812      	ldrb	r2, [r2, #0]
 800c2da:	0151      	lsls	r1, r2, #5
 800c2dc:	693a      	ldr	r2, [r7, #16]
 800c2de:	440a      	add	r2, r1
 800c2e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c2e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	015a      	lsls	r2, r3, #5
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	683a      	ldr	r2, [r7, #0]
 800c2fc:	7812      	ldrb	r2, [r2, #0]
 800c2fe:	0151      	lsls	r1, r2, #5
 800c300:	693a      	ldr	r2, [r7, #16]
 800c302:	440a      	add	r2, r1
 800c304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c30c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3301      	adds	r3, #1
 800c312:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f242 7210 	movw	r2, #10000	; 0x2710
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d902      	bls.n	800c324 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c31e:	2301      	movs	r3, #1
 800c320:	75fb      	strb	r3, [r7, #23]
          break;
 800c322:	e056      	b.n	800c3d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	015a      	lsls	r2, r3, #5
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	4413      	add	r3, r2
 800c32e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c33c:	d0e7      	beq.n	800c30e <USB_EPStopXfer+0x82>
 800c33e:	e048      	b.n	800c3d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	015a      	lsls	r2, r3, #5
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	4413      	add	r3, r2
 800c34a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c358:	d13b      	bne.n	800c3d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	015a      	lsls	r2, r3, #5
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	4413      	add	r3, r2
 800c364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	683a      	ldr	r2, [r7, #0]
 800c36c:	7812      	ldrb	r2, [r2, #0]
 800c36e:	0151      	lsls	r1, r2, #5
 800c370:	693a      	ldr	r2, [r7, #16]
 800c372:	440a      	add	r2, r1
 800c374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c378:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c37c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	015a      	lsls	r2, r3, #5
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	4413      	add	r3, r2
 800c388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	683a      	ldr	r2, [r7, #0]
 800c390:	7812      	ldrb	r2, [r2, #0]
 800c392:	0151      	lsls	r1, r2, #5
 800c394:	693a      	ldr	r2, [r7, #16]
 800c396:	440a      	add	r2, r1
 800c398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c39c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c3a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f242 7210 	movw	r2, #10000	; 0x2710
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d902      	bls.n	800c3b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	75fb      	strb	r3, [r7, #23]
          break;
 800c3b6:	e00c      	b.n	800c3d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	015a      	lsls	r2, r3, #5
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3d0:	d0e7      	beq.n	800c3a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c3d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	371c      	adds	r7, #28
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b089      	sub	sp, #36	; 0x24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	4611      	mov	r1, r2
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	460b      	mov	r3, r1
 800c3f0:	71fb      	strb	r3, [r7, #7]
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c3fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c402:	2b00      	cmp	r3, #0
 800c404:	d123      	bne.n	800c44e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c406:	88bb      	ldrh	r3, [r7, #4]
 800c408:	3303      	adds	r3, #3
 800c40a:	089b      	lsrs	r3, r3, #2
 800c40c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c40e:	2300      	movs	r3, #0
 800c410:	61bb      	str	r3, [r7, #24]
 800c412:	e018      	b.n	800c446 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c414:	79fb      	ldrb	r3, [r7, #7]
 800c416:	031a      	lsls	r2, r3, #12
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	4413      	add	r3, r2
 800c41c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c420:	461a      	mov	r2, r3
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	3301      	adds	r3, #1
 800c42c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	3301      	adds	r3, #1
 800c432:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	3301      	adds	r3, #1
 800c438:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	3301      	adds	r3, #1
 800c43e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c440:	69bb      	ldr	r3, [r7, #24]
 800c442:	3301      	adds	r3, #1
 800c444:	61bb      	str	r3, [r7, #24]
 800c446:	69ba      	ldr	r2, [r7, #24]
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d3e2      	bcc.n	800c414 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3724      	adds	r7, #36	; 0x24
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr

0800c45c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b08b      	sub	sp, #44	; 0x2c
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	4613      	mov	r3, r2
 800c468:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c472:	88fb      	ldrh	r3, [r7, #6]
 800c474:	089b      	lsrs	r3, r3, #2
 800c476:	b29b      	uxth	r3, r3
 800c478:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c47a:	88fb      	ldrh	r3, [r7, #6]
 800c47c:	f003 0303 	and.w	r3, r3, #3
 800c480:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c482:	2300      	movs	r3, #0
 800c484:	623b      	str	r3, [r7, #32]
 800c486:	e014      	b.n	800c4b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c492:	601a      	str	r2, [r3, #0]
    pDest++;
 800c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c496:	3301      	adds	r3, #1
 800c498:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49c:	3301      	adds	r3, #1
 800c49e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c4ac:	6a3b      	ldr	r3, [r7, #32]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	623b      	str	r3, [r7, #32]
 800c4b2:	6a3a      	ldr	r2, [r7, #32]
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d3e6      	bcc.n	800c488 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c4ba:	8bfb      	ldrh	r3, [r7, #30]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d01e      	beq.n	800c4fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	f107 0310 	add.w	r3, r7, #16
 800c4d0:	6812      	ldr	r2, [r2, #0]
 800c4d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c4d4:	693a      	ldr	r2, [r7, #16]
 800c4d6:	6a3b      	ldr	r3, [r7, #32]
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	00db      	lsls	r3, r3, #3
 800c4dc:	fa22 f303 	lsr.w	r3, r2, r3
 800c4e0:	b2da      	uxtb	r2, r3
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e4:	701a      	strb	r2, [r3, #0]
      i++;
 800c4e6:	6a3b      	ldr	r3, [r7, #32]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	623b      	str	r3, [r7, #32]
      pDest++;
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c4f2:	8bfb      	ldrh	r3, [r7, #30]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c4f8:	8bfb      	ldrh	r3, [r7, #30]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d1ea      	bne.n	800c4d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c500:	4618      	mov	r0, r3
 800c502:	372c      	adds	r7, #44	; 0x2c
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b085      	sub	sp, #20
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	785b      	ldrb	r3, [r3, #1]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d12c      	bne.n	800c582 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	015a      	lsls	r2, r3, #5
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	4413      	add	r3, r2
 800c530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	db12      	blt.n	800c560 <USB_EPSetStall+0x54>
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00f      	beq.n	800c560 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	015a      	lsls	r2, r3, #5
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	4413      	add	r3, r2
 800c548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	0151      	lsls	r1, r2, #5
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	440a      	add	r2, r1
 800c556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c55a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c55e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	015a      	lsls	r2, r3, #5
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	4413      	add	r3, r2
 800c568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	0151      	lsls	r1, r2, #5
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	440a      	add	r2, r1
 800c576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c57a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c57e:	6013      	str	r3, [r2, #0]
 800c580:	e02b      	b.n	800c5da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	015a      	lsls	r2, r3, #5
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	4413      	add	r3, r2
 800c58a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	db12      	blt.n	800c5ba <USB_EPSetStall+0xae>
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00f      	beq.n	800c5ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	015a      	lsls	r2, r3, #5
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	0151      	lsls	r1, r2, #5
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	440a      	add	r2, r1
 800c5b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c5b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	015a      	lsls	r2, r3, #5
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	0151      	lsls	r1, r2, #5
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	440a      	add	r2, r1
 800c5d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c5d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3714      	adds	r7, #20
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	785b      	ldrb	r3, [r3, #1]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d128      	bne.n	800c656 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	015a      	lsls	r2, r3, #5
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	4413      	add	r3, r2
 800c60c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	0151      	lsls	r1, r2, #5
 800c616:	68fa      	ldr	r2, [r7, #12]
 800c618:	440a      	add	r2, r1
 800c61a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c61e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c622:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	791b      	ldrb	r3, [r3, #4]
 800c628:	2b03      	cmp	r3, #3
 800c62a:	d003      	beq.n	800c634 <USB_EPClearStall+0x4c>
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	791b      	ldrb	r3, [r3, #4]
 800c630:	2b02      	cmp	r3, #2
 800c632:	d138      	bne.n	800c6a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	015a      	lsls	r2, r3, #5
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	4413      	add	r3, r2
 800c63c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	0151      	lsls	r1, r2, #5
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	440a      	add	r2, r1
 800c64a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c64e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c652:	6013      	str	r3, [r2, #0]
 800c654:	e027      	b.n	800c6a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	015a      	lsls	r2, r3, #5
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	4413      	add	r3, r2
 800c65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	0151      	lsls	r1, r2, #5
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	440a      	add	r2, r1
 800c66c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c670:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c674:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	791b      	ldrb	r3, [r3, #4]
 800c67a:	2b03      	cmp	r3, #3
 800c67c:	d003      	beq.n	800c686 <USB_EPClearStall+0x9e>
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	791b      	ldrb	r3, [r3, #4]
 800c682:	2b02      	cmp	r3, #2
 800c684:	d10f      	bne.n	800c6a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	015a      	lsls	r2, r3, #5
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	4413      	add	r3, r2
 800c68e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	0151      	lsls	r1, r2, #5
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	440a      	add	r2, r1
 800c69c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c6a6:	2300      	movs	r3, #0
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3714      	adds	r7, #20
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b085      	sub	sp, #20
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c6d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	78fb      	ldrb	r3, [r7, #3]
 800c6e2:	011b      	lsls	r3, r3, #4
 800c6e4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c6e8:	68f9      	ldr	r1, [r7, #12]
 800c6ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c6f2:	2300      	movs	r3, #0
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3714      	adds	r7, #20
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c71a:	f023 0303 	bic.w	r3, r3, #3
 800c71e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c72e:	f023 0302 	bic.w	r3, r3, #2
 800c732:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c734:	2300      	movs	r3, #0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3714      	adds	r7, #20
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr

0800c742 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c742:	b480      	push	{r7}
 800c744:	b085      	sub	sp, #20
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	68fa      	ldr	r2, [r7, #12]
 800c758:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c75c:	f023 0303 	bic.w	r3, r3, #3
 800c760:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	68fa      	ldr	r2, [r7, #12]
 800c76c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c770:	f043 0302 	orr.w	r3, r3, #2
 800c774:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c776:	2300      	movs	r3, #0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3714      	adds	r7, #20
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c784:	b480      	push	{r7}
 800c786:	b085      	sub	sp, #20
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	695b      	ldr	r3, [r3, #20]
 800c790:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	699b      	ldr	r3, [r3, #24]
 800c796:	68fa      	ldr	r2, [r7, #12]
 800c798:	4013      	ands	r3, r2
 800c79a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c79c:	68fb      	ldr	r3, [r7, #12]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3714      	adds	r7, #20
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr

0800c7aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7aa:	b480      	push	{r7}
 800c7ac:	b085      	sub	sp, #20
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7c6:	69db      	ldr	r3, [r3, #28]
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	0c1b      	lsrs	r3, r3, #16
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3714      	adds	r7, #20
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr

0800c7de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7de:	b480      	push	{r7}
 800c7e0:	b085      	sub	sp, #20
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7f0:	699b      	ldr	r3, [r3, #24]
 800c7f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7fa:	69db      	ldr	r3, [r3, #28]
 800c7fc:	68ba      	ldr	r2, [r7, #8]
 800c7fe:	4013      	ands	r3, r2
 800c800:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	b29b      	uxth	r3, r3
}
 800c806:	4618      	mov	r0, r3
 800c808:	3714      	adds	r7, #20
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr

0800c812 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c812:	b480      	push	{r7}
 800c814:	b085      	sub	sp, #20
 800c816:	af00      	add	r7, sp, #0
 800c818:	6078      	str	r0, [r7, #4]
 800c81a:	460b      	mov	r3, r1
 800c81c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c822:	78fb      	ldrb	r3, [r7, #3]
 800c824:	015a      	lsls	r2, r3, #5
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	4413      	add	r3, r2
 800c82a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c838:	695b      	ldr	r3, [r3, #20]
 800c83a:	68ba      	ldr	r2, [r7, #8]
 800c83c:	4013      	ands	r3, r2
 800c83e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c840:	68bb      	ldr	r3, [r7, #8]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3714      	adds	r7, #20
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr

0800c84e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c84e:	b480      	push	{r7}
 800c850:	b087      	sub	sp, #28
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
 800c856:	460b      	mov	r3, r1
 800c858:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c86e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c870:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c872:	78fb      	ldrb	r3, [r7, #3]
 800c874:	f003 030f 	and.w	r3, r3, #15
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	fa22 f303 	lsr.w	r3, r2, r3
 800c87e:	01db      	lsls	r3, r3, #7
 800c880:	b2db      	uxtb	r3, r3
 800c882:	693a      	ldr	r2, [r7, #16]
 800c884:	4313      	orrs	r3, r2
 800c886:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c888:	78fb      	ldrb	r3, [r7, #3]
 800c88a:	015a      	lsls	r2, r3, #5
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	4413      	add	r3, r2
 800c890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	693a      	ldr	r2, [r7, #16]
 800c898:	4013      	ands	r3, r2
 800c89a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c89c:	68bb      	ldr	r3, [r7, #8]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	371c      	adds	r7, #28
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c8aa:	b480      	push	{r7}
 800c8ac:	b083      	sub	sp, #12
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	695b      	ldr	r3, [r3, #20]
 800c8b6:	f003 0301 	and.w	r3, r3, #1
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	370c      	adds	r7, #12
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr
	...

0800c8c8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b085      	sub	sp, #20
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	4b09      	ldr	r3, [pc, #36]	; (800c90c <USB_ActivateSetup+0x44>)
 800c8e6:	4013      	ands	r3, r2
 800c8e8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	68fa      	ldr	r2, [r7, #12]
 800c8f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3714      	adds	r7, #20
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr
 800c90c:	fffff800 	.word	0xfffff800

0800c910 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c910:	b480      	push	{r7}
 800c912:	b087      	sub	sp, #28
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	460b      	mov	r3, r1
 800c91a:	607a      	str	r2, [r7, #4]
 800c91c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	333c      	adds	r3, #60	; 0x3c
 800c926:	3304      	adds	r3, #4
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	4a26      	ldr	r2, [pc, #152]	; (800c9c8 <USB_EP0_OutStart+0xb8>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d90a      	bls.n	800c94a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c944:	d101      	bne.n	800c94a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c946:	2300      	movs	r3, #0
 800c948:	e037      	b.n	800c9ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c950:	461a      	mov	r2, r3
 800c952:	2300      	movs	r3, #0
 800c954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	697a      	ldr	r2, [r7, #20]
 800c960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c978:	f043 0318 	orr.w	r3, r3, #24
 800c97c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	697a      	ldr	r2, [r7, #20]
 800c988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c98c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c990:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c992:	7afb      	ldrb	r3, [r7, #11]
 800c994:	2b01      	cmp	r3, #1
 800c996:	d10f      	bne.n	800c9b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c99e:	461a      	mov	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	697a      	ldr	r2, [r7, #20]
 800c9ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c9b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	371c      	adds	r7, #28
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	4f54300a 	.word	0x4f54300a

0800c9cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	4a13      	ldr	r2, [pc, #76]	; (800ca30 <USB_CoreReset+0x64>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d901      	bls.n	800c9ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c9e6:	2303      	movs	r3, #3
 800c9e8:	e01b      	b.n	800ca22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	691b      	ldr	r3, [r3, #16]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	daf2      	bge.n	800c9d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	f043 0201 	orr.w	r2, r3, #1
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	3301      	adds	r3, #1
 800ca06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	4a09      	ldr	r2, [pc, #36]	; (800ca30 <USB_CoreReset+0x64>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d901      	bls.n	800ca14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ca10:	2303      	movs	r3, #3
 800ca12:	e006      	b.n	800ca22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	691b      	ldr	r3, [r3, #16]
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d0f0      	beq.n	800ca02 <USB_CoreReset+0x36>

  return HAL_OK;
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3714      	adds	r7, #20
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop
 800ca30:	00030d40 	.word	0x00030d40

0800ca34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ca40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ca44:	f002 fcce 	bl	800f3e4 <USBD_static_malloc>
 800ca48:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d109      	bne.n	800ca64 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	32b0      	adds	r2, #176	; 0xb0
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ca60:	2302      	movs	r3, #2
 800ca62:	e0d4      	b.n	800cc0e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ca64:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ca68:	2100      	movs	r1, #0
 800ca6a:	68f8      	ldr	r0, [r7, #12]
 800ca6c:	f003 faf6 	bl	801005c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	32b0      	adds	r2, #176	; 0xb0
 800ca7a:	68f9      	ldr	r1, [r7, #12]
 800ca7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	32b0      	adds	r2, #176	; 0xb0
 800ca8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	7c1b      	ldrb	r3, [r3, #16]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d138      	bne.n	800cb0e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ca9c:	4b5e      	ldr	r3, [pc, #376]	; (800cc18 <USBD_CDC_Init+0x1e4>)
 800ca9e:	7819      	ldrb	r1, [r3, #0]
 800caa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800caa4:	2202      	movs	r2, #2
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f002 fb79 	bl	800f19e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800caac:	4b5a      	ldr	r3, [pc, #360]	; (800cc18 <USBD_CDC_Init+0x1e4>)
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	f003 020f 	and.w	r2, r3, #15
 800cab4:	6879      	ldr	r1, [r7, #4]
 800cab6:	4613      	mov	r3, r2
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4413      	add	r3, r2
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	440b      	add	r3, r1
 800cac0:	3324      	adds	r3, #36	; 0x24
 800cac2:	2201      	movs	r2, #1
 800cac4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cac6:	4b55      	ldr	r3, [pc, #340]	; (800cc1c <USBD_CDC_Init+0x1e8>)
 800cac8:	7819      	ldrb	r1, [r3, #0]
 800caca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cace:	2202      	movs	r2, #2
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f002 fb64 	bl	800f19e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cad6:	4b51      	ldr	r3, [pc, #324]	; (800cc1c <USBD_CDC_Init+0x1e8>)
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	f003 020f 	and.w	r2, r3, #15
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	4613      	mov	r3, r2
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	4413      	add	r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	440b      	add	r3, r1
 800caea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800caee:	2201      	movs	r2, #1
 800caf0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800caf2:	4b4b      	ldr	r3, [pc, #300]	; (800cc20 <USBD_CDC_Init+0x1ec>)
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	f003 020f 	and.w	r2, r3, #15
 800cafa:	6879      	ldr	r1, [r7, #4]
 800cafc:	4613      	mov	r3, r2
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	4413      	add	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	440b      	add	r3, r1
 800cb06:	3326      	adds	r3, #38	; 0x26
 800cb08:	2210      	movs	r2, #16
 800cb0a:	801a      	strh	r2, [r3, #0]
 800cb0c:	e035      	b.n	800cb7a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cb0e:	4b42      	ldr	r3, [pc, #264]	; (800cc18 <USBD_CDC_Init+0x1e4>)
 800cb10:	7819      	ldrb	r1, [r3, #0]
 800cb12:	2340      	movs	r3, #64	; 0x40
 800cb14:	2202      	movs	r2, #2
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f002 fb41 	bl	800f19e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cb1c:	4b3e      	ldr	r3, [pc, #248]	; (800cc18 <USBD_CDC_Init+0x1e4>)
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	f003 020f 	and.w	r2, r3, #15
 800cb24:	6879      	ldr	r1, [r7, #4]
 800cb26:	4613      	mov	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	440b      	add	r3, r1
 800cb30:	3324      	adds	r3, #36	; 0x24
 800cb32:	2201      	movs	r2, #1
 800cb34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cb36:	4b39      	ldr	r3, [pc, #228]	; (800cc1c <USBD_CDC_Init+0x1e8>)
 800cb38:	7819      	ldrb	r1, [r3, #0]
 800cb3a:	2340      	movs	r3, #64	; 0x40
 800cb3c:	2202      	movs	r2, #2
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f002 fb2d 	bl	800f19e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cb44:	4b35      	ldr	r3, [pc, #212]	; (800cc1c <USBD_CDC_Init+0x1e8>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	f003 020f 	and.w	r2, r3, #15
 800cb4c:	6879      	ldr	r1, [r7, #4]
 800cb4e:	4613      	mov	r3, r2
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	4413      	add	r3, r2
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	440b      	add	r3, r1
 800cb58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cb60:	4b2f      	ldr	r3, [pc, #188]	; (800cc20 <USBD_CDC_Init+0x1ec>)
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	f003 020f 	and.w	r2, r3, #15
 800cb68:	6879      	ldr	r1, [r7, #4]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	4413      	add	r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	440b      	add	r3, r1
 800cb74:	3326      	adds	r3, #38	; 0x26
 800cb76:	2210      	movs	r2, #16
 800cb78:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cb7a:	4b29      	ldr	r3, [pc, #164]	; (800cc20 <USBD_CDC_Init+0x1ec>)
 800cb7c:	7819      	ldrb	r1, [r3, #0]
 800cb7e:	2308      	movs	r3, #8
 800cb80:	2203      	movs	r2, #3
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f002 fb0b 	bl	800f19e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cb88:	4b25      	ldr	r3, [pc, #148]	; (800cc20 <USBD_CDC_Init+0x1ec>)
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	f003 020f 	and.w	r2, r3, #15
 800cb90:	6879      	ldr	r1, [r7, #4]
 800cb92:	4613      	mov	r3, r2
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	4413      	add	r3, r2
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	440b      	add	r3, r1
 800cb9c:	3324      	adds	r3, #36	; 0x24
 800cb9e:	2201      	movs	r2, #1
 800cba0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2200      	movs	r2, #0
 800cba6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	33b0      	adds	r3, #176	; 0xb0
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	4413      	add	r3, r2
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d101      	bne.n	800cbdc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cbd8:	2302      	movs	r3, #2
 800cbda:	e018      	b.n	800cc0e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	7c1b      	ldrb	r3, [r3, #16]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d10a      	bne.n	800cbfa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cbe4:	4b0d      	ldr	r3, [pc, #52]	; (800cc1c <USBD_CDC_Init+0x1e8>)
 800cbe6:	7819      	ldrb	r1, [r3, #0]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cbee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f002 fbc2 	bl	800f37c <USBD_LL_PrepareReceive>
 800cbf8:	e008      	b.n	800cc0c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cbfa:	4b08      	ldr	r3, [pc, #32]	; (800cc1c <USBD_CDC_Init+0x1e8>)
 800cbfc:	7819      	ldrb	r1, [r3, #0]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cc04:	2340      	movs	r3, #64	; 0x40
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f002 fbb8 	bl	800f37c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cc0c:	2300      	movs	r3, #0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3710      	adds	r7, #16
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	24000097 	.word	0x24000097
 800cc1c:	24000098 	.word	0x24000098
 800cc20:	24000099 	.word	0x24000099

0800cc24 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cc30:	4b3a      	ldr	r3, [pc, #232]	; (800cd1c <USBD_CDC_DeInit+0xf8>)
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	4619      	mov	r1, r3
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f002 fad7 	bl	800f1ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cc3c:	4b37      	ldr	r3, [pc, #220]	; (800cd1c <USBD_CDC_DeInit+0xf8>)
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	f003 020f 	and.w	r2, r3, #15
 800cc44:	6879      	ldr	r1, [r7, #4]
 800cc46:	4613      	mov	r3, r2
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	4413      	add	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	440b      	add	r3, r1
 800cc50:	3324      	adds	r3, #36	; 0x24
 800cc52:	2200      	movs	r2, #0
 800cc54:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cc56:	4b32      	ldr	r3, [pc, #200]	; (800cd20 <USBD_CDC_DeInit+0xfc>)
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f002 fac4 	bl	800f1ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cc62:	4b2f      	ldr	r3, [pc, #188]	; (800cd20 <USBD_CDC_DeInit+0xfc>)
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	f003 020f 	and.w	r2, r3, #15
 800cc6a:	6879      	ldr	r1, [r7, #4]
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	4413      	add	r3, r2
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	440b      	add	r3, r1
 800cc76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cc7e:	4b29      	ldr	r3, [pc, #164]	; (800cd24 <USBD_CDC_DeInit+0x100>)
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	4619      	mov	r1, r3
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f002 fab0 	bl	800f1ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cc8a:	4b26      	ldr	r3, [pc, #152]	; (800cd24 <USBD_CDC_DeInit+0x100>)
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	f003 020f 	and.w	r2, r3, #15
 800cc92:	6879      	ldr	r1, [r7, #4]
 800cc94:	4613      	mov	r3, r2
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	4413      	add	r3, r2
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	440b      	add	r3, r1
 800cc9e:	3324      	adds	r3, #36	; 0x24
 800cca0:	2200      	movs	r2, #0
 800cca2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cca4:	4b1f      	ldr	r3, [pc, #124]	; (800cd24 <USBD_CDC_DeInit+0x100>)
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	f003 020f 	and.w	r2, r3, #15
 800ccac:	6879      	ldr	r1, [r7, #4]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	009b      	lsls	r3, r3, #2
 800ccb2:	4413      	add	r3, r2
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	440b      	add	r3, r1
 800ccb8:	3326      	adds	r3, #38	; 0x26
 800ccba:	2200      	movs	r2, #0
 800ccbc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	32b0      	adds	r2, #176	; 0xb0
 800ccc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d01f      	beq.n	800cd10 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	33b0      	adds	r3, #176	; 0xb0
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	4413      	add	r3, r2
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	32b0      	adds	r2, #176	; 0xb0
 800ccee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f002 fb84 	bl	800f400 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	32b0      	adds	r2, #176	; 0xb0
 800cd02:	2100      	movs	r1, #0
 800cd04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cd10:	2300      	movs	r3, #0
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	24000097 	.word	0x24000097
 800cd20:	24000098 	.word	0x24000098
 800cd24:	24000099 	.word	0x24000099

0800cd28 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	32b0      	adds	r2, #176	; 0xb0
 800cd3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd40:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cd42:	2300      	movs	r3, #0
 800cd44:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cd46:	2300      	movs	r3, #0
 800cd48:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d101      	bne.n	800cd58 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cd54:	2303      	movs	r3, #3
 800cd56:	e0bf      	b.n	800ced8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d050      	beq.n	800ce06 <USBD_CDC_Setup+0xde>
 800cd64:	2b20      	cmp	r3, #32
 800cd66:	f040 80af 	bne.w	800cec8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	88db      	ldrh	r3, [r3, #6]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d03a      	beq.n	800cde8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	b25b      	sxtb	r3, r3
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	da1b      	bge.n	800cdb4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	33b0      	adds	r3, #176	; 0xb0
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	4413      	add	r3, r2
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	683a      	ldr	r2, [r7, #0]
 800cd90:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cd92:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd94:	683a      	ldr	r2, [r7, #0]
 800cd96:	88d2      	ldrh	r2, [r2, #6]
 800cd98:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	88db      	ldrh	r3, [r3, #6]
 800cd9e:	2b07      	cmp	r3, #7
 800cda0:	bf28      	it	cs
 800cda2:	2307      	movcs	r3, #7
 800cda4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	89fa      	ldrh	r2, [r7, #14]
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f001 fdb3 	bl	800e918 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cdb2:	e090      	b.n	800ced6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	785a      	ldrb	r2, [r3, #1]
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	88db      	ldrh	r3, [r3, #6]
 800cdc2:	2b3f      	cmp	r3, #63	; 0x3f
 800cdc4:	d803      	bhi.n	800cdce <USBD_CDC_Setup+0xa6>
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	88db      	ldrh	r3, [r3, #6]
 800cdca:	b2da      	uxtb	r2, r3
 800cdcc:	e000      	b.n	800cdd0 <USBD_CDC_Setup+0xa8>
 800cdce:	2240      	movs	r2, #64	; 0x40
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cdd6:	6939      	ldr	r1, [r7, #16]
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cdde:	461a      	mov	r2, r3
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f001 fdc5 	bl	800e970 <USBD_CtlPrepareRx>
      break;
 800cde6:	e076      	b.n	800ced6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	33b0      	adds	r3, #176	; 0xb0
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	4413      	add	r3, r2
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	683a      	ldr	r2, [r7, #0]
 800cdfc:	7850      	ldrb	r0, [r2, #1]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	6839      	ldr	r1, [r7, #0]
 800ce02:	4798      	blx	r3
      break;
 800ce04:	e067      	b.n	800ced6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	785b      	ldrb	r3, [r3, #1]
 800ce0a:	2b0b      	cmp	r3, #11
 800ce0c:	d851      	bhi.n	800ceb2 <USBD_CDC_Setup+0x18a>
 800ce0e:	a201      	add	r2, pc, #4	; (adr r2, 800ce14 <USBD_CDC_Setup+0xec>)
 800ce10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce14:	0800ce45 	.word	0x0800ce45
 800ce18:	0800cec1 	.word	0x0800cec1
 800ce1c:	0800ceb3 	.word	0x0800ceb3
 800ce20:	0800ceb3 	.word	0x0800ceb3
 800ce24:	0800ceb3 	.word	0x0800ceb3
 800ce28:	0800ceb3 	.word	0x0800ceb3
 800ce2c:	0800ceb3 	.word	0x0800ceb3
 800ce30:	0800ceb3 	.word	0x0800ceb3
 800ce34:	0800ceb3 	.word	0x0800ceb3
 800ce38:	0800ceb3 	.word	0x0800ceb3
 800ce3c:	0800ce6f 	.word	0x0800ce6f
 800ce40:	0800ce99 	.word	0x0800ce99
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	2b03      	cmp	r3, #3
 800ce4e:	d107      	bne.n	800ce60 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ce50:	f107 030a 	add.w	r3, r7, #10
 800ce54:	2202      	movs	r2, #2
 800ce56:	4619      	mov	r1, r3
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f001 fd5d 	bl	800e918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce5e:	e032      	b.n	800cec6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ce60:	6839      	ldr	r1, [r7, #0]
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f001 fce7 	bl	800e836 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce68:	2303      	movs	r3, #3
 800ce6a:	75fb      	strb	r3, [r7, #23]
          break;
 800ce6c:	e02b      	b.n	800cec6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	2b03      	cmp	r3, #3
 800ce78:	d107      	bne.n	800ce8a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ce7a:	f107 030d 	add.w	r3, r7, #13
 800ce7e:	2201      	movs	r2, #1
 800ce80:	4619      	mov	r1, r3
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f001 fd48 	bl	800e918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce88:	e01d      	b.n	800cec6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ce8a:	6839      	ldr	r1, [r7, #0]
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f001 fcd2 	bl	800e836 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce92:	2303      	movs	r3, #3
 800ce94:	75fb      	strb	r3, [r7, #23]
          break;
 800ce96:	e016      	b.n	800cec6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	2b03      	cmp	r3, #3
 800cea2:	d00f      	beq.n	800cec4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cea4:	6839      	ldr	r1, [r7, #0]
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f001 fcc5 	bl	800e836 <USBD_CtlError>
            ret = USBD_FAIL;
 800ceac:	2303      	movs	r3, #3
 800ceae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ceb0:	e008      	b.n	800cec4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ceb2:	6839      	ldr	r1, [r7, #0]
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f001 fcbe 	bl	800e836 <USBD_CtlError>
          ret = USBD_FAIL;
 800ceba:	2303      	movs	r3, #3
 800cebc:	75fb      	strb	r3, [r7, #23]
          break;
 800cebe:	e002      	b.n	800cec6 <USBD_CDC_Setup+0x19e>
          break;
 800cec0:	bf00      	nop
 800cec2:	e008      	b.n	800ced6 <USBD_CDC_Setup+0x1ae>
          break;
 800cec4:	bf00      	nop
      }
      break;
 800cec6:	e006      	b.n	800ced6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cec8:	6839      	ldr	r1, [r7, #0]
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f001 fcb3 	bl	800e836 <USBD_CtlError>
      ret = USBD_FAIL;
 800ced0:	2303      	movs	r3, #3
 800ced2:	75fb      	strb	r3, [r7, #23]
      break;
 800ced4:	bf00      	nop
  }

  return (uint8_t)ret;
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3718      	adds	r7, #24
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	460b      	mov	r3, r1
 800ceea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cef2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	32b0      	adds	r2, #176	; 0xb0
 800cefe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d101      	bne.n	800cf0a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cf06:	2303      	movs	r3, #3
 800cf08:	e065      	b.n	800cfd6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	32b0      	adds	r2, #176	; 0xb0
 800cf14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf18:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cf1a:	78fb      	ldrb	r3, [r7, #3]
 800cf1c:	f003 020f 	and.w	r2, r3, #15
 800cf20:	6879      	ldr	r1, [r7, #4]
 800cf22:	4613      	mov	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	4413      	add	r3, r2
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	440b      	add	r3, r1
 800cf2c:	3318      	adds	r3, #24
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d02f      	beq.n	800cf94 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cf34:	78fb      	ldrb	r3, [r7, #3]
 800cf36:	f003 020f 	and.w	r2, r3, #15
 800cf3a:	6879      	ldr	r1, [r7, #4]
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	4413      	add	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	440b      	add	r3, r1
 800cf46:	3318      	adds	r3, #24
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	78fb      	ldrb	r3, [r7, #3]
 800cf4c:	f003 010f 	and.w	r1, r3, #15
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	460b      	mov	r3, r1
 800cf54:	00db      	lsls	r3, r3, #3
 800cf56:	440b      	add	r3, r1
 800cf58:	009b      	lsls	r3, r3, #2
 800cf5a:	4403      	add	r3, r0
 800cf5c:	3344      	adds	r3, #68	; 0x44
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	fbb2 f1f3 	udiv	r1, r2, r3
 800cf64:	fb01 f303 	mul.w	r3, r1, r3
 800cf68:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d112      	bne.n	800cf94 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cf6e:	78fb      	ldrb	r3, [r7, #3]
 800cf70:	f003 020f 	and.w	r2, r3, #15
 800cf74:	6879      	ldr	r1, [r7, #4]
 800cf76:	4613      	mov	r3, r2
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	4413      	add	r3, r2
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	440b      	add	r3, r1
 800cf80:	3318      	adds	r3, #24
 800cf82:	2200      	movs	r2, #0
 800cf84:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cf86:	78f9      	ldrb	r1, [r7, #3]
 800cf88:	2300      	movs	r3, #0
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f002 f9d4 	bl	800f33a <USBD_LL_Transmit>
 800cf92:	e01f      	b.n	800cfd4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	2200      	movs	r2, #0
 800cf98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	33b0      	adds	r3, #176	; 0xb0
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4413      	add	r3, r2
 800cfaa:	685b      	ldr	r3, [r3, #4]
 800cfac:	691b      	ldr	r3, [r3, #16]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d010      	beq.n	800cfd4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	33b0      	adds	r3, #176	; 0xb0
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	4413      	add	r3, r2
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	691b      	ldr	r3, [r3, #16]
 800cfc4:	68ba      	ldr	r2, [r7, #8]
 800cfc6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cfca:	68ba      	ldr	r2, [r7, #8]
 800cfcc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cfd0:	78fa      	ldrb	r2, [r7, #3]
 800cfd2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3710      	adds	r7, #16
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b084      	sub	sp, #16
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	32b0      	adds	r2, #176	; 0xb0
 800cff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cff8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	32b0      	adds	r2, #176	; 0xb0
 800d004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d101      	bne.n	800d010 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d00c:	2303      	movs	r3, #3
 800d00e:	e01a      	b.n	800d046 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d010:	78fb      	ldrb	r3, [r7, #3]
 800d012:	4619      	mov	r1, r3
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f002 f9d2 	bl	800f3be <USBD_LL_GetRxDataSize>
 800d01a:	4602      	mov	r2, r0
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	33b0      	adds	r3, #176	; 0xb0
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	4413      	add	r3, r2
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	68fa      	ldr	r2, [r7, #12]
 800d036:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d03a:	68fa      	ldr	r2, [r7, #12]
 800d03c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d040:	4611      	mov	r1, r2
 800d042:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d044:	2300      	movs	r3, #0
}
 800d046:	4618      	mov	r0, r3
 800d048:	3710      	adds	r7, #16
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b084      	sub	sp, #16
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	32b0      	adds	r2, #176	; 0xb0
 800d060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d064:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d101      	bne.n	800d070 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d06c:	2303      	movs	r3, #3
 800d06e:	e025      	b.n	800d0bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	33b0      	adds	r3, #176	; 0xb0
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	4413      	add	r3, r2
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d01a      	beq.n	800d0ba <USBD_CDC_EP0_RxReady+0x6c>
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d08a:	2bff      	cmp	r3, #255	; 0xff
 800d08c:	d015      	beq.n	800d0ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	33b0      	adds	r3, #176	; 0xb0
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	4413      	add	r3, r2
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	689b      	ldr	r3, [r3, #8]
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d0a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d0a8:	68fa      	ldr	r2, [r7, #12]
 800d0aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d0ae:	b292      	uxth	r2, r2
 800d0b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	22ff      	movs	r2, #255	; 0xff
 800d0b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d0cc:	2182      	movs	r1, #130	; 0x82
 800d0ce:	4818      	ldr	r0, [pc, #96]	; (800d130 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d0d0:	f000 fd4f 	bl	800db72 <USBD_GetEpDesc>
 800d0d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d0d6:	2101      	movs	r1, #1
 800d0d8:	4815      	ldr	r0, [pc, #84]	; (800d130 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d0da:	f000 fd4a 	bl	800db72 <USBD_GetEpDesc>
 800d0de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d0e0:	2181      	movs	r1, #129	; 0x81
 800d0e2:	4813      	ldr	r0, [pc, #76]	; (800d130 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d0e4:	f000 fd45 	bl	800db72 <USBD_GetEpDesc>
 800d0e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d002      	beq.n	800d0f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	2210      	movs	r2, #16
 800d0f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d006      	beq.n	800d10a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d104:	711a      	strb	r2, [r3, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d006      	beq.n	800d11e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2200      	movs	r2, #0
 800d114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d118:	711a      	strb	r2, [r3, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2243      	movs	r2, #67	; 0x43
 800d122:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d124:	4b02      	ldr	r3, [pc, #8]	; (800d130 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d126:	4618      	mov	r0, r3
 800d128:	3718      	adds	r7, #24
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	24000054 	.word	0x24000054

0800d134 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b086      	sub	sp, #24
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d13c:	2182      	movs	r1, #130	; 0x82
 800d13e:	4818      	ldr	r0, [pc, #96]	; (800d1a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d140:	f000 fd17 	bl	800db72 <USBD_GetEpDesc>
 800d144:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d146:	2101      	movs	r1, #1
 800d148:	4815      	ldr	r0, [pc, #84]	; (800d1a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d14a:	f000 fd12 	bl	800db72 <USBD_GetEpDesc>
 800d14e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d150:	2181      	movs	r1, #129	; 0x81
 800d152:	4813      	ldr	r0, [pc, #76]	; (800d1a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d154:	f000 fd0d 	bl	800db72 <USBD_GetEpDesc>
 800d158:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d002      	beq.n	800d166 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	2210      	movs	r2, #16
 800d164:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d006      	beq.n	800d17a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	2200      	movs	r2, #0
 800d170:	711a      	strb	r2, [r3, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	f042 0202 	orr.w	r2, r2, #2
 800d178:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d006      	beq.n	800d18e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2200      	movs	r2, #0
 800d184:	711a      	strb	r2, [r3, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	f042 0202 	orr.w	r2, r2, #2
 800d18c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2243      	movs	r2, #67	; 0x43
 800d192:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d194:	4b02      	ldr	r3, [pc, #8]	; (800d1a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d196:	4618      	mov	r0, r3
 800d198:	3718      	adds	r7, #24
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	24000054 	.word	0x24000054

0800d1a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b086      	sub	sp, #24
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d1ac:	2182      	movs	r1, #130	; 0x82
 800d1ae:	4818      	ldr	r0, [pc, #96]	; (800d210 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d1b0:	f000 fcdf 	bl	800db72 <USBD_GetEpDesc>
 800d1b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d1b6:	2101      	movs	r1, #1
 800d1b8:	4815      	ldr	r0, [pc, #84]	; (800d210 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d1ba:	f000 fcda 	bl	800db72 <USBD_GetEpDesc>
 800d1be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d1c0:	2181      	movs	r1, #129	; 0x81
 800d1c2:	4813      	ldr	r0, [pc, #76]	; (800d210 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d1c4:	f000 fcd5 	bl	800db72 <USBD_GetEpDesc>
 800d1c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	2210      	movs	r2, #16
 800d1d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d006      	beq.n	800d1ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1e4:	711a      	strb	r2, [r3, #4]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d006      	beq.n	800d1fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1f8:	711a      	strb	r2, [r3, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2243      	movs	r2, #67	; 0x43
 800d202:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d204:	4b02      	ldr	r3, [pc, #8]	; (800d210 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d206:	4618      	mov	r0, r3
 800d208:	3718      	adds	r7, #24
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	24000054 	.word	0x24000054

0800d214 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	220a      	movs	r2, #10
 800d220:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d222:	4b03      	ldr	r3, [pc, #12]	; (800d230 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d224:	4618      	mov	r0, r3
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr
 800d230:	24000010 	.word	0x24000010

0800d234 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d101      	bne.n	800d248 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d244:	2303      	movs	r3, #3
 800d246:	e009      	b.n	800d25c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	33b0      	adds	r3, #176	; 0xb0
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	4413      	add	r3, r2
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	370c      	adds	r7, #12
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d268:	b480      	push	{r7}
 800d26a:	b087      	sub	sp, #28
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	60b9      	str	r1, [r7, #8]
 800d272:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	32b0      	adds	r2, #176	; 0xb0
 800d27e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d282:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d101      	bne.n	800d28e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d28a:	2303      	movs	r3, #3
 800d28c:	e008      	b.n	800d2a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	68ba      	ldr	r2, [r7, #8]
 800d292:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	687a      	ldr	r2, [r7, #4]
 800d29a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d29e:	2300      	movs	r3, #0
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	371c      	adds	r7, #28
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	32b0      	adds	r2, #176	; 0xb0
 800d2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d101      	bne.n	800d2d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d2cc:	2303      	movs	r3, #3
 800d2ce:	e004      	b.n	800d2da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	683a      	ldr	r2, [r7, #0]
 800d2d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3714      	adds	r7, #20
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr
	...

0800d2e8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	32b0      	adds	r2, #176	; 0xb0
 800d2fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2fe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d300:	2301      	movs	r3, #1
 800d302:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d101      	bne.n	800d30e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d30a:	2303      	movs	r3, #3
 800d30c:	e025      	b.n	800d35a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d314:	2b00      	cmp	r3, #0
 800d316:	d11f      	bne.n	800d358 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	2201      	movs	r2, #1
 800d31c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d320:	4b10      	ldr	r3, [pc, #64]	; (800d364 <USBD_CDC_TransmitPacket+0x7c>)
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	f003 020f 	and.w	r2, r3, #15
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	4613      	mov	r3, r2
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	4413      	add	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4403      	add	r3, r0
 800d33a:	3318      	adds	r3, #24
 800d33c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d33e:	4b09      	ldr	r3, [pc, #36]	; (800d364 <USBD_CDC_TransmitPacket+0x7c>)
 800d340:	7819      	ldrb	r1, [r3, #0]
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f001 fff3 	bl	800f33a <USBD_LL_Transmit>

    ret = USBD_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d358:	7bfb      	ldrb	r3, [r7, #15]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	24000097 	.word	0x24000097

0800d368 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	32b0      	adds	r2, #176	; 0xb0
 800d37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d37e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	32b0      	adds	r2, #176	; 0xb0
 800d38a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d101      	bne.n	800d396 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d392:	2303      	movs	r3, #3
 800d394:	e018      	b.n	800d3c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	7c1b      	ldrb	r3, [r3, #16]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d10a      	bne.n	800d3b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d39e:	4b0c      	ldr	r3, [pc, #48]	; (800d3d0 <USBD_CDC_ReceivePacket+0x68>)
 800d3a0:	7819      	ldrb	r1, [r3, #0]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d3a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f001 ffe5 	bl	800f37c <USBD_LL_PrepareReceive>
 800d3b2:	e008      	b.n	800d3c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d3b4:	4b06      	ldr	r3, [pc, #24]	; (800d3d0 <USBD_CDC_ReceivePacket+0x68>)
 800d3b6:	7819      	ldrb	r1, [r3, #0]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d3be:	2340      	movs	r3, #64	; 0x40
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f001 ffdb 	bl	800f37c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d3c6:	2300      	movs	r3, #0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3710      	adds	r7, #16
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	24000098 	.word	0x24000098

0800d3d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b086      	sub	sp, #24
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	4613      	mov	r3, r2
 800d3e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d101      	bne.n	800d3ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d3e8:	2303      	movs	r3, #3
 800d3ea:	e01f      	b.n	800d42c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d003      	beq.n	800d412 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	68ba      	ldr	r2, [r7, #8]
 800d40e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2201      	movs	r2, #1
 800d416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	79fa      	ldrb	r2, [r7, #7]
 800d41e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f001 fe51 	bl	800f0c8 <USBD_LL_Init>
 800d426:	4603      	mov	r3, r0
 800d428:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3718      	adds	r7, #24
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d43e:	2300      	movs	r3, #0
 800d440:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d101      	bne.n	800d44c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d448:	2303      	movs	r3, #3
 800d44a:	e025      	b.n	800d498 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	683a      	ldr	r2, [r7, #0]
 800d450:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	32ae      	adds	r2, #174	; 0xae
 800d45e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00f      	beq.n	800d488 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	32ae      	adds	r2, #174	; 0xae
 800d472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d478:	f107 020e 	add.w	r2, r7, #14
 800d47c:	4610      	mov	r0, r2
 800d47e:	4798      	blx	r3
 800d480:	4602      	mov	r2, r0
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d48e:	1c5a      	adds	r2, r3, #1
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d496:	2300      	movs	r3, #0
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f001 fe5d 	bl	800f168 <USBD_LL_Start>
 800d4ae:	4603      	mov	r3, r0
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d4c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	370c      	adds	r7, #12
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr

0800d4ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b084      	sub	sp, #16
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d009      	beq.n	800d4fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	78fa      	ldrb	r2, [r7, #3]
 800d4f2:	4611      	mov	r1, r2
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	4798      	blx	r3
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3710      	adds	r7, #16
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b084      	sub	sp, #16
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
 800d50e:	460b      	mov	r3, r1
 800d510:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d512:	2300      	movs	r3, #0
 800d514:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	78fa      	ldrb	r2, [r7, #3]
 800d520:	4611      	mov	r1, r2
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	4798      	blx	r3
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d001      	beq.n	800d530 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d52c:	2303      	movs	r3, #3
 800d52e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d530:	7bfb      	ldrb	r3, [r7, #15]
}
 800d532:	4618      	mov	r0, r3
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b084      	sub	sp, #16
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
 800d542:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d54a:	6839      	ldr	r1, [r7, #0]
 800d54c:	4618      	mov	r0, r3
 800d54e:	f001 f938 	bl	800e7c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2201      	movs	r2, #1
 800d556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d560:	461a      	mov	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d56e:	f003 031f 	and.w	r3, r3, #31
 800d572:	2b02      	cmp	r3, #2
 800d574:	d01a      	beq.n	800d5ac <USBD_LL_SetupStage+0x72>
 800d576:	2b02      	cmp	r3, #2
 800d578:	d822      	bhi.n	800d5c0 <USBD_LL_SetupStage+0x86>
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d002      	beq.n	800d584 <USBD_LL_SetupStage+0x4a>
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d00a      	beq.n	800d598 <USBD_LL_SetupStage+0x5e>
 800d582:	e01d      	b.n	800d5c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d58a:	4619      	mov	r1, r3
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 fb65 	bl	800dc5c <USBD_StdDevReq>
 800d592:	4603      	mov	r3, r0
 800d594:	73fb      	strb	r3, [r7, #15]
      break;
 800d596:	e020      	b.n	800d5da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d59e:	4619      	mov	r1, r3
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 fbcd 	bl	800dd40 <USBD_StdItfReq>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	73fb      	strb	r3, [r7, #15]
      break;
 800d5aa:	e016      	b.n	800d5da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 fc2f 	bl	800de18 <USBD_StdEPReq>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	73fb      	strb	r3, [r7, #15]
      break;
 800d5be:	e00c      	b.n	800d5da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d5c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f001 fe2a 	bl	800f228 <USBD_LL_StallEP>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	73fb      	strb	r3, [r7, #15]
      break;
 800d5d8:	bf00      	nop
  }

  return ret;
 800d5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b086      	sub	sp, #24
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	607a      	str	r2, [r7, #4]
 800d5f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d5f6:	7afb      	ldrb	r3, [r7, #11]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d16e      	bne.n	800d6da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d602:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d60a:	2b03      	cmp	r3, #3
 800d60c:	f040 8098 	bne.w	800d740 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	689a      	ldr	r2, [r3, #8]
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d913      	bls.n	800d644 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	689a      	ldr	r2, [r3, #8]
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	68db      	ldr	r3, [r3, #12]
 800d624:	1ad2      	subs	r2, r2, r3
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	68da      	ldr	r2, [r3, #12]
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	689b      	ldr	r3, [r3, #8]
 800d632:	4293      	cmp	r3, r2
 800d634:	bf28      	it	cs
 800d636:	4613      	movcs	r3, r2
 800d638:	461a      	mov	r2, r3
 800d63a:	6879      	ldr	r1, [r7, #4]
 800d63c:	68f8      	ldr	r0, [r7, #12]
 800d63e:	f001 f9b4 	bl	800e9aa <USBD_CtlContinueRx>
 800d642:	e07d      	b.n	800d740 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d64a:	f003 031f 	and.w	r3, r3, #31
 800d64e:	2b02      	cmp	r3, #2
 800d650:	d014      	beq.n	800d67c <USBD_LL_DataOutStage+0x98>
 800d652:	2b02      	cmp	r3, #2
 800d654:	d81d      	bhi.n	800d692 <USBD_LL_DataOutStage+0xae>
 800d656:	2b00      	cmp	r3, #0
 800d658:	d002      	beq.n	800d660 <USBD_LL_DataOutStage+0x7c>
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d003      	beq.n	800d666 <USBD_LL_DataOutStage+0x82>
 800d65e:	e018      	b.n	800d692 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d660:	2300      	movs	r3, #0
 800d662:	75bb      	strb	r3, [r7, #22]
            break;
 800d664:	e018      	b.n	800d698 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	4619      	mov	r1, r3
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f000 fa64 	bl	800db3e <USBD_CoreFindIF>
 800d676:	4603      	mov	r3, r0
 800d678:	75bb      	strb	r3, [r7, #22]
            break;
 800d67a:	e00d      	b.n	800d698 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d682:	b2db      	uxtb	r3, r3
 800d684:	4619      	mov	r1, r3
 800d686:	68f8      	ldr	r0, [r7, #12]
 800d688:	f000 fa66 	bl	800db58 <USBD_CoreFindEP>
 800d68c:	4603      	mov	r3, r0
 800d68e:	75bb      	strb	r3, [r7, #22]
            break;
 800d690:	e002      	b.n	800d698 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d692:	2300      	movs	r3, #0
 800d694:	75bb      	strb	r3, [r7, #22]
            break;
 800d696:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d698:	7dbb      	ldrb	r3, [r7, #22]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d119      	bne.n	800d6d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	2b03      	cmp	r3, #3
 800d6a8:	d113      	bne.n	800d6d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d6aa:	7dba      	ldrb	r2, [r7, #22]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	32ae      	adds	r2, #174	; 0xae
 800d6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6b4:	691b      	ldr	r3, [r3, #16]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00b      	beq.n	800d6d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d6ba:	7dba      	ldrb	r2, [r7, #22]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d6c2:	7dba      	ldrb	r2, [r7, #22]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	32ae      	adds	r2, #174	; 0xae
 800d6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6cc:	691b      	ldr	r3, [r3, #16]
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d6d2:	68f8      	ldr	r0, [r7, #12]
 800d6d4:	f001 f97a 	bl	800e9cc <USBD_CtlSendStatus>
 800d6d8:	e032      	b.n	800d740 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d6da:	7afb      	ldrb	r3, [r7, #11]
 800d6dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f000 fa37 	bl	800db58 <USBD_CoreFindEP>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d6ee:	7dbb      	ldrb	r3, [r7, #22]
 800d6f0:	2bff      	cmp	r3, #255	; 0xff
 800d6f2:	d025      	beq.n	800d740 <USBD_LL_DataOutStage+0x15c>
 800d6f4:	7dbb      	ldrb	r3, [r7, #22]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d122      	bne.n	800d740 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d700:	b2db      	uxtb	r3, r3
 800d702:	2b03      	cmp	r3, #3
 800d704:	d117      	bne.n	800d736 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d706:	7dba      	ldrb	r2, [r7, #22]
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	32ae      	adds	r2, #174	; 0xae
 800d70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d710:	699b      	ldr	r3, [r3, #24]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00f      	beq.n	800d736 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d716:	7dba      	ldrb	r2, [r7, #22]
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d71e:	7dba      	ldrb	r2, [r7, #22]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	32ae      	adds	r2, #174	; 0xae
 800d724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d728:	699b      	ldr	r3, [r3, #24]
 800d72a:	7afa      	ldrb	r2, [r7, #11]
 800d72c:	4611      	mov	r1, r2
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	4798      	blx	r3
 800d732:	4603      	mov	r3, r0
 800d734:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d736:	7dfb      	ldrb	r3, [r7, #23]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d001      	beq.n	800d740 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d73c:	7dfb      	ldrb	r3, [r7, #23]
 800d73e:	e000      	b.n	800d742 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d740:	2300      	movs	r3, #0
}
 800d742:	4618      	mov	r0, r3
 800d744:	3718      	adds	r7, #24
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b086      	sub	sp, #24
 800d74e:	af00      	add	r7, sp, #0
 800d750:	60f8      	str	r0, [r7, #12]
 800d752:	460b      	mov	r3, r1
 800d754:	607a      	str	r2, [r7, #4]
 800d756:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d758:	7afb      	ldrb	r3, [r7, #11]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d16f      	bne.n	800d83e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	3314      	adds	r3, #20
 800d762:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d76a:	2b02      	cmp	r3, #2
 800d76c:	d15a      	bne.n	800d824 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	689a      	ldr	r2, [r3, #8]
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	429a      	cmp	r2, r3
 800d778:	d914      	bls.n	800d7a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	689a      	ldr	r2, [r3, #8]
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	68db      	ldr	r3, [r3, #12]
 800d782:	1ad2      	subs	r2, r2, r3
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	461a      	mov	r2, r3
 800d78e:	6879      	ldr	r1, [r7, #4]
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f001 f8dc 	bl	800e94e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d796:	2300      	movs	r3, #0
 800d798:	2200      	movs	r2, #0
 800d79a:	2100      	movs	r1, #0
 800d79c:	68f8      	ldr	r0, [r7, #12]
 800d79e:	f001 fded 	bl	800f37c <USBD_LL_PrepareReceive>
 800d7a2:	e03f      	b.n	800d824 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	68da      	ldr	r2, [r3, #12]
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d11c      	bne.n	800d7ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	685a      	ldr	r2, [r3, #4]
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d316      	bcc.n	800d7ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	685a      	ldr	r2, [r3, #4]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d20f      	bcs.n	800d7ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	2100      	movs	r1, #0
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f001 f8bd 	bl	800e94e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7dc:	2300      	movs	r3, #0
 800d7de:	2200      	movs	r2, #0
 800d7e0:	2100      	movs	r1, #0
 800d7e2:	68f8      	ldr	r0, [r7, #12]
 800d7e4:	f001 fdca 	bl	800f37c <USBD_LL_PrepareReceive>
 800d7e8:	e01c      	b.n	800d824 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	2b03      	cmp	r3, #3
 800d7f4:	d10f      	bne.n	800d816 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7fc:	68db      	ldr	r3, [r3, #12]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d009      	beq.n	800d816 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2200      	movs	r2, #0
 800d806:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d816:	2180      	movs	r1, #128	; 0x80
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	f001 fd05 	bl	800f228 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d81e:	68f8      	ldr	r0, [r7, #12]
 800d820:	f001 f8e7 	bl	800e9f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d03a      	beq.n	800d8a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d82e:	68f8      	ldr	r0, [r7, #12]
 800d830:	f7ff fe42 	bl	800d4b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2200      	movs	r2, #0
 800d838:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d83c:	e032      	b.n	800d8a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d83e:	7afb      	ldrb	r3, [r7, #11]
 800d840:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d844:	b2db      	uxtb	r3, r3
 800d846:	4619      	mov	r1, r3
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	f000 f985 	bl	800db58 <USBD_CoreFindEP>
 800d84e:	4603      	mov	r3, r0
 800d850:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d852:	7dfb      	ldrb	r3, [r7, #23]
 800d854:	2bff      	cmp	r3, #255	; 0xff
 800d856:	d025      	beq.n	800d8a4 <USBD_LL_DataInStage+0x15a>
 800d858:	7dfb      	ldrb	r3, [r7, #23]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d122      	bne.n	800d8a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d864:	b2db      	uxtb	r3, r3
 800d866:	2b03      	cmp	r3, #3
 800d868:	d11c      	bne.n	800d8a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d86a:	7dfa      	ldrb	r2, [r7, #23]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	32ae      	adds	r2, #174	; 0xae
 800d870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d874:	695b      	ldr	r3, [r3, #20]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d014      	beq.n	800d8a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d87a:	7dfa      	ldrb	r2, [r7, #23]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d882:	7dfa      	ldrb	r2, [r7, #23]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	32ae      	adds	r2, #174	; 0xae
 800d888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d88c:	695b      	ldr	r3, [r3, #20]
 800d88e:	7afa      	ldrb	r2, [r7, #11]
 800d890:	4611      	mov	r1, r2
 800d892:	68f8      	ldr	r0, [r7, #12]
 800d894:	4798      	blx	r3
 800d896:	4603      	mov	r3, r0
 800d898:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d89a:	7dbb      	ldrb	r3, [r7, #22]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d001      	beq.n	800d8a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d8a0:	7dbb      	ldrb	r3, [r7, #22]
 800d8a2:	e000      	b.n	800d8a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3718      	adds	r7, #24
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}

0800d8ae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b084      	sub	sp, #16
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2201      	movs	r2, #1
 800d8be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d014      	beq.n	800d914 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d00e      	beq.n	800d914 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	6852      	ldr	r2, [r2, #4]
 800d902:	b2d2      	uxtb	r2, r2
 800d904:	4611      	mov	r1, r2
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	4798      	blx	r3
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d001      	beq.n	800d914 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d910:	2303      	movs	r3, #3
 800d912:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d914:	2340      	movs	r3, #64	; 0x40
 800d916:	2200      	movs	r2, #0
 800d918:	2100      	movs	r1, #0
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f001 fc3f 	bl	800f19e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2201      	movs	r2, #1
 800d924:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2240      	movs	r2, #64	; 0x40
 800d92c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d930:	2340      	movs	r3, #64	; 0x40
 800d932:	2200      	movs	r2, #0
 800d934:	2180      	movs	r1, #128	; 0x80
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f001 fc31 	bl	800f19e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2201      	movs	r2, #1
 800d940:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2240      	movs	r2, #64	; 0x40
 800d946:	621a      	str	r2, [r3, #32]

  return ret;
 800d948:	7bfb      	ldrb	r3, [r7, #15]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}

0800d952 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d952:	b480      	push	{r7}
 800d954:	b083      	sub	sp, #12
 800d956:	af00      	add	r7, sp, #0
 800d958:	6078      	str	r0, [r7, #4]
 800d95a:	460b      	mov	r3, r1
 800d95c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	78fa      	ldrb	r2, [r7, #3]
 800d962:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d964:	2300      	movs	r3, #0
}
 800d966:	4618      	mov	r0, r3
 800d968:	370c      	adds	r7, #12
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr

0800d972 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d972:	b480      	push	{r7}
 800d974:	b083      	sub	sp, #12
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d980:	b2db      	uxtb	r3, r3
 800d982:	2b04      	cmp	r3, #4
 800d984:	d006      	beq.n	800d994 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2204      	movs	r2, #4
 800d998:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d99c:	2300      	movs	r3, #0
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	370c      	adds	r7, #12
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr

0800d9aa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d9aa:	b480      	push	{r7}
 800d9ac:	b083      	sub	sp, #12
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b04      	cmp	r3, #4
 800d9bc:	d106      	bne.n	800d9cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d9c4:	b2da      	uxtb	r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	370c      	adds	r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b082      	sub	sp, #8
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	2b03      	cmp	r3, #3
 800d9ec:	d110      	bne.n	800da10 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d00b      	beq.n	800da10 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9fe:	69db      	ldr	r3, [r3, #28]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d005      	beq.n	800da10 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da0a:	69db      	ldr	r3, [r3, #28]
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800da10:	2300      	movs	r3, #0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3708      	adds	r7, #8
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b082      	sub	sp, #8
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	460b      	mov	r3, r1
 800da24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	32ae      	adds	r2, #174	; 0xae
 800da30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d101      	bne.n	800da3c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800da38:	2303      	movs	r3, #3
 800da3a:	e01c      	b.n	800da76 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da42:	b2db      	uxtb	r3, r3
 800da44:	2b03      	cmp	r3, #3
 800da46:	d115      	bne.n	800da74 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	32ae      	adds	r2, #174	; 0xae
 800da52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da56:	6a1b      	ldr	r3, [r3, #32]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00b      	beq.n	800da74 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	32ae      	adds	r2, #174	; 0xae
 800da66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da6a:	6a1b      	ldr	r3, [r3, #32]
 800da6c:	78fa      	ldrb	r2, [r7, #3]
 800da6e:	4611      	mov	r1, r2
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da74:	2300      	movs	r3, #0
}
 800da76:	4618      	mov	r0, r3
 800da78:	3708      	adds	r7, #8
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b082      	sub	sp, #8
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
 800da86:	460b      	mov	r3, r1
 800da88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	32ae      	adds	r2, #174	; 0xae
 800da94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d101      	bne.n	800daa0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800da9c:	2303      	movs	r3, #3
 800da9e:	e01c      	b.n	800dada <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	2b03      	cmp	r3, #3
 800daaa:	d115      	bne.n	800dad8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	32ae      	adds	r2, #174	; 0xae
 800dab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00b      	beq.n	800dad8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	32ae      	adds	r2, #174	; 0xae
 800daca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad0:	78fa      	ldrb	r2, [r7, #3]
 800dad2:	4611      	mov	r1, r2
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dad8:	2300      	movs	r3, #0
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3708      	adds	r7, #8
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dae2:	b480      	push	{r7}
 800dae4:	b083      	sub	sp, #12
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800daea:	2300      	movs	r3, #0
}
 800daec:	4618      	mov	r0, r3
 800daee:	370c      	adds	r7, #12
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr

0800daf8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800db00:	2300      	movs	r3, #0
 800db02:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2201      	movs	r2, #1
 800db08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00e      	beq.n	800db34 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	6852      	ldr	r2, [r2, #4]
 800db22:	b2d2      	uxtb	r2, r2
 800db24:	4611      	mov	r1, r2
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	4798      	blx	r3
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d001      	beq.n	800db34 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800db30:	2303      	movs	r3, #3
 800db32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800db34:	7bfb      	ldrb	r3, [r7, #15]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800db3e:	b480      	push	{r7}
 800db40:	b083      	sub	sp, #12
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
 800db46:	460b      	mov	r3, r1
 800db48:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800db4a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr

0800db58 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800db58:	b480      	push	{r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	460b      	mov	r3, r1
 800db62:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800db64:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800db66:	4618      	mov	r0, r3
 800db68:	370c      	adds	r7, #12
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr

0800db72 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800db72:	b580      	push	{r7, lr}
 800db74:	b086      	sub	sp, #24
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
 800db7a:	460b      	mov	r3, r1
 800db7c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800db86:	2300      	movs	r3, #0
 800db88:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	885b      	ldrh	r3, [r3, #2]
 800db8e:	b29a      	uxth	r2, r3
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	b29b      	uxth	r3, r3
 800db96:	429a      	cmp	r2, r3
 800db98:	d920      	bls.n	800dbdc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dba2:	e013      	b.n	800dbcc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dba4:	f107 030a 	add.w	r3, r7, #10
 800dba8:	4619      	mov	r1, r3
 800dbaa:	6978      	ldr	r0, [r7, #20]
 800dbac:	f000 f81b 	bl	800dbe6 <USBD_GetNextDesc>
 800dbb0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	785b      	ldrb	r3, [r3, #1]
 800dbb6:	2b05      	cmp	r3, #5
 800dbb8:	d108      	bne.n	800dbcc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	789b      	ldrb	r3, [r3, #2]
 800dbc2:	78fa      	ldrb	r2, [r7, #3]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d008      	beq.n	800dbda <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	885b      	ldrh	r3, [r3, #2]
 800dbd0:	b29a      	uxth	r2, r3
 800dbd2:	897b      	ldrh	r3, [r7, #10]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d8e5      	bhi.n	800dba4 <USBD_GetEpDesc+0x32>
 800dbd8:	e000      	b.n	800dbdc <USBD_GetEpDesc+0x6a>
          break;
 800dbda:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dbdc:	693b      	ldr	r3, [r7, #16]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3718      	adds	r7, #24
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dbe6:	b480      	push	{r7}
 800dbe8:	b085      	sub	sp, #20
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
 800dbee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	881a      	ldrh	r2, [r3, #0]
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	4413      	add	r3, r2
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	4413      	add	r3, r2
 800dc10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dc12:	68fb      	ldr	r3, [r7, #12]
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3714      	adds	r7, #20
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b087      	sub	sp, #28
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	3301      	adds	r3, #1
 800dc36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dc3e:	8a3b      	ldrh	r3, [r7, #16]
 800dc40:	021b      	lsls	r3, r3, #8
 800dc42:	b21a      	sxth	r2, r3
 800dc44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	b21b      	sxth	r3, r3
 800dc4c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dc4e:	89fb      	ldrh	r3, [r7, #14]
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	371c      	adds	r7, #28
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc66:	2300      	movs	r3, #0
 800dc68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc72:	2b40      	cmp	r3, #64	; 0x40
 800dc74:	d005      	beq.n	800dc82 <USBD_StdDevReq+0x26>
 800dc76:	2b40      	cmp	r3, #64	; 0x40
 800dc78:	d857      	bhi.n	800dd2a <USBD_StdDevReq+0xce>
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d00f      	beq.n	800dc9e <USBD_StdDevReq+0x42>
 800dc7e:	2b20      	cmp	r3, #32
 800dc80:	d153      	bne.n	800dd2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	32ae      	adds	r2, #174	; 0xae
 800dc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	6839      	ldr	r1, [r7, #0]
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	4798      	blx	r3
 800dc98:	4603      	mov	r3, r0
 800dc9a:	73fb      	strb	r3, [r7, #15]
      break;
 800dc9c:	e04a      	b.n	800dd34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	785b      	ldrb	r3, [r3, #1]
 800dca2:	2b09      	cmp	r3, #9
 800dca4:	d83b      	bhi.n	800dd1e <USBD_StdDevReq+0xc2>
 800dca6:	a201      	add	r2, pc, #4	; (adr r2, 800dcac <USBD_StdDevReq+0x50>)
 800dca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcac:	0800dd01 	.word	0x0800dd01
 800dcb0:	0800dd15 	.word	0x0800dd15
 800dcb4:	0800dd1f 	.word	0x0800dd1f
 800dcb8:	0800dd0b 	.word	0x0800dd0b
 800dcbc:	0800dd1f 	.word	0x0800dd1f
 800dcc0:	0800dcdf 	.word	0x0800dcdf
 800dcc4:	0800dcd5 	.word	0x0800dcd5
 800dcc8:	0800dd1f 	.word	0x0800dd1f
 800dccc:	0800dcf7 	.word	0x0800dcf7
 800dcd0:	0800dce9 	.word	0x0800dce9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dcd4:	6839      	ldr	r1, [r7, #0]
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 fa3c 	bl	800e154 <USBD_GetDescriptor>
          break;
 800dcdc:	e024      	b.n	800dd28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dcde:	6839      	ldr	r1, [r7, #0]
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f000 fbcb 	bl	800e47c <USBD_SetAddress>
          break;
 800dce6:	e01f      	b.n	800dd28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dce8:	6839      	ldr	r1, [r7, #0]
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 fc0a 	bl	800e504 <USBD_SetConfig>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	73fb      	strb	r3, [r7, #15]
          break;
 800dcf4:	e018      	b.n	800dd28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dcf6:	6839      	ldr	r1, [r7, #0]
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 fcad 	bl	800e658 <USBD_GetConfig>
          break;
 800dcfe:	e013      	b.n	800dd28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dd00:	6839      	ldr	r1, [r7, #0]
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 fcde 	bl	800e6c4 <USBD_GetStatus>
          break;
 800dd08:	e00e      	b.n	800dd28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dd0a:	6839      	ldr	r1, [r7, #0]
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 fd0d 	bl	800e72c <USBD_SetFeature>
          break;
 800dd12:	e009      	b.n	800dd28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dd14:	6839      	ldr	r1, [r7, #0]
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f000 fd31 	bl	800e77e <USBD_ClrFeature>
          break;
 800dd1c:	e004      	b.n	800dd28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dd1e:	6839      	ldr	r1, [r7, #0]
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 fd88 	bl	800e836 <USBD_CtlError>
          break;
 800dd26:	bf00      	nop
      }
      break;
 800dd28:	e004      	b.n	800dd34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dd2a:	6839      	ldr	r1, [r7, #0]
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 fd82 	bl	800e836 <USBD_CtlError>
      break;
 800dd32:	bf00      	nop
  }

  return ret;
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3710      	adds	r7, #16
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop

0800dd40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd56:	2b40      	cmp	r3, #64	; 0x40
 800dd58:	d005      	beq.n	800dd66 <USBD_StdItfReq+0x26>
 800dd5a:	2b40      	cmp	r3, #64	; 0x40
 800dd5c:	d852      	bhi.n	800de04 <USBD_StdItfReq+0xc4>
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d001      	beq.n	800dd66 <USBD_StdItfReq+0x26>
 800dd62:	2b20      	cmp	r3, #32
 800dd64:	d14e      	bne.n	800de04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	2b02      	cmp	r3, #2
 800dd72:	d840      	bhi.n	800ddf6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	889b      	ldrh	r3, [r3, #4]
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d836      	bhi.n	800ddec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	889b      	ldrh	r3, [r3, #4]
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	4619      	mov	r1, r3
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f7ff fed9 	bl	800db3e <USBD_CoreFindIF>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd90:	7bbb      	ldrb	r3, [r7, #14]
 800dd92:	2bff      	cmp	r3, #255	; 0xff
 800dd94:	d01d      	beq.n	800ddd2 <USBD_StdItfReq+0x92>
 800dd96:	7bbb      	ldrb	r3, [r7, #14]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d11a      	bne.n	800ddd2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dd9c:	7bba      	ldrb	r2, [r7, #14]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	32ae      	adds	r2, #174	; 0xae
 800dda2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d00f      	beq.n	800ddcc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ddac:	7bba      	ldrb	r2, [r7, #14]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ddb4:	7bba      	ldrb	r2, [r7, #14]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	32ae      	adds	r2, #174	; 0xae
 800ddba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	6839      	ldr	r1, [r7, #0]
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	4798      	blx	r3
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ddca:	e004      	b.n	800ddd6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ddcc:	2303      	movs	r3, #3
 800ddce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ddd0:	e001      	b.n	800ddd6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ddd2:	2303      	movs	r3, #3
 800ddd4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	88db      	ldrh	r3, [r3, #6]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d110      	bne.n	800de00 <USBD_StdItfReq+0xc0>
 800ddde:	7bfb      	ldrb	r3, [r7, #15]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d10d      	bne.n	800de00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 fdf1 	bl	800e9cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ddea:	e009      	b.n	800de00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ddec:	6839      	ldr	r1, [r7, #0]
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 fd21 	bl	800e836 <USBD_CtlError>
          break;
 800ddf4:	e004      	b.n	800de00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ddf6:	6839      	ldr	r1, [r7, #0]
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 fd1c 	bl	800e836 <USBD_CtlError>
          break;
 800ddfe:	e000      	b.n	800de02 <USBD_StdItfReq+0xc2>
          break;
 800de00:	bf00      	nop
      }
      break;
 800de02:	e004      	b.n	800de0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800de04:	6839      	ldr	r1, [r7, #0]
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 fd15 	bl	800e836 <USBD_CtlError>
      break;
 800de0c:	bf00      	nop
  }

  return ret;
 800de0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3710      	adds	r7, #16
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800de22:	2300      	movs	r3, #0
 800de24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	889b      	ldrh	r3, [r3, #4]
 800de2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de34:	2b40      	cmp	r3, #64	; 0x40
 800de36:	d007      	beq.n	800de48 <USBD_StdEPReq+0x30>
 800de38:	2b40      	cmp	r3, #64	; 0x40
 800de3a:	f200 817f 	bhi.w	800e13c <USBD_StdEPReq+0x324>
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d02a      	beq.n	800de98 <USBD_StdEPReq+0x80>
 800de42:	2b20      	cmp	r3, #32
 800de44:	f040 817a 	bne.w	800e13c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800de48:	7bbb      	ldrb	r3, [r7, #14]
 800de4a:	4619      	mov	r1, r3
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f7ff fe83 	bl	800db58 <USBD_CoreFindEP>
 800de52:	4603      	mov	r3, r0
 800de54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de56:	7b7b      	ldrb	r3, [r7, #13]
 800de58:	2bff      	cmp	r3, #255	; 0xff
 800de5a:	f000 8174 	beq.w	800e146 <USBD_StdEPReq+0x32e>
 800de5e:	7b7b      	ldrb	r3, [r7, #13]
 800de60:	2b00      	cmp	r3, #0
 800de62:	f040 8170 	bne.w	800e146 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800de66:	7b7a      	ldrb	r2, [r7, #13]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800de6e:	7b7a      	ldrb	r2, [r7, #13]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	32ae      	adds	r2, #174	; 0xae
 800de74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	f000 8163 	beq.w	800e146 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800de80:	7b7a      	ldrb	r2, [r7, #13]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	32ae      	adds	r2, #174	; 0xae
 800de86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	6839      	ldr	r1, [r7, #0]
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	4798      	blx	r3
 800de92:	4603      	mov	r3, r0
 800de94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800de96:	e156      	b.n	800e146 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	785b      	ldrb	r3, [r3, #1]
 800de9c:	2b03      	cmp	r3, #3
 800de9e:	d008      	beq.n	800deb2 <USBD_StdEPReq+0x9a>
 800dea0:	2b03      	cmp	r3, #3
 800dea2:	f300 8145 	bgt.w	800e130 <USBD_StdEPReq+0x318>
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	f000 809b 	beq.w	800dfe2 <USBD_StdEPReq+0x1ca>
 800deac:	2b01      	cmp	r3, #1
 800deae:	d03c      	beq.n	800df2a <USBD_StdEPReq+0x112>
 800deb0:	e13e      	b.n	800e130 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	2b02      	cmp	r3, #2
 800debc:	d002      	beq.n	800dec4 <USBD_StdEPReq+0xac>
 800debe:	2b03      	cmp	r3, #3
 800dec0:	d016      	beq.n	800def0 <USBD_StdEPReq+0xd8>
 800dec2:	e02c      	b.n	800df1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dec4:	7bbb      	ldrb	r3, [r7, #14]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d00d      	beq.n	800dee6 <USBD_StdEPReq+0xce>
 800deca:	7bbb      	ldrb	r3, [r7, #14]
 800decc:	2b80      	cmp	r3, #128	; 0x80
 800dece:	d00a      	beq.n	800dee6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ded0:	7bbb      	ldrb	r3, [r7, #14]
 800ded2:	4619      	mov	r1, r3
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f001 f9a7 	bl	800f228 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800deda:	2180      	movs	r1, #128	; 0x80
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f001 f9a3 	bl	800f228 <USBD_LL_StallEP>
 800dee2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dee4:	e020      	b.n	800df28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dee6:	6839      	ldr	r1, [r7, #0]
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 fca4 	bl	800e836 <USBD_CtlError>
              break;
 800deee:	e01b      	b.n	800df28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	885b      	ldrh	r3, [r3, #2]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d10e      	bne.n	800df16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800def8:	7bbb      	ldrb	r3, [r7, #14]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d00b      	beq.n	800df16 <USBD_StdEPReq+0xfe>
 800defe:	7bbb      	ldrb	r3, [r7, #14]
 800df00:	2b80      	cmp	r3, #128	; 0x80
 800df02:	d008      	beq.n	800df16 <USBD_StdEPReq+0xfe>
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	88db      	ldrh	r3, [r3, #6]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d104      	bne.n	800df16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800df0c:	7bbb      	ldrb	r3, [r7, #14]
 800df0e:	4619      	mov	r1, r3
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f001 f989 	bl	800f228 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 fd58 	bl	800e9cc <USBD_CtlSendStatus>

              break;
 800df1c:	e004      	b.n	800df28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800df1e:	6839      	ldr	r1, [r7, #0]
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 fc88 	bl	800e836 <USBD_CtlError>
              break;
 800df26:	bf00      	nop
          }
          break;
 800df28:	e107      	b.n	800e13a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df30:	b2db      	uxtb	r3, r3
 800df32:	2b02      	cmp	r3, #2
 800df34:	d002      	beq.n	800df3c <USBD_StdEPReq+0x124>
 800df36:	2b03      	cmp	r3, #3
 800df38:	d016      	beq.n	800df68 <USBD_StdEPReq+0x150>
 800df3a:	e04b      	b.n	800dfd4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df3c:	7bbb      	ldrb	r3, [r7, #14]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d00d      	beq.n	800df5e <USBD_StdEPReq+0x146>
 800df42:	7bbb      	ldrb	r3, [r7, #14]
 800df44:	2b80      	cmp	r3, #128	; 0x80
 800df46:	d00a      	beq.n	800df5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800df48:	7bbb      	ldrb	r3, [r7, #14]
 800df4a:	4619      	mov	r1, r3
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f001 f96b 	bl	800f228 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800df52:	2180      	movs	r1, #128	; 0x80
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f001 f967 	bl	800f228 <USBD_LL_StallEP>
 800df5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800df5c:	e040      	b.n	800dfe0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800df5e:	6839      	ldr	r1, [r7, #0]
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f000 fc68 	bl	800e836 <USBD_CtlError>
              break;
 800df66:	e03b      	b.n	800dfe0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	885b      	ldrh	r3, [r3, #2]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d136      	bne.n	800dfde <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800df70:	7bbb      	ldrb	r3, [r7, #14]
 800df72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df76:	2b00      	cmp	r3, #0
 800df78:	d004      	beq.n	800df84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800df7a:	7bbb      	ldrb	r3, [r7, #14]
 800df7c:	4619      	mov	r1, r3
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f001 f971 	bl	800f266 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 fd21 	bl	800e9cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800df8a:	7bbb      	ldrb	r3, [r7, #14]
 800df8c:	4619      	mov	r1, r3
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f7ff fde2 	bl	800db58 <USBD_CoreFindEP>
 800df94:	4603      	mov	r3, r0
 800df96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df98:	7b7b      	ldrb	r3, [r7, #13]
 800df9a:	2bff      	cmp	r3, #255	; 0xff
 800df9c:	d01f      	beq.n	800dfde <USBD_StdEPReq+0x1c6>
 800df9e:	7b7b      	ldrb	r3, [r7, #13]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d11c      	bne.n	800dfde <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dfa4:	7b7a      	ldrb	r2, [r7, #13]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dfac:	7b7a      	ldrb	r2, [r7, #13]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	32ae      	adds	r2, #174	; 0xae
 800dfb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfb6:	689b      	ldr	r3, [r3, #8]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d010      	beq.n	800dfde <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dfbc:	7b7a      	ldrb	r2, [r7, #13]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	32ae      	adds	r2, #174	; 0xae
 800dfc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	6839      	ldr	r1, [r7, #0]
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	4798      	blx	r3
 800dfce:	4603      	mov	r3, r0
 800dfd0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dfd2:	e004      	b.n	800dfde <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dfd4:	6839      	ldr	r1, [r7, #0]
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f000 fc2d 	bl	800e836 <USBD_CtlError>
              break;
 800dfdc:	e000      	b.n	800dfe0 <USBD_StdEPReq+0x1c8>
              break;
 800dfde:	bf00      	nop
          }
          break;
 800dfe0:	e0ab      	b.n	800e13a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	2b02      	cmp	r3, #2
 800dfec:	d002      	beq.n	800dff4 <USBD_StdEPReq+0x1dc>
 800dfee:	2b03      	cmp	r3, #3
 800dff0:	d032      	beq.n	800e058 <USBD_StdEPReq+0x240>
 800dff2:	e097      	b.n	800e124 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dff4:	7bbb      	ldrb	r3, [r7, #14]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d007      	beq.n	800e00a <USBD_StdEPReq+0x1f2>
 800dffa:	7bbb      	ldrb	r3, [r7, #14]
 800dffc:	2b80      	cmp	r3, #128	; 0x80
 800dffe:	d004      	beq.n	800e00a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e000:	6839      	ldr	r1, [r7, #0]
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 fc17 	bl	800e836 <USBD_CtlError>
                break;
 800e008:	e091      	b.n	800e12e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e00a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	da0b      	bge.n	800e02a <USBD_StdEPReq+0x212>
 800e012:	7bbb      	ldrb	r3, [r7, #14]
 800e014:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e018:	4613      	mov	r3, r2
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	4413      	add	r3, r2
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	3310      	adds	r3, #16
 800e022:	687a      	ldr	r2, [r7, #4]
 800e024:	4413      	add	r3, r2
 800e026:	3304      	adds	r3, #4
 800e028:	e00b      	b.n	800e042 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e02a:	7bbb      	ldrb	r3, [r7, #14]
 800e02c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e030:	4613      	mov	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	4413      	add	r3, r2
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	4413      	add	r3, r2
 800e040:	3304      	adds	r3, #4
 800e042:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	2200      	movs	r2, #0
 800e048:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	2202      	movs	r2, #2
 800e04e:	4619      	mov	r1, r3
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 fc61 	bl	800e918 <USBD_CtlSendData>
              break;
 800e056:	e06a      	b.n	800e12e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	da11      	bge.n	800e084 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e060:	7bbb      	ldrb	r3, [r7, #14]
 800e062:	f003 020f 	and.w	r2, r3, #15
 800e066:	6879      	ldr	r1, [r7, #4]
 800e068:	4613      	mov	r3, r2
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	4413      	add	r3, r2
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	440b      	add	r3, r1
 800e072:	3324      	adds	r3, #36	; 0x24
 800e074:	881b      	ldrh	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d117      	bne.n	800e0aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e07a:	6839      	ldr	r1, [r7, #0]
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f000 fbda 	bl	800e836 <USBD_CtlError>
                  break;
 800e082:	e054      	b.n	800e12e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e084:	7bbb      	ldrb	r3, [r7, #14]
 800e086:	f003 020f 	and.w	r2, r3, #15
 800e08a:	6879      	ldr	r1, [r7, #4]
 800e08c:	4613      	mov	r3, r2
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	4413      	add	r3, r2
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	440b      	add	r3, r1
 800e096:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e09a:	881b      	ldrh	r3, [r3, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d104      	bne.n	800e0aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e0a0:	6839      	ldr	r1, [r7, #0]
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 fbc7 	bl	800e836 <USBD_CtlError>
                  break;
 800e0a8:	e041      	b.n	800e12e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	da0b      	bge.n	800e0ca <USBD_StdEPReq+0x2b2>
 800e0b2:	7bbb      	ldrb	r3, [r7, #14]
 800e0b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	009b      	lsls	r3, r3, #2
 800e0bc:	4413      	add	r3, r2
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	3310      	adds	r3, #16
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	4413      	add	r3, r2
 800e0c6:	3304      	adds	r3, #4
 800e0c8:	e00b      	b.n	800e0e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e0ca:	7bbb      	ldrb	r3, [r7, #14]
 800e0cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	4413      	add	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	4413      	add	r3, r2
 800e0e0:	3304      	adds	r3, #4
 800e0e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e0e4:	7bbb      	ldrb	r3, [r7, #14]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d002      	beq.n	800e0f0 <USBD_StdEPReq+0x2d8>
 800e0ea:	7bbb      	ldrb	r3, [r7, #14]
 800e0ec:	2b80      	cmp	r3, #128	; 0x80
 800e0ee:	d103      	bne.n	800e0f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	601a      	str	r2, [r3, #0]
 800e0f6:	e00e      	b.n	800e116 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e0f8:	7bbb      	ldrb	r3, [r7, #14]
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f001 f8d1 	bl	800f2a4 <USBD_LL_IsStallEP>
 800e102:	4603      	mov	r3, r0
 800e104:	2b00      	cmp	r3, #0
 800e106:	d003      	beq.n	800e110 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	2201      	movs	r2, #1
 800e10c:	601a      	str	r2, [r3, #0]
 800e10e:	e002      	b.n	800e116 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	2200      	movs	r2, #0
 800e114:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	2202      	movs	r2, #2
 800e11a:	4619      	mov	r1, r3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 fbfb 	bl	800e918 <USBD_CtlSendData>
              break;
 800e122:	e004      	b.n	800e12e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e124:	6839      	ldr	r1, [r7, #0]
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 fb85 	bl	800e836 <USBD_CtlError>
              break;
 800e12c:	bf00      	nop
          }
          break;
 800e12e:	e004      	b.n	800e13a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fb7f 	bl	800e836 <USBD_CtlError>
          break;
 800e138:	bf00      	nop
      }
      break;
 800e13a:	e005      	b.n	800e148 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e13c:	6839      	ldr	r1, [r7, #0]
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 fb79 	bl	800e836 <USBD_CtlError>
      break;
 800e144:	e000      	b.n	800e148 <USBD_StdEPReq+0x330>
      break;
 800e146:	bf00      	nop
  }

  return ret;
 800e148:	7bfb      	ldrb	r3, [r7, #15]
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
	...

0800e154 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e15e:	2300      	movs	r3, #0
 800e160:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e162:	2300      	movs	r3, #0
 800e164:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e166:	2300      	movs	r3, #0
 800e168:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	885b      	ldrh	r3, [r3, #2]
 800e16e:	0a1b      	lsrs	r3, r3, #8
 800e170:	b29b      	uxth	r3, r3
 800e172:	3b01      	subs	r3, #1
 800e174:	2b0e      	cmp	r3, #14
 800e176:	f200 8152 	bhi.w	800e41e <USBD_GetDescriptor+0x2ca>
 800e17a:	a201      	add	r2, pc, #4	; (adr r2, 800e180 <USBD_GetDescriptor+0x2c>)
 800e17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e180:	0800e1f1 	.word	0x0800e1f1
 800e184:	0800e209 	.word	0x0800e209
 800e188:	0800e249 	.word	0x0800e249
 800e18c:	0800e41f 	.word	0x0800e41f
 800e190:	0800e41f 	.word	0x0800e41f
 800e194:	0800e3bf 	.word	0x0800e3bf
 800e198:	0800e3eb 	.word	0x0800e3eb
 800e19c:	0800e41f 	.word	0x0800e41f
 800e1a0:	0800e41f 	.word	0x0800e41f
 800e1a4:	0800e41f 	.word	0x0800e41f
 800e1a8:	0800e41f 	.word	0x0800e41f
 800e1ac:	0800e41f 	.word	0x0800e41f
 800e1b0:	0800e41f 	.word	0x0800e41f
 800e1b4:	0800e41f 	.word	0x0800e41f
 800e1b8:	0800e1bd 	.word	0x0800e1bd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1c2:	69db      	ldr	r3, [r3, #28]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00b      	beq.n	800e1e0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ce:	69db      	ldr	r3, [r3, #28]
 800e1d0:	687a      	ldr	r2, [r7, #4]
 800e1d2:	7c12      	ldrb	r2, [r2, #16]
 800e1d4:	f107 0108 	add.w	r1, r7, #8
 800e1d8:	4610      	mov	r0, r2
 800e1da:	4798      	blx	r3
 800e1dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1de:	e126      	b.n	800e42e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e1e0:	6839      	ldr	r1, [r7, #0]
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 fb27 	bl	800e836 <USBD_CtlError>
        err++;
 800e1e8:	7afb      	ldrb	r3, [r7, #11]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	72fb      	strb	r3, [r7, #11]
      break;
 800e1ee:	e11e      	b.n	800e42e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	7c12      	ldrb	r2, [r2, #16]
 800e1fc:	f107 0108 	add.w	r1, r7, #8
 800e200:	4610      	mov	r0, r2
 800e202:	4798      	blx	r3
 800e204:	60f8      	str	r0, [r7, #12]
      break;
 800e206:	e112      	b.n	800e42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	7c1b      	ldrb	r3, [r3, #16]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d10d      	bne.n	800e22c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e218:	f107 0208 	add.w	r2, r7, #8
 800e21c:	4610      	mov	r0, r2
 800e21e:	4798      	blx	r3
 800e220:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	3301      	adds	r3, #1
 800e226:	2202      	movs	r2, #2
 800e228:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e22a:	e100      	b.n	800e42e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e234:	f107 0208 	add.w	r2, r7, #8
 800e238:	4610      	mov	r0, r2
 800e23a:	4798      	blx	r3
 800e23c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	3301      	adds	r3, #1
 800e242:	2202      	movs	r2, #2
 800e244:	701a      	strb	r2, [r3, #0]
      break;
 800e246:	e0f2      	b.n	800e42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	885b      	ldrh	r3, [r3, #2]
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	2b05      	cmp	r3, #5
 800e250:	f200 80ac 	bhi.w	800e3ac <USBD_GetDescriptor+0x258>
 800e254:	a201      	add	r2, pc, #4	; (adr r2, 800e25c <USBD_GetDescriptor+0x108>)
 800e256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25a:	bf00      	nop
 800e25c:	0800e275 	.word	0x0800e275
 800e260:	0800e2a9 	.word	0x0800e2a9
 800e264:	0800e2dd 	.word	0x0800e2dd
 800e268:	0800e311 	.word	0x0800e311
 800e26c:	0800e345 	.word	0x0800e345
 800e270:	0800e379 	.word	0x0800e379
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d00b      	beq.n	800e298 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	7c12      	ldrb	r2, [r2, #16]
 800e28c:	f107 0108 	add.w	r1, r7, #8
 800e290:	4610      	mov	r0, r2
 800e292:	4798      	blx	r3
 800e294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e296:	e091      	b.n	800e3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e298:	6839      	ldr	r1, [r7, #0]
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 facb 	bl	800e836 <USBD_CtlError>
            err++;
 800e2a0:	7afb      	ldrb	r3, [r7, #11]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	72fb      	strb	r3, [r7, #11]
          break;
 800e2a6:	e089      	b.n	800e3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2ae:	689b      	ldr	r3, [r3, #8]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d00b      	beq.n	800e2cc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	7c12      	ldrb	r2, [r2, #16]
 800e2c0:	f107 0108 	add.w	r1, r7, #8
 800e2c4:	4610      	mov	r0, r2
 800e2c6:	4798      	blx	r3
 800e2c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2ca:	e077      	b.n	800e3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e2cc:	6839      	ldr	r1, [r7, #0]
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 fab1 	bl	800e836 <USBD_CtlError>
            err++;
 800e2d4:	7afb      	ldrb	r3, [r7, #11]
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	72fb      	strb	r3, [r7, #11]
          break;
 800e2da:	e06f      	b.n	800e3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d00b      	beq.n	800e300 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2ee:	68db      	ldr	r3, [r3, #12]
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	7c12      	ldrb	r2, [r2, #16]
 800e2f4:	f107 0108 	add.w	r1, r7, #8
 800e2f8:	4610      	mov	r0, r2
 800e2fa:	4798      	blx	r3
 800e2fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2fe:	e05d      	b.n	800e3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e300:	6839      	ldr	r1, [r7, #0]
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 fa97 	bl	800e836 <USBD_CtlError>
            err++;
 800e308:	7afb      	ldrb	r3, [r7, #11]
 800e30a:	3301      	adds	r3, #1
 800e30c:	72fb      	strb	r3, [r7, #11]
          break;
 800e30e:	e055      	b.n	800e3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00b      	beq.n	800e334 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e322:	691b      	ldr	r3, [r3, #16]
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	7c12      	ldrb	r2, [r2, #16]
 800e328:	f107 0108 	add.w	r1, r7, #8
 800e32c:	4610      	mov	r0, r2
 800e32e:	4798      	blx	r3
 800e330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e332:	e043      	b.n	800e3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e334:	6839      	ldr	r1, [r7, #0]
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 fa7d 	bl	800e836 <USBD_CtlError>
            err++;
 800e33c:	7afb      	ldrb	r3, [r7, #11]
 800e33e:	3301      	adds	r3, #1
 800e340:	72fb      	strb	r3, [r7, #11]
          break;
 800e342:	e03b      	b.n	800e3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e34a:	695b      	ldr	r3, [r3, #20]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00b      	beq.n	800e368 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e356:	695b      	ldr	r3, [r3, #20]
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	7c12      	ldrb	r2, [r2, #16]
 800e35c:	f107 0108 	add.w	r1, r7, #8
 800e360:	4610      	mov	r0, r2
 800e362:	4798      	blx	r3
 800e364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e366:	e029      	b.n	800e3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e368:	6839      	ldr	r1, [r7, #0]
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 fa63 	bl	800e836 <USBD_CtlError>
            err++;
 800e370:	7afb      	ldrb	r3, [r7, #11]
 800e372:	3301      	adds	r3, #1
 800e374:	72fb      	strb	r3, [r7, #11]
          break;
 800e376:	e021      	b.n	800e3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e37e:	699b      	ldr	r3, [r3, #24]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d00b      	beq.n	800e39c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	687a      	ldr	r2, [r7, #4]
 800e38e:	7c12      	ldrb	r2, [r2, #16]
 800e390:	f107 0108 	add.w	r1, r7, #8
 800e394:	4610      	mov	r0, r2
 800e396:	4798      	blx	r3
 800e398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e39a:	e00f      	b.n	800e3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e39c:	6839      	ldr	r1, [r7, #0]
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 fa49 	bl	800e836 <USBD_CtlError>
            err++;
 800e3a4:	7afb      	ldrb	r3, [r7, #11]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e3aa:	e007      	b.n	800e3bc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e3ac:	6839      	ldr	r1, [r7, #0]
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f000 fa41 	bl	800e836 <USBD_CtlError>
          err++;
 800e3b4:	7afb      	ldrb	r3, [r7, #11]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e3ba:	bf00      	nop
      }
      break;
 800e3bc:	e037      	b.n	800e42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	7c1b      	ldrb	r3, [r3, #16]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d109      	bne.n	800e3da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ce:	f107 0208 	add.w	r2, r7, #8
 800e3d2:	4610      	mov	r0, r2
 800e3d4:	4798      	blx	r3
 800e3d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e3d8:	e029      	b.n	800e42e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e3da:	6839      	ldr	r1, [r7, #0]
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 fa2a 	bl	800e836 <USBD_CtlError>
        err++;
 800e3e2:	7afb      	ldrb	r3, [r7, #11]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	72fb      	strb	r3, [r7, #11]
      break;
 800e3e8:	e021      	b.n	800e42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	7c1b      	ldrb	r3, [r3, #16]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d10d      	bne.n	800e40e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3fa:	f107 0208 	add.w	r2, r7, #8
 800e3fe:	4610      	mov	r0, r2
 800e400:	4798      	blx	r3
 800e402:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	3301      	adds	r3, #1
 800e408:	2207      	movs	r2, #7
 800e40a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e40c:	e00f      	b.n	800e42e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e40e:	6839      	ldr	r1, [r7, #0]
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f000 fa10 	bl	800e836 <USBD_CtlError>
        err++;
 800e416:	7afb      	ldrb	r3, [r7, #11]
 800e418:	3301      	adds	r3, #1
 800e41a:	72fb      	strb	r3, [r7, #11]
      break;
 800e41c:	e007      	b.n	800e42e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e41e:	6839      	ldr	r1, [r7, #0]
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f000 fa08 	bl	800e836 <USBD_CtlError>
      err++;
 800e426:	7afb      	ldrb	r3, [r7, #11]
 800e428:	3301      	adds	r3, #1
 800e42a:	72fb      	strb	r3, [r7, #11]
      break;
 800e42c:	bf00      	nop
  }

  if (err != 0U)
 800e42e:	7afb      	ldrb	r3, [r7, #11]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d11e      	bne.n	800e472 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	88db      	ldrh	r3, [r3, #6]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d016      	beq.n	800e46a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e43c:	893b      	ldrh	r3, [r7, #8]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d00e      	beq.n	800e460 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	88da      	ldrh	r2, [r3, #6]
 800e446:	893b      	ldrh	r3, [r7, #8]
 800e448:	4293      	cmp	r3, r2
 800e44a:	bf28      	it	cs
 800e44c:	4613      	movcs	r3, r2
 800e44e:	b29b      	uxth	r3, r3
 800e450:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e452:	893b      	ldrh	r3, [r7, #8]
 800e454:	461a      	mov	r2, r3
 800e456:	68f9      	ldr	r1, [r7, #12]
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 fa5d 	bl	800e918 <USBD_CtlSendData>
 800e45e:	e009      	b.n	800e474 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e460:	6839      	ldr	r1, [r7, #0]
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 f9e7 	bl	800e836 <USBD_CtlError>
 800e468:	e004      	b.n	800e474 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 faae 	bl	800e9cc <USBD_CtlSendStatus>
 800e470:	e000      	b.n	800e474 <USBD_GetDescriptor+0x320>
    return;
 800e472:	bf00      	nop
  }
}
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop

0800e47c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	889b      	ldrh	r3, [r3, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d131      	bne.n	800e4f2 <USBD_SetAddress+0x76>
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	88db      	ldrh	r3, [r3, #6]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d12d      	bne.n	800e4f2 <USBD_SetAddress+0x76>
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	885b      	ldrh	r3, [r3, #2]
 800e49a:	2b7f      	cmp	r3, #127	; 0x7f
 800e49c:	d829      	bhi.n	800e4f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	885b      	ldrh	r3, [r3, #2]
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	2b03      	cmp	r3, #3
 800e4b4:	d104      	bne.n	800e4c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e4b6:	6839      	ldr	r1, [r7, #0]
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 f9bc 	bl	800e836 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4be:	e01d      	b.n	800e4fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	7bfa      	ldrb	r2, [r7, #15]
 800e4c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e4c8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 ff15 	bl	800f2fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 fa7a 	bl	800e9cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e4d8:	7bfb      	ldrb	r3, [r7, #15]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d004      	beq.n	800e4e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4e6:	e009      	b.n	800e4fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4f0:	e004      	b.n	800e4fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e4f2:	6839      	ldr	r1, [r7, #0]
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f000 f99e 	bl	800e836 <USBD_CtlError>
  }
}
 800e4fa:	bf00      	nop
 800e4fc:	bf00      	nop
 800e4fe:	3710      	adds	r7, #16
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e50e:	2300      	movs	r3, #0
 800e510:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	885b      	ldrh	r3, [r3, #2]
 800e516:	b2da      	uxtb	r2, r3
 800e518:	4b4e      	ldr	r3, [pc, #312]	; (800e654 <USBD_SetConfig+0x150>)
 800e51a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e51c:	4b4d      	ldr	r3, [pc, #308]	; (800e654 <USBD_SetConfig+0x150>)
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	2b01      	cmp	r3, #1
 800e522:	d905      	bls.n	800e530 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e524:	6839      	ldr	r1, [r7, #0]
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f000 f985 	bl	800e836 <USBD_CtlError>
    return USBD_FAIL;
 800e52c:	2303      	movs	r3, #3
 800e52e:	e08c      	b.n	800e64a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e536:	b2db      	uxtb	r3, r3
 800e538:	2b02      	cmp	r3, #2
 800e53a:	d002      	beq.n	800e542 <USBD_SetConfig+0x3e>
 800e53c:	2b03      	cmp	r3, #3
 800e53e:	d029      	beq.n	800e594 <USBD_SetConfig+0x90>
 800e540:	e075      	b.n	800e62e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e542:	4b44      	ldr	r3, [pc, #272]	; (800e654 <USBD_SetConfig+0x150>)
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d020      	beq.n	800e58c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e54a:	4b42      	ldr	r3, [pc, #264]	; (800e654 <USBD_SetConfig+0x150>)
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	461a      	mov	r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e554:	4b3f      	ldr	r3, [pc, #252]	; (800e654 <USBD_SetConfig+0x150>)
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	4619      	mov	r1, r3
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f7fe ffb7 	bl	800d4ce <USBD_SetClassConfig>
 800e560:	4603      	mov	r3, r0
 800e562:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e564:	7bfb      	ldrb	r3, [r7, #15]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d008      	beq.n	800e57c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e56a:	6839      	ldr	r1, [r7, #0]
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f000 f962 	bl	800e836 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2202      	movs	r2, #2
 800e576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e57a:	e065      	b.n	800e648 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 fa25 	bl	800e9cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2203      	movs	r2, #3
 800e586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e58a:	e05d      	b.n	800e648 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 fa1d 	bl	800e9cc <USBD_CtlSendStatus>
      break;
 800e592:	e059      	b.n	800e648 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e594:	4b2f      	ldr	r3, [pc, #188]	; (800e654 <USBD_SetConfig+0x150>)
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d112      	bne.n	800e5c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2202      	movs	r2, #2
 800e5a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e5a4:	4b2b      	ldr	r3, [pc, #172]	; (800e654 <USBD_SetConfig+0x150>)
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e5ae:	4b29      	ldr	r3, [pc, #164]	; (800e654 <USBD_SetConfig+0x150>)
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7fe ffa6 	bl	800d506 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f000 fa06 	bl	800e9cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e5c0:	e042      	b.n	800e648 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e5c2:	4b24      	ldr	r3, [pc, #144]	; (800e654 <USBD_SetConfig+0x150>)
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	685b      	ldr	r3, [r3, #4]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d02a      	beq.n	800e626 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f7fe ff94 	bl	800d506 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e5de:	4b1d      	ldr	r3, [pc, #116]	; (800e654 <USBD_SetConfig+0x150>)
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e5e8:	4b1a      	ldr	r3, [pc, #104]	; (800e654 <USBD_SetConfig+0x150>)
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7fe ff6d 	bl	800d4ce <USBD_SetClassConfig>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d00f      	beq.n	800e61e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e5fe:	6839      	ldr	r1, [r7, #0]
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f000 f918 	bl	800e836 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	4619      	mov	r1, r3
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7fe ff79 	bl	800d506 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2202      	movs	r2, #2
 800e618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e61c:	e014      	b.n	800e648 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f000 f9d4 	bl	800e9cc <USBD_CtlSendStatus>
      break;
 800e624:	e010      	b.n	800e648 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 f9d0 	bl	800e9cc <USBD_CtlSendStatus>
      break;
 800e62c:	e00c      	b.n	800e648 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e62e:	6839      	ldr	r1, [r7, #0]
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 f900 	bl	800e836 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e636:	4b07      	ldr	r3, [pc, #28]	; (800e654 <USBD_SetConfig+0x150>)
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	4619      	mov	r1, r3
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f7fe ff62 	bl	800d506 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e642:	2303      	movs	r3, #3
 800e644:	73fb      	strb	r3, [r7, #15]
      break;
 800e646:	bf00      	nop
  }

  return ret;
 800e648:	7bfb      	ldrb	r3, [r7, #15]
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3710      	adds	r7, #16
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	24000f94 	.word	0x24000f94

0800e658 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	88db      	ldrh	r3, [r3, #6]
 800e666:	2b01      	cmp	r3, #1
 800e668:	d004      	beq.n	800e674 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e66a:	6839      	ldr	r1, [r7, #0]
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f000 f8e2 	bl	800e836 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e672:	e023      	b.n	800e6bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e67a:	b2db      	uxtb	r3, r3
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	dc02      	bgt.n	800e686 <USBD_GetConfig+0x2e>
 800e680:	2b00      	cmp	r3, #0
 800e682:	dc03      	bgt.n	800e68c <USBD_GetConfig+0x34>
 800e684:	e015      	b.n	800e6b2 <USBD_GetConfig+0x5a>
 800e686:	2b03      	cmp	r3, #3
 800e688:	d00b      	beq.n	800e6a2 <USBD_GetConfig+0x4a>
 800e68a:	e012      	b.n	800e6b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	3308      	adds	r3, #8
 800e696:	2201      	movs	r2, #1
 800e698:	4619      	mov	r1, r3
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 f93c 	bl	800e918 <USBD_CtlSendData>
        break;
 800e6a0:	e00c      	b.n	800e6bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	3304      	adds	r3, #4
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 f934 	bl	800e918 <USBD_CtlSendData>
        break;
 800e6b0:	e004      	b.n	800e6bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e6b2:	6839      	ldr	r1, [r7, #0]
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f000 f8be 	bl	800e836 <USBD_CtlError>
        break;
 800e6ba:	bf00      	nop
}
 800e6bc:	bf00      	nop
 800e6be:	3708      	adds	r7, #8
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6d4:	b2db      	uxtb	r3, r3
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	2b02      	cmp	r3, #2
 800e6da:	d81e      	bhi.n	800e71a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	88db      	ldrh	r3, [r3, #6]
 800e6e0:	2b02      	cmp	r3, #2
 800e6e2:	d004      	beq.n	800e6ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e6e4:	6839      	ldr	r1, [r7, #0]
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f000 f8a5 	bl	800e836 <USBD_CtlError>
        break;
 800e6ec:	e01a      	b.n	800e724 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d005      	beq.n	800e70a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	68db      	ldr	r3, [r3, #12]
 800e702:	f043 0202 	orr.w	r2, r3, #2
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	330c      	adds	r3, #12
 800e70e:	2202      	movs	r2, #2
 800e710:	4619      	mov	r1, r3
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f000 f900 	bl	800e918 <USBD_CtlSendData>
      break;
 800e718:	e004      	b.n	800e724 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 f88a 	bl	800e836 <USBD_CtlError>
      break;
 800e722:	bf00      	nop
  }
}
 800e724:	bf00      	nop
 800e726:	3708      	adds	r7, #8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	885b      	ldrh	r3, [r3, #2]
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d107      	bne.n	800e74e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2201      	movs	r2, #1
 800e742:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 f940 	bl	800e9cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e74c:	e013      	b.n	800e776 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	885b      	ldrh	r3, [r3, #2]
 800e752:	2b02      	cmp	r3, #2
 800e754:	d10b      	bne.n	800e76e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	889b      	ldrh	r3, [r3, #4]
 800e75a:	0a1b      	lsrs	r3, r3, #8
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	b2da      	uxtb	r2, r3
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f000 f930 	bl	800e9cc <USBD_CtlSendStatus>
}
 800e76c:	e003      	b.n	800e776 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e76e:	6839      	ldr	r1, [r7, #0]
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f000 f860 	bl	800e836 <USBD_CtlError>
}
 800e776:	bf00      	nop
 800e778:	3708      	adds	r7, #8
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e77e:	b580      	push	{r7, lr}
 800e780:	b082      	sub	sp, #8
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
 800e786:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	3b01      	subs	r3, #1
 800e792:	2b02      	cmp	r3, #2
 800e794:	d80b      	bhi.n	800e7ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	885b      	ldrh	r3, [r3, #2]
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	d10c      	bne.n	800e7b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 f910 	bl	800e9cc <USBD_CtlSendStatus>
      }
      break;
 800e7ac:	e004      	b.n	800e7b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e7ae:	6839      	ldr	r1, [r7, #0]
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 f840 	bl	800e836 <USBD_CtlError>
      break;
 800e7b6:	e000      	b.n	800e7ba <USBD_ClrFeature+0x3c>
      break;
 800e7b8:	bf00      	nop
  }
}
 800e7ba:	bf00      	nop
 800e7bc:	3708      	adds	r7, #8
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b084      	sub	sp, #16
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	781a      	ldrb	r2, [r3, #0]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	3301      	adds	r3, #1
 800e7dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	781a      	ldrb	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e7ec:	68f8      	ldr	r0, [r7, #12]
 800e7ee:	f7ff fa17 	bl	800dc20 <SWAPBYTE>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	3301      	adds	r3, #1
 800e804:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f7ff fa0a 	bl	800dc20 <SWAPBYTE>
 800e80c:	4603      	mov	r3, r0
 800e80e:	461a      	mov	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	3301      	adds	r3, #1
 800e818:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	3301      	adds	r3, #1
 800e81e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	f7ff f9fd 	bl	800dc20 <SWAPBYTE>
 800e826:	4603      	mov	r3, r0
 800e828:	461a      	mov	r2, r3
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	80da      	strh	r2, [r3, #6]
}
 800e82e:	bf00      	nop
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b082      	sub	sp, #8
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
 800e83e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e840:	2180      	movs	r1, #128	; 0x80
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 fcf0 	bl	800f228 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e848:	2100      	movs	r1, #0
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 fcec 	bl	800f228 <USBD_LL_StallEP>
}
 800e850:	bf00      	nop
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b086      	sub	sp, #24
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	60f8      	str	r0, [r7, #12]
 800e860:	60b9      	str	r1, [r7, #8]
 800e862:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e864:	2300      	movs	r3, #0
 800e866:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d036      	beq.n	800e8dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e872:	6938      	ldr	r0, [r7, #16]
 800e874:	f000 f836 	bl	800e8e4 <USBD_GetLen>
 800e878:	4603      	mov	r3, r0
 800e87a:	3301      	adds	r3, #1
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	005b      	lsls	r3, r3, #1
 800e880:	b29a      	uxth	r2, r3
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e886:	7dfb      	ldrb	r3, [r7, #23]
 800e888:	68ba      	ldr	r2, [r7, #8]
 800e88a:	4413      	add	r3, r2
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	7812      	ldrb	r2, [r2, #0]
 800e890:	701a      	strb	r2, [r3, #0]
  idx++;
 800e892:	7dfb      	ldrb	r3, [r7, #23]
 800e894:	3301      	adds	r3, #1
 800e896:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e898:	7dfb      	ldrb	r3, [r7, #23]
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	4413      	add	r3, r2
 800e89e:	2203      	movs	r2, #3
 800e8a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e8a2:	7dfb      	ldrb	r3, [r7, #23]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e8a8:	e013      	b.n	800e8d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e8aa:	7dfb      	ldrb	r3, [r7, #23]
 800e8ac:	68ba      	ldr	r2, [r7, #8]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	693a      	ldr	r2, [r7, #16]
 800e8b2:	7812      	ldrb	r2, [r2, #0]
 800e8b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	613b      	str	r3, [r7, #16]
    idx++;
 800e8bc:	7dfb      	ldrb	r3, [r7, #23]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e8c2:	7dfb      	ldrb	r3, [r7, #23]
 800e8c4:	68ba      	ldr	r2, [r7, #8]
 800e8c6:	4413      	add	r3, r2
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	701a      	strb	r2, [r3, #0]
    idx++;
 800e8cc:	7dfb      	ldrb	r3, [r7, #23]
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1e7      	bne.n	800e8aa <USBD_GetString+0x52>
 800e8da:	e000      	b.n	800e8de <USBD_GetString+0x86>
    return;
 800e8dc:	bf00      	nop
  }
}
 800e8de:	3718      	adds	r7, #24
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b085      	sub	sp, #20
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e8f4:	e005      	b.n	800e902 <USBD_GetLen+0x1e>
  {
    len++;
 800e8f6:	7bfb      	ldrb	r3, [r7, #15]
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	3301      	adds	r3, #1
 800e900:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d1f5      	bne.n	800e8f6 <USBD_GetLen+0x12>
  }

  return len;
 800e90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3714      	adds	r7, #20
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr

0800e918 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2202      	movs	r2, #2
 800e928:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	68ba      	ldr	r2, [r7, #8]
 800e93c:	2100      	movs	r1, #0
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f000 fcfb 	bl	800f33a <USBD_LL_Transmit>

  return USBD_OK;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e94e:	b580      	push	{r7, lr}
 800e950:	b084      	sub	sp, #16
 800e952:	af00      	add	r7, sp, #0
 800e954:	60f8      	str	r0, [r7, #12]
 800e956:	60b9      	str	r1, [r7, #8]
 800e958:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	68ba      	ldr	r2, [r7, #8]
 800e95e:	2100      	movs	r1, #0
 800e960:	68f8      	ldr	r0, [r7, #12]
 800e962:	f000 fcea 	bl	800f33a <USBD_LL_Transmit>

  return USBD_OK;
 800e966:	2300      	movs	r3, #0
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	60b9      	str	r1, [r7, #8]
 800e97a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2203      	movs	r2, #3
 800e980:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	2100      	movs	r1, #0
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f000 fcee 	bl	800f37c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9a0:	2300      	movs	r3, #0
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3710      	adds	r7, #16
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b084      	sub	sp, #16
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	60f8      	str	r0, [r7, #12]
 800e9b2:	60b9      	str	r1, [r7, #8]
 800e9b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	68ba      	ldr	r2, [r7, #8]
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f000 fcdd 	bl	800f37c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9c2:	2300      	movs	r3, #0
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3710      	adds	r7, #16
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2204      	movs	r2, #4
 800e9d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e9dc:	2300      	movs	r3, #0
 800e9de:	2200      	movs	r2, #0
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f000 fca9 	bl	800f33a <USBD_LL_Transmit>

  return USBD_OK;
 800e9e8:	2300      	movs	r3, #0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3708      	adds	r7, #8
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}

0800e9f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e9f2:	b580      	push	{r7, lr}
 800e9f4:	b082      	sub	sp, #8
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2205      	movs	r2, #5
 800e9fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ea02:	2300      	movs	r3, #0
 800ea04:	2200      	movs	r2, #0
 800ea06:	2100      	movs	r1, #0
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 fcb7 	bl	800f37c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea0e:	2300      	movs	r3, #0
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3708      	adds	r7, #8
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	4913      	ldr	r1, [pc, #76]	; (800ea6c <MX_USB_DEVICE_Init+0x54>)
 800ea20:	4813      	ldr	r0, [pc, #76]	; (800ea70 <MX_USB_DEVICE_Init+0x58>)
 800ea22:	f7fe fcd7 	bl	800d3d4 <USBD_Init>
 800ea26:	4603      	mov	r3, r0
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ea2c:	f7f2 fd22 	bl	8001474 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ea30:	4910      	ldr	r1, [pc, #64]	; (800ea74 <MX_USB_DEVICE_Init+0x5c>)
 800ea32:	480f      	ldr	r0, [pc, #60]	; (800ea70 <MX_USB_DEVICE_Init+0x58>)
 800ea34:	f7fe fcfe 	bl	800d434 <USBD_RegisterClass>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d001      	beq.n	800ea42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ea3e:	f7f2 fd19 	bl	8001474 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ea42:	490d      	ldr	r1, [pc, #52]	; (800ea78 <MX_USB_DEVICE_Init+0x60>)
 800ea44:	480a      	ldr	r0, [pc, #40]	; (800ea70 <MX_USB_DEVICE_Init+0x58>)
 800ea46:	f7fe fbf5 	bl	800d234 <USBD_CDC_RegisterInterface>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d001      	beq.n	800ea54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ea50:	f7f2 fd10 	bl	8001474 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ea54:	4806      	ldr	r0, [pc, #24]	; (800ea70 <MX_USB_DEVICE_Init+0x58>)
 800ea56:	f7fe fd23 	bl	800d4a0 <USBD_Start>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d001      	beq.n	800ea64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ea60:	f7f2 fd08 	bl	8001474 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800ea64:	f7f7 fb9e 	bl	80061a4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ea68:	bf00      	nop
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	240000b0 	.word	0x240000b0
 800ea70:	24000f98 	.word	0x24000f98
 800ea74:	2400001c 	.word	0x2400001c
 800ea78:	2400009c 	.word	0x2400009c

0800ea7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ea80:	2200      	movs	r2, #0
 800ea82:	4905      	ldr	r1, [pc, #20]	; (800ea98 <CDC_Init_FS+0x1c>)
 800ea84:	4805      	ldr	r0, [pc, #20]	; (800ea9c <CDC_Init_FS+0x20>)
 800ea86:	f7fe fbef 	bl	800d268 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ea8a:	4905      	ldr	r1, [pc, #20]	; (800eaa0 <CDC_Init_FS+0x24>)
 800ea8c:	4803      	ldr	r0, [pc, #12]	; (800ea9c <CDC_Init_FS+0x20>)
 800ea8e:	f7fe fc0d 	bl	800d2ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ea92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	24001a74 	.word	0x24001a74
 800ea9c:	24000f98 	.word	0x24000f98
 800eaa0:	24001274 	.word	0x24001274

0800eaa4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800eaa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr

0800eab4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	4603      	mov	r3, r0
 800eabc:	6039      	str	r1, [r7, #0]
 800eabe:	71fb      	strb	r3, [r7, #7]
 800eac0:	4613      	mov	r3, r2
 800eac2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800eac4:	79fb      	ldrb	r3, [r7, #7]
 800eac6:	2b23      	cmp	r3, #35	; 0x23
 800eac8:	d84a      	bhi.n	800eb60 <CDC_Control_FS+0xac>
 800eaca:	a201      	add	r2, pc, #4	; (adr r2, 800ead0 <CDC_Control_FS+0x1c>)
 800eacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ead0:	0800eb61 	.word	0x0800eb61
 800ead4:	0800eb61 	.word	0x0800eb61
 800ead8:	0800eb61 	.word	0x0800eb61
 800eadc:	0800eb61 	.word	0x0800eb61
 800eae0:	0800eb61 	.word	0x0800eb61
 800eae4:	0800eb61 	.word	0x0800eb61
 800eae8:	0800eb61 	.word	0x0800eb61
 800eaec:	0800eb61 	.word	0x0800eb61
 800eaf0:	0800eb61 	.word	0x0800eb61
 800eaf4:	0800eb61 	.word	0x0800eb61
 800eaf8:	0800eb61 	.word	0x0800eb61
 800eafc:	0800eb61 	.word	0x0800eb61
 800eb00:	0800eb61 	.word	0x0800eb61
 800eb04:	0800eb61 	.word	0x0800eb61
 800eb08:	0800eb61 	.word	0x0800eb61
 800eb0c:	0800eb61 	.word	0x0800eb61
 800eb10:	0800eb61 	.word	0x0800eb61
 800eb14:	0800eb61 	.word	0x0800eb61
 800eb18:	0800eb61 	.word	0x0800eb61
 800eb1c:	0800eb61 	.word	0x0800eb61
 800eb20:	0800eb61 	.word	0x0800eb61
 800eb24:	0800eb61 	.word	0x0800eb61
 800eb28:	0800eb61 	.word	0x0800eb61
 800eb2c:	0800eb61 	.word	0x0800eb61
 800eb30:	0800eb61 	.word	0x0800eb61
 800eb34:	0800eb61 	.word	0x0800eb61
 800eb38:	0800eb61 	.word	0x0800eb61
 800eb3c:	0800eb61 	.word	0x0800eb61
 800eb40:	0800eb61 	.word	0x0800eb61
 800eb44:	0800eb61 	.word	0x0800eb61
 800eb48:	0800eb61 	.word	0x0800eb61
 800eb4c:	0800eb61 	.word	0x0800eb61
 800eb50:	0800eb61 	.word	0x0800eb61
 800eb54:	0800eb61 	.word	0x0800eb61
 800eb58:	0800eb61 	.word	0x0800eb61
 800eb5c:	0800eb61 	.word	0x0800eb61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eb60:	bf00      	nop
  }

  return (USBD_OK);
 800eb62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	370c      	adds	r7, #12
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eb7a:	6879      	ldr	r1, [r7, #4]
 800eb7c:	4805      	ldr	r0, [pc, #20]	; (800eb94 <CDC_Receive_FS+0x24>)
 800eb7e:	f7fe fb95 	bl	800d2ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eb82:	4804      	ldr	r0, [pc, #16]	; (800eb94 <CDC_Receive_FS+0x24>)
 800eb84:	f7fe fbf0 	bl	800d368 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800eb88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	24000f98 	.word	0x24000f98

0800eb98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b087      	sub	sp, #28
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	60f8      	str	r0, [r7, #12]
 800eba0:	60b9      	str	r1, [r7, #8]
 800eba2:	4613      	mov	r3, r2
 800eba4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eba6:	2300      	movs	r3, #0
 800eba8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ebaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	371c      	adds	r7, #28
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb8:	4770      	bx	lr
	...

0800ebbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	6039      	str	r1, [r7, #0]
 800ebc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	2212      	movs	r2, #18
 800ebcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ebce:	4b03      	ldr	r3, [pc, #12]	; (800ebdc <USBD_FS_DeviceDescriptor+0x20>)
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	370c      	adds	r7, #12
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr
 800ebdc:	240000d0 	.word	0x240000d0

0800ebe0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b083      	sub	sp, #12
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	6039      	str	r1, [r7, #0]
 800ebea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	2204      	movs	r2, #4
 800ebf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ebf2:	4b03      	ldr	r3, [pc, #12]	; (800ec00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	370c      	adds	r7, #12
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr
 800ec00:	240000e4 	.word	0x240000e4

0800ec04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	6039      	str	r1, [r7, #0]
 800ec0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec10:	79fb      	ldrb	r3, [r7, #7]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d105      	bne.n	800ec22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ec16:	683a      	ldr	r2, [r7, #0]
 800ec18:	4907      	ldr	r1, [pc, #28]	; (800ec38 <USBD_FS_ProductStrDescriptor+0x34>)
 800ec1a:	4808      	ldr	r0, [pc, #32]	; (800ec3c <USBD_FS_ProductStrDescriptor+0x38>)
 800ec1c:	f7ff fe1c 	bl	800e858 <USBD_GetString>
 800ec20:	e004      	b.n	800ec2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ec22:	683a      	ldr	r2, [r7, #0]
 800ec24:	4904      	ldr	r1, [pc, #16]	; (800ec38 <USBD_FS_ProductStrDescriptor+0x34>)
 800ec26:	4805      	ldr	r0, [pc, #20]	; (800ec3c <USBD_FS_ProductStrDescriptor+0x38>)
 800ec28:	f7ff fe16 	bl	800e858 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec2c:	4b02      	ldr	r3, [pc, #8]	; (800ec38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	24002274 	.word	0x24002274
 800ec3c:	08010298 	.word	0x08010298

0800ec40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	4603      	mov	r3, r0
 800ec48:	6039      	str	r1, [r7, #0]
 800ec4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ec4c:	683a      	ldr	r2, [r7, #0]
 800ec4e:	4904      	ldr	r1, [pc, #16]	; (800ec60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ec50:	4804      	ldr	r0, [pc, #16]	; (800ec64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ec52:	f7ff fe01 	bl	800e858 <USBD_GetString>
  return USBD_StrDesc;
 800ec56:	4b02      	ldr	r3, [pc, #8]	; (800ec60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	24002274 	.word	0x24002274
 800ec64:	080102b0 	.word	0x080102b0

0800ec68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	4603      	mov	r3, r0
 800ec70:	6039      	str	r1, [r7, #0]
 800ec72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	221a      	movs	r2, #26
 800ec78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ec7a:	f000 f843 	bl	800ed04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ec7e:	4b02      	ldr	r3, [pc, #8]	; (800ec88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	240000e8 	.word	0x240000e8

0800ec8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	4603      	mov	r3, r0
 800ec94:	6039      	str	r1, [r7, #0]
 800ec96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ec98:	79fb      	ldrb	r3, [r7, #7]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d105      	bne.n	800ecaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ec9e:	683a      	ldr	r2, [r7, #0]
 800eca0:	4907      	ldr	r1, [pc, #28]	; (800ecc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eca2:	4808      	ldr	r0, [pc, #32]	; (800ecc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eca4:	f7ff fdd8 	bl	800e858 <USBD_GetString>
 800eca8:	e004      	b.n	800ecb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ecaa:	683a      	ldr	r2, [r7, #0]
 800ecac:	4904      	ldr	r1, [pc, #16]	; (800ecc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ecae:	4805      	ldr	r0, [pc, #20]	; (800ecc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ecb0:	f7ff fdd2 	bl	800e858 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ecb4:	4b02      	ldr	r3, [pc, #8]	; (800ecc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3708      	adds	r7, #8
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	24002274 	.word	0x24002274
 800ecc4:	080102c4 	.word	0x080102c4

0800ecc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	4603      	mov	r3, r0
 800ecd0:	6039      	str	r1, [r7, #0]
 800ecd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ecd4:	79fb      	ldrb	r3, [r7, #7]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d105      	bne.n	800ece6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ecda:	683a      	ldr	r2, [r7, #0]
 800ecdc:	4907      	ldr	r1, [pc, #28]	; (800ecfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ecde:	4808      	ldr	r0, [pc, #32]	; (800ed00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ece0:	f7ff fdba 	bl	800e858 <USBD_GetString>
 800ece4:	e004      	b.n	800ecf0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ece6:	683a      	ldr	r2, [r7, #0]
 800ece8:	4904      	ldr	r1, [pc, #16]	; (800ecfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ecea:	4805      	ldr	r0, [pc, #20]	; (800ed00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ecec:	f7ff fdb4 	bl	800e858 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ecf0:	4b02      	ldr	r3, [pc, #8]	; (800ecfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3708      	adds	r7, #8
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	24002274 	.word	0x24002274
 800ed00:	080102d0 	.word	0x080102d0

0800ed04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b084      	sub	sp, #16
 800ed08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ed0a:	4b0f      	ldr	r3, [pc, #60]	; (800ed48 <Get_SerialNum+0x44>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ed10:	4b0e      	ldr	r3, [pc, #56]	; (800ed4c <Get_SerialNum+0x48>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ed16:	4b0e      	ldr	r3, [pc, #56]	; (800ed50 <Get_SerialNum+0x4c>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ed1c:	68fa      	ldr	r2, [r7, #12]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4413      	add	r3, r2
 800ed22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d009      	beq.n	800ed3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ed2a:	2208      	movs	r2, #8
 800ed2c:	4909      	ldr	r1, [pc, #36]	; (800ed54 <Get_SerialNum+0x50>)
 800ed2e:	68f8      	ldr	r0, [r7, #12]
 800ed30:	f000 f814 	bl	800ed5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ed34:	2204      	movs	r2, #4
 800ed36:	4908      	ldr	r1, [pc, #32]	; (800ed58 <Get_SerialNum+0x54>)
 800ed38:	68b8      	ldr	r0, [r7, #8]
 800ed3a:	f000 f80f 	bl	800ed5c <IntToUnicode>
  }
}
 800ed3e:	bf00      	nop
 800ed40:	3710      	adds	r7, #16
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	1ff1e800 	.word	0x1ff1e800
 800ed4c:	1ff1e804 	.word	0x1ff1e804
 800ed50:	1ff1e808 	.word	0x1ff1e808
 800ed54:	240000ea 	.word	0x240000ea
 800ed58:	240000fa 	.word	0x240000fa

0800ed5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b087      	sub	sp, #28
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	60f8      	str	r0, [r7, #12]
 800ed64:	60b9      	str	r1, [r7, #8]
 800ed66:	4613      	mov	r3, r2
 800ed68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ed6e:	2300      	movs	r3, #0
 800ed70:	75fb      	strb	r3, [r7, #23]
 800ed72:	e027      	b.n	800edc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	0f1b      	lsrs	r3, r3, #28
 800ed78:	2b09      	cmp	r3, #9
 800ed7a:	d80b      	bhi.n	800ed94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	0f1b      	lsrs	r3, r3, #28
 800ed80:	b2da      	uxtb	r2, r3
 800ed82:	7dfb      	ldrb	r3, [r7, #23]
 800ed84:	005b      	lsls	r3, r3, #1
 800ed86:	4619      	mov	r1, r3
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	440b      	add	r3, r1
 800ed8c:	3230      	adds	r2, #48	; 0x30
 800ed8e:	b2d2      	uxtb	r2, r2
 800ed90:	701a      	strb	r2, [r3, #0]
 800ed92:	e00a      	b.n	800edaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	0f1b      	lsrs	r3, r3, #28
 800ed98:	b2da      	uxtb	r2, r3
 800ed9a:	7dfb      	ldrb	r3, [r7, #23]
 800ed9c:	005b      	lsls	r3, r3, #1
 800ed9e:	4619      	mov	r1, r3
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	440b      	add	r3, r1
 800eda4:	3237      	adds	r2, #55	; 0x37
 800eda6:	b2d2      	uxtb	r2, r2
 800eda8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	011b      	lsls	r3, r3, #4
 800edae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800edb0:	7dfb      	ldrb	r3, [r7, #23]
 800edb2:	005b      	lsls	r3, r3, #1
 800edb4:	3301      	adds	r3, #1
 800edb6:	68ba      	ldr	r2, [r7, #8]
 800edb8:	4413      	add	r3, r2
 800edba:	2200      	movs	r2, #0
 800edbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800edbe:	7dfb      	ldrb	r3, [r7, #23]
 800edc0:	3301      	adds	r3, #1
 800edc2:	75fb      	strb	r3, [r7, #23]
 800edc4:	7dfa      	ldrb	r2, [r7, #23]
 800edc6:	79fb      	ldrb	r3, [r7, #7]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d3d3      	bcc.n	800ed74 <IntToUnicode+0x18>
  }
}
 800edcc:	bf00      	nop
 800edce:	bf00      	nop
 800edd0:	371c      	adds	r7, #28
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr
	...

0800eddc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b0ba      	sub	sp, #232	; 0xe8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ede4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ede8:	2200      	movs	r2, #0
 800edea:	601a      	str	r2, [r3, #0]
 800edec:	605a      	str	r2, [r3, #4]
 800edee:	609a      	str	r2, [r3, #8]
 800edf0:	60da      	str	r2, [r3, #12]
 800edf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800edf4:	f107 0310 	add.w	r3, r7, #16
 800edf8:	22c0      	movs	r2, #192	; 0xc0
 800edfa:	2100      	movs	r1, #0
 800edfc:	4618      	mov	r0, r3
 800edfe:	f001 f92d 	bl	801005c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	4a34      	ldr	r2, [pc, #208]	; (800eed8 <HAL_PCD_MspInit+0xfc>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d161      	bne.n	800eed0 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ee0c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ee10:	f04f 0300 	mov.w	r3, #0
 800ee14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800ee18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ee1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ee20:	f107 0310 	add.w	r3, r7, #16
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7f8 f9b3 	bl	8007190 <HAL_RCCEx_PeriphCLKConfig>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d001      	beq.n	800ee34 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800ee30:	f7f2 fb20 	bl	8001474 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800ee34:	f7f7 f9b6 	bl	80061a4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee38:	4b28      	ldr	r3, [pc, #160]	; (800eedc <HAL_PCD_MspInit+0x100>)
 800ee3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee3e:	4a27      	ldr	r2, [pc, #156]	; (800eedc <HAL_PCD_MspInit+0x100>)
 800ee40:	f043 0301 	orr.w	r3, r3, #1
 800ee44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ee48:	4b24      	ldr	r3, [pc, #144]	; (800eedc <HAL_PCD_MspInit+0x100>)
 800ee4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee4e:	f003 0301 	and.w	r3, r3, #1
 800ee52:	60fb      	str	r3, [r7, #12]
 800ee54:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ee56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ee5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee5e:	2302      	movs	r3, #2
 800ee60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee64:	2300      	movs	r3, #0
 800ee66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800ee70:	230a      	movs	r3, #10
 800ee72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee76:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	4818      	ldr	r0, [pc, #96]	; (800eee0 <HAL_PCD_MspInit+0x104>)
 800ee7e:	f7f5 fced 	bl	800485c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ee82:	4b16      	ldr	r3, [pc, #88]	; (800eedc <HAL_PCD_MspInit+0x100>)
 800ee84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ee88:	4a14      	ldr	r2, [pc, #80]	; (800eedc <HAL_PCD_MspInit+0x100>)
 800ee8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ee8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ee92:	4b12      	ldr	r3, [pc, #72]	; (800eedc <HAL_PCD_MspInit+0x100>)
 800ee94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ee98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee9c:	60bb      	str	r3, [r7, #8]
 800ee9e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 800eea0:	2200      	movs	r2, #0
 800eea2:	2100      	movs	r1, #0
 800eea4:	2062      	movs	r0, #98	; 0x62
 800eea6:	f7f4 fb8e 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 800eeaa:	2062      	movs	r0, #98	; 0x62
 800eeac:	f7f4 fba5 	bl	80035fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	2100      	movs	r1, #0
 800eeb4:	2063      	movs	r0, #99	; 0x63
 800eeb6:	f7f4 fb86 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 800eeba:	2063      	movs	r0, #99	; 0x63
 800eebc:	f7f4 fb9d 	bl	80035fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eec0:	2200      	movs	r2, #0
 800eec2:	2100      	movs	r1, #0
 800eec4:	2065      	movs	r0, #101	; 0x65
 800eec6:	f7f4 fb7e 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eeca:	2065      	movs	r0, #101	; 0x65
 800eecc:	f7f4 fb95 	bl	80035fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eed0:	bf00      	nop
 800eed2:	37e8      	adds	r7, #232	; 0xe8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	40080000 	.word	0x40080000
 800eedc:	58024400 	.word	0x58024400
 800eee0:	58020000 	.word	0x58020000

0800eee4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800eef8:	4619      	mov	r1, r3
 800eefa:	4610      	mov	r0, r2
 800eefc:	f7fe fb1d 	bl	800d53a <USBD_LL_SetupStage>
}
 800ef00:	bf00      	nop
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	460b      	mov	r3, r1
 800ef12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ef1a:	78fa      	ldrb	r2, [r7, #3]
 800ef1c:	6879      	ldr	r1, [r7, #4]
 800ef1e:	4613      	mov	r3, r2
 800ef20:	00db      	lsls	r3, r3, #3
 800ef22:	4413      	add	r3, r2
 800ef24:	009b      	lsls	r3, r3, #2
 800ef26:	440b      	add	r3, r1
 800ef28:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ef2c:	681a      	ldr	r2, [r3, #0]
 800ef2e:	78fb      	ldrb	r3, [r7, #3]
 800ef30:	4619      	mov	r1, r3
 800ef32:	f7fe fb57 	bl	800d5e4 <USBD_LL_DataOutStage>
}
 800ef36:	bf00      	nop
 800ef38:	3708      	adds	r7, #8
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b082      	sub	sp, #8
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
 800ef46:	460b      	mov	r3, r1
 800ef48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ef50:	78fa      	ldrb	r2, [r7, #3]
 800ef52:	6879      	ldr	r1, [r7, #4]
 800ef54:	4613      	mov	r3, r2
 800ef56:	00db      	lsls	r3, r3, #3
 800ef58:	4413      	add	r3, r2
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	440b      	add	r3, r1
 800ef5e:	3348      	adds	r3, #72	; 0x48
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	78fb      	ldrb	r3, [r7, #3]
 800ef64:	4619      	mov	r1, r3
 800ef66:	f7fe fbf0 	bl	800d74a <USBD_LL_DataInStage>
}
 800ef6a:	bf00      	nop
 800ef6c:	3708      	adds	r7, #8
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}

0800ef72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef72:	b580      	push	{r7, lr}
 800ef74:	b082      	sub	sp, #8
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7fe fd2a 	bl	800d9da <USBD_LL_SOF>
}
 800ef86:	bf00      	nop
 800ef88:	3708      	adds	r7, #8
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef8e:	b580      	push	{r7, lr}
 800ef90:	b084      	sub	sp, #16
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ef96:	2301      	movs	r3, #1
 800ef98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	691b      	ldr	r3, [r3, #16]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d102      	bne.n	800efa8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800efa2:	2300      	movs	r3, #0
 800efa4:	73fb      	strb	r3, [r7, #15]
 800efa6:	e008      	b.n	800efba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	691b      	ldr	r3, [r3, #16]
 800efac:	2b02      	cmp	r3, #2
 800efae:	d102      	bne.n	800efb6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800efb0:	2301      	movs	r3, #1
 800efb2:	73fb      	strb	r3, [r7, #15]
 800efb4:	e001      	b.n	800efba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800efb6:	f7f2 fa5d 	bl	8001474 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efc0:	7bfa      	ldrb	r2, [r7, #15]
 800efc2:	4611      	mov	r1, r2
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7fe fcc4 	bl	800d952 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7fe fc6c 	bl	800d8ae <USBD_LL_Reset>
}
 800efd6:	bf00      	nop
 800efd8:	3710      	adds	r7, #16
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
	...

0800efe0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b082      	sub	sp, #8
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fe fcbf 	bl	800d972 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	6812      	ldr	r2, [r2, #0]
 800f002:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f006:	f043 0301 	orr.w	r3, r3, #1
 800f00a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6a1b      	ldr	r3, [r3, #32]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d005      	beq.n	800f020 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f014:	4b04      	ldr	r3, [pc, #16]	; (800f028 <HAL_PCD_SuspendCallback+0x48>)
 800f016:	691b      	ldr	r3, [r3, #16]
 800f018:	4a03      	ldr	r2, [pc, #12]	; (800f028 <HAL_PCD_SuspendCallback+0x48>)
 800f01a:	f043 0306 	orr.w	r3, r3, #6
 800f01e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f020:	bf00      	nop
 800f022:	3708      	adds	r7, #8
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}
 800f028:	e000ed00 	.word	0xe000ed00

0800f02c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7fe fcb5 	bl	800d9aa <USBD_LL_Resume>
}
 800f040:	bf00      	nop
 800f042:	3708      	adds	r7, #8
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}

0800f048 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b082      	sub	sp, #8
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	460b      	mov	r3, r1
 800f052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f05a:	78fa      	ldrb	r2, [r7, #3]
 800f05c:	4611      	mov	r1, r2
 800f05e:	4618      	mov	r0, r3
 800f060:	f7fe fd0d 	bl	800da7e <USBD_LL_IsoOUTIncomplete>
}
 800f064:	bf00      	nop
 800f066:	3708      	adds	r7, #8
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	460b      	mov	r3, r1
 800f076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f07e:	78fa      	ldrb	r2, [r7, #3]
 800f080:	4611      	mov	r1, r2
 800f082:	4618      	mov	r0, r3
 800f084:	f7fe fcc9 	bl	800da1a <USBD_LL_IsoINIncomplete>
}
 800f088:	bf00      	nop
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7fe fd1f 	bl	800dae2 <USBD_LL_DevConnected>
}
 800f0a4:	bf00      	nop
 800f0a6:	3708      	adds	r7, #8
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b082      	sub	sp, #8
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7fe fd1c 	bl	800daf8 <USBD_LL_DevDisconnected>
}
 800f0c0:	bf00      	nop
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d13e      	bne.n	800f156 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f0d8:	4a21      	ldr	r2, [pc, #132]	; (800f160 <USBD_LL_Init+0x98>)
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	4a1f      	ldr	r2, [pc, #124]	; (800f160 <USBD_LL_Init+0x98>)
 800f0e4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f0e8:	4b1d      	ldr	r3, [pc, #116]	; (800f160 <USBD_LL_Init+0x98>)
 800f0ea:	4a1e      	ldr	r2, [pc, #120]	; (800f164 <USBD_LL_Init+0x9c>)
 800f0ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f0ee:	4b1c      	ldr	r3, [pc, #112]	; (800f160 <USBD_LL_Init+0x98>)
 800f0f0:	2209      	movs	r2, #9
 800f0f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f0f4:	4b1a      	ldr	r3, [pc, #104]	; (800f160 <USBD_LL_Init+0x98>)
 800f0f6:	2202      	movs	r2, #2
 800f0f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f0fa:	4b19      	ldr	r3, [pc, #100]	; (800f160 <USBD_LL_Init+0x98>)
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f100:	4b17      	ldr	r3, [pc, #92]	; (800f160 <USBD_LL_Init+0x98>)
 800f102:	2202      	movs	r2, #2
 800f104:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f106:	4b16      	ldr	r3, [pc, #88]	; (800f160 <USBD_LL_Init+0x98>)
 800f108:	2200      	movs	r2, #0
 800f10a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f10c:	4b14      	ldr	r3, [pc, #80]	; (800f160 <USBD_LL_Init+0x98>)
 800f10e:	2200      	movs	r2, #0
 800f110:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f112:	4b13      	ldr	r3, [pc, #76]	; (800f160 <USBD_LL_Init+0x98>)
 800f114:	2200      	movs	r2, #0
 800f116:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f118:	4b11      	ldr	r3, [pc, #68]	; (800f160 <USBD_LL_Init+0x98>)
 800f11a:	2200      	movs	r2, #0
 800f11c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f11e:	4b10      	ldr	r3, [pc, #64]	; (800f160 <USBD_LL_Init+0x98>)
 800f120:	2200      	movs	r2, #0
 800f122:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f124:	4b0e      	ldr	r3, [pc, #56]	; (800f160 <USBD_LL_Init+0x98>)
 800f126:	2200      	movs	r2, #0
 800f128:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f12a:	480d      	ldr	r0, [pc, #52]	; (800f160 <USBD_LL_Init+0x98>)
 800f12c:	f7f5 fd46 	bl	8004bbc <HAL_PCD_Init>
 800f130:	4603      	mov	r3, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	d001      	beq.n	800f13a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f136:	f7f2 f99d 	bl	8001474 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f13a:	2180      	movs	r1, #128	; 0x80
 800f13c:	4808      	ldr	r0, [pc, #32]	; (800f160 <USBD_LL_Init+0x98>)
 800f13e:	f7f6 ffb6 	bl	80060ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f142:	2240      	movs	r2, #64	; 0x40
 800f144:	2100      	movs	r1, #0
 800f146:	4806      	ldr	r0, [pc, #24]	; (800f160 <USBD_LL_Init+0x98>)
 800f148:	f7f6 ff6a 	bl	8006020 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f14c:	2280      	movs	r2, #128	; 0x80
 800f14e:	2101      	movs	r1, #1
 800f150:	4803      	ldr	r0, [pc, #12]	; (800f160 <USBD_LL_Init+0x98>)
 800f152:	f7f6 ff65 	bl	8006020 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800f156:	2300      	movs	r3, #0
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3708      	adds	r7, #8
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	24002474 	.word	0x24002474
 800f164:	40080000 	.word	0x40080000

0800f168 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b084      	sub	sp, #16
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f170:	2300      	movs	r3, #0
 800f172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f174:	2300      	movs	r3, #0
 800f176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f17e:	4618      	mov	r0, r3
 800f180:	f7f5 fe40 	bl	8004e04 <HAL_PCD_Start>
 800f184:	4603      	mov	r3, r0
 800f186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f188:	7bfb      	ldrb	r3, [r7, #15]
 800f18a:	4618      	mov	r0, r3
 800f18c:	f000 f942 	bl	800f414 <USBD_Get_USB_Status>
 800f190:	4603      	mov	r3, r0
 800f192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f194:	7bbb      	ldrb	r3, [r7, #14]
}
 800f196:	4618      	mov	r0, r3
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}

0800f19e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f19e:	b580      	push	{r7, lr}
 800f1a0:	b084      	sub	sp, #16
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
 800f1a6:	4608      	mov	r0, r1
 800f1a8:	4611      	mov	r1, r2
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	70fb      	strb	r3, [r7, #3]
 800f1b0:	460b      	mov	r3, r1
 800f1b2:	70bb      	strb	r3, [r7, #2]
 800f1b4:	4613      	mov	r3, r2
 800f1b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f1c6:	78bb      	ldrb	r3, [r7, #2]
 800f1c8:	883a      	ldrh	r2, [r7, #0]
 800f1ca:	78f9      	ldrb	r1, [r7, #3]
 800f1cc:	f7f6 fb40 	bl	8005850 <HAL_PCD_EP_Open>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1d4:	7bfb      	ldrb	r3, [r7, #15]
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f000 f91c 	bl	800f414 <USBD_Get_USB_Status>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3710      	adds	r7, #16
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}

0800f1ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1ea:	b580      	push	{r7, lr}
 800f1ec:	b084      	sub	sp, #16
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
 800f1f2:	460b      	mov	r3, r1
 800f1f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f204:	78fa      	ldrb	r2, [r7, #3]
 800f206:	4611      	mov	r1, r2
 800f208:	4618      	mov	r0, r3
 800f20a:	f7f6 fb89 	bl	8005920 <HAL_PCD_EP_Close>
 800f20e:	4603      	mov	r3, r0
 800f210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f212:	7bfb      	ldrb	r3, [r7, #15]
 800f214:	4618      	mov	r0, r3
 800f216:	f000 f8fd 	bl	800f414 <USBD_Get_USB_Status>
 800f21a:	4603      	mov	r3, r0
 800f21c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f21e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f220:	4618      	mov	r0, r3
 800f222:	3710      	adds	r7, #16
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	460b      	mov	r3, r1
 800f232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f234:	2300      	movs	r3, #0
 800f236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f238:	2300      	movs	r3, #0
 800f23a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f242:	78fa      	ldrb	r2, [r7, #3]
 800f244:	4611      	mov	r1, r2
 800f246:	4618      	mov	r0, r3
 800f248:	f7f6 fc43 	bl	8005ad2 <HAL_PCD_EP_SetStall>
 800f24c:	4603      	mov	r3, r0
 800f24e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f250:	7bfb      	ldrb	r3, [r7, #15]
 800f252:	4618      	mov	r0, r3
 800f254:	f000 f8de 	bl	800f414 <USBD_Get_USB_Status>
 800f258:	4603      	mov	r3, r0
 800f25a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f25c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}

0800f266 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f266:	b580      	push	{r7, lr}
 800f268:	b084      	sub	sp, #16
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	6078      	str	r0, [r7, #4]
 800f26e:	460b      	mov	r3, r1
 800f270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f272:	2300      	movs	r3, #0
 800f274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f276:	2300      	movs	r3, #0
 800f278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f280:	78fa      	ldrb	r2, [r7, #3]
 800f282:	4611      	mov	r1, r2
 800f284:	4618      	mov	r0, r3
 800f286:	f7f6 fc88 	bl	8005b9a <HAL_PCD_EP_ClrStall>
 800f28a:	4603      	mov	r3, r0
 800f28c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f28e:	7bfb      	ldrb	r3, [r7, #15]
 800f290:	4618      	mov	r0, r3
 800f292:	f000 f8bf 	bl	800f414 <USBD_Get_USB_Status>
 800f296:	4603      	mov	r3, r0
 800f298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f29a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3710      	adds	r7, #16
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f2b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f2b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	da0b      	bge.n	800f2d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f2c0:	78fb      	ldrb	r3, [r7, #3]
 800f2c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2c6:	68f9      	ldr	r1, [r7, #12]
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	00db      	lsls	r3, r3, #3
 800f2cc:	4413      	add	r3, r2
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	440b      	add	r3, r1
 800f2d2:	333e      	adds	r3, #62	; 0x3e
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	e00b      	b.n	800f2f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f2d8:	78fb      	ldrb	r3, [r7, #3]
 800f2da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2de:	68f9      	ldr	r1, [r7, #12]
 800f2e0:	4613      	mov	r3, r2
 800f2e2:	00db      	lsls	r3, r3, #3
 800f2e4:	4413      	add	r3, r2
 800f2e6:	009b      	lsls	r3, r3, #2
 800f2e8:	440b      	add	r3, r1
 800f2ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f2ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3714      	adds	r7, #20
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b084      	sub	sp, #16
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	460b      	mov	r3, r1
 800f306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f308:	2300      	movs	r3, #0
 800f30a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f30c:	2300      	movs	r3, #0
 800f30e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f316:	78fa      	ldrb	r2, [r7, #3]
 800f318:	4611      	mov	r1, r2
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7f6 fa73 	bl	8005806 <HAL_PCD_SetAddress>
 800f320:	4603      	mov	r3, r0
 800f322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f324:	7bfb      	ldrb	r3, [r7, #15]
 800f326:	4618      	mov	r0, r3
 800f328:	f000 f874 	bl	800f414 <USBD_Get_USB_Status>
 800f32c:	4603      	mov	r3, r0
 800f32e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f330:	7bbb      	ldrb	r3, [r7, #14]
}
 800f332:	4618      	mov	r0, r3
 800f334:	3710      	adds	r7, #16
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b086      	sub	sp, #24
 800f33e:	af00      	add	r7, sp, #0
 800f340:	60f8      	str	r0, [r7, #12]
 800f342:	607a      	str	r2, [r7, #4]
 800f344:	603b      	str	r3, [r7, #0]
 800f346:	460b      	mov	r3, r1
 800f348:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f34a:	2300      	movs	r3, #0
 800f34c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f34e:	2300      	movs	r3, #0
 800f350:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f358:	7af9      	ldrb	r1, [r7, #11]
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	687a      	ldr	r2, [r7, #4]
 800f35e:	f7f6 fb7d 	bl	8005a5c <HAL_PCD_EP_Transmit>
 800f362:	4603      	mov	r3, r0
 800f364:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f366:	7dfb      	ldrb	r3, [r7, #23]
 800f368:	4618      	mov	r0, r3
 800f36a:	f000 f853 	bl	800f414 <USBD_Get_USB_Status>
 800f36e:	4603      	mov	r3, r0
 800f370:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f372:	7dbb      	ldrb	r3, [r7, #22]
}
 800f374:	4618      	mov	r0, r3
 800f376:	3718      	adds	r7, #24
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b086      	sub	sp, #24
 800f380:	af00      	add	r7, sp, #0
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	607a      	str	r2, [r7, #4]
 800f386:	603b      	str	r3, [r7, #0]
 800f388:	460b      	mov	r3, r1
 800f38a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f38c:	2300      	movs	r3, #0
 800f38e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f390:	2300      	movs	r3, #0
 800f392:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f39a:	7af9      	ldrb	r1, [r7, #11]
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	687a      	ldr	r2, [r7, #4]
 800f3a0:	f7f6 fb08 	bl	80059b4 <HAL_PCD_EP_Receive>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3a8:	7dfb      	ldrb	r3, [r7, #23]
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f000 f832 	bl	800f414 <USBD_Get_USB_Status>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f3b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3718      	adds	r7, #24
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}

0800f3be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3be:	b580      	push	{r7, lr}
 800f3c0:	b082      	sub	sp, #8
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
 800f3c6:	460b      	mov	r3, r1
 800f3c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f3d0:	78fa      	ldrb	r2, [r7, #3]
 800f3d2:	4611      	mov	r1, r2
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7f6 fb29 	bl	8005a2c <HAL_PCD_EP_GetRxCount>
 800f3da:	4603      	mov	r3, r0
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3708      	adds	r7, #8
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b083      	sub	sp, #12
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f3ec:	4b03      	ldr	r3, [pc, #12]	; (800f3fc <USBD_static_malloc+0x18>)
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	370c      	adds	r7, #12
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr
 800f3fa:	bf00      	nop
 800f3fc:	24002980 	.word	0x24002980

0800f400 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f400:	b480      	push	{r7}
 800f402:	b083      	sub	sp, #12
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800f408:	bf00      	nop
 800f40a:	370c      	adds	r7, #12
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr

0800f414 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f414:	b480      	push	{r7}
 800f416:	b085      	sub	sp, #20
 800f418:	af00      	add	r7, sp, #0
 800f41a:	4603      	mov	r3, r0
 800f41c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f41e:	2300      	movs	r3, #0
 800f420:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f422:	79fb      	ldrb	r3, [r7, #7]
 800f424:	2b03      	cmp	r3, #3
 800f426:	d817      	bhi.n	800f458 <USBD_Get_USB_Status+0x44>
 800f428:	a201      	add	r2, pc, #4	; (adr r2, 800f430 <USBD_Get_USB_Status+0x1c>)
 800f42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f42e:	bf00      	nop
 800f430:	0800f441 	.word	0x0800f441
 800f434:	0800f447 	.word	0x0800f447
 800f438:	0800f44d 	.word	0x0800f44d
 800f43c:	0800f453 	.word	0x0800f453
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f440:	2300      	movs	r3, #0
 800f442:	73fb      	strb	r3, [r7, #15]
    break;
 800f444:	e00b      	b.n	800f45e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f446:	2303      	movs	r3, #3
 800f448:	73fb      	strb	r3, [r7, #15]
    break;
 800f44a:	e008      	b.n	800f45e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f44c:	2301      	movs	r3, #1
 800f44e:	73fb      	strb	r3, [r7, #15]
    break;
 800f450:	e005      	b.n	800f45e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f452:	2303      	movs	r3, #3
 800f454:	73fb      	strb	r3, [r7, #15]
    break;
 800f456:	e002      	b.n	800f45e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f458:	2303      	movs	r3, #3
 800f45a:	73fb      	strb	r3, [r7, #15]
    break;
 800f45c:	bf00      	nop
  }
  return usb_status;
 800f45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f460:	4618      	mov	r0, r3
 800f462:	3714      	adds	r7, #20
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr

0800f46c <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf>:
#include "pwm.hpp"

namespace G24_STM32HAL::CommonLib{


void PWMHard::out(float val){
 800f46c:	b480      	push	{r7}
 800f46e:	b083      	sub	sp, #12
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	ed87 0a00 	vstr	s0, [r7]

	if(val < min || max < val)val  = 0;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	edd3 7a03 	vldr	s15, [r3, #12]
 800f47e:	ed97 7a00 	vldr	s14, [r7]
 800f482:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f48a:	d409      	bmi.n	800f4a0 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x34>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	edd3 7a04 	vldr	s15, [r3, #16]
 800f492:	ed97 7a00 	vldr	s14, [r7]
 800f496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f49e:	dd02      	ble.n	800f4a6 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x3a>
 800f4a0:	f04f 0300 	mov.w	r3, #0
 800f4a4:	603b      	str	r3, [r7, #0]

	__HAL_TIM_SET_COMPARE(tim, ch, (val - min)*diff_inv*tim->Init.Period);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	689b      	ldr	r3, [r3, #8]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d11d      	bne.n	800f4ea <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x7e>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	edd3 7a03 	vldr	s15, [r3, #12]
 800f4b4:	ed97 7a00 	vldr	s14, [r7]
 800f4b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	edd3 7a05 	vldr	s15, [r3, #20]
 800f4c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	68db      	ldr	r3, [r3, #12]
 800f4cc:	ee07 3a90 	vmov	s15, r3
 800f4d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	685b      	ldr	r3, [r3, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f4e2:	ee17 2a90 	vmov	r2, s15
 800f4e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 800f4e8:	e0a4      	b.n	800f634 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x1c8>
	__HAL_TIM_SET_COMPARE(tim, ch, (val - min)*diff_inv*tim->Init.Period);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	689b      	ldr	r3, [r3, #8]
 800f4ee:	2b04      	cmp	r3, #4
 800f4f0:	d11d      	bne.n	800f52e <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0xc2>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	edd3 7a03 	vldr	s15, [r3, #12]
 800f4f8:	ed97 7a00 	vldr	s14, [r7]
 800f4fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	edd3 7a05 	vldr	s15, [r3, #20]
 800f506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	685b      	ldr	r3, [r3, #4]
 800f50e:	68db      	ldr	r3, [r3, #12]
 800f510:	ee07 3a90 	vmov	s15, r3
 800f514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f526:	ee17 2a90 	vmov	r2, s15
 800f52a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800f52c:	e082      	b.n	800f634 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x1c8>
	__HAL_TIM_SET_COMPARE(tim, ch, (val - min)*diff_inv*tim->Init.Period);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	689b      	ldr	r3, [r3, #8]
 800f532:	2b08      	cmp	r3, #8
 800f534:	d11d      	bne.n	800f572 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x106>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	edd3 7a03 	vldr	s15, [r3, #12]
 800f53c:	ed97 7a00 	vldr	s14, [r7]
 800f540:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	edd3 7a05 	vldr	s15, [r3, #20]
 800f54a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	ee07 3a90 	vmov	s15, r3
 800f558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f55c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	685b      	ldr	r3, [r3, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f56a:	ee17 2a90 	vmov	r2, s15
 800f56e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f570:	e060      	b.n	800f634 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x1c8>
	__HAL_TIM_SET_COMPARE(tim, ch, (val - min)*diff_inv*tim->Init.Period);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	689b      	ldr	r3, [r3, #8]
 800f576:	2b0c      	cmp	r3, #12
 800f578:	d11d      	bne.n	800f5b6 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x14a>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	edd3 7a03 	vldr	s15, [r3, #12]
 800f580:	ed97 7a00 	vldr	s14, [r7]
 800f584:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	edd3 7a05 	vldr	s15, [r3, #20]
 800f58e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	ee07 3a90 	vmov	s15, r3
 800f59c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f5ae:	ee17 2a90 	vmov	r2, s15
 800f5b2:	641a      	str	r2, [r3, #64]	; 0x40
}
 800f5b4:	e03e      	b.n	800f634 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x1c8>
	__HAL_TIM_SET_COMPARE(tim, ch, (val - min)*diff_inv*tim->Init.Period);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	689b      	ldr	r3, [r3, #8]
 800f5ba:	2b10      	cmp	r3, #16
 800f5bc:	d11d      	bne.n	800f5fa <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x18e>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	edd3 7a03 	vldr	s15, [r3, #12]
 800f5c4:	ed97 7a00 	vldr	s14, [r7]
 800f5c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	edd3 7a05 	vldr	s15, [r3, #20]
 800f5d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	68db      	ldr	r3, [r3, #12]
 800f5dc:	ee07 3a90 	vmov	s15, r3
 800f5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	685b      	ldr	r3, [r3, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f5f2:	ee17 2a90 	vmov	r2, s15
 800f5f6:	659a      	str	r2, [r3, #88]	; 0x58
}
 800f5f8:	e01c      	b.n	800f634 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x1c8>
	__HAL_TIM_SET_COMPARE(tim, ch, (val - min)*diff_inv*tim->Init.Period);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	edd3 7a03 	vldr	s15, [r3, #12]
 800f600:	ed97 7a00 	vldr	s14, [r7]
 800f604:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	edd3 7a05 	vldr	s15, [r3, #20]
 800f60e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	68db      	ldr	r3, [r3, #12]
 800f618:	ee07 3a90 	vmov	s15, r3
 800f61c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f620:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f62e:	ee17 2a90 	vmov	r2, s15
 800f632:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800f634:	bf00      	nop
 800f636:	370c      	adds	r7, #12
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr

0800f640 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	4618      	mov	r0, r3
 800f64e:	370c      	adds	r7, #12
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr

0800f658 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm15set_filter_freeEm>:
		rx_frame.id = rx_header.Identifier;

		rx_buff->push(rx_frame);
	}

	inline void FdCanComm::set_filter_free(uint32_t filter_no){
 800f658:	b580      	push	{r7, lr}
 800f65a:	b08a      	sub	sp, #40	; 0x28
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
		FDCAN_FilterTypeDef  filter;
		filter.IdType = FDCAN_EXTENDED_ID;
 800f662:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f666:	60bb      	str	r3, [r7, #8]
		filter.FilterIndex = filter_no;
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	60fb      	str	r3, [r7, #12]
		filter.FilterType = FDCAN_FILTER_MASK;
 800f66c:	2302      	movs	r3, #2
 800f66e:	613b      	str	r3, [r7, #16]
		filter.FilterConfig = rx_filter_fifo;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	68db      	ldr	r3, [r3, #12]
 800f674:	617b      	str	r3, [r7, #20]
		filter.FilterID1 = 0x000;
 800f676:	2300      	movs	r3, #0
 800f678:	61bb      	str	r3, [r7, #24]
		filter.FilterID2 = 0x000;
 800f67a:	2300      	movs	r3, #0
 800f67c:	61fb      	str	r3, [r7, #28]

		HAL_FDCAN_ConfigFilter(fdcan, &filter);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	f107 0208 	add.w	r2, r7, #8
 800f686:	4611      	mov	r1, r2
 800f688:	4618      	mov	r0, r3
 800f68a:	f7f4 f9af 	bl	80039ec <HAL_FDCAN_ConfigFilter>
	}
 800f68e:	bf00      	nop
 800f690:	3728      	adds	r7, #40	; 0x28
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
	...

0800f698 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv>:
			pwm.out(playing_pattern[pattern_count].state?duty:0.0f);
		}

		bool is_playing(void)override{return playing_pattern!=nullptr ? true:false;}

		void update(void){
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
			if(playing_pattern != nullptr){
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6a1b      	ldr	r3, [r3, #32]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d041      	beq.n	800f72c <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x94>
				length_count  --;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6ac:	1e5a      	subs	r2, r3, #1
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	629a      	str	r2, [r3, #40]	; 0x28
				if(length_count <= 0){
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d138      	bne.n	800f72c <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x94>
					pattern_count ++;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6be:	1c5a      	adds	r2, r3, #1
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	625a      	str	r2, [r3, #36]	; 0x24

					if(playing_pattern[pattern_count].length == 0){
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6a1a      	ldr	r2, [r3, #32]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6cc:	009b      	lsls	r3, r3, #2
 800f6ce:	4413      	add	r3, r2
 800f6d0:	885b      	ldrh	r3, [r3, #2]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d10a      	bne.n	800f6ec <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x54>
						playing_pattern = nullptr;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	621a      	str	r2, [r3, #32]
						pwm.out(0.0f);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	3304      	adds	r3, #4
 800f6e0:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800f734 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x9c>
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7ff fec1 	bl	800f46c <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf>
						return;
 800f6ea:	e01f      	b.n	800f72c <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x94>
					}
					length_count = playing_pattern[pattern_count].length;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6a1a      	ldr	r2, [r3, #32]
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6f4:	009b      	lsls	r3, r3, #2
 800f6f6:	4413      	add	r3, r2
 800f6f8:	885b      	ldrh	r3, [r3, #2]
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	629a      	str	r2, [r3, #40]	; 0x28
					pwm.out(playing_pattern[pattern_count].state?duty:0.0f);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	1d19      	adds	r1, r3, #4
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6a1a      	ldr	r2, [r3, #32]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	4413      	add	r3, r2
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d003      	beq.n	800f71e <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x86>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	edd3 7a07 	vldr	s15, [r3, #28]
 800f71c:	e001      	b.n	800f722 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x8a>
 800f71e:	eddf 7a05 	vldr	s15, [pc, #20]	; 800f734 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x9c>
 800f722:	eeb0 0a67 	vmov.f32	s0, s15
 800f726:	4608      	mov	r0, r1
 800f728:	f7ff fea0 	bl	800f46c <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf>
				}
			}else{

			}
		}
 800f72c:	3708      	adds	r7, #8
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	00000000 	.word	0x00000000

0800f738 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 800f738:	b480      	push	{r7}
 800f73a:	b083      	sub	sp, #12
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	4618      	mov	r0, r3
 800f744:	370c      	adds	r7, #12
 800f746:	46bd      	mov	sp, r7
 800f748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74c:	4770      	bx	lr

0800f74e <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800f74e:	b480      	push	{r7}
 800f750:	b083      	sub	sp, #12
 800f752:	af00      	add	r7, sp, #0
 800f754:	6078      	str	r0, [r7, #4]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	4618      	mov	r0, r3
 800f75a:	370c      	adds	r7, #12
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <_ZZN12G24_STM32HAL11UsbCanBoard4initEvENKUlvE_clEv>:

#include "board_task.hpp"

namespace G24_STM32HAL::UsbCanBoard{
	void init(void){
		led_timer.set_task([](){
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
			LED1_R.update();
 800f76c:	4806      	ldr	r0, [pc, #24]	; (800f788 <_ZZN12G24_STM32HAL11UsbCanBoard4initEvENKUlvE_clEv+0x24>)
 800f76e:	f7ff ff93 	bl	800f698 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv>
			LED1_G.update();
 800f772:	4806      	ldr	r0, [pc, #24]	; (800f78c <_ZZN12G24_STM32HAL11UsbCanBoard4initEvENKUlvE_clEv+0x28>)
 800f774:	f7ff ff90 	bl	800f698 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv>
			LED1_B.update();
 800f778:	4805      	ldr	r0, [pc, #20]	; (800f790 <_ZZN12G24_STM32HAL11UsbCanBoard4initEvENKUlvE_clEv+0x2c>)
 800f77a:	f7ff ff8d 	bl	800f698 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv>
		});
 800f77e:	bf00      	nop
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	240002d0 	.word	0x240002d0
 800f78c:	240002fc 	.word	0x240002fc
 800f790:	24000328 	.word	0x24000328

0800f794 <_ZN12G24_STM32HAL11UsbCanBoard4initEv>:
	void init(void){
 800f794:	b580      	push	{r7, lr}
 800f796:	b086      	sub	sp, #24
 800f798:	af00      	add	r7, sp, #0
		led_timer.set_task([](){
 800f79a:	f107 0214 	add.w	r2, r7, #20
 800f79e:	1d3b      	adds	r3, r7, #4
 800f7a0:	4611      	mov	r1, r2
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f000 f828 	bl	800f7f8 <_ZNSt8functionIFvvEEC1IZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_vEEOT_>
 800f7a8:	1d3b      	adds	r3, r7, #4
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	480d      	ldr	r0, [pc, #52]	; (800f7e4 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0x50>)
 800f7ae:	f7f1 fc71 	bl	8001094 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard8set_taskESt8functionIFvvEE>
 800f7b2:	1d3b      	adds	r3, r7, #4
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7f1 fbda 	bl	8000f6e <_ZNSt8functionIFvvEED1Ev>
		led_timer.set_and_start(1000);
 800f7ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f7be:	4809      	ldr	r0, [pc, #36]	; (800f7e4 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0x50>)
 800f7c0:	f7f1 fc12 	bl	8000fe8 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard13set_and_startEt>

		can1.set_filter_free(0);
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	4808      	ldr	r0, [pc, #32]	; (800f7e8 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0x54>)
 800f7c8:	f7ff ff46 	bl	800f658 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm15set_filter_freeEm>
		can2.set_filter_free(14);
 800f7cc:	210e      	movs	r1, #14
 800f7ce:	4807      	ldr	r0, [pc, #28]	; (800f7ec <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0x58>)
 800f7d0:	f7ff ff42 	bl	800f658 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm15set_filter_freeEm>

		LED1_B.play(UsbCanLib::ok);
 800f7d4:	4906      	ldr	r1, [pc, #24]	; (800f7f0 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0x5c>)
 800f7d6:	4807      	ldr	r0, [pc, #28]	; (800f7f4 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0x60>)
 800f7d8:	f7f1 fb60 	bl	8000e9c <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
	}
 800f7dc:	bf00      	nop
 800f7de:	3718      	adds	r7, #24
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}
 800f7e4:	240002b4 	.word	0x240002b4
 800f7e8:	240003d8 	.word	0x240003d8
 800f7ec:	240003f4 	.word	0x240003f4
 800f7f0:	080102e0 	.word	0x080102e0
 800f7f4:	24000328 	.word	0x24000328

0800f7f8 <_ZNSt8functionIFvvEEC1IZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_vEEOT_>:
	function(_Functor&& __f)
 800f7f8:	b590      	push	{r4, r7, lr}
 800f7fa:	b083      	sub	sp, #12
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	461a      	mov	r2, r3
 800f806:	2300      	movs	r3, #0
 800f808:	6013      	str	r3, [r2, #0]
 800f80a:	6053      	str	r3, [r2, #4]
 800f80c:	6093      	str	r3, [r2, #8]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4618      	mov	r0, r3
 800f812:	f7f1 fea9 	bl	8001568 <_ZNSt14_Function_baseC1Ev>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2200      	movs	r2, #0
 800f81a:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800f81c:	6838      	ldr	r0, [r7, #0]
 800f81e:	f000 f81b 	bl	800f858 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E21_M_not_empty_functionIS3_EEbRKT_>
 800f822:	4603      	mov	r3, r0
 800f824:	2b00      	cmp	r3, #0
 800f826:	d00e      	beq.n	800f846 <_ZNSt8functionIFvvEEC1IZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 800f828:	687c      	ldr	r4, [r7, #4]
 800f82a:	6838      	ldr	r0, [r7, #0]
 800f82c:	f000 f81f 	bl	800f86e <_ZSt7forwardIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800f830:	4603      	mov	r3, r0
 800f832:	4619      	mov	r1, r3
 800f834:	4620      	mov	r0, r4
 800f836:	f000 f825 	bl	800f884 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4a04      	ldr	r2, [pc, #16]	; (800f850 <_ZNSt8functionIFvvEEC1IZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_vEEOT_+0x58>)
 800f83e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	4a04      	ldr	r2, [pc, #16]	; (800f854 <_ZNSt8functionIFvvEEC1IZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_vEEOT_+0x5c>)
 800f844:	609a      	str	r2, [r3, #8]
	}
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4618      	mov	r0, r3
 800f84a:	370c      	adds	r7, #12
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd90      	pop	{r4, r7, pc}
 800f850:	0800f8a9 	.word	0x0800f8a9
 800f854:	0800f8c7 	.word	0x0800f8c7

0800f858 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
	  { return true; }
 800f860:	2301      	movs	r3, #1
 800f862:	4618      	mov	r0, r3
 800f864:	370c      	adds	r7, #12
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr

0800f86e <_ZSt7forwardIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f86e:	b480      	push	{r7}
 800f870:	b083      	sub	sp, #12
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	4618      	mov	r0, r3
 800f87a:	370c      	adds	r7, #12
 800f87c:	46bd      	mov	sp, r7
 800f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f882:	4770      	bx	lr

0800f884 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800f884:	b590      	push	{r4, r7, lr}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800f88e:	6838      	ldr	r0, [r7, #0]
 800f890:	f7ff ffed 	bl	800f86e <_ZSt7forwardIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800f894:	4603      	mov	r3, r0
 800f896:	4622      	mov	r2, r4
 800f898:	4619      	mov	r1, r3
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f000 f832 	bl	800f904 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800f8a0:	bf00      	nop
 800f8a2:	370c      	adds	r7, #12
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd90      	pop	{r4, r7, pc}

0800f8a8 <_ZNSt17_Function_handlerIFvvEZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b082      	sub	sp, #8
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f000 f83c 	bl	800f92e <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f000 f848 	bl	800f94e <_ZSt10__invoke_rIvRZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES5_E4typeEOS6_DpOS7_>
				     std::forward<_ArgTypes>(__args)...);
 800f8be:	bf00      	nop
      }
 800f8c0:	3708      	adds	r7, #8
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}

0800f8c6 <_ZNSt17_Function_handlerIFvvEZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800f8c6:	b590      	push	{r4, r7, lr}
 800f8c8:	b085      	sub	sp, #20
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	60f8      	str	r0, [r7, #12]
 800f8ce:	60b9      	str	r1, [r7, #8]
 800f8d0:	4613      	mov	r3, r2
 800f8d2:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800f8d4:	79fb      	ldrb	r3, [r7, #7]
 800f8d6:	2b01      	cmp	r3, #1
 800f8d8:	d109      	bne.n	800f8ee <_ZNSt17_Function_handlerIFvvEZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800f8da:	68b8      	ldr	r0, [r7, #8]
 800f8dc:	f000 f827 	bl	800f92e <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 800f8e0:	4604      	mov	r4, r0
 800f8e2:	68f8      	ldr	r0, [r7, #12]
 800f8e4:	f000 f843 	bl	800f96e <_ZNSt9_Any_data9_M_accessIPZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EERT_v>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	601c      	str	r4, [r3, #0]
	    break;
 800f8ec:	e005      	b.n	800f8fa <_ZNSt17_Function_handlerIFvvEZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800f8ee:	79fb      	ldrb	r3, [r7, #7]
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	68b9      	ldr	r1, [r7, #8]
 800f8f4:	68f8      	ldr	r0, [r7, #12]
 800f8f6:	f000 f847 	bl	800f988 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800f8fa:	2300      	movs	r3, #0
      }
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3714      	adds	r7, #20
 800f900:	46bd      	mov	sp, r7
 800f902:	bd90      	pop	{r4, r7, pc}

0800f904 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800f910:	68b8      	ldr	r0, [r7, #8]
 800f912:	f7ff ffac 	bl	800f86e <_ZSt7forwardIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800f916:	68f8      	ldr	r0, [r7, #12]
 800f918:	f7ff ff0e 	bl	800f738 <_ZNSt9_Any_data9_M_accessEv>
 800f91c:	4603      	mov	r3, r0
 800f91e:	4619      	mov	r1, r3
 800f920:	2001      	movs	r0, #1
 800f922:	f7ff fe8d 	bl	800f640 <_ZnwjPv>
	  }
 800f926:	bf00      	nop
 800f928:	3710      	adds	r7, #16
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}

0800f92e <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800f92e:	b580      	push	{r7, lr}
 800f930:	b084      	sub	sp, #16
 800f932:	af00      	add	r7, sp, #0
 800f934:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f000 f860 	bl	800f9fc <_ZNKSt9_Any_data9_M_accessIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EERKT_v>
 800f93c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800f93e:	68f8      	ldr	r0, [r7, #12]
 800f940:	f000 f868 	bl	800fa14 <_ZSt11__addressofIKZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EPT_RS4_>
 800f944:	4603      	mov	r3, r0
	}
 800f946:	4618      	mov	r0, r3
 800f948:	3710      	adds	r7, #16
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <_ZSt10__invoke_rIvRZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES5_E4typeEOS6_DpOS7_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800f94e:	b590      	push	{r4, r7, lr}
 800f950:	b083      	sub	sp, #12
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 f867 	bl	800fa2a <_ZSt7forwardIRZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800f95c:	4603      	mov	r3, r0
 800f95e:	4619      	mov	r1, r3
 800f960:	4620      	mov	r0, r4
 800f962:	f000 f86d 	bl	800fa40 <_ZSt13__invoke_implIvRZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 800f966:	bf00      	nop
 800f968:	370c      	adds	r7, #12
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd90      	pop	{r4, r7, pc}

0800f96e <_ZNSt9_Any_data9_M_accessIPZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EERT_v>:
      _M_access()
 800f96e:	b580      	push	{r7, lr}
 800f970:	b082      	sub	sp, #8
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f7ff fede 	bl	800f738 <_ZNSt9_Any_data9_M_accessEv>
 800f97c:	4603      	mov	r3, r0
 800f97e:	4618      	mov	r0, r3
 800f980:	3708      	adds	r7, #8
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
	...

0800f988 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800f988:	b590      	push	{r4, r7, lr}
 800f98a:	b085      	sub	sp, #20
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	60f8      	str	r0, [r7, #12]
 800f990:	60b9      	str	r1, [r7, #8]
 800f992:	4613      	mov	r3, r2
 800f994:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800f996:	79fb      	ldrb	r3, [r7, #7]
 800f998:	2b03      	cmp	r3, #3
 800f99a:	d82a      	bhi.n	800f9f2 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 800f99c:	a201      	add	r2, pc, #4	; (adr r2, 800f9a4 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800f99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a2:	bf00      	nop
 800f9a4:	0800f9b5 	.word	0x0800f9b5
 800f9a8:	0800f9c3 	.word	0x0800f9c3
 800f9ac:	0800f9d7 	.word	0x0800f9d7
 800f9b0:	0800f9e9 	.word	0x0800f9e9
	      __dest._M_access<const type_info*>() = nullptr;
 800f9b4:	68f8      	ldr	r0, [r7, #12]
 800f9b6:	f000 f853 	bl	800fa60 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	2200      	movs	r2, #0
 800f9be:	601a      	str	r2, [r3, #0]
	      break;
 800f9c0:	e017      	b.n	800f9f2 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800f9c2:	68b8      	ldr	r0, [r7, #8]
 800f9c4:	f7ff ffb3 	bl	800f92e <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	68f8      	ldr	r0, [r7, #12]
 800f9cc:	f7ff ffcf 	bl	800f96e <_ZNSt9_Any_data9_M_accessIPZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EERT_v>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	601c      	str	r4, [r3, #0]
	      break;
 800f9d4:	e00d      	b.n	800f9f2 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800f9d6:	68b8      	ldr	r0, [r7, #8]
 800f9d8:	f7ff ffa9 	bl	800f92e <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 800f9dc:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800f9de:	4619      	mov	r1, r3
 800f9e0:	68f8      	ldr	r0, [r7, #12]
 800f9e2:	f000 f849 	bl	800fa78 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 800f9e6:	e004      	b.n	800f9f2 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800f9e8:	4621      	mov	r1, r4
 800f9ea:	68f8      	ldr	r0, [r7, #12]
 800f9ec:	f000 f856 	bl	800fa9c <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800f9f0:	bf00      	nop
	  return false;
 800f9f2:	2300      	movs	r3, #0
	}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3714      	adds	r7, #20
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd90      	pop	{r4, r7, pc}

0800f9fc <_ZNKSt9_Any_data9_M_accessIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EERKT_v>:
      _M_access() const
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b082      	sub	sp, #8
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f7ff fea2 	bl	800f74e <_ZNKSt9_Any_data9_M_accessEv>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3708      	adds	r7, #8
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <_ZSt11__addressofIKZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800fa14:	b480      	push	{r7}
 800fa16:	b083      	sub	sp, #12
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	4618      	mov	r0, r3
 800fa20:	370c      	adds	r7, #12
 800fa22:	46bd      	mov	sp, r7
 800fa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa28:	4770      	bx	lr

0800fa2a <_ZSt7forwardIRZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fa2a:	b480      	push	{r7}
 800fa2c:	b083      	sub	sp, #12
 800fa2e:	af00      	add	r7, sp, #0
 800fa30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	4618      	mov	r0, r3
 800fa36:	370c      	adds	r7, #12
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr

0800fa40 <_ZSt13__invoke_implIvRZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	7138      	strb	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800fa4a:	6838      	ldr	r0, [r7, #0]
 800fa4c:	f7ff ffed 	bl	800fa2a <_ZSt7forwardIRZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800fa50:	4603      	mov	r3, r0
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7ff fe86 	bl	800f764 <_ZZN12G24_STM32HAL11UsbCanBoard4initEvENKUlvE_clEv>
 800fa58:	bf00      	nop
 800fa5a:	3708      	adds	r7, #8
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f7ff fe65 	bl	800f738 <_ZNSt9_Any_data9_M_accessEv>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	4618      	mov	r0, r3
 800fa72:	3708      	adds	r7, #8
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800fa78:	b590      	push	{r4, r7, lr}
 800fa7a:	b083      	sub	sp, #12
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800fa82:	6838      	ldr	r0, [r7, #0]
 800fa84:	f000 f816 	bl	800fab4 <_ZSt7forwardIRKZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	4622      	mov	r2, r4
 800fa8c:	4619      	mov	r1, r3
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 f81b 	bl	800faca <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800fa94:	bf00      	nop
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd90      	pop	{r4, r7, pc}

0800fa9c <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f000 f824 	bl	800faf4 <_ZNSt9_Any_data9_M_accessIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EERT_v>
	}
 800faac:	bf00      	nop
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <_ZSt7forwardIRKZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fab4:	b480      	push	{r7}
 800fab6:	b083      	sub	sp, #12
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	4618      	mov	r0, r3
 800fac0:	370c      	adds	r7, #12
 800fac2:	46bd      	mov	sp, r7
 800fac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac8:	4770      	bx	lr

0800faca <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800faca:	b580      	push	{r7, lr}
 800facc:	b084      	sub	sp, #16
 800face:	af00      	add	r7, sp, #0
 800fad0:	60f8      	str	r0, [r7, #12]
 800fad2:	60b9      	str	r1, [r7, #8]
 800fad4:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800fad6:	68b8      	ldr	r0, [r7, #8]
 800fad8:	f7ff ffec 	bl	800fab4 <_ZSt7forwardIRKZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800fadc:	68f8      	ldr	r0, [r7, #12]
 800fade:	f7ff fe2b 	bl	800f738 <_ZNSt9_Any_data9_M_accessEv>
 800fae2:	4603      	mov	r3, r0
 800fae4:	4619      	mov	r1, r3
 800fae6:	2001      	movs	r0, #1
 800fae8:	f7ff fdaa 	bl	800f640 <_ZnwjPv>
	  }
 800faec:	bf00      	nop
 800faee:	3710      	adds	r7, #16
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <_ZNSt9_Any_data9_M_accessIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EERT_v>:
      _M_access()
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f7ff fe1b 	bl	800f738 <_ZNSt9_Any_data9_M_accessEv>
 800fb02:	4603      	mov	r3, r0
 800fb04:	4618      	mov	r0, r3
 800fb06:	3708      	adds	r7, #8
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <_Z41__static_initialization_and_destruction_0ii>:
}
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b08e      	sub	sp, #56	; 0x38
 800fb10:	af04      	add	r7, sp, #16
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	6039      	str	r1, [r7, #0]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2b01      	cmp	r3, #1
 800fb1a:	f040 8130 	bne.w	800fd7e <_Z41__static_initialization_and_destruction_0ii+0x272>
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb24:	4293      	cmp	r3, r2
 800fb26:	f040 812a 	bne.w	800fd7e <_Z41__static_initialization_and_destruction_0ii+0x272>

extern USBD_HandleTypeDef hUsbDeviceFS;

namespace G24_STM32HAL::UsbCanBoard{
	//timer
	inline auto led_timer = CommonLib::InterruptionTimerHard(&htim17);
 800fb2a:	4ba7      	ldr	r3, [pc, #668]	; (800fdc8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	4aa5      	ldr	r2, [pc, #660]	; (800fdc8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800fb32:	6013      	str	r3, [r2, #0]
 800fb34:	4ba4      	ldr	r3, [pc, #656]	; (800fdc8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	bf0c      	ite	eq
 800fb3c:	2301      	moveq	r3, #1
 800fb3e:	2300      	movne	r3, #0
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d003      	beq.n	800fb4e <_Z41__static_initialization_and_destruction_0ii+0x42>
 800fb46:	49a1      	ldr	r1, [pc, #644]	; (800fdcc <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800fb48:	48a1      	ldr	r0, [pc, #644]	; (800fdd0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800fb4a:	f7f1 fa2d 	bl	8000fa8 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardC1EP17TIM_HandleTypeDef>

	//LEDs
	inline auto LED1_R = CommonLib::LEDPwm{&htim1,TIM_CHANNEL_1};
 800fb4e:	4ba1      	ldr	r3, [pc, #644]	; (800fdd4 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	3301      	adds	r3, #1
 800fb54:	4a9f      	ldr	r2, [pc, #636]	; (800fdd4 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800fb56:	6013      	str	r3, [r2, #0]
 800fb58:	4b9e      	ldr	r3, [pc, #632]	; (800fdd4 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	bf0c      	ite	eq
 800fb60:	2301      	moveq	r3, #1
 800fb62:	2300      	movne	r3, #0
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d004      	beq.n	800fb74 <_Z41__static_initialization_and_destruction_0ii+0x68>
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	499a      	ldr	r1, [pc, #616]	; (800fdd8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800fb6e:	489b      	ldr	r0, [pc, #620]	; (800fddc <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800fb70:	f7f1 f966 	bl	8000e40 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED1_G = CommonLib::LEDPwm{&htim1,TIM_CHANNEL_2};
 800fb74:	4b9a      	ldr	r3, [pc, #616]	; (800fde0 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	3301      	adds	r3, #1
 800fb7a:	4a99      	ldr	r2, [pc, #612]	; (800fde0 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800fb7c:	6013      	str	r3, [r2, #0]
 800fb7e:	4b98      	ldr	r3, [pc, #608]	; (800fde0 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	bf0c      	ite	eq
 800fb86:	2301      	moveq	r3, #1
 800fb88:	2300      	movne	r3, #0
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d004      	beq.n	800fb9a <_Z41__static_initialization_and_destruction_0ii+0x8e>
 800fb90:	2204      	movs	r2, #4
 800fb92:	4991      	ldr	r1, [pc, #580]	; (800fdd8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800fb94:	4893      	ldr	r0, [pc, #588]	; (800fde4 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800fb96:	f7f1 f953 	bl	8000e40 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED1_B = CommonLib::LEDPwm{&htim1,TIM_CHANNEL_4};
 800fb9a:	4b93      	ldr	r3, [pc, #588]	; (800fde8 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	4a91      	ldr	r2, [pc, #580]	; (800fde8 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800fba2:	6013      	str	r3, [r2, #0]
 800fba4:	4b90      	ldr	r3, [pc, #576]	; (800fde8 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	bf0c      	ite	eq
 800fbac:	2301      	moveq	r3, #1
 800fbae:	2300      	movne	r3, #0
 800fbb0:	b2db      	uxtb	r3, r3
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d004      	beq.n	800fbc0 <_Z41__static_initialization_and_destruction_0ii+0xb4>
 800fbb6:	220c      	movs	r2, #12
 800fbb8:	4987      	ldr	r1, [pc, #540]	; (800fdd8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800fbba:	488c      	ldr	r0, [pc, #560]	; (800fdec <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800fbbc:	f7f1 f940 	bl	8000e40 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>

	inline auto LED2_R = CommonLib::LEDPwm{&htim3,TIM_CHANNEL_1};
 800fbc0:	4b8b      	ldr	r3, [pc, #556]	; (800fdf0 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	4a8a      	ldr	r2, [pc, #552]	; (800fdf0 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800fbc8:	6013      	str	r3, [r2, #0]
 800fbca:	4b89      	ldr	r3, [pc, #548]	; (800fdf0 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	2b01      	cmp	r3, #1
 800fbd0:	bf0c      	ite	eq
 800fbd2:	2301      	moveq	r3, #1
 800fbd4:	2300      	movne	r3, #0
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d004      	beq.n	800fbe6 <_Z41__static_initialization_and_destruction_0ii+0xda>
 800fbdc:	2200      	movs	r2, #0
 800fbde:	4985      	ldr	r1, [pc, #532]	; (800fdf4 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800fbe0:	4885      	ldr	r0, [pc, #532]	; (800fdf8 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800fbe2:	f7f1 f92d 	bl	8000e40 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED2_G = CommonLib::LEDPwm{&htim3,TIM_CHANNEL_2};
 800fbe6:	4b85      	ldr	r3, [pc, #532]	; (800fdfc <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	3301      	adds	r3, #1
 800fbec:	4a83      	ldr	r2, [pc, #524]	; (800fdfc <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 800fbee:	6013      	str	r3, [r2, #0]
 800fbf0:	4b82      	ldr	r3, [pc, #520]	; (800fdfc <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	bf0c      	ite	eq
 800fbf8:	2301      	moveq	r3, #1
 800fbfa:	2300      	movne	r3, #0
 800fbfc:	b2db      	uxtb	r3, r3
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d004      	beq.n	800fc0c <_Z41__static_initialization_and_destruction_0ii+0x100>
 800fc02:	2204      	movs	r2, #4
 800fc04:	497b      	ldr	r1, [pc, #492]	; (800fdf4 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800fc06:	487e      	ldr	r0, [pc, #504]	; (800fe00 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800fc08:	f7f1 f91a 	bl	8000e40 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED2_B = CommonLib::LEDPwm{&htim3,TIM_CHANNEL_3};
 800fc0c:	4b7d      	ldr	r3, [pc, #500]	; (800fe04 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	3301      	adds	r3, #1
 800fc12:	4a7c      	ldr	r2, [pc, #496]	; (800fe04 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 800fc14:	6013      	str	r3, [r2, #0]
 800fc16:	4b7b      	ldr	r3, [pc, #492]	; (800fe04 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	2b01      	cmp	r3, #1
 800fc1c:	bf0c      	ite	eq
 800fc1e:	2301      	moveq	r3, #1
 800fc20:	2300      	movne	r3, #0
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d004      	beq.n	800fc32 <_Z41__static_initialization_and_destruction_0ii+0x126>
 800fc28:	2208      	movs	r2, #8
 800fc2a:	4972      	ldr	r1, [pc, #456]	; (800fdf4 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800fc2c:	4876      	ldr	r0, [pc, #472]	; (800fe08 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800fc2e:	f7f1 f907 	bl	8000e40 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>

	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 800fc32:	4b76      	ldr	r3, [pc, #472]	; (800fe0c <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	3301      	adds	r3, #1
 800fc38:	4a74      	ldr	r2, [pc, #464]	; (800fe0c <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800fc3a:	6013      	str	r3, [r2, #0]
 800fc3c:	4b73      	ldr	r3, [pc, #460]	; (800fe0c <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	bf0c      	ite	eq
 800fc44:	2301      	moveq	r3, #1
 800fc46:	2300      	movne	r3, #0
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d03b      	beq.n	800fcc6 <_Z41__static_initialization_and_destruction_0ii+0x1ba>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 800fc4e:	f107 030c 	add.w	r3, r7, #12
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7f1 fd2c 	bl	80016b0 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 800fc58:	f107 020c 	add.w	r2, r7, #12
 800fc5c:	f107 0308 	add.w	r3, r7, #8
 800fc60:	4611      	mov	r1, r2
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7f1 fd73 	bl	800174e <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 800fc68:	f107 0314 	add.w	r3, r7, #20
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7f1 fd1f 	bl	80016b0 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 800fc72:	f107 0214 	add.w	r2, r7, #20
 800fc76:	f107 0310 	add.w	r3, r7, #16
 800fc7a:	4611      	mov	r1, r2
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7f1 fd66 	bl	800174e <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
 800fc82:	f107 0310 	add.w	r3, r7, #16
 800fc86:	f107 0208 	add.w	r2, r7, #8
 800fc8a:	2101      	movs	r1, #1
 800fc8c:	9102      	str	r1, [sp, #8]
 800fc8e:	2101      	movs	r1, #1
 800fc90:	9101      	str	r1, [sp, #4]
 800fc92:	2140      	movs	r1, #64	; 0x40
 800fc94:	9100      	str	r1, [sp, #0]
 800fc96:	495e      	ldr	r1, [pc, #376]	; (800fe10 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800fc98:	485e      	ldr	r0, [pc, #376]	; (800fe14 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800fc9a:	f7f0 fef3 	bl	8000a84 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommC1EP19FDCAN_HandleTypeDefSt10unique_ptrINS_9CommonLib11IRingBufferINS5_8CanFrameEEESt14default_deleteIS8_EEOSB_mmm>
 800fc9e:	f107 0310 	add.w	r3, r7, #16
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7f1 fc32 	bl	800150c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 800fca8:	f107 0314 	add.w	r3, r7, #20
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7f1 fd1b 	bl	80016e8 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 800fcb2:	f107 0308 	add.w	r3, r7, #8
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7f1 fc28 	bl	800150c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 800fcbc:	f107 030c 	add.w	r3, r7, #12
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7f1 fd11 	bl	80016e8 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
			FDCAN_RX_FIFO0,
			FDCAN_FILTER_TO_RXFIFO0,
			FDCAN_IT_RX_FIFO0_NEW_MESSAGE};

	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 800fcc6:	4b54      	ldr	r3, [pc, #336]	; (800fe18 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	3301      	adds	r3, #1
 800fccc:	4a52      	ldr	r2, [pc, #328]	; (800fe18 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800fcce:	6013      	str	r3, [r2, #0]
 800fcd0:	4b51      	ldr	r3, [pc, #324]	; (800fe18 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	bf0c      	ite	eq
 800fcd8:	2301      	moveq	r3, #1
 800fcda:	2300      	movne	r3, #0
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d03b      	beq.n	800fd5a <_Z41__static_initialization_and_destruction_0ii+0x24e>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 800fce2:	f107 031c 	add.w	r3, r7, #28
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7f1 fce2 	bl	80016b0 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 800fcec:	f107 021c 	add.w	r2, r7, #28
 800fcf0:	f107 0318 	add.w	r3, r7, #24
 800fcf4:	4611      	mov	r1, r2
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7f1 fd29 	bl	800174e <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 800fcfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7f1 fcd5 	bl	80016b0 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 800fd06:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fd0a:	f107 0320 	add.w	r3, r7, #32
 800fd0e:	4611      	mov	r1, r2
 800fd10:	4618      	mov	r0, r3
 800fd12:	f7f1 fd1c 	bl	800174e <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
 800fd16:	f107 0320 	add.w	r3, r7, #32
 800fd1a:	f107 0218 	add.w	r2, r7, #24
 800fd1e:	2110      	movs	r1, #16
 800fd20:	9102      	str	r1, [sp, #8]
 800fd22:	2102      	movs	r1, #2
 800fd24:	9101      	str	r1, [sp, #4]
 800fd26:	2141      	movs	r1, #65	; 0x41
 800fd28:	9100      	str	r1, [sp, #0]
 800fd2a:	493c      	ldr	r1, [pc, #240]	; (800fe1c <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800fd2c:	483c      	ldr	r0, [pc, #240]	; (800fe20 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 800fd2e:	f7f0 fea9 	bl	8000a84 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommC1EP19FDCAN_HandleTypeDefSt10unique_ptrINS_9CommonLib11IRingBufferINS5_8CanFrameEEESt14default_deleteIS8_EEOSB_mmm>
 800fd32:	f107 0320 	add.w	r3, r7, #32
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7f1 fbe8 	bl	800150c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 800fd3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd40:	4618      	mov	r0, r3
 800fd42:	f7f1 fcd1 	bl	80016e8 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 800fd46:	f107 0318 	add.w	r3, r7, #24
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7f1 fbde 	bl	800150c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 800fd50:	f107 031c 	add.w	r3, r7, #28
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7f1 fcc7 	bl	80016e8 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
			FDCAN_RX_FIFO1,
			FDCAN_FILTER_TO_RXFIFO1,
			FDCAN_IT_RX_FIFO1_NEW_MESSAGE};

	inline auto usb = CommonLib::UsbCdcComm<4,4>{&hUsbDeviceFS};
 800fd5a:	4b32      	ldr	r3, [pc, #200]	; (800fe24 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	3301      	adds	r3, #1
 800fd60:	4a30      	ldr	r2, [pc, #192]	; (800fe24 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800fd62:	6013      	str	r3, [r2, #0]
 800fd64:	4b2f      	ldr	r3, [pc, #188]	; (800fe24 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	bf0c      	ite	eq
 800fd6c:	2301      	moveq	r3, #1
 800fd6e:	2300      	movne	r3, #0
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d003      	beq.n	800fd7e <_Z41__static_initialization_and_destruction_0ii+0x272>
 800fd76:	492c      	ldr	r1, [pc, #176]	; (800fe28 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800fd78:	482c      	ldr	r0, [pc, #176]	; (800fe2c <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800fd7a:	f7f1 fd65 	bl	8001848 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EEC1EP19_USBD_HandleTypeDef>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d16c      	bne.n	800fe5e <_Z41__static_initialization_and_destruction_0ii+0x352>
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	d167      	bne.n	800fe5e <_Z41__static_initialization_and_destruction_0ii+0x352>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 800fd8e:	4b22      	ldr	r3, [pc, #136]	; (800fe18 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	3b01      	subs	r3, #1
 800fd94:	4a20      	ldr	r2, [pc, #128]	; (800fe18 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800fd96:	6013      	str	r3, [r2, #0]
 800fd98:	4b1f      	ldr	r3, [pc, #124]	; (800fe18 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	bf0c      	ite	eq
 800fda0:	2301      	moveq	r3, #1
 800fda2:	2300      	movne	r3, #0
 800fda4:	b2db      	uxtb	r3, r3
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d002      	beq.n	800fdb0 <_Z41__static_initialization_and_destruction_0ii+0x2a4>
 800fdaa:	481d      	ldr	r0, [pc, #116]	; (800fe20 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 800fdac:	f7f1 f9d2 	bl	8001154 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommD1Ev>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 800fdb0:	4b16      	ldr	r3, [pc, #88]	; (800fe0c <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	3b01      	subs	r3, #1
 800fdb6:	4a15      	ldr	r2, [pc, #84]	; (800fe0c <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800fdb8:	6013      	str	r3, [r2, #0]
 800fdba:	4b14      	ldr	r3, [pc, #80]	; (800fe0c <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	bf0c      	ite	eq
 800fdc2:	2301      	moveq	r3, #1
 800fdc4:	2300      	movne	r3, #0
 800fdc6:	e033      	b.n	800fe30 <_Z41__static_initialization_and_destruction_0ii+0x324>
 800fdc8:	24000d0c 	.word	0x24000d0c
 800fdcc:	24000e1c 	.word	0x24000e1c
 800fdd0:	240002b4 	.word	0x240002b4
 800fdd4:	24000d10 	.word	0x24000d10
 800fdd8:	24000d38 	.word	0x24000d38
 800fddc:	240002d0 	.word	0x240002d0
 800fde0:	24000d14 	.word	0x24000d14
 800fde4:	240002fc 	.word	0x240002fc
 800fde8:	24000d18 	.word	0x24000d18
 800fdec:	24000328 	.word	0x24000328
 800fdf0:	24000d1c 	.word	0x24000d1c
 800fdf4:	24000dd0 	.word	0x24000dd0
 800fdf8:	24000354 	.word	0x24000354
 800fdfc:	24000d20 	.word	0x24000d20
 800fe00:	24000380 	.word	0x24000380
 800fe04:	24000d24 	.word	0x24000d24
 800fe08:	240003ac 	.word	0x240003ac
 800fe0c:	24000d28 	.word	0x24000d28
 800fe10:	24000170 	.word	0x24000170
 800fe14:	240003d8 	.word	0x240003d8
 800fe18:	24000d2c 	.word	0x24000d2c
 800fe1c:	24000210 	.word	0x24000210
 800fe20:	240003f4 	.word	0x240003f4
 800fe24:	24000d30 	.word	0x24000d30
 800fe28:	24000f98 	.word	0x24000f98
 800fe2c:	24000410 	.word	0x24000410
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d002      	beq.n	800fe3c <_Z41__static_initialization_and_destruction_0ii+0x330>
 800fe36:	480c      	ldr	r0, [pc, #48]	; (800fe68 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800fe38:	f7f1 f98c 	bl	8001154 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommD1Ev>
	inline auto led_timer = CommonLib::InterruptionTimerHard(&htim17);
 800fe3c:	4b0b      	ldr	r3, [pc, #44]	; (800fe6c <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	3b01      	subs	r3, #1
 800fe42:	4a0a      	ldr	r2, [pc, #40]	; (800fe6c <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800fe44:	6013      	str	r3, [r2, #0]
 800fe46:	4b09      	ldr	r3, [pc, #36]	; (800fe6c <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	bf0c      	ite	eq
 800fe4e:	2301      	moveq	r3, #1
 800fe50:	2300      	movne	r3, #0
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d002      	beq.n	800fe5e <_Z41__static_initialization_and_destruction_0ii+0x352>
 800fe58:	4805      	ldr	r0, [pc, #20]	; (800fe70 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800fe5a:	f7f1 f967 	bl	800112c <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardD1Ev>
 800fe5e:	bf00      	nop
 800fe60:	3728      	adds	r7, #40	; 0x28
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
 800fe66:	bf00      	nop
 800fe68:	240003d8 	.word	0x240003d8
 800fe6c:	24000d0c 	.word	0x24000d0c
 800fe70:	240002b4 	.word	0x240002b4

0800fe74 <_GLOBAL__sub_I__ZN12G24_STM32HAL11UsbCanBoard4initEv>:
 800fe74:	b580      	push	{r7, lr}
 800fe76:	af00      	add	r7, sp, #0
 800fe78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fe7c:	2001      	movs	r0, #1
 800fe7e:	f7ff fe45 	bl	800fb0c <_Z41__static_initialization_and_destruction_0ii>
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <_GLOBAL__sub_D__ZN12G24_STM32HAL11UsbCanBoard4initEv>:
 800fe84:	b580      	push	{r7, lr}
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fe8c:	2000      	movs	r0, #0
 800fe8e:	f7ff fe3d 	bl	800fb0c <_Z41__static_initialization_and_destruction_0ii>
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <_ZdlPvj>:
 800fe94:	f000 b814 	b.w	800fec0 <_ZdlPv>

0800fe98 <_Znwj>:
 800fe98:	2801      	cmp	r0, #1
 800fe9a:	bf38      	it	cc
 800fe9c:	2001      	movcc	r0, #1
 800fe9e:	b510      	push	{r4, lr}
 800fea0:	4604      	mov	r4, r0
 800fea2:	4620      	mov	r0, r4
 800fea4:	f000 f81e 	bl	800fee4 <malloc>
 800fea8:	b100      	cbz	r0, 800feac <_Znwj+0x14>
 800feaa:	bd10      	pop	{r4, pc}
 800feac:	f000 f80a 	bl	800fec4 <_ZSt15get_new_handlerv>
 800feb0:	b908      	cbnz	r0, 800feb6 <_Znwj+0x1e>
 800feb2:	f000 f80f 	bl	800fed4 <abort>
 800feb6:	4780      	blx	r0
 800feb8:	e7f3      	b.n	800fea2 <_Znwj+0xa>

0800feba <_ZSt25__throw_bad_function_callv>:
 800feba:	b508      	push	{r3, lr}
 800febc:	f000 f80a 	bl	800fed4 <abort>

0800fec0 <_ZdlPv>:
 800fec0:	f000 b818 	b.w	800fef4 <free>

0800fec4 <_ZSt15get_new_handlerv>:
 800fec4:	4b02      	ldr	r3, [pc, #8]	; (800fed0 <_ZSt15get_new_handlerv+0xc>)
 800fec6:	6818      	ldr	r0, [r3, #0]
 800fec8:	f3bf 8f5b 	dmb	ish
 800fecc:	4770      	bx	lr
 800fece:	bf00      	nop
 800fed0:	24002ba0 	.word	0x24002ba0

0800fed4 <abort>:
 800fed4:	b508      	push	{r3, lr}
 800fed6:	2006      	movs	r0, #6
 800fed8:	f000 f8f0 	bl	80100bc <raise>
 800fedc:	2001      	movs	r0, #1
 800fede:	f7f2 fc89 	bl	80027f4 <_exit>
	...

0800fee4 <malloc>:
 800fee4:	4b02      	ldr	r3, [pc, #8]	; (800fef0 <malloc+0xc>)
 800fee6:	4601      	mov	r1, r0
 800fee8:	6818      	ldr	r0, [r3, #0]
 800feea:	f000 b82b 	b.w	800ff44 <_malloc_r>
 800feee:	bf00      	nop
 800fef0:	24000150 	.word	0x24000150

0800fef4 <free>:
 800fef4:	4b02      	ldr	r3, [pc, #8]	; (800ff00 <free+0xc>)
 800fef6:	4601      	mov	r1, r0
 800fef8:	6818      	ldr	r0, [r3, #0]
 800fefa:	f000 b945 	b.w	8010188 <_free_r>
 800fefe:	bf00      	nop
 800ff00:	24000150 	.word	0x24000150

0800ff04 <sbrk_aligned>:
 800ff04:	b570      	push	{r4, r5, r6, lr}
 800ff06:	4e0e      	ldr	r6, [pc, #56]	; (800ff40 <sbrk_aligned+0x3c>)
 800ff08:	460c      	mov	r4, r1
 800ff0a:	6831      	ldr	r1, [r6, #0]
 800ff0c:	4605      	mov	r5, r0
 800ff0e:	b911      	cbnz	r1, 800ff16 <sbrk_aligned+0x12>
 800ff10:	f000 f8f0 	bl	80100f4 <_sbrk_r>
 800ff14:	6030      	str	r0, [r6, #0]
 800ff16:	4621      	mov	r1, r4
 800ff18:	4628      	mov	r0, r5
 800ff1a:	f000 f8eb 	bl	80100f4 <_sbrk_r>
 800ff1e:	1c43      	adds	r3, r0, #1
 800ff20:	d00a      	beq.n	800ff38 <sbrk_aligned+0x34>
 800ff22:	1cc4      	adds	r4, r0, #3
 800ff24:	f024 0403 	bic.w	r4, r4, #3
 800ff28:	42a0      	cmp	r0, r4
 800ff2a:	d007      	beq.n	800ff3c <sbrk_aligned+0x38>
 800ff2c:	1a21      	subs	r1, r4, r0
 800ff2e:	4628      	mov	r0, r5
 800ff30:	f000 f8e0 	bl	80100f4 <_sbrk_r>
 800ff34:	3001      	adds	r0, #1
 800ff36:	d101      	bne.n	800ff3c <sbrk_aligned+0x38>
 800ff38:	f04f 34ff 	mov.w	r4, #4294967295
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	bd70      	pop	{r4, r5, r6, pc}
 800ff40:	24002ba8 	.word	0x24002ba8

0800ff44 <_malloc_r>:
 800ff44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff48:	1ccd      	adds	r5, r1, #3
 800ff4a:	f025 0503 	bic.w	r5, r5, #3
 800ff4e:	3508      	adds	r5, #8
 800ff50:	2d0c      	cmp	r5, #12
 800ff52:	bf38      	it	cc
 800ff54:	250c      	movcc	r5, #12
 800ff56:	2d00      	cmp	r5, #0
 800ff58:	4607      	mov	r7, r0
 800ff5a:	db01      	blt.n	800ff60 <_malloc_r+0x1c>
 800ff5c:	42a9      	cmp	r1, r5
 800ff5e:	d905      	bls.n	800ff6c <_malloc_r+0x28>
 800ff60:	230c      	movs	r3, #12
 800ff62:	603b      	str	r3, [r7, #0]
 800ff64:	2600      	movs	r6, #0
 800ff66:	4630      	mov	r0, r6
 800ff68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010040 <_malloc_r+0xfc>
 800ff70:	f000 f868 	bl	8010044 <__malloc_lock>
 800ff74:	f8d8 3000 	ldr.w	r3, [r8]
 800ff78:	461c      	mov	r4, r3
 800ff7a:	bb5c      	cbnz	r4, 800ffd4 <_malloc_r+0x90>
 800ff7c:	4629      	mov	r1, r5
 800ff7e:	4638      	mov	r0, r7
 800ff80:	f7ff ffc0 	bl	800ff04 <sbrk_aligned>
 800ff84:	1c43      	adds	r3, r0, #1
 800ff86:	4604      	mov	r4, r0
 800ff88:	d155      	bne.n	8010036 <_malloc_r+0xf2>
 800ff8a:	f8d8 4000 	ldr.w	r4, [r8]
 800ff8e:	4626      	mov	r6, r4
 800ff90:	2e00      	cmp	r6, #0
 800ff92:	d145      	bne.n	8010020 <_malloc_r+0xdc>
 800ff94:	2c00      	cmp	r4, #0
 800ff96:	d048      	beq.n	801002a <_malloc_r+0xe6>
 800ff98:	6823      	ldr	r3, [r4, #0]
 800ff9a:	4631      	mov	r1, r6
 800ff9c:	4638      	mov	r0, r7
 800ff9e:	eb04 0903 	add.w	r9, r4, r3
 800ffa2:	f000 f8a7 	bl	80100f4 <_sbrk_r>
 800ffa6:	4581      	cmp	r9, r0
 800ffa8:	d13f      	bne.n	801002a <_malloc_r+0xe6>
 800ffaa:	6821      	ldr	r1, [r4, #0]
 800ffac:	1a6d      	subs	r5, r5, r1
 800ffae:	4629      	mov	r1, r5
 800ffb0:	4638      	mov	r0, r7
 800ffb2:	f7ff ffa7 	bl	800ff04 <sbrk_aligned>
 800ffb6:	3001      	adds	r0, #1
 800ffb8:	d037      	beq.n	801002a <_malloc_r+0xe6>
 800ffba:	6823      	ldr	r3, [r4, #0]
 800ffbc:	442b      	add	r3, r5
 800ffbe:	6023      	str	r3, [r4, #0]
 800ffc0:	f8d8 3000 	ldr.w	r3, [r8]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d038      	beq.n	801003a <_malloc_r+0xf6>
 800ffc8:	685a      	ldr	r2, [r3, #4]
 800ffca:	42a2      	cmp	r2, r4
 800ffcc:	d12b      	bne.n	8010026 <_malloc_r+0xe2>
 800ffce:	2200      	movs	r2, #0
 800ffd0:	605a      	str	r2, [r3, #4]
 800ffd2:	e00f      	b.n	800fff4 <_malloc_r+0xb0>
 800ffd4:	6822      	ldr	r2, [r4, #0]
 800ffd6:	1b52      	subs	r2, r2, r5
 800ffd8:	d41f      	bmi.n	801001a <_malloc_r+0xd6>
 800ffda:	2a0b      	cmp	r2, #11
 800ffdc:	d917      	bls.n	801000e <_malloc_r+0xca>
 800ffde:	1961      	adds	r1, r4, r5
 800ffe0:	42a3      	cmp	r3, r4
 800ffe2:	6025      	str	r5, [r4, #0]
 800ffe4:	bf18      	it	ne
 800ffe6:	6059      	strne	r1, [r3, #4]
 800ffe8:	6863      	ldr	r3, [r4, #4]
 800ffea:	bf08      	it	eq
 800ffec:	f8c8 1000 	streq.w	r1, [r8]
 800fff0:	5162      	str	r2, [r4, r5]
 800fff2:	604b      	str	r3, [r1, #4]
 800fff4:	4638      	mov	r0, r7
 800fff6:	f104 060b 	add.w	r6, r4, #11
 800fffa:	f000 f829 	bl	8010050 <__malloc_unlock>
 800fffe:	f026 0607 	bic.w	r6, r6, #7
 8010002:	1d23      	adds	r3, r4, #4
 8010004:	1af2      	subs	r2, r6, r3
 8010006:	d0ae      	beq.n	800ff66 <_malloc_r+0x22>
 8010008:	1b9b      	subs	r3, r3, r6
 801000a:	50a3      	str	r3, [r4, r2]
 801000c:	e7ab      	b.n	800ff66 <_malloc_r+0x22>
 801000e:	42a3      	cmp	r3, r4
 8010010:	6862      	ldr	r2, [r4, #4]
 8010012:	d1dd      	bne.n	800ffd0 <_malloc_r+0x8c>
 8010014:	f8c8 2000 	str.w	r2, [r8]
 8010018:	e7ec      	b.n	800fff4 <_malloc_r+0xb0>
 801001a:	4623      	mov	r3, r4
 801001c:	6864      	ldr	r4, [r4, #4]
 801001e:	e7ac      	b.n	800ff7a <_malloc_r+0x36>
 8010020:	4634      	mov	r4, r6
 8010022:	6876      	ldr	r6, [r6, #4]
 8010024:	e7b4      	b.n	800ff90 <_malloc_r+0x4c>
 8010026:	4613      	mov	r3, r2
 8010028:	e7cc      	b.n	800ffc4 <_malloc_r+0x80>
 801002a:	230c      	movs	r3, #12
 801002c:	603b      	str	r3, [r7, #0]
 801002e:	4638      	mov	r0, r7
 8010030:	f000 f80e 	bl	8010050 <__malloc_unlock>
 8010034:	e797      	b.n	800ff66 <_malloc_r+0x22>
 8010036:	6025      	str	r5, [r4, #0]
 8010038:	e7dc      	b.n	800fff4 <_malloc_r+0xb0>
 801003a:	605b      	str	r3, [r3, #4]
 801003c:	deff      	udf	#255	; 0xff
 801003e:	bf00      	nop
 8010040:	24002ba4 	.word	0x24002ba4

08010044 <__malloc_lock>:
 8010044:	4801      	ldr	r0, [pc, #4]	; (801004c <__malloc_lock+0x8>)
 8010046:	f000 b88f 	b.w	8010168 <__retarget_lock_acquire_recursive>
 801004a:	bf00      	nop
 801004c:	24002ce8 	.word	0x24002ce8

08010050 <__malloc_unlock>:
 8010050:	4801      	ldr	r0, [pc, #4]	; (8010058 <__malloc_unlock+0x8>)
 8010052:	f000 b88a 	b.w	801016a <__retarget_lock_release_recursive>
 8010056:	bf00      	nop
 8010058:	24002ce8 	.word	0x24002ce8

0801005c <memset>:
 801005c:	4402      	add	r2, r0
 801005e:	4603      	mov	r3, r0
 8010060:	4293      	cmp	r3, r2
 8010062:	d100      	bne.n	8010066 <memset+0xa>
 8010064:	4770      	bx	lr
 8010066:	f803 1b01 	strb.w	r1, [r3], #1
 801006a:	e7f9      	b.n	8010060 <memset+0x4>

0801006c <_raise_r>:
 801006c:	291f      	cmp	r1, #31
 801006e:	b538      	push	{r3, r4, r5, lr}
 8010070:	4604      	mov	r4, r0
 8010072:	460d      	mov	r5, r1
 8010074:	d904      	bls.n	8010080 <_raise_r+0x14>
 8010076:	2316      	movs	r3, #22
 8010078:	6003      	str	r3, [r0, #0]
 801007a:	f04f 30ff 	mov.w	r0, #4294967295
 801007e:	bd38      	pop	{r3, r4, r5, pc}
 8010080:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010082:	b112      	cbz	r2, 801008a <_raise_r+0x1e>
 8010084:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010088:	b94b      	cbnz	r3, 801009e <_raise_r+0x32>
 801008a:	4620      	mov	r0, r4
 801008c:	f000 f830 	bl	80100f0 <_getpid_r>
 8010090:	462a      	mov	r2, r5
 8010092:	4601      	mov	r1, r0
 8010094:	4620      	mov	r0, r4
 8010096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801009a:	f000 b817 	b.w	80100cc <_kill_r>
 801009e:	2b01      	cmp	r3, #1
 80100a0:	d00a      	beq.n	80100b8 <_raise_r+0x4c>
 80100a2:	1c59      	adds	r1, r3, #1
 80100a4:	d103      	bne.n	80100ae <_raise_r+0x42>
 80100a6:	2316      	movs	r3, #22
 80100a8:	6003      	str	r3, [r0, #0]
 80100aa:	2001      	movs	r0, #1
 80100ac:	e7e7      	b.n	801007e <_raise_r+0x12>
 80100ae:	2400      	movs	r4, #0
 80100b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80100b4:	4628      	mov	r0, r5
 80100b6:	4798      	blx	r3
 80100b8:	2000      	movs	r0, #0
 80100ba:	e7e0      	b.n	801007e <_raise_r+0x12>

080100bc <raise>:
 80100bc:	4b02      	ldr	r3, [pc, #8]	; (80100c8 <raise+0xc>)
 80100be:	4601      	mov	r1, r0
 80100c0:	6818      	ldr	r0, [r3, #0]
 80100c2:	f7ff bfd3 	b.w	801006c <_raise_r>
 80100c6:	bf00      	nop
 80100c8:	24000150 	.word	0x24000150

080100cc <_kill_r>:
 80100cc:	b538      	push	{r3, r4, r5, lr}
 80100ce:	4d07      	ldr	r5, [pc, #28]	; (80100ec <_kill_r+0x20>)
 80100d0:	2300      	movs	r3, #0
 80100d2:	4604      	mov	r4, r0
 80100d4:	4608      	mov	r0, r1
 80100d6:	4611      	mov	r1, r2
 80100d8:	602b      	str	r3, [r5, #0]
 80100da:	f7f2 fb7b 	bl	80027d4 <_kill>
 80100de:	1c43      	adds	r3, r0, #1
 80100e0:	d102      	bne.n	80100e8 <_kill_r+0x1c>
 80100e2:	682b      	ldr	r3, [r5, #0]
 80100e4:	b103      	cbz	r3, 80100e8 <_kill_r+0x1c>
 80100e6:	6023      	str	r3, [r4, #0]
 80100e8:	bd38      	pop	{r3, r4, r5, pc}
 80100ea:	bf00      	nop
 80100ec:	24002ce4 	.word	0x24002ce4

080100f0 <_getpid_r>:
 80100f0:	f7f2 bb68 	b.w	80027c4 <_getpid>

080100f4 <_sbrk_r>:
 80100f4:	b538      	push	{r3, r4, r5, lr}
 80100f6:	4d06      	ldr	r5, [pc, #24]	; (8010110 <_sbrk_r+0x1c>)
 80100f8:	2300      	movs	r3, #0
 80100fa:	4604      	mov	r4, r0
 80100fc:	4608      	mov	r0, r1
 80100fe:	602b      	str	r3, [r5, #0]
 8010100:	f7f2 fb82 	bl	8002808 <_sbrk>
 8010104:	1c43      	adds	r3, r0, #1
 8010106:	d102      	bne.n	801010e <_sbrk_r+0x1a>
 8010108:	682b      	ldr	r3, [r5, #0]
 801010a:	b103      	cbz	r3, 801010e <_sbrk_r+0x1a>
 801010c:	6023      	str	r3, [r4, #0]
 801010e:	bd38      	pop	{r3, r4, r5, pc}
 8010110:	24002ce4 	.word	0x24002ce4

08010114 <__errno>:
 8010114:	4b01      	ldr	r3, [pc, #4]	; (801011c <__errno+0x8>)
 8010116:	6818      	ldr	r0, [r3, #0]
 8010118:	4770      	bx	lr
 801011a:	bf00      	nop
 801011c:	24000150 	.word	0x24000150

08010120 <__libc_init_array>:
 8010120:	b570      	push	{r4, r5, r6, lr}
 8010122:	4d0d      	ldr	r5, [pc, #52]	; (8010158 <__libc_init_array+0x38>)
 8010124:	4c0d      	ldr	r4, [pc, #52]	; (801015c <__libc_init_array+0x3c>)
 8010126:	1b64      	subs	r4, r4, r5
 8010128:	10a4      	asrs	r4, r4, #2
 801012a:	2600      	movs	r6, #0
 801012c:	42a6      	cmp	r6, r4
 801012e:	d109      	bne.n	8010144 <__libc_init_array+0x24>
 8010130:	4d0b      	ldr	r5, [pc, #44]	; (8010160 <__libc_init_array+0x40>)
 8010132:	4c0c      	ldr	r4, [pc, #48]	; (8010164 <__libc_init_array+0x44>)
 8010134:	f000 f874 	bl	8010220 <_init>
 8010138:	1b64      	subs	r4, r4, r5
 801013a:	10a4      	asrs	r4, r4, #2
 801013c:	2600      	movs	r6, #0
 801013e:	42a6      	cmp	r6, r4
 8010140:	d105      	bne.n	801014e <__libc_init_array+0x2e>
 8010142:	bd70      	pop	{r4, r5, r6, pc}
 8010144:	f855 3b04 	ldr.w	r3, [r5], #4
 8010148:	4798      	blx	r3
 801014a:	3601      	adds	r6, #1
 801014c:	e7ee      	b.n	801012c <__libc_init_array+0xc>
 801014e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010152:	4798      	blx	r3
 8010154:	3601      	adds	r6, #1
 8010156:	e7f2      	b.n	801013e <__libc_init_array+0x1e>
 8010158:	08010474 	.word	0x08010474
 801015c:	08010474 	.word	0x08010474
 8010160:	08010474 	.word	0x08010474
 8010164:	08010480 	.word	0x08010480

08010168 <__retarget_lock_acquire_recursive>:
 8010168:	4770      	bx	lr

0801016a <__retarget_lock_release_recursive>:
 801016a:	4770      	bx	lr

0801016c <memcpy>:
 801016c:	440a      	add	r2, r1
 801016e:	4291      	cmp	r1, r2
 8010170:	f100 33ff 	add.w	r3, r0, #4294967295
 8010174:	d100      	bne.n	8010178 <memcpy+0xc>
 8010176:	4770      	bx	lr
 8010178:	b510      	push	{r4, lr}
 801017a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801017e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010182:	4291      	cmp	r1, r2
 8010184:	d1f9      	bne.n	801017a <memcpy+0xe>
 8010186:	bd10      	pop	{r4, pc}

08010188 <_free_r>:
 8010188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801018a:	2900      	cmp	r1, #0
 801018c:	d044      	beq.n	8010218 <_free_r+0x90>
 801018e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010192:	9001      	str	r0, [sp, #4]
 8010194:	2b00      	cmp	r3, #0
 8010196:	f1a1 0404 	sub.w	r4, r1, #4
 801019a:	bfb8      	it	lt
 801019c:	18e4      	addlt	r4, r4, r3
 801019e:	f7ff ff51 	bl	8010044 <__malloc_lock>
 80101a2:	4a1e      	ldr	r2, [pc, #120]	; (801021c <_free_r+0x94>)
 80101a4:	9801      	ldr	r0, [sp, #4]
 80101a6:	6813      	ldr	r3, [r2, #0]
 80101a8:	b933      	cbnz	r3, 80101b8 <_free_r+0x30>
 80101aa:	6063      	str	r3, [r4, #4]
 80101ac:	6014      	str	r4, [r2, #0]
 80101ae:	b003      	add	sp, #12
 80101b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80101b4:	f7ff bf4c 	b.w	8010050 <__malloc_unlock>
 80101b8:	42a3      	cmp	r3, r4
 80101ba:	d908      	bls.n	80101ce <_free_r+0x46>
 80101bc:	6825      	ldr	r5, [r4, #0]
 80101be:	1961      	adds	r1, r4, r5
 80101c0:	428b      	cmp	r3, r1
 80101c2:	bf01      	itttt	eq
 80101c4:	6819      	ldreq	r1, [r3, #0]
 80101c6:	685b      	ldreq	r3, [r3, #4]
 80101c8:	1949      	addeq	r1, r1, r5
 80101ca:	6021      	streq	r1, [r4, #0]
 80101cc:	e7ed      	b.n	80101aa <_free_r+0x22>
 80101ce:	461a      	mov	r2, r3
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	b10b      	cbz	r3, 80101d8 <_free_r+0x50>
 80101d4:	42a3      	cmp	r3, r4
 80101d6:	d9fa      	bls.n	80101ce <_free_r+0x46>
 80101d8:	6811      	ldr	r1, [r2, #0]
 80101da:	1855      	adds	r5, r2, r1
 80101dc:	42a5      	cmp	r5, r4
 80101de:	d10b      	bne.n	80101f8 <_free_r+0x70>
 80101e0:	6824      	ldr	r4, [r4, #0]
 80101e2:	4421      	add	r1, r4
 80101e4:	1854      	adds	r4, r2, r1
 80101e6:	42a3      	cmp	r3, r4
 80101e8:	6011      	str	r1, [r2, #0]
 80101ea:	d1e0      	bne.n	80101ae <_free_r+0x26>
 80101ec:	681c      	ldr	r4, [r3, #0]
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	6053      	str	r3, [r2, #4]
 80101f2:	440c      	add	r4, r1
 80101f4:	6014      	str	r4, [r2, #0]
 80101f6:	e7da      	b.n	80101ae <_free_r+0x26>
 80101f8:	d902      	bls.n	8010200 <_free_r+0x78>
 80101fa:	230c      	movs	r3, #12
 80101fc:	6003      	str	r3, [r0, #0]
 80101fe:	e7d6      	b.n	80101ae <_free_r+0x26>
 8010200:	6825      	ldr	r5, [r4, #0]
 8010202:	1961      	adds	r1, r4, r5
 8010204:	428b      	cmp	r3, r1
 8010206:	bf04      	itt	eq
 8010208:	6819      	ldreq	r1, [r3, #0]
 801020a:	685b      	ldreq	r3, [r3, #4]
 801020c:	6063      	str	r3, [r4, #4]
 801020e:	bf04      	itt	eq
 8010210:	1949      	addeq	r1, r1, r5
 8010212:	6021      	streq	r1, [r4, #0]
 8010214:	6054      	str	r4, [r2, #4]
 8010216:	e7ca      	b.n	80101ae <_free_r+0x26>
 8010218:	b003      	add	sp, #12
 801021a:	bd30      	pop	{r4, r5, pc}
 801021c:	24002ba4 	.word	0x24002ba4

08010220 <_init>:
 8010220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010222:	bf00      	nop
 8010224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010226:	bc08      	pop	{r3}
 8010228:	469e      	mov	lr, r3
 801022a:	4770      	bx	lr

0801022c <_fini>:
 801022c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801022e:	bf00      	nop
 8010230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010232:	bc08      	pop	{r3}
 8010234:	469e      	mov	lr, r3
 8010236:	4770      	bx	lr
