
USB_CAN_H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011220  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  080114b8  080114b8  000214b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011800  08011800  00021800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  08011808  08011808  00021808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000000c  08011814  08011814  00021814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000154  24000000  08011820  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002cac  24000154  08011974  00030154  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002e00  08011974  00032e00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030182  2**0
                  CONTENTS, READONLY
 11 .debug_info   00041010  00000000  00000000  000301c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006cc9  00000000  00000000  000711d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000025e8  00000000  00000000  00077ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001d16  00000000  00000000  0007a488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004288d  00000000  00000000  0007c19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002e821  00000000  00000000  000bea2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00186936  00000000  00000000  000ed24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000ac1c  00000000  00000000  00273b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  0027e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000154 	.word	0x24000154
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080114a0 	.word	0x080114a0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000158 	.word	0x24000158
 80002d4:	080114a0 	.word	0x080114a0

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b970 	b.w	80005e0 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	460d      	mov	r5, r1
 8000320:	4604      	mov	r4, r0
 8000322:	460f      	mov	r7, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14a      	bne.n	80003be <__udivmoddi4+0xa6>
 8000328:	428a      	cmp	r2, r1
 800032a:	4694      	mov	ip, r2
 800032c:	d965      	bls.n	80003fa <__udivmoddi4+0xe2>
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	b143      	cbz	r3, 8000346 <__udivmoddi4+0x2e>
 8000334:	fa02 fc03 	lsl.w	ip, r2, r3
 8000338:	f1c3 0220 	rsb	r2, r3, #32
 800033c:	409f      	lsls	r7, r3
 800033e:	fa20 f202 	lsr.w	r2, r0, r2
 8000342:	4317      	orrs	r7, r2
 8000344:	409c      	lsls	r4, r3
 8000346:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034a:	fa1f f58c 	uxth.w	r5, ip
 800034e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000352:	0c22      	lsrs	r2, r4, #16
 8000354:	fb0e 7711 	mls	r7, lr, r1, r7
 8000358:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800035c:	fb01 f005 	mul.w	r0, r1, r5
 8000360:	4290      	cmp	r0, r2
 8000362:	d90a      	bls.n	800037a <__udivmoddi4+0x62>
 8000364:	eb1c 0202 	adds.w	r2, ip, r2
 8000368:	f101 37ff 	add.w	r7, r1, #4294967295
 800036c:	f080 811c 	bcs.w	80005a8 <__udivmoddi4+0x290>
 8000370:	4290      	cmp	r0, r2
 8000372:	f240 8119 	bls.w	80005a8 <__udivmoddi4+0x290>
 8000376:	3902      	subs	r1, #2
 8000378:	4462      	add	r2, ip
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	b2a4      	uxth	r4, r4
 800037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000382:	fb0e 2210 	mls	r2, lr, r0, r2
 8000386:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038a:	fb00 f505 	mul.w	r5, r0, r5
 800038e:	42a5      	cmp	r5, r4
 8000390:	d90a      	bls.n	80003a8 <__udivmoddi4+0x90>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295
 800039a:	f080 8107 	bcs.w	80005ac <__udivmoddi4+0x294>
 800039e:	42a5      	cmp	r5, r4
 80003a0:	f240 8104 	bls.w	80005ac <__udivmoddi4+0x294>
 80003a4:	4464      	add	r4, ip
 80003a6:	3802      	subs	r0, #2
 80003a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11e      	cbz	r6, 80003ba <__udivmoddi4+0xa2>
 80003b2:	40dc      	lsrs	r4, r3
 80003b4:	2300      	movs	r3, #0
 80003b6:	e9c6 4300 	strd	r4, r3, [r6]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0xbc>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80ed 	beq.w	80005a2 <__udivmoddi4+0x28a>
 80003c8:	2100      	movs	r1, #0
 80003ca:	e9c6 0500 	strd	r0, r5, [r6]
 80003ce:	4608      	mov	r0, r1
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	fab3 f183 	clz	r1, r3
 80003d8:	2900      	cmp	r1, #0
 80003da:	d149      	bne.n	8000470 <__udivmoddi4+0x158>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d302      	bcc.n	80003e6 <__udivmoddi4+0xce>
 80003e0:	4282      	cmp	r2, r0
 80003e2:	f200 80f8 	bhi.w	80005d6 <__udivmoddi4+0x2be>
 80003e6:	1a84      	subs	r4, r0, r2
 80003e8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ec:	2001      	movs	r0, #1
 80003ee:	4617      	mov	r7, r2
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d0e2      	beq.n	80003ba <__udivmoddi4+0xa2>
 80003f4:	e9c6 4700 	strd	r4, r7, [r6]
 80003f8:	e7df      	b.n	80003ba <__udivmoddi4+0xa2>
 80003fa:	b902      	cbnz	r2, 80003fe <__udivmoddi4+0xe6>
 80003fc:	deff      	udf	#255	; 0xff
 80003fe:	fab2 f382 	clz	r3, r2
 8000402:	2b00      	cmp	r3, #0
 8000404:	f040 8090 	bne.w	8000528 <__udivmoddi4+0x210>
 8000408:	1a8a      	subs	r2, r1, r2
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2101      	movs	r1, #1
 8000414:	fbb2 f5f7 	udiv	r5, r2, r7
 8000418:	fb07 2015 	mls	r0, r7, r5, r2
 800041c:	0c22      	lsrs	r2, r4, #16
 800041e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000422:	fb0e f005 	mul.w	r0, lr, r5
 8000426:	4290      	cmp	r0, r2
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x124>
 800042a:	eb1c 0202 	adds.w	r2, ip, r2
 800042e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4290      	cmp	r0, r2
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2b8>
 800043a:	4645      	mov	r5, r8
 800043c:	1a12      	subs	r2, r2, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb2 f0f7 	udiv	r0, r2, r7
 8000444:	fb07 2210 	mls	r2, r7, r0, r2
 8000448:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x14e>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 32ff 	add.w	r2, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x14c>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2c2>
 8000464:	4610      	mov	r0, r2
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800046e:	e79f      	b.n	80003b0 <__udivmoddi4+0x98>
 8000470:	f1c1 0720 	rsb	r7, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa05 f401 	lsl.w	r4, r5, r1
 8000482:	fa20 f307 	lsr.w	r3, r0, r7
 8000486:	40fd      	lsrs	r5, r7
 8000488:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048c:	4323      	orrs	r3, r4
 800048e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	fb09 5518 	mls	r5, r9, r8, r5
 800049a:	0c1c      	lsrs	r4, r3, #16
 800049c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a0:	fb08 f50e 	mul.w	r5, r8, lr
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	fa00 f001 	lsl.w	r0, r0, r1
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1c 0404 	adds.w	r4, ip, r4
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2b4>
 80004bc:	42a5      	cmp	r5, r4
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2b4>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4464      	add	r4, ip
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	b29d      	uxth	r5, r3
 80004cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d0:	fb09 4413 	mls	r4, r9, r3, r4
 80004d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004dc:	45a6      	cmp	lr, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1c 0404 	adds.w	r4, ip, r4
 80004e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2ac>
 80004ea:	45a6      	cmp	lr, r4
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2ac>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	4464      	add	r4, ip
 80004f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004f6:	fba3 9502 	umull	r9, r5, r3, r2
 80004fa:	eba4 040e 	sub.w	r4, r4, lr
 80004fe:	42ac      	cmp	r4, r5
 8000500:	46c8      	mov	r8, r9
 8000502:	46ae      	mov	lr, r5
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x29c>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x298>
 8000508:	b156      	cbz	r6, 8000520 <__udivmoddi4+0x208>
 800050a:	ebb0 0208 	subs.w	r2, r0, r8
 800050e:	eb64 040e 	sbc.w	r4, r4, lr
 8000512:	fa04 f707 	lsl.w	r7, r4, r7
 8000516:	40ca      	lsrs	r2, r1
 8000518:	40cc      	lsrs	r4, r1
 800051a:	4317      	orrs	r7, r2
 800051c:	e9c6 7400 	strd	r7, r4, [r6]
 8000520:	4618      	mov	r0, r3
 8000522:	2100      	movs	r1, #0
 8000524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000528:	f1c3 0120 	rsb	r1, r3, #32
 800052c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000530:	fa20 f201 	lsr.w	r2, r0, r1
 8000534:	fa25 f101 	lsr.w	r1, r5, r1
 8000538:	409d      	lsls	r5, r3
 800053a:	432a      	orrs	r2, r5
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb1 f0f7 	udiv	r0, r1, r7
 8000548:	fb07 1510 	mls	r5, r7, r0, r1
 800054c:	0c11      	lsrs	r1, r2, #16
 800054e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000552:	fb00 f50e 	mul.w	r5, r0, lr
 8000556:	428d      	cmp	r5, r1
 8000558:	fa04 f403 	lsl.w	r4, r4, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x258>
 800055e:	eb1c 0101 	adds.w	r1, ip, r1
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 8000568:	428d      	cmp	r5, r1
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800056c:	3802      	subs	r0, #2
 800056e:	4461      	add	r1, ip
 8000570:	1b49      	subs	r1, r1, r5
 8000572:	b292      	uxth	r2, r2
 8000574:	fbb1 f5f7 	udiv	r5, r1, r7
 8000578:	fb07 1115 	mls	r1, r7, r5, r1
 800057c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000580:	fb05 f10e 	mul.w	r1, r5, lr
 8000584:	4291      	cmp	r1, r2
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x282>
 8000588:	eb1c 0202 	adds.w	r2, ip, r2
 800058c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2a8>
 8000592:	4291      	cmp	r1, r2
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2a8>
 8000596:	3d02      	subs	r5, #2
 8000598:	4462      	add	r2, ip
 800059a:	1a52      	subs	r2, r2, r1
 800059c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0xfc>
 80005a2:	4631      	mov	r1, r6
 80005a4:	4630      	mov	r0, r6
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xa2>
 80005a8:	4639      	mov	r1, r7
 80005aa:	e6e6      	b.n	800037a <__udivmoddi4+0x62>
 80005ac:	4610      	mov	r0, r2
 80005ae:	e6fb      	b.n	80003a8 <__udivmoddi4+0x90>
 80005b0:	4548      	cmp	r0, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005bc:	3b01      	subs	r3, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005c0:	4645      	mov	r5, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x282>
 80005c4:	462b      	mov	r3, r5
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x258>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005d0:	3d02      	subs	r5, #2
 80005d2:	4462      	add	r2, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x124>
 80005d6:	4608      	mov	r0, r1
 80005d8:	e70a      	b.n	80003f0 <__udivmoddi4+0xd8>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x14e>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005e8:	4b2e      	ldr	r3, [pc, #184]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 80005ea:	4a2f      	ldr	r2, [pc, #188]	; (80006a8 <MX_FDCAN1_Init+0xc4>)
 80005ec:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005ee:	4b2d      	ldr	r3, [pc, #180]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80005fa:	4b2a      	ldr	r3, [pc, #168]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000602:	2200      	movs	r2, #0
 8000604:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000606:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000608:	2200      	movs	r2, #0
 800060a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 800060e:	2206      	movs	r2, #6
 8000610:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000612:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000614:	2201      	movs	r2, #1
 8000616:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 800061a:	2205      	movs	r2, #5
 800061c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000620:	2202      	movs	r2, #2
 8000622:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000626:	2201      	movs	r2, #1
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800062a:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 800062c:	2201      	movs	r2, #1
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000632:	2201      	movs	r2, #1
 8000634:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000638:	2201      	movs	r2, #1
 800063a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 800063e:	2200      	movs	r2, #0
 8000640:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000644:	2200      	movs	r2, #0
 8000646:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 800064a:	2201      	movs	r2, #1
 800064c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000650:	2201      	movs	r2, #1
 8000652:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000656:	2204      	movs	r2, #4
 8000658:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 800065c:	2200      	movs	r2, #0
 800065e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000662:	2204      	movs	r2, #4
 8000664:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000668:	2200      	movs	r2, #0
 800066a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 800066e:	2204      	movs	r2, #4
 8000670:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000674:	2200      	movs	r2, #0
 8000676:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 800067a:	2200      	movs	r2, #0
 800067c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000680:	2201      	movs	r2, #1
 8000682:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000686:	2200      	movs	r2, #0
 8000688:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 800068c:	2204      	movs	r2, #4
 800068e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_FDCAN1_Init+0xc0>)
 8000692:	f003 f8a9 	bl	80037e8 <HAL_FDCAN_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800069c:	f000 ff2c 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	24000170 	.word	0x24000170
 80006a8:	4000a000 	.word	0x4000a000

080006ac <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80006b0:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 80006b2:	4a30      	ldr	r2, [pc, #192]	; (8000774 <MX_FDCAN2_Init+0xc8>)
 80006b4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006b6:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80006bc:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80006c2:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80006ce:	4b28      	ldr	r3, [pc, #160]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 80006d6:	2206      	movs	r2, #6
 80006d8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 80006dc:	2201      	movs	r2, #1
 80006de:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 5;
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 80006e2:	2205      	movs	r2, #5
 80006e4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80006ec:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80006f8:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 8000700:	2201      	movs	r2, #1
 8000702:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 1000;
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 8000706:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800070a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 800070e:	2200      	movs	r2, #0
 8000710:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 8000714:	2201      	movs	r2, #1
 8000716:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 1;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 800071a:	2201      	movs	r2, #1
 800071c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 8000720:	2204      	movs	r2, #4
 8000722:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 8000726:	2200      	movs	r2, #0
 8000728:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 800072c:	2204      	movs	r2, #4
 800072e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 8000732:	2200      	movs	r2, #0
 8000734:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 8000738:	2204      	movs	r2, #4
 800073a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 800073e:	2200      	movs	r2, #0
 8000740:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 8000744:	2200      	movs	r2, #0
 8000746:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 800074a:	2201      	movs	r2, #1
 800074c:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 8000750:	2200      	movs	r2, #0
 8000752:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 8000756:	2204      	movs	r2, #4
 8000758:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_FDCAN2_Init+0xc4>)
 800075c:	f003 f844 	bl	80037e8 <HAL_FDCAN_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000766:	f000 fec7 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	24000210 	.word	0x24000210
 8000774:	4000a400 	.word	0x4000a400

08000778 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b0bc      	sub	sp, #240	; 0xf0
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000790:	f107 0318 	add.w	r3, r7, #24
 8000794:	22c0      	movs	r2, #192	; 0xc0
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f010 fd9f 	bl	80112dc <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a5e      	ldr	r2, [pc, #376]	; (800091c <HAL_FDCAN_MspInit+0x1a4>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d158      	bne.n	800085a <HAL_FDCAN_MspInit+0xe2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80007a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007ac:	f04f 0300 	mov.w	r3, #0
 80007b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80007b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007bc:	f107 0318 	add.w	r3, r7, #24
 80007c0:	4618      	mov	r0, r3
 80007c2:	f006 fe65 	bl	8007490 <HAL_RCCEx_PeriphCLKConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80007cc:	f000 fe94 	bl	80014f8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80007d0:	4b53      	ldr	r3, [pc, #332]	; (8000920 <HAL_FDCAN_MspInit+0x1a8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	4a52      	ldr	r2, [pc, #328]	; (8000920 <HAL_FDCAN_MspInit+0x1a8>)
 80007d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80007da:	4b51      	ldr	r3, [pc, #324]	; (8000920 <HAL_FDCAN_MspInit+0x1a8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d10e      	bne.n	8000800 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80007e2:	4b50      	ldr	r3, [pc, #320]	; (8000924 <HAL_FDCAN_MspInit+0x1ac>)
 80007e4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80007e8:	4a4e      	ldr	r2, [pc, #312]	; (8000924 <HAL_FDCAN_MspInit+0x1ac>)
 80007ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ee:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80007f2:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <HAL_FDCAN_MspInit+0x1ac>)
 80007f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80007f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000800:	4b48      	ldr	r3, [pc, #288]	; (8000924 <HAL_FDCAN_MspInit+0x1ac>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000806:	4a47      	ldr	r2, [pc, #284]	; (8000924 <HAL_FDCAN_MspInit+0x1ac>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000810:	4b44      	ldr	r3, [pc, #272]	; (8000924 <HAL_FDCAN_MspInit+0x1ac>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800081e:	2303      	movs	r3, #3
 8000820:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000836:	2309      	movs	r3, #9
 8000838:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800083c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000840:	4619      	mov	r1, r3
 8000842:	4839      	ldr	r0, [pc, #228]	; (8000928 <HAL_FDCAN_MspInit+0x1b0>)
 8000844:	f004 f98a 	bl	8004b5c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2013      	movs	r0, #19
 800084e:	f002 ff96 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000852:	2013      	movs	r0, #19
 8000854:	f002 ffad 	bl	80037b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000858:	e05c      	b.n	8000914 <HAL_FDCAN_MspInit+0x19c>
  else if(fdcanHandle->Instance==FDCAN2)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a33      	ldr	r2, [pc, #204]	; (800092c <HAL_FDCAN_MspInit+0x1b4>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d157      	bne.n	8000914 <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000864:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000870:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000878:	f107 0318 	add.w	r3, r7, #24
 800087c:	4618      	mov	r0, r3
 800087e:	f006 fe07 	bl	8007490 <HAL_RCCEx_PeriphCLKConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <HAL_FDCAN_MspInit+0x114>
      Error_Handler();
 8000888:	f000 fe36 	bl	80014f8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <HAL_FDCAN_MspInit+0x1a8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	4a23      	ldr	r2, [pc, #140]	; (8000920 <HAL_FDCAN_MspInit+0x1a8>)
 8000894:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000896:	4b22      	ldr	r3, [pc, #136]	; (8000920 <HAL_FDCAN_MspInit+0x1a8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d10e      	bne.n	80008bc <HAL_FDCAN_MspInit+0x144>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <HAL_FDCAN_MspInit+0x1ac>)
 80008a0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80008a4:	4a1f      	ldr	r2, [pc, #124]	; (8000924 <HAL_FDCAN_MspInit+0x1ac>)
 80008a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008aa:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <HAL_FDCAN_MspInit+0x1ac>)
 80008b0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80008b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_FDCAN_MspInit+0x1ac>)
 80008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <HAL_FDCAN_MspInit+0x1ac>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_FDCAN_MspInit+0x1ac>)
 80008ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80008da:	2360      	movs	r3, #96	; 0x60
 80008dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80008f2:	2309      	movs	r3, #9
 80008f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80008fc:	4619      	mov	r1, r3
 80008fe:	480c      	ldr	r0, [pc, #48]	; (8000930 <HAL_FDCAN_MspInit+0x1b8>)
 8000900:	f004 f92c 	bl	8004b5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2016      	movs	r0, #22
 800090a:	f002 ff38 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 800090e:	2016      	movs	r0, #22
 8000910:	f002 ff4f 	bl	80037b2 <HAL_NVIC_EnableIRQ>
}
 8000914:	bf00      	nop
 8000916:	37f0      	adds	r7, #240	; 0xf0
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	4000a000 	.word	0x4000a000
 8000920:	240002b0 	.word	0x240002b0
 8000924:	58024400 	.word	0x58024400
 8000928:	58020c00 	.word	0x58020c00
 800092c:	4000a400 	.word	0x4000a400
 8000930:	58020400 	.word	0x58020400

08000934 <MX_GPIO_Init>:
     PB11   ------> USART3_RX
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	4b38      	ldr	r3, [pc, #224]	; (8000a2c <MX_GPIO_Init+0xf8>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	4a36      	ldr	r2, [pc, #216]	; (8000a2c <MX_GPIO_Init+0xf8>)
 8000952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095a:	4b34      	ldr	r3, [pc, #208]	; (8000a2c <MX_GPIO_Init+0xf8>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <MX_GPIO_Init+0xf8>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	4a2f      	ldr	r2, [pc, #188]	; (8000a2c <MX_GPIO_Init+0xf8>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000978:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <MX_GPIO_Init+0xf8>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <MX_GPIO_Init+0xf8>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <MX_GPIO_Init+0xf8>)
 800098e:	f043 0302 	orr.w	r3, r3, #2
 8000992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <MX_GPIO_Init+0xf8>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	f003 0302 	and.w	r3, r3, #2
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_GPIO_Init+0xf8>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <MX_GPIO_Init+0xf8>)
 80009ac:	f043 0310 	orr.w	r3, r3, #16
 80009b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_GPIO_Init+0xf8>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	f003 0310 	and.w	r3, r3, #16
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_GPIO_Init+0xf8>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <MX_GPIO_Init+0xf8>)
 80009ca:	f043 0308 	orr.w	r3, r3, #8
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_GPIO_Init+0xf8>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	f003 0308 	and.w	r3, r3, #8
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009e0:	230c      	movs	r3, #12
 80009e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f0:	2307      	movs	r3, #7
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <MX_GPIO_Init+0xfc>)
 80009fc:	f004 f8ae 	bl	8004b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a12:	2307      	movs	r3, #7
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_GPIO_Init+0x100>)
 8000a1e:	f004 f89d 	bl	8004b5c <HAL_GPIO_Init>

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	58024400 	.word	0x58024400
 8000a30:	58020000 	.word	0x58020000
 8000a34:	58020400 	.word	0x58020400

08000a38 <_ZN12G24_STM32HAL9CommonLib4ICanC1Ev>:
	ONLY_STD,
	ONLY_EXT,
	STD_AND_EXT,
};

class ICan{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <_ZN12G24_STM32HAL9CommonLib4ICanC1Ev+0x1c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	08011728 	.word	0x08011728

08000a58 <_ZNSt15__uniq_ptr_dataIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_ELb1ELb1EEC1EOS7_>:
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fd77 	bl	800155c <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1EOS7_>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1EOS7_>:
	{ }

      // Move constructors.

      /// Move constructor.
      unique_ptr(unique_ptr&&) = default;
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	683a      	ldr	r2, [r7, #0]
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ffe5 	bl	8000a58 <_ZNSt15__uniq_ptr_dataIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_ELb1ELb1EEC1EOS7_>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommC1EP19FDCAN_HandleTypeDefSt10unique_ptrINS_9CommonLib11IRingBufferINS5_8CanFrameEEESt14default_deleteIS8_EEOSB_mmm>:
		const uint32_t rx_fifo_it;

		std::unique_ptr<IRingBuffer<CanFrame> > rx_buff;
		std::unique_ptr<IRingBuffer<CanFrame> > tx_buff;
	public:
		FdCanComm(FDCAN_HandleTypeDef *_fdcan,std::unique_ptr<IRingBuffer<CanFrame>> _rx_buff,std::unique_ptr<IRingBuffer<CanFrame>> &&_tx_buff,uint32_t _rx_fifo,uint32_t _rx_filter_fifo,uint32_t _rx_fifo_it)
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
 8000aa4:	603b      	str	r3, [r7, #0]
			:fdcan(_fdcan),
		 	 rx_buff(std::move(_rx_buff)),
			 tx_buff(std::move(_tx_buff)),
			 rx_fifo(_rx_fifo),
			 rx_filter_fifo(_rx_filter_fifo),
			 rx_fifo_it(_rx_fifo_it){
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ffc5 	bl	8000a38 <_ZN12G24_STM32HAL9CommonLib4ICanC1Ev>
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommC1EP19FDCAN_HandleTypeDefSt10unique_ptrINS_9CommonLib11IRingBufferINS5_8CanFrameEEESt14default_deleteIS8_EEOSB_mmm+0x6c>)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	601a      	str	r2, [r3, #0]
			:fdcan(_fdcan),
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	605a      	str	r2, [r3, #4]
			 rx_fifo(_rx_fifo),
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6a3a      	ldr	r2, [r7, #32]
 8000abe:	609a      	str	r2, [r3, #8]
			 rx_filter_fifo(_rx_filter_fifo),
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ac4:	60da      	str	r2, [r3, #12]
			 rx_fifo_it(_rx_fifo_it){
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000aca:	611a      	str	r2, [r3, #16]
		 	 rx_buff(std::move(_rx_buff)),
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f103 0414 	add.w	r4, r3, #20
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 fd15 	bl	8001502 <_ZSt4moveIRSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEESt14default_deleteIS5_EEEONSt16remove_referenceIT_E4typeEOSB_>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	4619      	mov	r1, r3
 8000adc:	4620      	mov	r0, r4
 8000ade:	f7ff ffcb 	bl	8000a78 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1EOS7_>
			 tx_buff(std::move(_tx_buff)),
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f103 0418 	add.w	r4, r3, #24
 8000ae8:	6838      	ldr	r0, [r7, #0]
 8000aea:	f000 fd0a 	bl	8001502 <_ZSt4moveIRSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEESt14default_deleteIS5_EEEONSt16remove_referenceIT_E4typeEOSB_>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4619      	mov	r1, r3
 8000af2:	4620      	mov	r0, r4
 8000af4:	f7ff ffc0 	bl	8000a78 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1EOS7_>
		}
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4618      	mov	r0, r3
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd90      	pop	{r4, r7, pc}
 8000b02:	bf00      	nop
 8000b04:	08011710 	.word	0x08011710

08000b08 <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm12tx_availableEv>:
			HAL_FDCAN_Start(fdcan);
			HAL_FDCAN_ActivateNotification(fdcan, rx_fifo_it, 0);
			HAL_FDCAN_ActivateNotification(fdcan, FDCAN_IT_TX_COMPLETE, FDCAN_TX_BUFFER0 | FDCAN_TX_BUFFER1 | FDCAN_TX_BUFFER2);
		}

		uint32_t tx_available(void)const override{return tx_buff->get_free_level();}
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3318      	adds	r3, #24
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fd5d 	bl	80015d4 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	3208      	adds	r2, #8
 8000b20:	6812      	ldr	r2, [r2, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	4790      	blx	r2
 8000b26:	4603      	mov	r3, r0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm12rx_availableEv>:
		void tx_interrupt_task(void);
		bool tx(const CanFrame &tx_frame)override;

		uint32_t rx_available(void)const override{return rx_buff->get_busy_level();}
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3314      	adds	r3, #20
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 fd49 	bl	80015d4 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>
 8000b42:	4603      	mov	r3, r0
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	320c      	adds	r2, #12
 8000b48:	6812      	ldr	r2, [r2, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	4790      	blx	r2
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm11get_handlerEv>:
		void rx_interrupt_task(void);
		bool rx(CanFrame &rx_frame)override;

		void set_filter_free(uint32_t filter_no);

		FDCAN_HandleTypeDef *get_handler(void)const{return fdcan;}
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE>:
	};

	inline bool FdCanComm::tx(const CanFrame &tx_frame){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	; 0x30
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
		if(HAL_FDCAN_GetTxFifoFreeLevel(fdcan) > 0){
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f003 fa7a 	bl	8004078 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bf14      	ite	ne
 8000b8a:	2301      	movne	r3, #1
 8000b8c:	2300      	moveq	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d02b      	beq.n	8000bec <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0x7c>
			FDCAN_TxHeaderTypeDef tx_header;
			tx_header.Identifier = tx_frame.id;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60fb      	str	r3, [r7, #12]
			tx_header.IdType = tx_frame.is_ext_id ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	7c1b      	ldrb	r3, [r3, #16]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0x38>
 8000ba2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ba6:	e000      	b.n	8000baa <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0x3a>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
			tx_header.TxFrameType = tx_frame.is_remote ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	7c5b      	ldrb	r3, [r3, #17]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0x4a>
 8000bb4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bb8:	e000      	b.n	8000bbc <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0x4c>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
			tx_header.DataLength = (uint32_t)tx_frame.data_length << 16;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	041b      	lsls	r3, r3, #16
 8000bc4:	61bb      	str	r3, [r7, #24]
			tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
			tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
			tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
			tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
			tx_header.MessageMarker = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c

			HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &tx_header, const_cast<uint8_t*>(tx_frame.data));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	f107 010c 	add.w	r1, r7, #12
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 f87e 	bl	8003ce6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000bea:	e012      	b.n	8000c12 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0xa2>
		}else{
			if(!tx_buff->push(tx_frame)){
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3318      	adds	r3, #24
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 fcef 	bl	80015d4 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	6812      	ldr	r2, [r2, #0]
 8000bfc:	6839      	ldr	r1, [r7, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	4790      	blx	r2
 8000c02:	4603      	mov	r3, r0
 8000c04:	f083 0301 	eor.w	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0xa2>
				return false;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e000      	b.n	8000c14 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE+0xa4>
			}
		}
		return true;
 8000c12:	2301      	movs	r3, #1
	}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3730      	adds	r7, #48	; 0x30
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv>:
	inline void FdCanComm::tx_interrupt_task(void){
 8000c1c:	b5b0      	push	{r4, r5, r7, lr}
 8000c1e:	b090      	sub	sp, #64	; 0x40
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
		while(HAL_FDCAN_GetTxFifoFreeLevel(fdcan) && tx_buff->get_busy_level()){
 8000c24:	e046      	b.n	8000cb4 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0x98>
			CanFrame tx_frame;
 8000c26:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0xd8>)
 8000c28:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000c2c:	461d      	mov	r5, r3
 8000c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c32:	682b      	ldr	r3, [r5, #0]
 8000c34:	6023      	str	r3, [r4, #0]

			if(!tx_buff->pop(tx_frame)){
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3318      	adds	r3, #24
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fcca 	bl	80015d4 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>
 8000c40:	4603      	mov	r3, r0
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	3204      	adds	r2, #4
 8000c46:	6812      	ldr	r2, [r2, #0]
 8000c48:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	4790      	blx	r2
 8000c50:	4603      	mov	r3, r0
 8000c52:	f083 0301 	eor.w	r3, r3, #1
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0x44>
				break;
 8000c5c:	bf00      	nop
			tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
			tx_header.MessageMarker = 0;

			HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &tx_header, const_cast<uint8_t*>(tx_frame.data));
		}
	}
 8000c5e:	e044      	b.n	8000cea <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0xce>
			tx_header.Identifier = tx_frame.id;
 8000c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c62:	60bb      	str	r3, [r7, #8]
			tx_header.IdType = tx_frame.is_ext_id ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 8000c64:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0x56>
 8000c6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c70:	e000      	b.n	8000c74 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0x58>
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
			tx_header.TxFrameType = tx_frame.is_remote ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 8000c76:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0x68>
 8000c7e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c82:	e000      	b.n	8000c86 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0x6a>
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
			tx_header.DataLength = (uint32_t)tx_frame.data_length << 16;
 8000c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c8a:	041b      	lsls	r3, r3, #16
 8000c8c:	617b      	str	r3, [r7, #20]
			tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
			tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
			tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
			tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
			tx_header.MessageMarker = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
			HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &tx_header, const_cast<uint8_t*>(tx_frame.data));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000caa:	f107 0108 	add.w	r1, r7, #8
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 f819 	bl	8003ce6 <HAL_FDCAN_AddMessageToTxFifoQ>
		while(HAL_FDCAN_GetTxFifoFreeLevel(fdcan) && tx_buff->get_busy_level()){
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f003 f9dd 	bl	8004078 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00f      	beq.n	8000ce4 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0xc8>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3318      	adds	r3, #24
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 fc83 	bl	80015d4 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	320c      	adds	r2, #12
 8000cd4:	6812      	ldr	r2, [r2, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	4790      	blx	r2
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0xc8>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e000      	b.n	8000ce6 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0xca>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d19d      	bne.n	8000c26 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv+0xa>
	}
 8000cea:	bf00      	nop
 8000cec:	3740      	adds	r7, #64	; 0x40
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	080114b8 	.word	0x080114b8

08000cf8 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2rxERNS_9CommonLib8CanFrameE>:


	inline bool FdCanComm::rx(CanFrame &rx_frame){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
		if(rx_buff->pop(rx_frame)){
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3314      	adds	r3, #20
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 fc64 	bl	80015d4 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	3204      	adds	r2, #4
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	6839      	ldr	r1, [r7, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	4790      	blx	r2
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2rxERNS_9CommonLib8CanFrameE+0x2c>
			return true;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2rxERNS_9CommonLib8CanFrameE+0x2e>
		}else{
			return true;
 8000d24:	2301      	movs	r3, #1
		}
	}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17rx_interrupt_taskEv>:
	inline void FdCanComm::rx_interrupt_task(void){
 8000d30:	b5b0      	push	{r4, r5, r7, lr}
 8000d32:	b092      	sub	sp, #72	; 0x48
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
		FDCAN_RxHeaderTypeDef rx_header;
		CanFrame rx_frame;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17rx_interrupt_taskEv+0x78>)
 8000d3a:	f107 040c 	add.w	r4, r7, #12
 8000d3e:	461d      	mov	r5, r3
 8000d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d44:	682b      	ldr	r3, [r5, #0]
 8000d46:	6023      	str	r3, [r4, #0]

		HAL_FDCAN_GetRxMessage(fdcan, rx_fifo, &rx_header, rx_frame.data);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6858      	ldr	r0, [r3, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6899      	ldr	r1, [r3, #8]
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	f107 0220 	add.w	r2, r7, #32
 8000d58:	f003 f820 	bl	8003d9c <HAL_FDCAN_GetRxMessage>

		rx_frame.data_length = rx_header.DataLength>>16;
 8000d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5e:	0c1b      	lsrs	r3, r3, #16
 8000d60:	617b      	str	r3, [r7, #20]
		rx_frame.is_remote = rx_header.RxFrameType == FDCAN_REMOTE_FRAME ? true : false;
 8000d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d68:	bf0c      	ite	eq
 8000d6a:	2301      	moveq	r3, #1
 8000d6c:	2300      	movne	r3, #0
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	777b      	strb	r3, [r7, #29]
		rx_frame.is_ext_id = rx_header.IdType == FDCAN_EXTENDED_ID ? true : false;
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d78:	bf0c      	ite	eq
 8000d7a:	2301      	moveq	r3, #1
 8000d7c:	2300      	movne	r3, #0
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	773b      	strb	r3, [r7, #28]
		rx_frame.id = rx_header.Identifier;
 8000d82:	6a3b      	ldr	r3, [r7, #32]
 8000d84:	61bb      	str	r3, [r7, #24]

		rx_buff->push(rx_frame);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3314      	adds	r3, #20
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fc22 	bl	80015d4 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>
 8000d90:	4603      	mov	r3, r0
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	6812      	ldr	r2, [r2, #0]
 8000d96:	f107 010c 	add.w	r1, r7, #12
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	4790      	blx	r2
	}
 8000d9e:	bf00      	nop
 8000da0:	3748      	adds	r7, #72	; 0x48
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bdb0      	pop	{r4, r5, r7, pc}
 8000da6:	bf00      	nop
 8000da8:	080114b8 	.word	0x080114b8

08000dac <_ZN12G24_STM32HAL9CommonLib4IPWMC1Ev>:

#include "main.h"

namespace G24_STM32HAL::CommonLib{

class IPWM{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <_ZN12G24_STM32HAL9CommonLib4IPWMC1Ev+0x1c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	080116e8 	.word	0x080116e8

08000dcc <_ZN12G24_STM32HAL9CommonLib7PWMHardC1EP17TIM_HandleTypeDefmff>:
	const float min;
	const float max;
	const float diff_inv;

public:
	PWMHard(TIM_HandleTypeDef *_tim,uint32_t _ch,float _min = 0,float _max = 1)
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6178      	str	r0, [r7, #20]
 8000dd4:	6139      	str	r1, [r7, #16]
 8000dd6:	60fa      	str	r2, [r7, #12]
 8000dd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ddc:	edc7 0a01 	vstr	s1, [r7, #4]
		: tim(_tim),ch(_ch),min(_min),max(_max),diff_inv(1/(max - min)){
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ffe2 	bl	8000dac <_ZN12G24_STM32HAL9CommonLib4IPWMC1Ev>
 8000de8:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <_ZN12G24_STM32HAL9CommonLib7PWMHardC1EP17TIM_HandleTypeDefmff+0x64>)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	611a      	str	r2, [r3, #16]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	ed93 7a04 	vldr	s14, [r3, #16]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	edc3 7a05 	vstr	s15, [r3, #20]
	}
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	08011788 	.word	0x08011788

08000e34 <_ZN12G24_STM32HAL9CommonLib4ILEDC1Ev>:
	struct LEDState{
		bool state;
		uint16_t length;
	};

	class ILED{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <_ZN12G24_STM32HAL9CommonLib4ILEDC1Ev+0x1c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	080116d8 	.word	0x080116d8

08000e54 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>:
		const LEDState *playing_pattern = nullptr;
		uint32_t pattern_count = 0;
		uint32_t length_count = 0;

	public:
		LEDPwm(TIM_HandleTypeDef *tim,uint32_t ch):pwm(tim,ch){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ffe6 	bl	8000e34 <_ZN12G24_STM32HAL9CommonLib4ILEDC1Ev>
 8000e68:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm+0x54>)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3304      	adds	r3, #4
 8000e72:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000e76:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8000eac <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm+0x58>
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ffa4 	bl	8000dcc <_ZN12G24_STM32HAL9CommonLib7PWMHardC1EP17TIM_HandleTypeDefmff>
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e8a:	61da      	str	r2, [r3, #28]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	621a      	str	r2, [r3, #32]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2200      	movs	r2, #0
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	629a      	str	r2, [r3, #40]	; 0x28
		}
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	080116c8 	.word	0x080116c8
 8000eac:	00000000 	.word	0x00000000

08000eb0 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>:

		void start(void){pwm.start();}

		void play(const LEDState *pattern) override{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
			playing_pattern = pattern;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	621a      	str	r2, [r3, #32]
			pattern_count = 0;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
			length_count = 0;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28

			length_count = playing_pattern[pattern_count].length;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a1a      	ldr	r2, [r3, #32]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	885b      	ldrh	r3, [r3, #2]
 8000eda:	461a      	mov	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	629a      	str	r2, [r3, #40]	; 0x28

			pwm.out(playing_pattern[pattern_count].state?duty:0.0f);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	1d19      	adds	r1, r3, #4
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1a      	ldr	r2, [r3, #32]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE+0x4e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	edd3 7a07 	vldr	s15, [r3, #28]
 8000efc:	e001      	b.n	8000f02 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE+0x52>
 8000efe:	eddf 7a05 	vldr	s15, [pc, #20]	; 8000f14 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE+0x64>
 8000f02:	eeb0 0a67 	vmov.f32	s0, s15
 8000f06:	4608      	mov	r0, r1
 8000f08:	f00f f81c 	bl	800ff44 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf>
		}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	00000000 	.word	0x00000000

08000f18 <_ZN12G24_STM32HAL9CommonLib6LEDPwm10is_playingEv>:

		bool is_playing(void)override{return playing_pattern!=nullptr ? true:false;}
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	bf14      	ite	ne
 8000f28:	2301      	movne	r3, #1
 8000f2a:	2300      	moveq	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d005      	beq.n	8000f56 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	2203      	movs	r2, #3
 8000f54:	4798      	blx	r3
    }
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bf0c      	ite	eq
 8000f70:	2301      	moveq	r3, #1
 8000f72:	2300      	movne	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_ZNSt8functionIFvvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ffd4 	bl	8000f3a <_ZNSt14_Function_baseD1Ev>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_ZN12G24_STM32HAL9CommonLib18IInterruptionTimerC1Ev>:

#include "main.h"
#include <functional>

namespace G24_STM32HAL::CommonLib{
	class IInterruptionTimer{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <_ZN12G24_STM32HAL9CommonLib18IInterruptionTimerC1Ev+0x1c>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	08011698 	.word	0x08011698

08000fbc <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardC1EP17TIM_HandleTypeDef>:
		TIM_HandleTypeDef *tim;
		bool first_interrupt_flag = false;

		std::function<void(void)> task = nullptr;
	public:
		InterruptionTimerHard(TIM_HandleTypeDef *_tim):tim(_tim){}
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ffe7 	bl	8000f9c <_ZN12G24_STM32HAL9CommonLib18IInterruptionTimerC1Ev>
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardC1EP17TIM_HandleTypeDef+0x3c>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	721a      	strb	r2, [r3, #8]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	330c      	adds	r3, #12
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fb13 	bl	8001612 <_ZNSt8functionIFvvEEC1EDn>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	08011680 	.word	0x08011680

08000ffc <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard13set_and_startEt>:

		void set_and_start(uint16_t period)override{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
			if(period == 0){
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d108      	bne.n	8001020 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard13set_and_startEt+0x24>
				HAL_TIM_Base_Stop_IT(tim);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4618      	mov	r0, r3
 8001014:	f008 f938 	bl	8009288 <HAL_TIM_Base_Stop_IT>
				first_interrupt_flag = false;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	721a      	strb	r2, [r3, #8]

				if(HAL_TIM_Base_GetState(tim) == HAL_TIM_STATE_READY){
					HAL_TIM_Base_Start_IT(tim);
				}
			}
		}
 800101e:	e021      	b.n	8001064 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard13set_and_startEt+0x68>
				__HAL_TIM_SET_AUTORELOAD(tim,period-1);
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	1e5a      	subs	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	60da      	str	r2, [r3, #12]
				__HAL_TIM_SET_COUNTER(tim,0);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
				if(HAL_TIM_Base_GetState(tim) == HAL_TIM_STATE_READY){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	f008 fe11 	bl	8009c6c <HAL_TIM_Base_GetState>
 800104a:	4603      	mov	r3, r0
 800104c:	2b01      	cmp	r3, #1
 800104e:	bf0c      	ite	eq
 8001050:	2301      	moveq	r3, #1
 8001052:	2300      	movne	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d004      	beq.n	8001064 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard13set_and_startEt+0x68>
					HAL_TIM_Base_Start_IT(tim);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4618      	mov	r0, r3
 8001060:	f008 f89a 	bl	8009198 <HAL_TIM_Base_Start_IT>
		}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZNK12G24_STM32HAL9CommonLib21InterruptionTimerHard9get_stateEv>:
		uint16_t get_state(void)const override{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
			if(HAL_TIM_Base_GetState(tim) == HAL_TIM_STATE_BUSY){
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	f008 fdf7 	bl	8009c6c <HAL_TIM_Base_GetState>
 800107e:	4603      	mov	r3, r0
 8001080:	2b02      	cmp	r3, #2
 8001082:	bf0c      	ite	eq
 8001084:	2301      	moveq	r3, #1
 8001086:	2300      	movne	r3, #0
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <_ZNK12G24_STM32HAL9CommonLib21InterruptionTimerHard9get_stateEv+0x32>
				return __HAL_TIM_GET_AUTORELOAD(tim)+1;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001096:	b29b      	uxth	r3, r3
 8001098:	3301      	adds	r3, #1
 800109a:	b29b      	uxth	r3, r3
 800109c:	e000      	b.n	80010a0 <_ZNK12G24_STM32HAL9CommonLib21InterruptionTimerHard9get_stateEv+0x34>
			}else{
				return 0;
 800109e:	2300      	movs	r3, #0
			}
		}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard8set_taskESt8functionIFvvEE>:

		void set_task(std::function<void(void)> f)override{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
			task = f;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	330c      	adds	r3, #12
 80010b6:	6839      	ldr	r1, [r7, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fac1 	bl	8001640 <_ZNSt8functionIFvvEEaSERKS1_>
		}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard14interrupt_taskEv>:

		void interrupt_task(void){
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
			if(!first_interrupt_flag){
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7a1b      	ldrb	r3, [r3, #8]
 80010d2:	f083 0301 	eor.w	r3, r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard14interrupt_taskEv+0x1e>
				first_interrupt_flag = true;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	721a      	strb	r2, [r3, #8]
			}else if(task != nullptr){
				task();
			}
		}
 80010e2:	e00d      	b.n	8001100 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard14interrupt_taskEv+0x3a>
			}else if(task != nullptr){
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	330c      	adds	r3, #12
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 fac3 	bl	8001676 <_ZStneIvJEEbRKSt8functionIFT_DpT0_EEDn>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard14interrupt_taskEv+0x3a>
				task();
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	330c      	adds	r3, #12
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fac8 	bl	8001690 <_ZNKSt8functionIFvvEEclEv>
		}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <_ZNK12G24_STM32HAL9CommonLib21InterruptionTimerHard11get_handlerEv>:

		TIM_HandleTypeDef *get_handler(void)const{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
			return tim;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
		}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard11reset_countEv>:

		void reset_count(void){
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
			__HAL_TIM_SET_COUNTER(tim,0);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
		}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardD1Ev>:
	class InterruptionTimerHard:public IInterruptionTimer{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardD1Ev+0x24>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	330c      	adds	r3, #12
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff15 	bl	8000f82 <_ZNSt8functionIFvvEED1Ev>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	08011680 	.word	0x08011680

08001168 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommD1Ev>:
	class FdCanComm:public ICan{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	4a08      	ldr	r2, [pc, #32]	; (8001194 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommD1Ev+0x2c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3318      	adds	r3, #24
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fa08 	bl	8001590 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3314      	adds	r3, #20
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fa03 	bl	8001590 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	08011710 	.word	0x08011710

08001198 <_ZN12G24_STM32HAL11UsbCanBoard10DeviceListC1Ev>:
		ID_REQEST,
		EMERGENCY_STOP = 0xE,
		RESET_EMERGENCY_STOP = 0xF,
	};

	struct DeviceList{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    if (htim == UsbCanBoard::led_timer.get_handler()){
 80011c0:	4809      	ldr	r0, [pc, #36]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80011c2:	f7ff ffa1 	bl	8001108 <_ZNK12G24_STM32HAL9CommonLib21InterruptionTimerHard11get_handlerEv>
 80011c6:	4602      	mov	r2, r0
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4293      	cmp	r3, r2
 80011cc:	bf0c      	ite	eq
 80011ce:	2301      	moveq	r3, #1
 80011d0:	2300      	movne	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <HAL_TIM_PeriodElapsedCallback+0x26>
    	UsbCanBoard::led_timer.interrupt_task();
 80011d8:	4803      	ldr	r0, [pc, #12]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80011da:	f7ff ff74 	bl	80010c6 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard14interrupt_taskEv>
    }
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	240002b4 	.word	0x240002b4

080011ec <HAL_FDCAN_RxFifo0Callback>:
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	if (hfdcan==UsbCanBoard::can1.get_handler()) {
 80011f6:	480b      	ldr	r0, [pc, #44]	; (8001224 <HAL_FDCAN_RxFifo0Callback+0x38>)
 80011f8:	f7ff fcae 	bl	8000b58 <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm11get_handlerEv>
 80011fc:	4602      	mov	r2, r0
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4293      	cmp	r3, r2
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d006      	beq.n	800121c <HAL_FDCAN_RxFifo0Callback+0x30>
		UsbCanBoard::LED1_R.play(UsbCanLib::ok);
 800120e:	4906      	ldr	r1, [pc, #24]	; (8001228 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8001210:	4806      	ldr	r0, [pc, #24]	; (800122c <HAL_FDCAN_RxFifo0Callback+0x40>)
 8001212:	f7ff fe4d 	bl	8000eb0 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
		UsbCanBoard::can1.rx_interrupt_task();
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8001218:	f7ff fd8a 	bl	8000d30 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17rx_interrupt_taskEv>
	}
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	240003d8 	.word	0x240003d8
 8001228:	08011600 	.word	0x08011600
 800122c:	240002d0 	.word	0x240002d0

08001230 <HAL_FDCAN_RxFifo1Callback>:
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	if (hfdcan==UsbCanBoard::can2.get_handler()) {
 800123a:	480b      	ldr	r0, [pc, #44]	; (8001268 <HAL_FDCAN_RxFifo1Callback+0x38>)
 800123c:	f7ff fc8c 	bl	8000b58 <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm11get_handlerEv>
 8001240:	4602      	mov	r2, r0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4293      	cmp	r3, r2
 8001246:	bf0c      	ite	eq
 8001248:	2301      	moveq	r3, #1
 800124a:	2300      	movne	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <HAL_FDCAN_RxFifo1Callback+0x30>
		UsbCanBoard::LED2_R.play(UsbCanLib::ok);
 8001252:	4906      	ldr	r1, [pc, #24]	; (800126c <HAL_FDCAN_RxFifo1Callback+0x3c>)
 8001254:	4806      	ldr	r0, [pc, #24]	; (8001270 <HAL_FDCAN_RxFifo1Callback+0x40>)
 8001256:	f7ff fe2b 	bl	8000eb0 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
		UsbCanBoard::can2.rx_interrupt_task();
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <HAL_FDCAN_RxFifo1Callback+0x38>)
 800125c:	f7ff fd68 	bl	8000d30 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17rx_interrupt_taskEv>
	}
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	240003f4 	.word	0x240003f4
 800126c:	08011600 	.word	0x08011600
 8001270:	24000354 	.word	0x24000354

08001274 <HAL_FDCAN_TxBufferCompleteCallback>:
void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
	if (hfdcan==UsbCanBoard::can2.get_handler()) {
 800127e:	4815      	ldr	r0, [pc, #84]	; (80012d4 <HAL_FDCAN_TxBufferCompleteCallback+0x60>)
 8001280:	f7ff fc6a 	bl	8000b58 <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm11get_handlerEv>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4293      	cmp	r3, r2
 800128a:	bf0c      	ite	eq
 800128c:	2301      	moveq	r3, #1
 800128e:	2300      	movne	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d007      	beq.n	80012a6 <HAL_FDCAN_TxBufferCompleteCallback+0x32>
		UsbCanBoard::LED2_G.play(UsbCanLib::ok);
 8001296:	4910      	ldr	r1, [pc, #64]	; (80012d8 <HAL_FDCAN_TxBufferCompleteCallback+0x64>)
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <HAL_FDCAN_TxBufferCompleteCallback+0x68>)
 800129a:	f7ff fe09 	bl	8000eb0 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
		UsbCanBoard::can2.tx_interrupt_task();
 800129e:	480d      	ldr	r0, [pc, #52]	; (80012d4 <HAL_FDCAN_TxBufferCompleteCallback+0x60>)
 80012a0:	f7ff fcbc 	bl	8000c1c <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv>
	}else if(hfdcan==UsbCanBoard::can1.get_handler()) {
		UsbCanBoard::LED1_G.play(UsbCanLib::ok);
		UsbCanBoard::can1.tx_interrupt_task();
	}
}
 80012a4:	e012      	b.n	80012cc <HAL_FDCAN_TxBufferCompleteCallback+0x58>
	}else if(hfdcan==UsbCanBoard::can1.get_handler()) {
 80012a6:	480e      	ldr	r0, [pc, #56]	; (80012e0 <HAL_FDCAN_TxBufferCompleteCallback+0x6c>)
 80012a8:	f7ff fc56 	bl	8000b58 <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm11get_handlerEv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4293      	cmp	r3, r2
 80012b2:	bf0c      	ite	eq
 80012b4:	2301      	moveq	r3, #1
 80012b6:	2300      	movne	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <HAL_FDCAN_TxBufferCompleteCallback+0x58>
		UsbCanBoard::LED1_G.play(UsbCanLib::ok);
 80012be:	4906      	ldr	r1, [pc, #24]	; (80012d8 <HAL_FDCAN_TxBufferCompleteCallback+0x64>)
 80012c0:	4808      	ldr	r0, [pc, #32]	; (80012e4 <HAL_FDCAN_TxBufferCompleteCallback+0x70>)
 80012c2:	f7ff fdf5 	bl	8000eb0 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
		UsbCanBoard::can1.tx_interrupt_task();
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <HAL_FDCAN_TxBufferCompleteCallback+0x6c>)
 80012c8:	f7ff fca8 	bl	8000c1c <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm17tx_interrupt_taskEv>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	240003f4 	.word	0x240003f4
 80012d8:	08011600 	.word	0x08011600
 80012dc:	24000380 	.word	0x24000380
 80012e0:	240003d8 	.word	0x240003d8
 80012e4:	240002fc 	.word	0x240002fc

080012e8 <usb_cdc_rx_callback>:
void usb_cdc_rx_callback(const uint8_t *input,size_t size){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	UsbCanBoard::usb.rx_interrupt_task(input, size);
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	4803      	ldr	r0, [pc, #12]	; (8001304 <usb_cdc_rx_callback+0x1c>)
 80012f8:	f000 fb10 	bl	800191c <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE17rx_interrupt_taskEPKhj>

//	UsbCanBoard::LED1_B.play(UsbCanLib::ok);
//	UsbCanBoard::LED2_B.play(UsbCanLib::ok);
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	24000410 	.word	0x24000410

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130c:	f002 f89a 	bl	8003444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001310:	f000 f830 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001314:	f7ff fb0e 	bl	8000934 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8001318:	f7ff f964 	bl	80005e4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800131c:	f7ff f9c6 	bl	80006ac <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8001320:	f001 fc0c 	bl	8002b3c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001324:	f001 fcce 	bl	8002cc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001328:	f001 fd42 	bl	8002db0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800132c:	f00d fe28 	bl	800ef80 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8001330:	f001 ff08 	bl	8003144 <MX_UART4_Init>
  MX_UART8_Init();
 8001334:	f001 ff54 	bl	80031e0 <MX_UART8_Init>
  MX_TIM17_Init();
 8001338:	f001 fdc8 	bl	8002ecc <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
UsbCanBoard::init();
 800133c:	f00f f844 	bl	80103c8 <_ZN12G24_STM32HAL11UsbCanBoard4initEv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UsbCanBoard::usb_to_can_task();
 8001340:	f00f f8aa 	bl	8010498 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv>
	  if(UsbCanBoard::bus_is_open){
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <main+0x5c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f9      	beq.n	8001340 <main+0x38>
		  UsbCanBoard::LED1_B.play(UsbCanLib::ok);
 800134c:	4906      	ldr	r1, [pc, #24]	; (8001368 <main+0x60>)
 800134e:	4807      	ldr	r0, [pc, #28]	; (800136c <main+0x64>)
 8001350:	f7ff fdae 	bl	8000eb0 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
		  UsbCanBoard::LED2_B.play(UsbCanLib::ok);
 8001354:	4904      	ldr	r1, [pc, #16]	; (8001368 <main+0x60>)
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <main+0x68>)
 8001358:	f7ff fdaa 	bl	8000eb0 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
		  UsbCanBoard::can_to_usb_task();
 800135c:	f00f f948 	bl	80105f0 <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv>
	  UsbCanBoard::usb_to_can_task();
 8001360:	e7ee      	b.n	8001340 <main+0x38>
 8001362:	bf00      	nop
 8001364:	24000d0c 	.word	0x24000d0c
 8001368:	08011600 	.word	0x08011600
 800136c:	24000328 	.word	0x24000328
 8001370:	240003ac 	.word	0x240003ac

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b09e      	sub	sp, #120	; 0x78
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800137e:	224c      	movs	r2, #76	; 0x4c
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f00f ffaa 	bl	80112dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2220      	movs	r2, #32
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f00f ffa3 	bl	80112dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001396:	2002      	movs	r0, #2
 8001398:	f005 f84a 	bl	8006430 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	4b52      	ldr	r3, [pc, #328]	; (80014ec <SystemClock_Config+0x178>)
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	4a51      	ldr	r2, [pc, #324]	; (80014ec <SystemClock_Config+0x178>)
 80013a6:	f023 0301 	bic.w	r3, r3, #1
 80013aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013ac:	4b4f      	ldr	r3, [pc, #316]	; (80014ec <SystemClock_Config+0x178>)
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b4e      	ldr	r3, [pc, #312]	; (80014f0 <SystemClock_Config+0x17c>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	4a4d      	ldr	r2, [pc, #308]	; (80014f0 <SystemClock_Config+0x17c>)
 80013bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013c0:	6193      	str	r3, [r2, #24]
 80013c2:	4b4b      	ldr	r3, [pc, #300]	; (80014f0 <SystemClock_Config+0x17c>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013ce:	bf00      	nop
 80013d0:	4b47      	ldr	r3, [pc, #284]	; (80014f0 <SystemClock_Config+0x17c>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013dc:	bf14      	ite	ne
 80013de:	2301      	movne	r3, #1
 80013e0:	2300      	moveq	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f3      	bne.n	80013d0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e8:	4b42      	ldr	r3, [pc, #264]	; (80014f4 <SystemClock_Config+0x180>)
 80013ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013ee:	4a41      	ldr	r2, [pc, #260]	; (80014f4 <SystemClock_Config+0x180>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013f8:	4b3e      	ldr	r3, [pc, #248]	; (80014f4 <SystemClock_Config+0x180>)
 80013fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <SystemClock_Config+0x17c>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a38      	ldr	r2, [pc, #224]	; (80014f0 <SystemClock_Config+0x17c>)
 8001410:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <SystemClock_Config+0x17c>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	4b32      	ldr	r3, [pc, #200]	; (80014ec <SystemClock_Config+0x178>)
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	4a31      	ldr	r2, [pc, #196]	; (80014ec <SystemClock_Config+0x178>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800142c:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <SystemClock_Config+0x178>)
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001438:	bf00      	nop
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <SystemClock_Config+0x17c>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001446:	bf14      	ite	ne
 8001448:	2301      	movne	r3, #1
 800144a:	2300      	moveq	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f3      	bne.n	800143a <SystemClock_Config+0xc6>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001452:	2301      	movs	r3, #1
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145c:	2302      	movs	r3, #2
 800145e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001460:	2302      	movs	r3, #2
 8001462:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001464:	2301      	movs	r3, #1
 8001466:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001468:	233c      	movs	r3, #60	; 0x3c
 800146a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800146c:	2302      	movs	r3, #2
 800146e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8001470:	2314      	movs	r3, #20
 8001472:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001474:	2302      	movs	r3, #2
 8001476:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001478:	230c      	movs	r3, #12
 800147a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800147c:	2300      	movs	r3, #0
 800147e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001484:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001488:	4618      	mov	r0, r3
 800148a:	f005 f81b 	bl	80064c4 <HAL_RCC_OscConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	bf14      	ite	ne
 8001494:	2301      	movne	r3, #1
 8001496:	2300      	moveq	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800149e:	f000 f82b 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a2:	233f      	movs	r3, #63	; 0x3f
 80014a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a6:	2303      	movs	r3, #3
 80014a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80014ae:	2308      	movs	r3, #8
 80014b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014b2:	2340      	movs	r3, #64	; 0x40
 80014b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014b6:	2340      	movs	r3, #64	; 0x40
 80014b8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014c0:	2340      	movs	r3, #64	; 0x40
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2104      	movs	r1, #4
 80014ca:	4618      	mov	r0, r3
 80014cc:	f005 fc54 	bl	8006d78 <HAL_RCC_ClockConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bf14      	ite	ne
 80014d6:	2301      	movne	r3, #1
 80014d8:	2300      	moveq	r3, #0
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0x170>
  {
    Error_Handler();
 80014e0:	f000 f80a 	bl	80014f8 <Error_Handler>
  }
}
 80014e4:	bf00      	nop
 80014e6:	3778      	adds	r7, #120	; 0x78
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	58000400 	.word	0x58000400
 80014f0:	58024800 	.word	0x58024800
 80014f4:	58024400 	.word	0x58024400

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	e7fe      	b.n	8001500 <Error_Handler+0x8>

08001502 <_ZSt4moveIRSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEESt14default_deleteIS5_EEEONSt16remove_referenceIT_E4typeEOSB_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1EOS8_>:

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2729. Missing SFINAE on std::pair::operator=
      _Tuple_impl& operator=(const _Tuple_impl&) = delete;

      _Tuple_impl(_Tuple_impl&&) = default;
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	6839      	ldr	r1, [r7, #0]
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fa6d 	bl	8001a04 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEEEC1EOS7_>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_ZNSt5tupleIJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1EOS8_>:
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ffe3 	bl	8001518 <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1EOS8_>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1EOS7_>:
      __uniq_ptr_impl(__uniq_ptr_impl&& __u) noexcept
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
      : _M_t(std::move(__u._M_t))
 8001566:	687c      	ldr	r4, [r7, #4]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fa3f 	bl	80019ee <_ZSt4moveIRSt5tupleIJPN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEESt14default_deleteIS5_EEEEONSt16remove_referenceIT_E4typeEOSC_>
 8001570:	4603      	mov	r3, r0
 8001572:	4619      	mov	r1, r3
 8001574:	4620      	mov	r0, r4
 8001576:	f7ff ffe1 	bl	800153c <_ZNSt5tupleIJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1EOS8_>
      { __u._M_ptr() = nullptr; }
 800157a:	6838      	ldr	r0, [r7, #0]
 800157c:	f000 fa4e 	bl	8001a1c <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE6_M_ptrEv>
 8001580:	4603      	mov	r3, r0
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bd90      	pop	{r4, r7, pc}

08001590 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fa3e 	bl	8001a1c <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE6_M_ptrEv>
 80015a0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00c      	beq.n	80015c4 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fa43 	bl	8001a36 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE11get_deleterEv>
 80015b0:	4604      	mov	r4, r0
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f000 fa4c 	bl	8001a50 <_ZSt4moveIRPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80015b8:	4603      	mov	r3, r0
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	4620      	mov	r0, r4
 80015c0:	f000 fa51 	bl	8001a66 <_ZNKSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEclEPS4_>
	__ptr = pointer();
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
      }
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}

080015d4 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEptEv>:
	return *get();
      }

      /// Return the stored pointer.
      pointer
      operator->() const noexcept
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
      {
	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
	return get();
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fa52 	bl	8001a86 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE3getEv>
 80015e2:	4603      	mov	r3, r0
      }
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	461a      	mov	r2, r3
 80015f8:	2300      	movs	r3, #0
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	6053      	str	r3, [r2, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_ZNSt8functionIFvvEEC1EDn>:

      /**
       *  @brief Creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function(nullptr_t) noexcept
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	461a      	mov	r2, r3
 8001620:	2300      	movs	r3, #0
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	6053      	str	r3, [r2, #4]
 8001626:	6093      	str	r3, [r2, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ffde 	bl	80015ec <_ZNSt14_Function_baseC1Ev>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_ZNSt8functionIFvvEEaSERKS1_>:
       *
       *  If @a __x targets a function pointer or a reference to a function
       *  object, then this operation will not throw an %exception.
       */
      function&
      operator=(const function& __x)
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
      {
	function(__x).swap(*this);
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	6839      	ldr	r1, [r7, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fa25 	bl	8001aa0 <_ZNSt8functionIFvvEEC1ERKS1_>
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fa4a 	bl	8001af6 <_ZNSt8functionIFvvEE4swapERS1_>
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fc8b 	bl	8000f82 <_ZNSt8functionIFvvEED1Ev>
	return *this;
 800166c:	687b      	ldr	r3, [r7, #4]
      }
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_ZStneIvJEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw an %exception.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
    { return static_cast<bool>(__f); }
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 fa59 	bl	8001b38 <_ZNKSt8functionIFvvEEcvbEv>
 8001686:	4603      	mov	r3, r0
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <_ZNKSt8functionIFvvEEclEv>:
      operator()(_ArgTypes... __args) const
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fc60 	bl	8000f60 <_ZNKSt14_Function_base8_M_emptyEv>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 80016a6:	f00f fcb3 	bl	8011010 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4610      	mov	r0, r2
 80016b2:	4798      	blx	r3
 80016b4:	bf00      	nop
      }
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_ZN12G24_STM32HAL9CommonLib11IRingBufferINS0_8CanFrameEEC1Ev>:
	SIZE64,
	SIZE128,
};

template<typename T>
class IRingBuffer{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <_ZN12G24_STM32HAL9CommonLib11IRingBufferINS0_8CanFrameEEC1Ev+0x1c>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	080116f4 	.word	0x080116f4

080016dc <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EEC1Ev>:
	size_t virtual get_busy_level(void)const = 0;
	void virtual reset(void) = 0;
};

template<typename T, size_t n>
class RingBuffer : public IRingBuffer<T>{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ffe8 	bl	80016bc <_ZN12G24_STM32HAL9CommonLib11IRingBufferINS0_8CanFrameEEC1Ev>
 80016ec:	4a10      	ldr	r2, [pc, #64]	; (8001730 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EEC1Ev+0x54>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2220      	movs	r2, #32
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	1e5a      	subs	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3318      	adds	r3, #24
 8001718:	f44f 7220 	mov.w	r2, #640	; 0x280
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f00f fddc 	bl	80112dc <memset>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	08011664 	.word	0x08011664

08001734 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
  /// @endcond

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800173c:	f44f 7026 	mov.w	r0, #664	; 0x298
 8001740:	f00f fc36 	bl	8010fb0 <_Znwj>
 8001744:	4603      	mov	r3, r0
 8001746:	461c      	mov	r4, r3
 8001748:	4620      	mov	r0, r4
 800174a:	f44f 7326 	mov.w	r3, #664	; 0x298
 800174e:	461a      	mov	r2, r3
 8001750:	2100      	movs	r1, #0
 8001752:	f00f fdc3 	bl	80112dc <memset>
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff ffc0 	bl	80016dc <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EEC1Ev>
 800175c:	4621      	mov	r1, r4
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fa0a 	bl	8001b78 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEC1IS6_vEEPS4_>
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bd90      	pop	{r4, r7, pc}

0800176c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>:
      ~unique_ptr() noexcept
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fa0d 	bl	8001b96 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE6_M_ptrEv>
 800177c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00c      	beq.n	80017a0 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 fa12 	bl	8001bb0 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE11get_deleterEv>
 800178c:	4604      	mov	r4, r0
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 fa1b 	bl	8001bca <_ZSt4moveIRPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001794:	4603      	mov	r3, r0
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	4620      	mov	r0, r4
 800179c:	f000 fa20 	bl	8001be0 <_ZNKSt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEEclEPS4_>
	__ptr = pointer();
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
      }
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd90      	pop	{r4, r7, pc}

080017b0 <_ZNSt15__uniq_ptr_dataIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_ELb1ELb1EECI1St15__uniq_ptr_implIS4_S6_EIS5_INS1_10RingBufferIS3_Lj5EEEEEEPS4_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 fa35 	bl	8001c32 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1IS5_INS1_10RingBufferIS3_Lj5EEEEEEPS4_OT_>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 80017d2:	b5b0      	push	{r4, r5, r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 80017dc:	687c      	ldr	r4, [r7, #4]
 80017de:	6838      	ldr	r0, [r7, #0]
 80017e0:	f000 fa0f 	bl	8001c02 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE7releaseEv>
 80017e4:	4605      	mov	r5, r0
 80017e6:	6838      	ldr	r0, [r7, #0]
 80017e8:	f000 f9e2 	bl	8001bb0 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE11get_deleterEv>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 fa14 	bl	8001c1c <_ZSt7forwardISt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	4629      	mov	r1, r5
 80017fa:	4620      	mov	r0, r4
 80017fc:	f7ff ffd8 	bl	80017b0 <_ZNSt15__uniq_ptr_dataIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_ELb1ELb1EECI1St15__uniq_ptr_implIS4_S6_EIS5_INS1_10RingBufferIS3_Lj5EEEEEEPS4_OT_>
	{ }
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800180c <_ZN12G24_STM32HAL9CommonLib7ISerialC1Ev>:
	static constexpr size_t max_size = 64;
	uint8_t data[max_size] = {0};
	size_t size = 0;
};

class ISerial{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	4a04      	ldr	r2, [pc, #16]	; (8001828 <_ZN12G24_STM32HAL9CommonLib7ISerialC1Ev+0x1c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	080116b0 	.word	0x080116b0

0800182c <_ZN12G24_STM32HAL9CommonLib11IRingBufferINS0_10SerialDataEEC1Ev>:
class IRingBuffer{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <_ZN12G24_STM32HAL9CommonLib11IRingBufferINS0_10SerialDataEEC1Ev+0x1c>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	08011648 	.word	0x08011648

0800184c <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EEC1Ev>:
class RingBuffer : public IRingBuffer<T>{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ffe8 	bl	800182c <_ZN12G24_STM32HAL9CommonLib11IRingBufferINS0_10SerialDataEEC1Ev>
 800185c:	4a10      	ldr	r2, [pc, #64]	; (80018a0 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EEC1Ev+0x54>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2210      	movs	r2, #16
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	1e5a      	subs	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3318      	adds	r3, #24
 8001888:	f44f 6288 	mov.w	r2, #1088	; 0x440
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f00f fd24 	bl	80112dc <memset>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	0801162c 	.word	0x0801162c

080018a4 <_ZN12G24_STM32HAL9CommonLib10SerialDataC1Ev>:
struct SerialData{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4618      	mov	r0, r3
 80018b0:	2340      	movs	r3, #64	; 0x40
 80018b2:	461a      	mov	r2, r3
 80018b4:	2100      	movs	r1, #0
 80018b6:	f00f fd11 	bl	80112dc <memset>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	641a      	str	r2, [r3, #64]	; 0x40
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EEC1EP19_USBD_HandleTypeDef>:
	RingBuffer<SerialData,RX_BUFF_N> rx_buff;

	SerialData tmp_buff;

public:
	UsbCdcComm(USBD_HandleTypeDef *_usb):usb(_usb){}
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff97 	bl	800180c <_ZN12G24_STM32HAL9CommonLib7ISerialC1Ev>
 80018de:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EEC1EP19_USBD_HandleTypeDef+0x4c>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3308      	adds	r3, #8
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ffac 	bl	800184c <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EEC1Ev>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ffa6 	bl	800184c <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EEC1Ev>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ffcc 	bl	80018a4 <_ZN12G24_STM32HAL9CommonLib10SerialDataC1Ev>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	08011614 	.word	0x08011614

0800191c <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE17rx_interrupt_taskEPKhj>:
		}
	}
}

template<size_t TX_BUFF_N,size_t RX_BUFF_N>
void UsbCdcComm<TX_BUFF_N,RX_BUFF_N>::rx_interrupt_task(const uint8_t *input,size_t size){
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
	for(size_t i = 0; i < size; i++){
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	e056      	b.n	80019dc <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE17rx_interrupt_taskEPKhj+0xc0>
		if((input[i]=='\r') || (input[i]=='\n') || (input[i]=='\0') || (tmp_buff.size >= tmp_buff.max_size-1)){
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b0d      	cmp	r3, #13
 8001938:	d010      	beq.n	800195c <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE17rx_interrupt_taskEPKhj+0x40>
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	4413      	add	r3, r2
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b0a      	cmp	r3, #10
 8001944:	d00a      	beq.n	800195c <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE17rx_interrupt_taskEPKhj+0x40>
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	4413      	add	r3, r2
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d004      	beq.n	800195c <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE17rx_interrupt_taskEPKhj+0x40>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001958:	2b3e      	cmp	r3, #62	; 0x3e
 800195a:	d929      	bls.n	80019b0 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE17rx_interrupt_taskEPKhj+0x94>
			tmp_buff.data[tmp_buff.size] = input[i];
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	441a      	add	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001968:	7811      	ldrb	r1, [r2, #0]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4413      	add	r3, r2
 800196e:	460a      	mov	r2, r1
 8001970:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
			tmp_buff.size ++;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

			rx_buff.push(tmp_buff);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 800198e:	4619      	mov	r1, r3
 8001990:	4610      	mov	r0, r2
 8001992:	f000 f964 	bl	8001c5e <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE4pushERKS2_>

			tmp_buff.size = 0;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
			memset(tmp_buff.data,0,tmp_buff.max_size);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 80019a4:	2240      	movs	r2, #64	; 0x40
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f00f fc97 	bl	80112dc <memset>
 80019ae:	e012      	b.n	80019d6 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE17rx_interrupt_taskEPKhj+0xba>
		}else{
			tmp_buff.data[tmp_buff.size] = input[i];
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	441a      	add	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80019bc:	7811      	ldrb	r1, [r2, #0]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	460a      	mov	r2, r1
 80019c4:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
			tmp_buff.size ++;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
	for(size_t i = 0; i < size; i++){
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d3a4      	bcc.n	800192e <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE17rx_interrupt_taskEPKhj+0x12>
		}
	}

}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_ZSt4moveIRSt5tupleIJPN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEESt14default_deleteIS5_EEEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEEEC1EOS7_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
      { }
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f951 	bl	8001cce <_ZSt3getILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE11get_deleterEv>:
      get_deleter() noexcept
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f951 	bl	8001ce8 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE10_M_deleterEv>
 8001a46:	4603      	mov	r3, r0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_ZSt4moveIRPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <_ZNKSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEclEPS4_>:
      operator()(_Tp* __ptr) const
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <_ZNKSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEclEPS4_+0x18>
 8001a76:	2104      	movs	r1, #4
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f00f fa97 	bl	8010fac <_ZdlPvj>
      }
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_ZNKSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE3getEv>:
      get() const noexcept
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 f936 	bl	8001d02 <_ZNKSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE6_M_ptrEv>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	461a      	mov	r2, r3
 8001aae:	2300      	movs	r3, #0
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	6053      	str	r3, [r2, #4]
 8001ab4:	6093      	str	r3, [r2, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fd97 	bl	80015ec <_ZNSt14_Function_baseC1Ev>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8001ac4:	6838      	ldr	r0, [r7, #0]
 8001ac6:	f000 f837 	bl	8001b38 <_ZNKSt8functionIFvvEEcvbEv>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00d      	beq.n	8001aec <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	6839      	ldr	r1, [r7, #0]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]
      }
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f914 	bl	8001d34 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f103 0208 	add.w	r2, r3, #8
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	3308      	adds	r3, #8
 8001b16:	4619      	mov	r1, r3
 8001b18:	4610      	mov	r0, r2
 8001b1a:	f000 f93d 	bl	8001d98 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f103 020c 	add.w	r2, r3, #12
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	330c      	adds	r3, #12
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	f000 f95e 	bl	8001dec <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fa0c 	bl	8000f60 <_ZNKSt14_Function_base8_M_emptyEv>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f083 0301 	eor.w	r3, r3, #1
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_ZNSt15__uniq_ptr_dataIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_ELb1ELb1EECI1St15__uniq_ptr_implIS4_S6_EEPS4_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 f95e 	bl	8001e2a <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEC1EPS4_>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEC1IS6_vEEPS4_>:
	unique_ptr(pointer __p) noexcept
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6839      	ldr	r1, [r7, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ffe6 	bl	8001b58 <_ZNSt15__uniq_ptr_dataIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_ELb1ELb1EECI1St15__uniq_ptr_implIS4_S6_EEPS4_>
        { }
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 f956 	bl	8001e52 <_ZSt3getILj0EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE11get_deleterEv>:
      get_deleter() noexcept
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f956 	bl	8001e6c <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE10_M_deleterEv>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_ZSt4moveIRPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_ZNKSt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEEclEPS4_>:
      operator()(_Tp* __ptr) const
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d004      	beq.n	8001bfa <_ZNKSt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEEclEPS4_+0x1a>
 8001bf0:	f44f 7126 	mov.w	r1, #664	; 0x298
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f00f f9d9 	bl	8010fac <_ZdlPvj>
      }
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE7releaseEv>:
      release() noexcept
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 f93a 	bl	8001e86 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE7releaseEv>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_ZSt7forwardISt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1IS5_INS1_10RingBufferIS3_Lj5EEEEEEPS4_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8001c32:	b590      	push	{r4, r7, lr}
 8001c34:	b085      	sub	sp, #20
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8001c3e:	68fc      	ldr	r4, [r7, #12]
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ffeb 	bl	8001c1c <_ZSt7forwardISt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001c46:	4602      	mov	r2, r0
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f000 f92e 	bl	8001eb0 <_ZNSt5tupleIJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1IRS5_S6_INS1_10RingBufferIS3_Lj5EEEELb1EEEOT_OT0_>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}

08001c5e <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE4pushERKS2_>:
    size_t tail = 0;
    size_t data_count = 0;

    T data_buff[1<<n] = {0};
public:
    bool push(const T &input)override{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
        data_buff[head] = input;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	f103 0218 	add.w	r2, r3, #24
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	2344      	movs	r3, #68	; 0x44
 8001c84:	461a      	mov	r2, r3
 8001c86:	f00f fbb1 	bl	80113ec <memcpy>
        head = (head+1) & MASK;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	401a      	ands	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60da      	str	r2, [r3, #12]
        data_count ++;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	615a      	str	r2, [r3, #20]
        if(data_count > SIZE){
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d909      	bls.n	8001cc4 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE4pushERKS2_+0x66>
            data_count = SIZE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	615a      	str	r2, [r3, #20]
            tail = head;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	611a      	str	r2, [r3, #16]
            return false;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e000      	b.n	8001cc6 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE4pushERKS2_+0x68>
        };
        return true;
 8001cc4:	2301      	movs	r3, #1
    }
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_ZSt3getILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 f902 	bl	8001ee2 <_ZSt12__get_helperILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEJSt14default_deleteIS4_EEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 f901 	bl	8001efa <_ZSt3getILj1EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_ZNKSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 f900 	bl	8001f12 <_ZSt3getILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSC_>
 8001d12:	4603      	mov	r3, r0
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffed 	bl	8001d1e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f107 0308 	add.w	r3, r7, #8
 8001d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d4e:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8001d52:	6838      	ldr	r0, [r7, #0]
 8001d54:	f7ff ffe3 	bl	8001d1e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d60:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8001d64:	f107 0308 	add.w	r3, r7, #8
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ffd8 	bl	8001d1e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d76:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffed 	bl	8001d82 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001da8:	4603      	mov	r3, r0
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001dae:	6838      	ldr	r0, [r7, #0]
 8001db0:	f7ff ffe7 	bl	8001d82 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001db4:	4603      	mov	r3, r0
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ffde 	bl	8001d82 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	601a      	str	r2, [r3, #0]
    }
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ffed 	bl	8001dd6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001e02:	6838      	ldr	r0, [r7, #0]
 8001e04:	f7ff ffe7 	bl	8001dd6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ffde 	bl	8001dd6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	601a      	str	r2, [r3, #0]
    }
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEC1EPS4_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001e2a:	b590      	push	{r4, r7, lr}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 f878 	bl	8001f2c <_ZNSt5tupleIJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEEC1ILb1ELb1EEEv>
 8001e3c:	683c      	ldr	r4, [r7, #0]
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff fea9 	bl	8001b96 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE6_M_ptrEv>
 8001e44:	4603      	mov	r3, r0
 8001e46:	601c      	str	r4, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd90      	pop	{r4, r7, pc}

08001e52 <_ZSt3getILj0EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>:
    get(tuple<_Elements...>& __t) noexcept
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 f872 	bl	8001f46 <_ZSt12__get_helperILj0EPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJSt14default_deleteIS4_EEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f871 	bl	8001f5e <_ZSt3getILj1EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE7releaseEv>:
      pointer release() noexcept
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fe81 	bl	8001b96 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE6_M_ptrEv>
 8001e94:	4603      	mov	r3, r0
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fe7b 	bl	8001b96 <_ZNSt15__uniq_ptr_implIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EE6_M_ptrEv>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
	return __p;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
      }
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_ZNSt5tupleIJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1IRS5_S6_INS1_10RingBufferIS3_Lj5EEEELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8001ebc:	68fc      	ldr	r4, [r7, #12]
 8001ebe:	68b8      	ldr	r0, [r7, #8]
 8001ec0:	f000 f859 	bl	8001f76 <_ZSt7forwardIRPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001ec4:	4605      	mov	r5, r0
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff fea8 	bl	8001c1c <_ZSt7forwardISt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f000 f85a 	bl	8001f8c <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1IRS5_JS6_INS1_10RingBufferIS3_Lj5EEEEEvEEOT_DpOT0_>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bdb0      	pop	{r4, r5, r7, pc}

08001ee2 <_ZSt12__get_helperILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEJSt14default_deleteIS4_EEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f86a 	bl	8001fc4 <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEE7_M_headERS8_>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_ZSt3getILj1EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>:
    get(tuple<_Elements...>& __t) noexcept
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f86b 	bl	8001fde <_ZSt12__get_helperILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_ZSt3getILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSC_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 f86a 	bl	8001ff6 <_ZSt12__get_helperILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEJSt14default_deleteIS4_EEERKT0_RKSt11_Tuple_implIXT_EJS8_DpT1_EE>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_ZNSt5tupleIJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEEC1ILb1ELb1EEEv>:
	tuple()
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f869 	bl	800200e <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEEC1Ev>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_ZSt12__get_helperILj0EPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJSt14default_deleteIS4_EEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f86d 	bl	800202e <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEE7_M_headERS8_>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_ZSt3getILj1EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>:
    get(tuple<_Elements...>& __t) noexcept
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f86e 	bl	8002048 <_ZSt12__get_helperILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_ZSt7forwardIRPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEEC1IRS5_JS6_INS1_10RingBufferIS3_Lj5EEEEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fe3f 	bl	8001c1c <_ZSt7forwardISt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f85c 	bl	8002060 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEEEC1IS0_INS2_10RingBufferIS4_Lj5EEEEEEOT_>
 8001fa8:	68fc      	ldr	r4, [r7, #12]
 8001faa:	68b8      	ldr	r0, [r7, #8]
 8001fac:	f7ff ffe3 	bl	8001f76 <_ZSt7forwardIRPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f000 f865 	bl	8002084 <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEELb0EEC1IRS5_EEOT_>
	{ }
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd90      	pop	{r4, r7, pc}

08001fc4 <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEE7_M_headERS8_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f869 	bl	80020a6 <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEELb0EE7_M_headERS6_>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_ZSt12__get_helperILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f868 	bl	80020bc <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEEE7_M_headERS7_>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_ZSt12__get_helperILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEJSt14default_deleteIS4_EEERKT0_RKSt11_Tuple_implIXT_EJS8_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f868 	bl	80020d4 <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEE7_M_headERKS8_>
 8002004:	4603      	mov	r3, r0
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEEC1Ev>:
      constexpr _Tuple_impl()
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f869 	bl	80020ee <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEEC1Ev>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f871 	bl	8002106 <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEELb0EEC1Ev>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EEE7_M_headERS8_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4618      	mov	r0, r3
 800203a:	f000 f872 	bl	8002122 <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEELb0EE7_M_headERS6_>
 800203e:	4603      	mov	r3, r0
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_ZSt12__get_helperILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f871 	bl	8002138 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEE7_M_headERS7_>
 8002056:	4603      	mov	r3, r0
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEEEC1IS0_INS2_10RingBufferIS4_Lj5EEEEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800206a:	6838      	ldr	r0, [r7, #0]
 800206c:	f7ff fdd6 	bl	8001c1c <_ZSt7forwardISt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8002070:	4603      	mov	r3, r0
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f86b 	bl	8002150 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEELb1EEC1IS0_INS2_10RingBufferIS4_Lj5EEEEEEOT_>
	{ }
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEELb0EEC1IRS5_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800208e:	6838      	ldr	r0, [r7, #0]
 8002090:	f7ff ff71 	bl	8001f76 <_ZSt7forwardIRPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8002094:	4603      	mov	r3, r0
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEELb0EE7_M_headERS6_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEEEE7_M_headERS7_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f856 	bl	8002176 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEELb1EE7_M_headERS7_>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_ZNSt11_Tuple_implILj0EJPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEE7_M_headERKS8_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f854 	bl	800218c <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEELb0EE7_M_headERKS6_>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEEC1Ev>:
      _Tuple_impl()
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f853 	bl	80021a2 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEELb1EEC1Ev>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEELb0EEC1Ev>:
      constexpr _Head_base()
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEELb0EE7_M_headERS6_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEE7_M_headERS7_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f839 	bl	80021b8 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEELb1EE7_M_headERS7_>
 8002146:	4603      	mov	r3, r0
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEELb1EEC1IS0_INS2_10RingBufferIS4_Lj5EEEEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800215a:	687c      	ldr	r4, [r7, #4]
 800215c:	6838      	ldr	r0, [r7, #0]
 800215e:	f7ff fd5d 	bl	8001c1c <_ZSt7forwardISt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8002162:	4603      	mov	r3, r0
 8002164:	4619      	mov	r1, r3
 8002166:	4620      	mov	r0, r4
 8002168:	f000 f831 	bl	80021ce <_ZNSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEC1INS1_10RingBufferIS3_Lj5EEEvEERKS_IT_E>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}

08002176 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS2_8CanFrameEEEELb1EE7_M_headERS7_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <_ZNSt10_Head_baseILj0EPN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEELb0EE7_M_headERKS6_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEELb1EEC1Ev>:
      constexpr _Head_base()
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12G24_STM32HAL9CommonLib10RingBufferINS2_8CanFrameELj5EEEELb1EE7_M_headERS7_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <_ZNSt14default_deleteIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEEEC1INS1_10RingBufferIS3_Lj5EEEvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08e      	sub	sp, #56	; 0x38
 80021ec:	af04      	add	r7, sp, #16
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	f040 818f 	bne.w	8002518 <_Z41__static_initialization_and_destruction_0ii+0x330>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002200:	4293      	cmp	r3, r2
 8002202:	f040 8189 	bne.w	8002518 <_Z41__static_initialization_and_destruction_0ii+0x330>
	inline auto led_timer = CommonLib::InterruptionTimerHard(&htim17);
 8002206:	4ba6      	ldr	r3, [pc, #664]	; (80024a0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3301      	adds	r3, #1
 800220c:	4aa4      	ldr	r2, [pc, #656]	; (80024a0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	4ba3      	ldr	r3, [pc, #652]	; (80024a0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8002222:	49a0      	ldr	r1, [pc, #640]	; (80024a4 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8002224:	48a0      	ldr	r0, [pc, #640]	; (80024a8 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8002226:	f7fe fec9 	bl	8000fbc <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardC1EP17TIM_HandleTypeDef>
	inline auto LED1_R = CommonLib::LEDPwm{&htim1,TIM_CHANNEL_1};
 800222a:	4ba0      	ldr	r3, [pc, #640]	; (80024ac <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	4a9e      	ldr	r2, [pc, #632]	; (80024ac <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b9d      	ldr	r3, [pc, #628]	; (80024ac <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <_Z41__static_initialization_and_destruction_0ii+0x68>
 8002246:	2200      	movs	r2, #0
 8002248:	4999      	ldr	r1, [pc, #612]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800224a:	489a      	ldr	r0, [pc, #616]	; (80024b4 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800224c:	f7fe fe02 	bl	8000e54 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED1_G = CommonLib::LEDPwm{&htim1,TIM_CHANNEL_2};
 8002250:	4b99      	ldr	r3, [pc, #612]	; (80024b8 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	4a98      	ldr	r2, [pc, #608]	; (80024b8 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b97      	ldr	r3, [pc, #604]	; (80024b8 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	bf0c      	ite	eq
 8002262:	2301      	moveq	r3, #1
 8002264:	2300      	movne	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <_Z41__static_initialization_and_destruction_0ii+0x8e>
 800226c:	2204      	movs	r2, #4
 800226e:	4990      	ldr	r1, [pc, #576]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8002270:	4892      	ldr	r0, [pc, #584]	; (80024bc <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8002272:	f7fe fdef 	bl	8000e54 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED1_B = CommonLib::LEDPwm{&htim1,TIM_CHANNEL_4};
 8002276:	4b92      	ldr	r3, [pc, #584]	; (80024c0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	4a90      	ldr	r2, [pc, #576]	; (80024c0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b8f      	ldr	r3, [pc, #572]	; (80024c0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b01      	cmp	r3, #1
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <_Z41__static_initialization_and_destruction_0ii+0xb4>
 8002292:	220c      	movs	r2, #12
 8002294:	4986      	ldr	r1, [pc, #536]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8002296:	488b      	ldr	r0, [pc, #556]	; (80024c4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8002298:	f7fe fddc 	bl	8000e54 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED2_R = CommonLib::LEDPwm{&htim3,TIM_CHANNEL_1};
 800229c:	4b8a      	ldr	r3, [pc, #552]	; (80024c8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	4a89      	ldr	r2, [pc, #548]	; (80024c8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b88      	ldr	r3, [pc, #544]	; (80024c8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	bf0c      	ite	eq
 80022ae:	2301      	moveq	r3, #1
 80022b0:	2300      	movne	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <_Z41__static_initialization_and_destruction_0ii+0xda>
 80022b8:	2200      	movs	r2, #0
 80022ba:	4984      	ldr	r1, [pc, #528]	; (80024cc <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80022bc:	4884      	ldr	r0, [pc, #528]	; (80024d0 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 80022be:	f7fe fdc9 	bl	8000e54 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED2_G = CommonLib::LEDPwm{&htim3,TIM_CHANNEL_2};
 80022c2:	4b84      	ldr	r3, [pc, #528]	; (80024d4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	4a82      	ldr	r2, [pc, #520]	; (80024d4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b81      	ldr	r3, [pc, #516]	; (80024d4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d004      	beq.n	80022e8 <_Z41__static_initialization_and_destruction_0ii+0x100>
 80022de:	2204      	movs	r2, #4
 80022e0:	497a      	ldr	r1, [pc, #488]	; (80024cc <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80022e2:	487d      	ldr	r0, [pc, #500]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80022e4:	f7fe fdb6 	bl	8000e54 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED2_B = CommonLib::LEDPwm{&htim3,TIM_CHANNEL_3};
 80022e8:	4b7c      	ldr	r3, [pc, #496]	; (80024dc <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	4a7b      	ldr	r2, [pc, #492]	; (80024dc <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b7a      	ldr	r3, [pc, #488]	; (80024dc <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	bf0c      	ite	eq
 80022fa:	2301      	moveq	r3, #1
 80022fc:	2300      	movne	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d004      	beq.n	800230e <_Z41__static_initialization_and_destruction_0ii+0x126>
 8002304:	2208      	movs	r2, #8
 8002306:	4971      	ldr	r1, [pc, #452]	; (80024cc <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8002308:	4875      	ldr	r0, [pc, #468]	; (80024e0 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 800230a:	f7fe fda3 	bl	8000e54 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 800230e:	4b75      	ldr	r3, [pc, #468]	; (80024e4 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	4a73      	ldr	r2, [pc, #460]	; (80024e4 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b72      	ldr	r3, [pc, #456]	; (80024e4 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d03b      	beq.n	80023a2 <_Z41__static_initialization_and_destruction_0ii+0x1ba>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fa00 	bl	8001734 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 8002334:	f107 020c 	add.w	r2, r7, #12
 8002338:	f107 0308 	add.w	r3, r7, #8
 800233c:	4611      	mov	r1, r2
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fa47 	bl	80017d2 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff f9f3 	bl	8001734 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 800234e:	f107 0214 	add.w	r2, r7, #20
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fa3a 	bl	80017d2 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
 800235e:	f107 0310 	add.w	r3, r7, #16
 8002362:	f107 0208 	add.w	r2, r7, #8
 8002366:	2101      	movs	r1, #1
 8002368:	9102      	str	r1, [sp, #8]
 800236a:	2101      	movs	r1, #1
 800236c:	9101      	str	r1, [sp, #4]
 800236e:	2140      	movs	r1, #64	; 0x40
 8002370:	9100      	str	r1, [sp, #0]
 8002372:	495d      	ldr	r1, [pc, #372]	; (80024e8 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8002374:	485d      	ldr	r0, [pc, #372]	; (80024ec <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8002376:	f7fe fb8f 	bl	8000a98 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommC1EP19FDCAN_HandleTypeDefSt10unique_ptrINS_9CommonLib11IRingBufferINS5_8CanFrameEEESt14default_deleteIS8_EEOSB_mmm>
 800237a:	f107 0310 	add.w	r3, r7, #16
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff f906 	bl	8001590 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff f9ef 	bl	800176c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 800238e:	f107 0308 	add.w	r3, r7, #8
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff f8fc 	bl	8001590 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8002398:	f107 030c 	add.w	r3, r7, #12
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff f9e5 	bl	800176c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 80023a2:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3301      	adds	r3, #1
 80023a8:	4a51      	ldr	r2, [pc, #324]	; (80024f0 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	bf0c      	ite	eq
 80023b4:	2301      	moveq	r3, #1
 80023b6:	2300      	movne	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d03b      	beq.n	8002436 <_Z41__static_initialization_and_destruction_0ii+0x24e>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 80023be:	f107 031c 	add.w	r3, r7, #28
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f9b6 	bl	8001734 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 80023c8:	f107 021c 	add.w	r2, r7, #28
 80023cc:	f107 0318 	add.w	r3, r7, #24
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff f9fd 	bl	80017d2 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 80023d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff f9a9 	bl	8001734 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 80023e2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80023e6:	f107 0320 	add.w	r3, r7, #32
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff f9f0 	bl	80017d2 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
 80023f2:	f107 0320 	add.w	r3, r7, #32
 80023f6:	f107 0218 	add.w	r2, r7, #24
 80023fa:	2110      	movs	r1, #16
 80023fc:	9102      	str	r1, [sp, #8]
 80023fe:	2102      	movs	r1, #2
 8002400:	9101      	str	r1, [sp, #4]
 8002402:	2141      	movs	r1, #65	; 0x41
 8002404:	9100      	str	r1, [sp, #0]
 8002406:	493b      	ldr	r1, [pc, #236]	; (80024f4 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8002408:	483b      	ldr	r0, [pc, #236]	; (80024f8 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800240a:	f7fe fb45 	bl	8000a98 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommC1EP19FDCAN_HandleTypeDefSt10unique_ptrINS_9CommonLib11IRingBufferINS5_8CanFrameEEESt14default_deleteIS8_EEOSB_mmm>
 800240e:	f107 0320 	add.w	r3, r7, #32
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff f8bc 	bl	8001590 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8002418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff f9a5 	bl	800176c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 8002422:	f107 0318 	add.w	r3, r7, #24
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f8b2 	bl	8001590 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 800242c:	f107 031c 	add.w	r3, r7, #28
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f99b 	bl	800176c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
	inline auto usb = CommonLib::UsbCdcComm<4,4>{&hUsbDeviceFS};
 8002436:	4b31      	ldr	r3, [pc, #196]	; (80024fc <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	4a2f      	ldr	r2, [pc, #188]	; (80024fc <_Z41__static_initialization_and_destruction_0ii+0x314>)
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <_Z41__static_initialization_and_destruction_0ii+0x272>
 8002452:	492b      	ldr	r1, [pc, #172]	; (8002500 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8002454:	482b      	ldr	r0, [pc, #172]	; (8002504 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8002456:	f7ff fa39 	bl	80018cc <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EEC1EP19_USBD_HandleTypeDef>

		}
	};

	inline bool bus_is_open = false;
	inline DeviceList bus1_list;
 800245a:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	4a29      	ldr	r2, [pc, #164]	; (8002508 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b28      	ldr	r3, [pc, #160]	; (8002508 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b01      	cmp	r3, #1
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <_Z41__static_initialization_and_destruction_0ii+0x294>
 8002476:	4825      	ldr	r0, [pc, #148]	; (800250c <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8002478:	f7fe fe8e 	bl	8001198 <_ZN12G24_STM32HAL11UsbCanBoard10DeviceListC1Ev>
	inline DeviceList bus2_list;
 800247c:	4b24      	ldr	r3, [pc, #144]	; (8002510 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	4a23      	ldr	r2, [pc, #140]	; (8002510 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d03f      	beq.n	8002518 <_Z41__static_initialization_and_destruction_0ii+0x330>
 8002498:	481e      	ldr	r0, [pc, #120]	; (8002514 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800249a:	f7fe fe7d 	bl	8001198 <_ZN12G24_STM32HAL11UsbCanBoard10DeviceListC1Ev>
 800249e:	e03b      	b.n	8002518 <_Z41__static_initialization_and_destruction_0ii+0x330>
 80024a0:	24000e18 	.word	0x24000e18
 80024a4:	24000f30 	.word	0x24000f30
 80024a8:	240002b4 	.word	0x240002b4
 80024ac:	24000e1c 	.word	0x24000e1c
 80024b0:	24000e4c 	.word	0x24000e4c
 80024b4:	240002d0 	.word	0x240002d0
 80024b8:	24000e20 	.word	0x24000e20
 80024bc:	240002fc 	.word	0x240002fc
 80024c0:	24000e24 	.word	0x24000e24
 80024c4:	24000328 	.word	0x24000328
 80024c8:	24000e28 	.word	0x24000e28
 80024cc:	24000ee4 	.word	0x24000ee4
 80024d0:	24000354 	.word	0x24000354
 80024d4:	24000e2c 	.word	0x24000e2c
 80024d8:	24000380 	.word	0x24000380
 80024dc:	24000e30 	.word	0x24000e30
 80024e0:	240003ac 	.word	0x240003ac
 80024e4:	24000e34 	.word	0x24000e34
 80024e8:	24000170 	.word	0x24000170
 80024ec:	240003d8 	.word	0x240003d8
 80024f0:	24000e38 	.word	0x24000e38
 80024f4:	24000210 	.word	0x24000210
 80024f8:	240003f4 	.word	0x240003f4
 80024fc:	24000e3c 	.word	0x24000e3c
 8002500:	240010ac 	.word	0x240010ac
 8002504:	24000410 	.word	0x24000410
 8002508:	24000e40 	.word	0x24000e40
 800250c:	24000d10 	.word	0x24000d10
 8002510:	24000e44 	.word	0x24000e44
 8002514:	24000d94 	.word	0x24000d94
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d137      	bne.n	800258e <_Z41__static_initialization_and_destruction_0ii+0x3a6>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002524:	4293      	cmp	r3, r2
 8002526:	d132      	bne.n	800258e <_Z41__static_initialization_and_destruction_0ii+0x3a6>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3b01      	subs	r3, #1
 800252e:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b19      	ldr	r3, [pc, #100]	; (8002598 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	bf0c      	ite	eq
 800253a:	2301      	moveq	r3, #1
 800253c:	2300      	movne	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <_Z41__static_initialization_and_destruction_0ii+0x362>
 8002544:	4815      	ldr	r0, [pc, #84]	; (800259c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8002546:	f7fe fe0f 	bl	8001168 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommD1Ev>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3b01      	subs	r3, #1
 8002550:	4a13      	ldr	r2, [pc, #76]	; (80025a0 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <_Z41__static_initialization_and_destruction_0ii+0x384>
 8002566:	480f      	ldr	r0, [pc, #60]	; (80025a4 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8002568:	f7fe fdfe 	bl	8001168 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommD1Ev>
	inline auto led_timer = CommonLib::InterruptionTimerHard(&htim17);
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3b01      	subs	r3, #1
 8002572:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	bf0c      	ite	eq
 800257e:	2301      	moveq	r3, #1
 8002580:	2300      	movne	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <_Z41__static_initialization_and_destruction_0ii+0x3a6>
 8002588:	4808      	ldr	r0, [pc, #32]	; (80025ac <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800258a:	f7fe fdd9 	bl	8001140 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardD1Ev>
 800258e:	bf00      	nop
 8002590:	3728      	adds	r7, #40	; 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	24000e38 	.word	0x24000e38
 800259c:	240003f4 	.word	0x240003f4
 80025a0:	24000e34 	.word	0x24000e34
 80025a4:	240003d8 	.word	0x240003d8
 80025a8:	24000e18 	.word	0x24000e18
 80025ac:	240002b4 	.word	0x240002b4

080025b0 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE2txERKNS0_10SerialDataE>:
bool UsbCdcComm<TX_BUFF_N,RX_BUFF_N>::tx(const SerialData &data){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
	USBD_CDC_HandleTypeDef *cdc = (USBD_CDC_HandleTypeDef*)usb->pClassData;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80025c2:	60fb      	str	r3, [r7, #12]
	if (cdc->TxState != 0){
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf14      	ite	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	2300      	moveq	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE2txERKNS0_10SerialDataE+0x38>
		tx_buff.push(data);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3308      	adds	r3, #8
 80025dc:	6839      	ldr	r1, [r7, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fb3d 	bl	8001c5e <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE4pushERKS2_>
		return true;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e017      	b.n	8002618 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE2txERKNS0_10SerialDataE+0x68>
	USBD_CDC_SetTxBuffer(usb, const_cast<uint8_t*>(data.data), data.size);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6858      	ldr	r0, [r3, #4]
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	461a      	mov	r2, r3
 80025f4:	f00b f8ec 	bl	800d7d0 <USBD_CDC_SetTxBuffer>
	if(USBD_CDC_TransmitPacket(usb) != USBD_OK){
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f00b f927 	bl	800d850 <USBD_CDC_TransmitPacket>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf14      	ite	ne
 8002608:	2301      	movne	r3, #1
 800260a:	2300      	moveq	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE2txERKNS0_10SerialDataE+0x66>
		return false;
 8002612:	2300      	movs	r3, #0
 8002614:	e000      	b.n	8002618 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE2txERKNS0_10SerialDataE+0x68>
	return true;
 8002616:	2301      	movs	r3, #1
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <_ZNK12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE12tx_availableEv>:
	size_t tx_available(void)const override{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
		return tx_buff.get_free_level();
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3308      	adds	r3, #8
 800262c:	4618      	mov	r0, r3
 800262e:	f000 f851 	bl	80026d4 <_ZNK12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE14get_free_levelEv>
 8002632:	4603      	mov	r3, r0
	}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE2rxERNS0_10SerialDataE>:
	bool rx(SerialData &data) override{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
		return rx_buff.pop(data);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800264c:	6839      	ldr	r1, [r7, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f814 	bl	800267c <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE3popERS2_>
 8002654:	4603      	mov	r3, r0
	}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <_ZNK12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE12rx_availableEv>:
	size_t rx_available(void) const override{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
		return rx_buff.get_busy_level();
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800266c:	4618      	mov	r0, r3
 800266e:	f000 f840 	bl	80026f2 <_ZNK12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE14get_busy_levelEv>
 8002672:	4603      	mov	r3, r0
	}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE3popERS2_>:

    bool pop(T &output)override{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
        if(data_count > 0){
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d01d      	beq.n	80026ca <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE3popERS2_+0x4e>
            output = data_buff[tail];
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	6838      	ldr	r0, [r7, #0]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	3318      	adds	r3, #24
 80026a2:	4619      	mov	r1, r3
 80026a4:	2344      	movs	r3, #68	; 0x44
 80026a6:	461a      	mov	r2, r3
 80026a8:	f00e fea0 	bl	80113ec <memcpy>
            tail = (tail + 1) & MASK;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	611a      	str	r2, [r3, #16]
            data_count --;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	1e5a      	subs	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	615a      	str	r2, [r3, #20]
            if(data_count < 0) data_count = 0;
            return true;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE3popERS2_+0x50>
        }else{
            return false;
 80026ca:	2300      	movs	r3, #0
        }
    }
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <_ZNK12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE14get_free_levelEv>:

    size_t get_free_level(void)const override{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
        return SIZE - data_count;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	1ad3      	subs	r3, r2, r3
    }
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_ZNK12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE14get_busy_levelEv>:
    size_t get_busy_level(void)const override{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
        return data_count;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
    }
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_10SerialDataELj4EE5resetEv>:
    void reset(void)override{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
        head = 0;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
        tail = 0;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
        data_count = 0;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	615a      	str	r2, [r3, #20]
    }
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE4pushERKS2_>:
    bool push(const T &input)override{
 8002730:	b4b0      	push	{r4, r5, r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
        data_buff[head] = input;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	f103 0218 	add.w	r2, r3, #24
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	4614      	mov	r4, r2
 8002752:	461d      	mov	r5, r3
 8002754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002758:	682b      	ldr	r3, [r5, #0]
 800275a:	6023      	str	r3, [r4, #0]
        head = (head+1) & MASK;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	401a      	ands	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	60da      	str	r2, [r3, #12]
        data_count ++;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	615a      	str	r2, [r3, #20]
        if(data_count > SIZE){
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	429a      	cmp	r2, r3
 8002780:	d909      	bls.n	8002796 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE4pushERKS2_+0x66>
            data_count = SIZE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	615a      	str	r2, [r3, #20]
            tail = head;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	611a      	str	r2, [r3, #16]
            return false;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE4pushERKS2_+0x68>
        return true;
 8002796:	2301      	movs	r3, #1
    }
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bcb0      	pop	{r4, r5, r7}
 80027a0:	4770      	bx	lr

080027a2 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE3popERS2_>:
    bool pop(T &output)override{
 80027a2:	b4b0      	push	{r4, r5, r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
        if(data_count > 0){
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01e      	beq.n	80027f2 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE3popERS2_+0x50>
            output = data_buff[tail];
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	6838      	ldr	r0, [r7, #0]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	3318      	adds	r3, #24
 80027c8:	4604      	mov	r4, r0
 80027ca:	461d      	mov	r5, r3
 80027cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027d0:	682b      	ldr	r3, [r5, #0]
 80027d2:	6023      	str	r3, [r4, #0]
            tail = (tail + 1) & MASK;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	401a      	ands	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	611a      	str	r2, [r3, #16]
            data_count --;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	1e5a      	subs	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	615a      	str	r2, [r3, #20]
            return true;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE3popERS2_+0x52>
            return false;
 80027f2:	2300      	movs	r3, #0
    }
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bcb0      	pop	{r4, r5, r7}
 80027fc:	4770      	bx	lr

080027fe <_ZNK12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE14get_free_levelEv>:
    size_t get_free_level(void)const override{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
        return SIZE - data_count;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	1ad3      	subs	r3, r2, r3
    }
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <_ZNK12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE14get_busy_levelEv>:
    size_t get_busy_level(void)const override{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
        return data_count;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
    }
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <_ZN12G24_STM32HAL9CommonLib10RingBufferINS0_8CanFrameELj5EE5resetEv>:
    void reset(void)override{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
        head = 0;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	60da      	str	r2, [r3, #12]
        tail = 0;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
        data_count = 0;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	615a      	str	r2, [r3, #20]
    }
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_GLOBAL__sub_I_HAL_TIM_PeriodElapsedCallback>:
 800285a:	b580      	push	{r7, lr}
 800285c:	af00      	add	r7, sp, #0
 800285e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002862:	2001      	movs	r0, #1
 8002864:	f7ff fcc0 	bl	80021e8 <_Z41__static_initialization_and_destruction_0ii>
 8002868:	bd80      	pop	{r7, pc}

0800286a <_GLOBAL__sub_D_HAL_TIM_PeriodElapsedCallback>:
 800286a:	b580      	push	{r7, lr}
 800286c:	af00      	add	r7, sp, #0
 800286e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002872:	2000      	movs	r0, #0
 8002874:	f7ff fcb8 	bl	80021e8 <_Z41__static_initialization_and_destruction_0ii>
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_MspInit+0x30>)
 8002884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002888:	4a08      	ldr	r2, [pc, #32]	; (80028ac <HAL_MspInit+0x30>)
 800288a:	f043 0302 	orr.w	r3, r3, #2
 800288e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_MspInit+0x30>)
 8002894:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	58024400 	.word	0x58024400

080028b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028b4:	e7fe      	b.n	80028b4 <NMI_Handler+0x4>

080028b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ba:	e7fe      	b.n	80028ba <HardFault_Handler+0x4>

080028bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <MemManage_Handler+0x4>

080028c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c6:	e7fe      	b.n	80028c6 <BusFault_Handler+0x4>

080028c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <UsageFault_Handler+0x4>

080028ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028fc:	f000 fe14 	bl	8003528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}

08002904 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002908:	4802      	ldr	r0, [pc, #8]	; (8002914 <FDCAN1_IT0_IRQHandler+0x10>)
 800290a:	f001 fc41 	bl	8004190 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	24000170 	.word	0x24000170

08002918 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <FDCAN2_IT1_IRQHandler+0x10>)
 800291e:	f001 fc37 	bl	8004190 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	24000210 	.word	0x24000210

0800292c <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8002932:	f002 fc1c 	bl	800516e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	24002588 	.word	0x24002588

08002940 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002944:	4802      	ldr	r0, [pc, #8]	; (8002950 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8002946:	f002 fc12 	bl	800516e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	24002588 	.word	0x24002588

08002954 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002958:	4802      	ldr	r0, [pc, #8]	; (8002964 <OTG_FS_IRQHandler+0x10>)
 800295a:	f002 fc08 	bl	800516e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	24002588 	.word	0x24002588

08002968 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <TIM17_IRQHandler+0x10>)
 800296e:	f006 fe29 	bl	80095c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	24000f30 	.word	0x24000f30

0800297c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return 1;
 8002980:	2301      	movs	r3, #1
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <_kill>:

int _kill(int pid, int sig)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002996:	f00e fcfd 	bl	8011394 <__errno>
 800299a:	4603      	mov	r3, r0
 800299c:	2216      	movs	r2, #22
 800299e:	601a      	str	r2, [r3, #0]
  return -1;
 80029a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <_exit>:

void _exit (int status)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ffe7 	bl	800298c <_kill>
  while (1) {}    /* Make sure we hang here */
 80029be:	e7fe      	b.n	80029be <_exit+0x12>

080029c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029c8:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <_sbrk+0x5c>)
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <_sbrk+0x60>)
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <_sbrk+0x64>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <_sbrk+0x64>)
 80029de:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <_sbrk+0x68>)
 80029e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <_sbrk+0x64>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d207      	bcs.n	8002a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029f0:	f00e fcd0 	bl	8011394 <__errno>
 80029f4:	4603      	mov	r3, r0
 80029f6:	220c      	movs	r2, #12
 80029f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029fa:	f04f 33ff 	mov.w	r3, #4294967295
 80029fe:	e009      	b.n	8002a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <_sbrk+0x64>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <_sbrk+0x64>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <_sbrk+0x64>)
 8002a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a12:	68fb      	ldr	r3, [r7, #12]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	24080000 	.word	0x24080000
 8002a20:	00000400 	.word	0x00000400
 8002a24:	24000e48 	.word	0x24000e48
 8002a28:	24002e00 	.word	0x24002e00

08002a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a30:	4b37      	ldr	r3, [pc, #220]	; (8002b10 <SystemInit+0xe4>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	4a36      	ldr	r2, [pc, #216]	; (8002b10 <SystemInit+0xe4>)
 8002a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a40:	4b34      	ldr	r3, [pc, #208]	; (8002b14 <SystemInit+0xe8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	2b06      	cmp	r3, #6
 8002a4a:	d807      	bhi.n	8002a5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a4c:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <SystemInit+0xe8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 030f 	bic.w	r3, r3, #15
 8002a54:	4a2f      	ldr	r2, [pc, #188]	; (8002b14 <SystemInit+0xe8>)
 8002a56:	f043 0307 	orr.w	r3, r3, #7
 8002a5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002a5c:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <SystemInit+0xec>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2d      	ldr	r2, [pc, #180]	; (8002b18 <SystemInit+0xec>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a68:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <SystemInit+0xec>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a6e:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <SystemInit+0xec>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4929      	ldr	r1, [pc, #164]	; (8002b18 <SystemInit+0xec>)
 8002a74:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <SystemInit+0xf0>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a7a:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <SystemInit+0xe8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a86:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <SystemInit+0xe8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 030f 	bic.w	r3, r3, #15
 8002a8e:	4a21      	ldr	r2, [pc, #132]	; (8002b14 <SystemInit+0xe8>)
 8002a90:	f043 0307 	orr.w	r3, r3, #7
 8002a94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <SystemInit+0xec>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <SystemInit+0xec>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <SystemInit+0xec>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <SystemInit+0xec>)
 8002aaa:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <SystemInit+0xf4>)
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002aae:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <SystemInit+0xec>)
 8002ab0:	4a1c      	ldr	r2, [pc, #112]	; (8002b24 <SystemInit+0xf8>)
 8002ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ab4:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <SystemInit+0xec>)
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <SystemInit+0xfc>)
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002aba:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <SystemInit+0xec>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ac0:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <SystemInit+0xec>)
 8002ac2:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <SystemInit+0xfc>)
 8002ac4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <SystemInit+0xec>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <SystemInit+0xec>)
 8002ace:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <SystemInit+0xfc>)
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <SystemInit+0xec>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <SystemInit+0xec>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <SystemInit+0xec>)
 8002ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <SystemInit+0xec>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <SystemInit+0x100>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <SystemInit+0x104>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af6:	d202      	bcs.n	8002afe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <SystemInit+0x108>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <SystemInit+0x10c>)
 8002b00:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002b04:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00
 8002b14:	52002000 	.word	0x52002000
 8002b18:	58024400 	.word	0x58024400
 8002b1c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b20:	02020200 	.word	0x02020200
 8002b24:	01ff0000 	.word	0x01ff0000
 8002b28:	01010280 	.word	0x01010280
 8002b2c:	5c001000 	.word	0x5c001000
 8002b30:	ffff0000 	.word	0xffff0000
 8002b34:	51008108 	.word	0x51008108
 8002b38:	52004000 	.word	0x52004000

08002b3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b09a      	sub	sp, #104	; 0x68
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
 8002b6c:	615a      	str	r2, [r3, #20]
 8002b6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	222c      	movs	r2, #44	; 0x2c
 8002b74:	2100      	movs	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f00e fbb0 	bl	80112dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b7c:	4b4f      	ldr	r3, [pc, #316]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002b7e:	4a50      	ldr	r2, [pc, #320]	; (8002cc0 <MX_TIM1_Init+0x184>)
 8002b80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b82:	4b4e      	ldr	r3, [pc, #312]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b88:	4b4c      	ldr	r3, [pc, #304]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b8e:	4b4b      	ldr	r3, [pc, #300]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b96:	4b49      	ldr	r3, [pc, #292]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b9c:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba2:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ba8:	4844      	ldr	r0, [pc, #272]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002baa:	f006 fa9d 	bl	80090e8 <HAL_TIM_Base_Init>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002bb4:	f7fe fca0 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bbc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	483d      	ldr	r0, [pc, #244]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002bc6:	f006 ff31 	bl	8009a2c <HAL_TIM_ConfigClockSource>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002bd0:	f7fe fc92 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bd4:	4839      	ldr	r0, [pc, #228]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002bd6:	f006 fb86 	bl	80092e6 <HAL_TIM_PWM_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002be0:	f7fe fc8a 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be4:	2300      	movs	r3, #0
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002be8:	2300      	movs	r3, #0
 8002bea:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bf0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4831      	ldr	r0, [pc, #196]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002bf8:	f007 fc7a 	bl	800a4f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002c02:	f7fe fc79 	bl	80014f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c06:	2360      	movs	r3, #96	; 0x60
 8002c08:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c12:	2300      	movs	r3, #0
 8002c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c26:	2200      	movs	r2, #0
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4824      	ldr	r0, [pc, #144]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002c2c:	f006 fdea 	bl	8009804 <HAL_TIM_PWM_ConfigChannel>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002c36:	f7fe fc5f 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c3e:	2204      	movs	r2, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	481e      	ldr	r0, [pc, #120]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002c44:	f006 fdde 	bl	8009804 <HAL_TIM_PWM_ConfigChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002c4e:	f7fe fc53 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c56:	220c      	movs	r2, #12
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4818      	ldr	r0, [pc, #96]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002c5c:	f006 fdd2 	bl	8009804 <HAL_TIM_PWM_ConfigChannel>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002c66:	f7fe fc47 	bl	80014f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4807      	ldr	r0, [pc, #28]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002ca0:	f007 fcb4 	bl	800a60c <HAL_TIMEx_ConfigBreakDeadTime>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002caa:	f7fe fc25 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002cae:	4803      	ldr	r0, [pc, #12]	; (8002cbc <MX_TIM1_Init+0x180>)
 8002cb0:	f000 f99e 	bl	8002ff0 <HAL_TIM_MspPostInit>

}
 8002cb4:	bf00      	nop
 8002cb6:	3768      	adds	r7, #104	; 0x68
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	24000e4c 	.word	0x24000e4c
 8002cc0:	40010000 	.word	0x40010000

08002cc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08e      	sub	sp, #56	; 0x38
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd8:	f107 031c 	add.w	r3, r7, #28
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ce4:	463b      	mov	r3, r7
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	60da      	str	r2, [r3, #12]
 8002cf0:	611a      	str	r2, [r3, #16]
 8002cf2:	615a      	str	r2, [r3, #20]
 8002cf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cf6:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <MX_TIM2_Init+0xe8>)
 8002cf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002cfe:	4b2b      	ldr	r3, [pc, #172]	; (8002dac <MX_TIM2_Init+0xe8>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d04:	4b29      	ldr	r3, [pc, #164]	; (8002dac <MX_TIM2_Init+0xe8>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002d0a:	4b28      	ldr	r3, [pc, #160]	; (8002dac <MX_TIM2_Init+0xe8>)
 8002d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d12:	4b26      	ldr	r3, [pc, #152]	; (8002dac <MX_TIM2_Init+0xe8>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d18:	4b24      	ldr	r3, [pc, #144]	; (8002dac <MX_TIM2_Init+0xe8>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d1e:	4823      	ldr	r0, [pc, #140]	; (8002dac <MX_TIM2_Init+0xe8>)
 8002d20:	f006 f9e2 	bl	80090e8 <HAL_TIM_Base_Init>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002d2a:	f7fe fbe5 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d38:	4619      	mov	r1, r3
 8002d3a:	481c      	ldr	r0, [pc, #112]	; (8002dac <MX_TIM2_Init+0xe8>)
 8002d3c:	f006 fe76 	bl	8009a2c <HAL_TIM_ConfigClockSource>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002d46:	f7fe fbd7 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d4a:	4818      	ldr	r0, [pc, #96]	; (8002dac <MX_TIM2_Init+0xe8>)
 8002d4c:	f006 facb 	bl	80092e6 <HAL_TIM_PWM_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002d56:	f7fe fbcf 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d62:	f107 031c 	add.w	r3, r7, #28
 8002d66:	4619      	mov	r1, r3
 8002d68:	4810      	ldr	r0, [pc, #64]	; (8002dac <MX_TIM2_Init+0xe8>)
 8002d6a:	f007 fbc1 	bl	800a4f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002d74:	f7fe fbc0 	bl	80014f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d78:	2360      	movs	r3, #96	; 0x60
 8002d7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d88:	463b      	mov	r3, r7
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4807      	ldr	r0, [pc, #28]	; (8002dac <MX_TIM2_Init+0xe8>)
 8002d90:	f006 fd38 	bl	8009804 <HAL_TIM_PWM_ConfigChannel>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002d9a:	f7fe fbad 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d9e:	4803      	ldr	r0, [pc, #12]	; (8002dac <MX_TIM2_Init+0xe8>)
 8002da0:	f000 f926 	bl	8002ff0 <HAL_TIM_MspPostInit>

}
 8002da4:	bf00      	nop
 8002da6:	3738      	adds	r7, #56	; 0x38
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	24000e98 	.word	0x24000e98

08002db0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08e      	sub	sp, #56	; 0x38
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc4:	f107 031c 	add.w	r3, r7, #28
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dd0:	463b      	mov	r3, r7
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	611a      	str	r2, [r3, #16]
 8002dde:	615a      	str	r2, [r3, #20]
 8002de0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002de2:	4b38      	ldr	r3, [pc, #224]	; (8002ec4 <MX_TIM3_Init+0x114>)
 8002de4:	4a38      	ldr	r2, [pc, #224]	; (8002ec8 <MX_TIM3_Init+0x118>)
 8002de6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002de8:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <MX_TIM3_Init+0x114>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dee:	4b35      	ldr	r3, [pc, #212]	; (8002ec4 <MX_TIM3_Init+0x114>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002df4:	4b33      	ldr	r3, [pc, #204]	; (8002ec4 <MX_TIM3_Init+0x114>)
 8002df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfc:	4b31      	ldr	r3, [pc, #196]	; (8002ec4 <MX_TIM3_Init+0x114>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e02:	4b30      	ldr	r3, [pc, #192]	; (8002ec4 <MX_TIM3_Init+0x114>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e08:	482e      	ldr	r0, [pc, #184]	; (8002ec4 <MX_TIM3_Init+0x114>)
 8002e0a:	f006 f96d 	bl	80090e8 <HAL_TIM_Base_Init>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002e14:	f7fe fb70 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e22:	4619      	mov	r1, r3
 8002e24:	4827      	ldr	r0, [pc, #156]	; (8002ec4 <MX_TIM3_Init+0x114>)
 8002e26:	f006 fe01 	bl	8009a2c <HAL_TIM_ConfigClockSource>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002e30:	f7fe fb62 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e34:	4823      	ldr	r0, [pc, #140]	; (8002ec4 <MX_TIM3_Init+0x114>)
 8002e36:	f006 fa56 	bl	80092e6 <HAL_TIM_PWM_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002e40:	f7fe fb5a 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e4c:	f107 031c 	add.w	r3, r7, #28
 8002e50:	4619      	mov	r1, r3
 8002e52:	481c      	ldr	r0, [pc, #112]	; (8002ec4 <MX_TIM3_Init+0x114>)
 8002e54:	f007 fb4c 	bl	800a4f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002e5e:	f7fe fb4b 	bl	80014f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e62:	2360      	movs	r3, #96	; 0x60
 8002e64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e72:	463b      	mov	r3, r7
 8002e74:	2200      	movs	r2, #0
 8002e76:	4619      	mov	r1, r3
 8002e78:	4812      	ldr	r0, [pc, #72]	; (8002ec4 <MX_TIM3_Init+0x114>)
 8002e7a:	f006 fcc3 	bl	8009804 <HAL_TIM_PWM_ConfigChannel>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002e84:	f7fe fb38 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e88:	463b      	mov	r3, r7
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	480d      	ldr	r0, [pc, #52]	; (8002ec4 <MX_TIM3_Init+0x114>)
 8002e90:	f006 fcb8 	bl	8009804 <HAL_TIM_PWM_ConfigChannel>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002e9a:	f7fe fb2d 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e9e:	463b      	mov	r3, r7
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4807      	ldr	r0, [pc, #28]	; (8002ec4 <MX_TIM3_Init+0x114>)
 8002ea6:	f006 fcad 	bl	8009804 <HAL_TIM_PWM_ConfigChannel>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002eb0:	f7fe fb22 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002eb4:	4803      	ldr	r0, [pc, #12]	; (8002ec4 <MX_TIM3_Init+0x114>)
 8002eb6:	f000 f89b 	bl	8002ff0 <HAL_TIM_MspPostInit>

}
 8002eba:	bf00      	nop
 8002ebc:	3738      	adds	r7, #56	; 0x38
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	24000ee4 	.word	0x24000ee4
 8002ec8:	40000400 	.word	0x40000400

08002ecc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <MX_TIM17_Init+0x44>)
 8002ed2:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <MX_TIM17_Init+0x48>)
 8002ed4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 240-1;
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <MX_TIM17_Init+0x44>)
 8002ed8:	22ef      	movs	r2, #239	; 0xef
 8002eda:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <MX_TIM17_Init+0x44>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <MX_TIM17_Init+0x44>)
 8002ee4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ee8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <MX_TIM17_Init+0x44>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <MX_TIM17_Init+0x44>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <MX_TIM17_Init+0x44>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002efc:	4804      	ldr	r0, [pc, #16]	; (8002f10 <MX_TIM17_Init+0x44>)
 8002efe:	f006 f8f3 	bl	80090e8 <HAL_TIM_Base_Init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002f08:	f7fe faf6 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	24000f30 	.word	0x24000f30
 8002f14:	40014800 	.word	0x40014800

08002f18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a2e      	ldr	r2, [pc, #184]	; (8002fe0 <HAL_TIM_Base_MspInit+0xc8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d10f      	bne.n	8002f4a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f2a:	4b2e      	ldr	r3, [pc, #184]	; (8002fe4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f30:	4a2c      	ldr	r2, [pc, #176]	; (8002fe4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	; (8002fe4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002f48:	e045      	b.n	8002fd6 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f52:	d10f      	bne.n	8002f74 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f54:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f5a:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f64:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	693b      	ldr	r3, [r7, #16]
}
 8002f72:	e030      	b.n	8002fd6 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM3)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_TIM_Base_MspInit+0xd0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10f      	bne.n	8002f9e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f7e:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f84:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f86:	f043 0302 	orr.w	r3, r3, #2
 8002f8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
}
 8002f9c:	e01b      	b.n	8002fd6 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM17)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a12      	ldr	r2, [pc, #72]	; (8002fec <HAL_TIM_Base_MspInit+0xd4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d116      	bne.n	8002fd6 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <HAL_TIM_Base_MspInit+0xcc>)
 8002faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fae:	4a0d      	ldr	r2, [pc, #52]	; (8002fe4 <HAL_TIM_Base_MspInit+0xcc>)
 8002fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_TIM_Base_MspInit+0xcc>)
 8002fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	2076      	movs	r0, #118	; 0x76
 8002fcc:	f000 fbd7 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002fd0:	2076      	movs	r0, #118	; 0x76
 8002fd2:	f000 fbee 	bl	80037b2 <HAL_NVIC_EnableIRQ>
}
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	58024400 	.word	0x58024400
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40014800 	.word	0x40014800

08002ff0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08c      	sub	sp, #48	; 0x30
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff8:	f107 031c 	add.w	r3, r7, #28
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a47      	ldr	r2, [pc, #284]	; (800312c <HAL_TIM_MspPostInit+0x13c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d120      	bne.n	8003054 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003012:	4b47      	ldr	r3, [pc, #284]	; (8003130 <HAL_TIM_MspPostInit+0x140>)
 8003014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003018:	4a45      	ldr	r2, [pc, #276]	; (8003130 <HAL_TIM_MspPostInit+0x140>)
 800301a:	f043 0310 	orr.w	r3, r3, #16
 800301e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003022:	4b43      	ldr	r3, [pc, #268]	; (8003130 <HAL_TIM_MspPostInit+0x140>)
 8003024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8003030:	f44f 4394 	mov.w	r3, #18944	; 0x4a00
 8003034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	2300      	movs	r3, #0
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003042:	2301      	movs	r3, #1
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003046:	f107 031c 	add.w	r3, r7, #28
 800304a:	4619      	mov	r1, r3
 800304c:	4839      	ldr	r0, [pc, #228]	; (8003134 <HAL_TIM_MspPostInit+0x144>)
 800304e:	f001 fd85 	bl	8004b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003052:	e067      	b.n	8003124 <HAL_TIM_MspPostInit+0x134>
  else if(timHandle->Instance==TIM2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305c:	d11f      	bne.n	800309e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305e:	4b34      	ldr	r3, [pc, #208]	; (8003130 <HAL_TIM_MspPostInit+0x140>)
 8003060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003064:	4a32      	ldr	r2, [pc, #200]	; (8003130 <HAL_TIM_MspPostInit+0x140>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800306e:	4b30      	ldr	r3, [pc, #192]	; (8003130 <HAL_TIM_MspPostInit+0x140>)
 8003070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800307c:	2301      	movs	r3, #1
 800307e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003080:	2302      	movs	r3, #2
 8003082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003088:	2300      	movs	r3, #0
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800308c:	2301      	movs	r3, #1
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003090:	f107 031c 	add.w	r3, r7, #28
 8003094:	4619      	mov	r1, r3
 8003096:	4828      	ldr	r0, [pc, #160]	; (8003138 <HAL_TIM_MspPostInit+0x148>)
 8003098:	f001 fd60 	bl	8004b5c <HAL_GPIO_Init>
}
 800309c:	e042      	b.n	8003124 <HAL_TIM_MspPostInit+0x134>
  else if(timHandle->Instance==TIM3)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a26      	ldr	r2, [pc, #152]	; (800313c <HAL_TIM_MspPostInit+0x14c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d13d      	bne.n	8003124 <HAL_TIM_MspPostInit+0x134>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a8:	4b21      	ldr	r3, [pc, #132]	; (8003130 <HAL_TIM_MspPostInit+0x140>)
 80030aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ae:	4a20      	ldr	r2, [pc, #128]	; (8003130 <HAL_TIM_MspPostInit+0x140>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030b8:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <HAL_TIM_MspPostInit+0x140>)
 80030ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c6:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <HAL_TIM_MspPostInit+0x140>)
 80030c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030cc:	4a18      	ldr	r2, [pc, #96]	; (8003130 <HAL_TIM_MspPostInit+0x140>)
 80030ce:	f043 0302 	orr.w	r3, r3, #2
 80030d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <HAL_TIM_MspPostInit+0x140>)
 80030d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030e4:	23c0      	movs	r3, #192	; 0xc0
 80030e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f0:	2300      	movs	r3, #0
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030f4:	2302      	movs	r3, #2
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f8:	f107 031c 	add.w	r3, r7, #28
 80030fc:	4619      	mov	r1, r3
 80030fe:	480e      	ldr	r0, [pc, #56]	; (8003138 <HAL_TIM_MspPostInit+0x148>)
 8003100:	f001 fd2c 	bl	8004b5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003104:	2301      	movs	r3, #1
 8003106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003108:	2302      	movs	r3, #2
 800310a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003110:	2300      	movs	r3, #0
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003114:	2302      	movs	r3, #2
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003118:	f107 031c 	add.w	r3, r7, #28
 800311c:	4619      	mov	r1, r3
 800311e:	4808      	ldr	r0, [pc, #32]	; (8003140 <HAL_TIM_MspPostInit+0x150>)
 8003120:	f001 fd1c 	bl	8004b5c <HAL_GPIO_Init>
}
 8003124:	bf00      	nop
 8003126:	3730      	adds	r7, #48	; 0x30
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40010000 	.word	0x40010000
 8003130:	58024400 	.word	0x58024400
 8003134:	58021000 	.word	0x58021000
 8003138:	58020000 	.word	0x58020000
 800313c:	40000400 	.word	0x40000400
 8003140:	58020400 	.word	0x58020400

08003144 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <MX_UART4_Init+0x90>)
 800314a:	4a23      	ldr	r2, [pc, #140]	; (80031d8 <MX_UART4_Init+0x94>)
 800314c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 7500000;
 800314e:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <MX_UART4_Init+0x90>)
 8003150:	4a22      	ldr	r2, [pc, #136]	; (80031dc <MX_UART4_Init+0x98>)
 8003152:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003154:	4b1f      	ldr	r3, [pc, #124]	; (80031d4 <MX_UART4_Init+0x90>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <MX_UART4_Init+0x90>)
 800315c:	2200      	movs	r2, #0
 800315e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003160:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <MX_UART4_Init+0x90>)
 8003162:	2200      	movs	r2, #0
 8003164:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003166:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <MX_UART4_Init+0x90>)
 8003168:	220c      	movs	r2, #12
 800316a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <MX_UART4_Init+0x90>)
 800316e:	2200      	movs	r2, #0
 8003170:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003172:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <MX_UART4_Init+0x90>)
 8003174:	2200      	movs	r2, #0
 8003176:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003178:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <MX_UART4_Init+0x90>)
 800317a:	2200      	movs	r2, #0
 800317c:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <MX_UART4_Init+0x90>)
 8003180:	2200      	movs	r2, #0
 8003182:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <MX_UART4_Init+0x90>)
 8003186:	2200      	movs	r2, #0
 8003188:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800318a:	4812      	ldr	r0, [pc, #72]	; (80031d4 <MX_UART4_Init+0x90>)
 800318c:	f007 fada 	bl	800a744 <HAL_UART_Init>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8003196:	f7fe f9af 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800319a:	2100      	movs	r1, #0
 800319c:	480d      	ldr	r0, [pc, #52]	; (80031d4 <MX_UART4_Init+0x90>)
 800319e:	f008 fadc 	bl	800b75a <HAL_UARTEx_SetTxFifoThreshold>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_UART4_Init+0x68>
  {
    Error_Handler();
 80031a8:	f7fe f9a6 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031ac:	2100      	movs	r1, #0
 80031ae:	4809      	ldr	r0, [pc, #36]	; (80031d4 <MX_UART4_Init+0x90>)
 80031b0:	f008 fb11 	bl	800b7d6 <HAL_UARTEx_SetRxFifoThreshold>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 80031ba:	f7fe f99d 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80031be:	4805      	ldr	r0, [pc, #20]	; (80031d4 <MX_UART4_Init+0x90>)
 80031c0:	f008 fa92 	bl	800b6e8 <HAL_UARTEx_DisableFifoMode>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 80031ca:	f7fe f995 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	24000f7c 	.word	0x24000f7c
 80031d8:	40004c00 	.word	0x40004c00
 80031dc:	007270e0 	.word	0x007270e0

080031e0 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80031e4:	4b22      	ldr	r3, [pc, #136]	; (8003270 <MX_UART8_Init+0x90>)
 80031e6:	4a23      	ldr	r2, [pc, #140]	; (8003274 <MX_UART8_Init+0x94>)
 80031e8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 7500000;
 80031ea:	4b21      	ldr	r3, [pc, #132]	; (8003270 <MX_UART8_Init+0x90>)
 80031ec:	4a22      	ldr	r2, [pc, #136]	; (8003278 <MX_UART8_Init+0x98>)
 80031ee:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80031f0:	4b1f      	ldr	r3, [pc, #124]	; (8003270 <MX_UART8_Init+0x90>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80031f6:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <MX_UART8_Init+0x90>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80031fc:	4b1c      	ldr	r3, [pc, #112]	; (8003270 <MX_UART8_Init+0x90>)
 80031fe:	2200      	movs	r2, #0
 8003200:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8003202:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <MX_UART8_Init+0x90>)
 8003204:	220c      	movs	r2, #12
 8003206:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <MX_UART8_Init+0x90>)
 800320a:	2200      	movs	r2, #0
 800320c:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <MX_UART8_Init+0x90>)
 8003210:	2200      	movs	r2, #0
 8003212:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003214:	4b16      	ldr	r3, [pc, #88]	; (8003270 <MX_UART8_Init+0x90>)
 8003216:	2200      	movs	r2, #0
 8003218:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <MX_UART8_Init+0x90>)
 800321c:	2200      	movs	r2, #0
 800321e:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003220:	4b13      	ldr	r3, [pc, #76]	; (8003270 <MX_UART8_Init+0x90>)
 8003222:	2200      	movs	r2, #0
 8003224:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003226:	4812      	ldr	r0, [pc, #72]	; (8003270 <MX_UART8_Init+0x90>)
 8003228:	f007 fa8c 	bl	800a744 <HAL_UART_Init>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_UART8_Init+0x56>
  {
    Error_Handler();
 8003232:	f7fe f961 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003236:	2100      	movs	r1, #0
 8003238:	480d      	ldr	r0, [pc, #52]	; (8003270 <MX_UART8_Init+0x90>)
 800323a:	f008 fa8e 	bl	800b75a <HAL_UARTEx_SetTxFifoThreshold>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_UART8_Init+0x68>
  {
    Error_Handler();
 8003244:	f7fe f958 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003248:	2100      	movs	r1, #0
 800324a:	4809      	ldr	r0, [pc, #36]	; (8003270 <MX_UART8_Init+0x90>)
 800324c:	f008 fac3 	bl	800b7d6 <HAL_UARTEx_SetRxFifoThreshold>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <MX_UART8_Init+0x7a>
  {
    Error_Handler();
 8003256:	f7fe f94f 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800325a:	4805      	ldr	r0, [pc, #20]	; (8003270 <MX_UART8_Init+0x90>)
 800325c:	f008 fa44 	bl	800b6e8 <HAL_UARTEx_DisableFifoMode>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 8003266:	f7fe f947 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	24001010 	.word	0x24001010
 8003274:	40007c00 	.word	0x40007c00
 8003278:	007270e0 	.word	0x007270e0

0800327c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b0bc      	sub	sp, #240	; 0xf0
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003294:	f107 0318 	add.w	r3, r7, #24
 8003298:	22c0      	movs	r2, #192	; 0xc0
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f00e f81d 	bl	80112dc <memset>
  if(uartHandle->Instance==UART4)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a4d      	ldr	r2, [pc, #308]	; (80033dc <HAL_UART_MspInit+0x160>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d147      	bne.n	800333c <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80032ac:	f04f 0202 	mov.w	r2, #2
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032be:	f107 0318 	add.w	r3, r7, #24
 80032c2:	4618      	mov	r0, r3
 80032c4:	f004 f8e4 	bl	8007490 <HAL_RCCEx_PeriphCLKConfig>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80032ce:	f7fe f913 	bl	80014f8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80032d2:	4b43      	ldr	r3, [pc, #268]	; (80033e0 <HAL_UART_MspInit+0x164>)
 80032d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032d8:	4a41      	ldr	r2, [pc, #260]	; (80033e0 <HAL_UART_MspInit+0x164>)
 80032da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80032de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032e2:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <HAL_UART_MspInit+0x164>)
 80032e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f0:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <HAL_UART_MspInit+0x164>)
 80032f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f6:	4a3a      	ldr	r2, [pc, #232]	; (80033e0 <HAL_UART_MspInit+0x164>)
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003300:	4b37      	ldr	r3, [pc, #220]	; (80033e0 <HAL_UART_MspInit+0x164>)
 8003302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800330e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003322:	2300      	movs	r3, #0
 8003324:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003328:	2308      	movs	r3, #8
 800332a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003332:	4619      	mov	r1, r3
 8003334:	482b      	ldr	r0, [pc, #172]	; (80033e4 <HAL_UART_MspInit+0x168>)
 8003336:	f001 fc11 	bl	8004b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 800333a:	e04a      	b.n	80033d2 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==UART8)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a29      	ldr	r2, [pc, #164]	; (80033e8 <HAL_UART_MspInit+0x16c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d145      	bne.n	80033d2 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8003346:	f04f 0202 	mov.w	r2, #2
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003352:	2300      	movs	r3, #0
 8003354:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003358:	f107 0318 	add.w	r3, r7, #24
 800335c:	4618      	mov	r0, r3
 800335e:	f004 f897 	bl	8007490 <HAL_RCCEx_PeriphCLKConfig>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003368:	f7fe f8c6 	bl	80014f8 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800336c:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <HAL_UART_MspInit+0x164>)
 800336e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003372:	4a1b      	ldr	r2, [pc, #108]	; (80033e0 <HAL_UART_MspInit+0x164>)
 8003374:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003378:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800337c:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <HAL_UART_MspInit+0x164>)
 800337e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003382:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_UART_MspInit+0x164>)
 800338c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003390:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <HAL_UART_MspInit+0x164>)
 8003392:	f043 0310 	orr.w	r3, r3, #16
 8003396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800339a:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <HAL_UART_MspInit+0x164>)
 800339c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033a8:	2303      	movs	r3, #3
 80033aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80033c0:	2308      	movs	r3, #8
 80033c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033ca:	4619      	mov	r1, r3
 80033cc:	4807      	ldr	r0, [pc, #28]	; (80033ec <HAL_UART_MspInit+0x170>)
 80033ce:	f001 fbc5 	bl	8004b5c <HAL_GPIO_Init>
}
 80033d2:	bf00      	nop
 80033d4:	37f0      	adds	r7, #240	; 0xf0
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40004c00 	.word	0x40004c00
 80033e0:	58024400 	.word	0x58024400
 80033e4:	58020400 	.word	0x58020400
 80033e8:	40007c00 	.word	0x40007c00
 80033ec:	58021000 	.word	0x58021000

080033f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80033f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003428 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033f4:	f7ff fb1a 	bl	8002a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033f8:	480c      	ldr	r0, [pc, #48]	; (800342c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033fa:	490d      	ldr	r1, [pc, #52]	; (8003430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033fc:	4a0d      	ldr	r2, [pc, #52]	; (8003434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003400:	e002      	b.n	8003408 <LoopCopyDataInit>

08003402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003406:	3304      	adds	r3, #4

08003408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800340a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800340c:	d3f9      	bcc.n	8003402 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800340e:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003410:	4c0a      	ldr	r4, [pc, #40]	; (800343c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003414:	e001      	b.n	800341a <LoopFillZerobss>

08003416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003418:	3204      	adds	r2, #4

0800341a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800341a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800341c:	d3fb      	bcc.n	8003416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800341e:	f00d ffbf 	bl	80113a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003422:	f7fd ff71 	bl	8001308 <main>
  bx  lr
 8003426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003428:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800342c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003430:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 8003434:	08011820 	.word	0x08011820
  ldr r2, =_sbss
 8003438:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 800343c:	24002e00 	.word	0x24002e00

08003440 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003440:	e7fe      	b.n	8003440 <ADC3_IRQHandler>
	...

08003444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800344a:	2003      	movs	r0, #3
 800344c:	f000 f98c 	bl	8003768 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003450:	f003 fe48 	bl	80070e4 <HAL_RCC_GetSysClockFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <HAL_Init+0x68>)
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	4913      	ldr	r1, [pc, #76]	; (80034b0 <HAL_Init+0x6c>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
 800346c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800346e:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <HAL_Init+0x68>)
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	4a0e      	ldr	r2, [pc, #56]	; (80034b0 <HAL_Init+0x6c>)
 8003478:	5cd3      	ldrb	r3, [r2, r3]
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
 8003484:	4a0b      	ldr	r2, [pc, #44]	; (80034b4 <HAL_Init+0x70>)
 8003486:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003488:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <HAL_Init+0x74>)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800348e:	200f      	movs	r0, #15
 8003490:	f000 f814 	bl	80034bc <HAL_InitTick>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e002      	b.n	80034a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800349e:	f7ff f9ed 	bl	800287c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	58024400 	.word	0x58024400
 80034b0:	08011738 	.word	0x08011738
 80034b4:	24000004 	.word	0x24000004
 80034b8:	24000000 	.word	0x24000000

080034bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80034c4:	4b15      	ldr	r3, [pc, #84]	; (800351c <HAL_InitTick+0x60>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e021      	b.n	8003514 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80034d0:	4b13      	ldr	r3, [pc, #76]	; (8003520 <HAL_InitTick+0x64>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b11      	ldr	r3, [pc, #68]	; (800351c <HAL_InitTick+0x60>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	4619      	mov	r1, r3
 80034da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034de:	fbb3 f3f1 	udiv	r3, r3, r1
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f971 	bl	80037ce <HAL_SYSTICK_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00e      	b.n	8003514 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b0f      	cmp	r3, #15
 80034fa:	d80a      	bhi.n	8003512 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034fc:	2200      	movs	r2, #0
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	f000 f93b 	bl	800377e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003508:	4a06      	ldr	r2, [pc, #24]	; (8003524 <HAL_InitTick+0x68>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	e000      	b.n	8003514 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	2400000c 	.word	0x2400000c
 8003520:	24000000 	.word	0x24000000
 8003524:	24000008 	.word	0x24000008

08003528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_IncTick+0x20>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_IncTick+0x24>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4413      	add	r3, r2
 8003538:	4a04      	ldr	r2, [pc, #16]	; (800354c <HAL_IncTick+0x24>)
 800353a:	6013      	str	r3, [r2, #0]
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	2400000c 	.word	0x2400000c
 800354c:	240010a4 	.word	0x240010a4

08003550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return uwTick;
 8003554:	4b03      	ldr	r3, [pc, #12]	; (8003564 <HAL_GetTick+0x14>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	240010a4 	.word	0x240010a4

08003568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003570:	f7ff ffee 	bl	8003550 <HAL_GetTick>
 8003574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d005      	beq.n	800358e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <HAL_Delay+0x44>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800358e:	bf00      	nop
 8003590:	f7ff ffde 	bl	8003550 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	429a      	cmp	r2, r3
 800359e:	d8f7      	bhi.n	8003590 <HAL_Delay+0x28>
  {
  }
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	2400000c 	.word	0x2400000c

080035b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80035b4:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <HAL_GetREVID+0x14>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	0c1b      	lsrs	r3, r3, #16
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	5c001000 	.word	0x5c001000

080035c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <__NVIC_SetPriorityGrouping+0x40>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035e4:	4013      	ands	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <__NVIC_SetPriorityGrouping+0x44>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035f6:	4a04      	ldr	r2, [pc, #16]	; (8003608 <__NVIC_SetPriorityGrouping+0x40>)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	60d3      	str	r3, [r2, #12]
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	e000ed00 	.word	0xe000ed00
 800360c:	05fa0000 	.word	0x05fa0000

08003610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <__NVIC_GetPriorityGrouping+0x18>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	0a1b      	lsrs	r3, r3, #8
 800361a:	f003 0307 	and.w	r3, r3, #7
}
 800361e:	4618      	mov	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800363a:	2b00      	cmp	r3, #0
 800363c:	db0b      	blt.n	8003656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	f003 021f 	and.w	r2, r3, #31
 8003644:	4907      	ldr	r1, [pc, #28]	; (8003664 <__NVIC_EnableIRQ+0x38>)
 8003646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2001      	movs	r0, #1
 800364e:	fa00 f202 	lsl.w	r2, r0, r2
 8003652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	e000e100 	.word	0xe000e100

08003668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003674:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003678:	2b00      	cmp	r3, #0
 800367a:	db0a      	blt.n	8003692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	b2da      	uxtb	r2, r3
 8003680:	490c      	ldr	r1, [pc, #48]	; (80036b4 <__NVIC_SetPriority+0x4c>)
 8003682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003686:	0112      	lsls	r2, r2, #4
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	440b      	add	r3, r1
 800368c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003690:	e00a      	b.n	80036a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4908      	ldr	r1, [pc, #32]	; (80036b8 <__NVIC_SetPriority+0x50>)
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	3b04      	subs	r3, #4
 80036a0:	0112      	lsls	r2, r2, #4
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	440b      	add	r3, r1
 80036a6:	761a      	strb	r2, [r3, #24]
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e000e100 	.word	0xe000e100
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	; 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f1c3 0307 	rsb	r3, r3, #7
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	bf28      	it	cs
 80036da:	2304      	movcs	r3, #4
 80036dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2b06      	cmp	r3, #6
 80036e4:	d902      	bls.n	80036ec <NVIC_EncodePriority+0x30>
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3b03      	subs	r3, #3
 80036ea:	e000      	b.n	80036ee <NVIC_EncodePriority+0x32>
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f0:	f04f 32ff 	mov.w	r2, #4294967295
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43da      	mvns	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	401a      	ands	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003704:	f04f 31ff 	mov.w	r1, #4294967295
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	fa01 f303 	lsl.w	r3, r1, r3
 800370e:	43d9      	mvns	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003714:	4313      	orrs	r3, r2
         );
}
 8003716:	4618      	mov	r0, r3
 8003718:	3724      	adds	r7, #36	; 0x24
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3b01      	subs	r3, #1
 8003730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003734:	d301      	bcc.n	800373a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003736:	2301      	movs	r3, #1
 8003738:	e00f      	b.n	800375a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373a:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <SysTick_Config+0x40>)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3b01      	subs	r3, #1
 8003740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003742:	210f      	movs	r1, #15
 8003744:	f04f 30ff 	mov.w	r0, #4294967295
 8003748:	f7ff ff8e 	bl	8003668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <SysTick_Config+0x40>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003752:	4b04      	ldr	r3, [pc, #16]	; (8003764 <SysTick_Config+0x40>)
 8003754:	2207      	movs	r2, #7
 8003756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	e000e010 	.word	0xe000e010

08003768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff ff29 	bl	80035c8 <__NVIC_SetPriorityGrouping>
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b086      	sub	sp, #24
 8003782:	af00      	add	r7, sp, #0
 8003784:	4603      	mov	r3, r0
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800378c:	f7ff ff40 	bl	8003610 <__NVIC_GetPriorityGrouping>
 8003790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f7ff ff90 	bl	80036bc <NVIC_EncodePriority>
 800379c:	4602      	mov	r2, r0
 800379e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ff5f 	bl	8003668 <__NVIC_SetPriority>
}
 80037aa:	bf00      	nop
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	4603      	mov	r3, r0
 80037ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ff33 	bl	800362c <__NVIC_EnableIRQ>
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff ffa4 	bl	8003724 <SysTick_Config>
 80037dc:	4603      	mov	r3, r0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b098      	sub	sp, #96	; 0x60
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80037f0:	4a84      	ldr	r2, [pc, #528]	; (8003a04 <HAL_FDCAN_Init+0x21c>)
 80037f2:	f107 030c 	add.w	r3, r7, #12
 80037f6:	4611      	mov	r1, r2
 80037f8:	224c      	movs	r2, #76	; 0x4c
 80037fa:	4618      	mov	r0, r3
 80037fc:	f00d fdf6 	bl	80113ec <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e1c6      	b.n	8003b98 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a7e      	ldr	r2, [pc, #504]	; (8003a08 <HAL_FDCAN_Init+0x220>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d106      	bne.n	8003822 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800381c:	461a      	mov	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fc ff9e 	bl	8000778 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0210 	bic.w	r2, r2, #16
 800384a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800384c:	f7ff fe80 	bl	8003550 <HAL_GetTick>
 8003850:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003852:	e014      	b.n	800387e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003854:	f7ff fe7c 	bl	8003550 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b0a      	cmp	r3, #10
 8003860:	d90d      	bls.n	800387e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003868:	f043 0201 	orr.w	r2, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2203      	movs	r2, #3
 8003876:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e18c      	b.n	8003b98 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b08      	cmp	r3, #8
 800388a:	d0e3      	beq.n	8003854 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800389c:	f7ff fe58 	bl	8003550 <HAL_GetTick>
 80038a0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80038a2:	e014      	b.n	80038ce <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80038a4:	f7ff fe54 	bl	8003550 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b0a      	cmp	r3, #10
 80038b0:	d90d      	bls.n	80038ce <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038b8:	f043 0201 	orr.w	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2203      	movs	r2, #3
 80038c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e164      	b.n	8003b98 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0e3      	beq.n	80038a4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699a      	ldr	r2, [r3, #24]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0202 	orr.w	r2, r2, #2
 80038ea:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	7c1b      	ldrb	r3, [r3, #16]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d108      	bne.n	8003906 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003902:	619a      	str	r2, [r3, #24]
 8003904:	e007      	b.n	8003916 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003914:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	7c5b      	ldrb	r3, [r3, #17]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d108      	bne.n	8003930 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699a      	ldr	r2, [r3, #24]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800392c:	619a      	str	r2, [r3, #24]
 800392e:	e007      	b.n	8003940 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800393e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	7c9b      	ldrb	r3, [r3, #18]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d108      	bne.n	800395a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003956:	619a      	str	r2, [r3, #24]
 8003958:	e007      	b.n	800396a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699a      	ldr	r2, [r3, #24]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003968:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800398e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0210 	bic.w	r2, r2, #16
 800399e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d108      	bne.n	80039ba <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0204 	orr.w	r2, r2, #4
 80039b6:	619a      	str	r2, [r3, #24]
 80039b8:	e030      	b.n	8003a1c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d02c      	beq.n	8003a1c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d020      	beq.n	8003a0c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039d8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0210 	orr.w	r2, r2, #16
 80039e8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d114      	bne.n	8003a1c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699a      	ldr	r2, [r3, #24]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0220 	orr.w	r2, r2, #32
 8003a00:	619a      	str	r2, [r3, #24]
 8003a02:	e00b      	b.n	8003a1c <HAL_FDCAN_Init+0x234>
 8003a04:	080114cc 	.word	0x080114cc
 8003a08:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0220 	orr.w	r2, r2, #32
 8003a1a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003a2c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003a34:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003a44:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003a46:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a50:	d115      	bne.n	8003a7e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003a60:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	3b01      	subs	r3, #1
 8003a68:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003a6a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	3b01      	subs	r3, #1
 8003a74:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003a7a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003a7c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa4:	4413      	add	r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d011      	beq.n	8003ace <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003ab2:	f023 0107 	bic.w	r1, r3, #7
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	3360      	adds	r3, #96	; 0x60
 8003abe:	443b      	add	r3, r7
 8003ac0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d011      	beq.n	8003afa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ade:	f023 0107 	bic.w	r1, r3, #7
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	3360      	adds	r3, #96	; 0x60
 8003aea:	443b      	add	r3, r7
 8003aec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d012      	beq.n	8003b28 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003b0a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	3360      	adds	r3, #96	; 0x60
 8003b16:	443b      	add	r3, r7
 8003b18:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003b1c:	011a      	lsls	r2, r3, #4
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d012      	beq.n	8003b56 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003b38:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	3360      	adds	r3, #96	; 0x60
 8003b44:	443b      	add	r3, r7
 8003b46:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003b4a:	021a      	lsls	r2, r3, #8
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a11      	ldr	r2, [pc, #68]	; (8003ba0 <HAL_FDCAN_Init+0x3b8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d107      	bne.n	8003b70 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f022 0203 	bic.w	r2, r2, #3
 8003b6e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fde3 	bl	8004754 <FDCAN_CalcultateRamBlockAddresses>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003b94:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3760      	adds	r7, #96	; 0x60
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	4000a000 	.word	0x4000a000

08003ba4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003bb4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d002      	beq.n	8003bc2 <HAL_FDCAN_ConfigFilter+0x1e>
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d157      	bne.n	8003c72 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d12b      	bne.n	8003c22 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2b07      	cmp	r3, #7
 8003bd0:	d10d      	bne.n	8003bee <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003bde:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003be4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003be6:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	e00e      	b.n	8003c0c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003bfa:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003c02:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	e025      	b.n	8003c6e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	075a      	lsls	r2, r3, #29
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b07      	cmp	r3, #7
 8003c36:	d103      	bne.n	8003c40 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e006      	b.n	8003c4e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	079a      	lsls	r2, r3, #30
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	3304      	adds	r3, #4
 8003c66:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e008      	b.n	8003c84 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c78:	f043 0202 	orr.w	r2, r3, #2
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
  }
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d111      	bne.n	8003cc8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0201 	bic.w	r2, r2, #1
 8003cba:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e008      	b.n	8003cda <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cce:	f043 0204 	orr.w	r2, r3, #4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
  }
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b086      	sub	sp, #24
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d141      	bne.n	8003d82 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d06:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e038      	b.n	8003d94 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e026      	b.n	8003d94 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003d4e:	0c1b      	lsrs	r3, r3, #16
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fe7f 	bl	8004a60 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2101      	movs	r1, #1
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003d72:	2201      	movs	r2, #1
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	409a      	lsls	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e008      	b.n	8003d94 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d88:	f043 0208 	orr.w	r2, r3, #8
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
  }
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b08b      	sub	sp, #44	; 0x2c
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003db4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003db6:	7efb      	ldrb	r3, [r7, #27]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	f040 814b 	bne.w	8004054 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d14d      	bne.n	8003e60 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dcc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d109      	bne.n	8003de8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e13e      	b.n	8004066 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e12c      	b.n	8004066 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e14:	0e1b      	lsrs	r3, r3, #24
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d10b      	bne.n	8003e36 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e26:	0fdb      	lsrs	r3, r3, #31
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e30:	d101      	bne.n	8003e36 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e3e:	0a1b      	lsrs	r3, r3, #8
 8003e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	4413      	add	r3, r2
 8003e48:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	69f9      	ldr	r1, [r7, #28]
 8003e54:	fb01 f303 	mul.w	r3, r1, r3
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	e069      	b.n	8003f34 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b41      	cmp	r3, #65	; 0x41
 8003e64:	d14d      	bne.n	8003f02 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e0ed      	b.n	8004066 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ea0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e0db      	b.n	8004066 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eb6:	0e1b      	lsrs	r3, r3, #24
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d10b      	bne.n	8003ed8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ec8:	0fdb      	lsrs	r3, r3, #31
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ed2:	d101      	bne.n	8003ed8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ee0:	0a1b      	lsrs	r3, r3, #8
 8003ee2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef4:	69f9      	ldr	r1, [r7, #28]
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
 8003f00:	e018      	b.n	8003f34 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d309      	bcc.n	8003f20 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f12:	f043 0220 	orr.w	r2, r3, #32
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0a2      	b.n	8004066 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	fb01 f303 	mul.w	r3, r1, r3
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d107      	bne.n	8003f58 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	0c9b      	lsrs	r3, r3, #18
 8003f4e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	e005      	b.n	8003f64 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	3304      	adds	r3, #4
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	0e1b      	lsrs	r3, r3, #24
 8003fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	0fda      	lsrs	r2, r3, #31
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	3304      	adds	r3, #4
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	e00a      	b.n	8003fee <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	441a      	add	r2, r3
 8003fde:	6839      	ldr	r1, [r7, #0]
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	440b      	add	r3, r1
 8003fe4:	7812      	ldrb	r2, [r2, #0]
 8003fe6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	3301      	adds	r3, #1
 8003fec:	623b      	str	r3, [r7, #32]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	0c1b      	lsrs	r3, r3, #16
 8003ff4:	4a1f      	ldr	r2, [pc, #124]	; (8004074 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8003ff6:	5cd3      	ldrb	r3, [r2, r3]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d3eb      	bcc.n	8003fd8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b40      	cmp	r3, #64	; 0x40
 8004004:	d105      	bne.n	8004012 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004010:	e01e      	b.n	8004050 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b41      	cmp	r3, #65	; 0x41
 8004016:	d105      	bne.n	8004024 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004022:	e015      	b.n	8004050 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b1f      	cmp	r3, #31
 8004028:	d808      	bhi.n	800403c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2101      	movs	r1, #1
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	fa01 f202 	lsl.w	r2, r1, r2
 8004036:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800403a:	e009      	b.n	8004050 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f003 021f 	and.w	r2, r3, #31
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2101      	movs	r1, #1
 8004048:	fa01 f202 	lsl.w	r2, r1, r2
 800404c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	e008      	b.n	8004066 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800405a:	f043 0208 	orr.w	r2, r3, #8
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
  }
}
 8004066:	4618      	mov	r0, r3
 8004068:	372c      	adds	r7, #44	; 0x2c
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	08011748 	.word	0x08011748

08004078 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Level Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800408c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800408e:	68fb      	ldr	r3, [r7, #12]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80040ae:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d002      	beq.n	80040bc <HAL_FDCAN_ActivateNotification+0x20>
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d155      	bne.n	8004168 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d108      	bne.n	80040dc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80040da:	e014      	b.n	8004106 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	4013      	ands	r3, r2
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d108      	bne.n	80040fe <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0202 	orr.w	r2, r2, #2
 80040fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80040fc:	e003      	b.n	8004106 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2203      	movs	r2, #3
 8004104:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800410c:	2b00      	cmp	r3, #0
 800410e:	d009      	beq.n	8004124 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	430a      	orrs	r2, r1
 8004120:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	430a      	orrs	r2, r1
 800413e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <HAL_FDCAN_ActivateNotification+0xec>)
 800414c:	4013      	ands	r3, r2
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	430b      	orrs	r3, r1
 8004154:	6553      	str	r3, [r2, #84]	; 0x54
 8004156:	4b0d      	ldr	r3, [pc, #52]	; (800418c <HAL_FDCAN_ActivateNotification+0xf0>)
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	0f9b      	lsrs	r3, r3, #30
 800415e:	490b      	ldr	r1, [pc, #44]	; (800418c <HAL_FDCAN_ActivateNotification+0xf0>)
 8004160:	4313      	orrs	r3, r2
 8004162:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	e008      	b.n	800417a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800416e:	f043 0202 	orr.w	r2, r3, #2
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
  }
}
 800417a:	4618      	mov	r0, r3
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	3fcfffff 	.word	0x3fcfffff
 800418c:	4000a800 	.word	0x4000a800

08004190 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b096      	sub	sp, #88	; 0x58
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004198:	4b95      	ldr	r3, [pc, #596]	; (80043f0 <HAL_FDCAN_IRQHandler+0x260>)
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	079b      	lsls	r3, r3, #30
 800419e:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80041a0:	4b93      	ldr	r3, [pc, #588]	; (80043f0 <HAL_FDCAN_IRQHandler+0x260>)
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	079b      	lsls	r3, r3, #30
 80041a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041a8:	4013      	ands	r3, r2
 80041aa:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80041b6:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80041c0:	4013      	ands	r3, r2
 80041c2:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041d8:	4013      	ands	r3, r2
 80041da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041f0:	4013      	ands	r3, r2
 80041f2:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fa:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80041fe:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004208:	4013      	ands	r3, r2
 800420a:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004212:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8004216:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004220:	4013      	ands	r3, r2
 8004222:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004232:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00f      	beq.n	800425e <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004250:	651a      	str	r2, [r3, #80]	; 0x50
 8004252:	4b67      	ldr	r3, [pc, #412]	; (80043f0 <HAL_FDCAN_IRQHandler+0x260>)
 8004254:	2200      	movs	r2, #0
 8004256:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fa2e 	bl	80046ba <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800425e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01c      	beq.n	80042a2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426e:	2b00      	cmp	r3, #0
 8004270:	d017      	beq.n	80042a2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800427a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004286:	4013      	ands	r3, r2
 8004288:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004292:	651a      	str	r2, [r3, #80]	; 0x50
 8004294:	4b56      	ldr	r3, [pc, #344]	; (80043f0 <HAL_FDCAN_IRQHandler+0x260>)
 8004296:	2200      	movs	r2, #0
 8004298:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800429a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f9e3 	bl	8004668 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80042a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00d      	beq.n	80042c4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042ae:	4b51      	ldr	r3, [pc, #324]	; (80043f4 <HAL_FDCAN_IRQHandler+0x264>)
 80042b0:	400b      	ands	r3, r1
 80042b2:	6513      	str	r3, [r2, #80]	; 0x50
 80042b4:	4a4e      	ldr	r2, [pc, #312]	; (80043f0 <HAL_FDCAN_IRQHandler+0x260>)
 80042b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b8:	0f9b      	lsrs	r3, r3, #30
 80042ba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80042bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f9b2 	bl	8004628 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80042c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00d      	beq.n	80042e6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80042d0:	4b48      	ldr	r3, [pc, #288]	; (80043f4 <HAL_FDCAN_IRQHandler+0x264>)
 80042d2:	400b      	ands	r3, r1
 80042d4:	6513      	str	r3, [r2, #80]	; 0x50
 80042d6:	4a46      	ldr	r2, [pc, #280]	; (80043f0 <HAL_FDCAN_IRQHandler+0x260>)
 80042d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042da:	0f9b      	lsrs	r3, r3, #30
 80042dc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80042de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f9ac 	bl	800463e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80042e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80042f2:	4b40      	ldr	r3, [pc, #256]	; (80043f4 <HAL_FDCAN_IRQHandler+0x264>)
 80042f4:	400b      	ands	r3, r1
 80042f6:	6513      	str	r3, [r2, #80]	; 0x50
 80042f8:	4a3d      	ldr	r2, [pc, #244]	; (80043f0 <HAL_FDCAN_IRQHandler+0x260>)
 80042fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fc:	0f9b      	lsrs	r3, r3, #30
 80042fe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004300:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fc ff72 	bl	80011ec <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00d      	beq.n	800432a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004314:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <HAL_FDCAN_IRQHandler+0x264>)
 8004316:	400b      	ands	r3, r1
 8004318:	6513      	str	r3, [r2, #80]	; 0x50
 800431a:	4a35      	ldr	r2, [pc, #212]	; (80043f0 <HAL_FDCAN_IRQHandler+0x260>)
 800431c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431e:	0f9b      	lsrs	r3, r3, #30
 8004320:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004322:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7fc ff83 	bl	8001230 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800432a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00f      	beq.n	8004354 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004346:	651a      	str	r2, [r3, #80]	; 0x50
 8004348:	4b29      	ldr	r3, [pc, #164]	; (80043f0 <HAL_FDCAN_IRQHandler+0x260>)
 800434a:	2200      	movs	r2, #0
 800434c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f980 	bl	8004654 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01c      	beq.n	8004398 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004364:	2b00      	cmp	r3, #0
 8004366:	d017      	beq.n	8004398 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004370:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800437a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437c:	4013      	ands	r3, r2
 800437e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004388:	651a      	str	r2, [r3, #80]	; 0x50
 800438a:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <HAL_FDCAN_IRQHandler+0x260>)
 800438c:	2200      	movs	r2, #0
 800438e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc ff6e 	bl	8001274 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00f      	beq.n	80043c2 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80043b4:	651a      	str	r2, [r3, #80]	; 0x50
 80043b6:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <HAL_FDCAN_IRQHandler+0x260>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f95e 	bl	800467e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80043c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80043cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d010      	beq.n	80043f8 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043de:	651a      	str	r2, [r3, #80]	; 0x50
 80043e0:	4b03      	ldr	r3, [pc, #12]	; (80043f0 <HAL_FDCAN_IRQHandler+0x260>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f953 	bl	8004692 <HAL_FDCAN_TimestampWraparoundCallback>
 80043ec:	e004      	b.n	80043f8 <HAL_FDCAN_IRQHandler+0x268>
 80043ee:	bf00      	nop
 80043f0:	4000a800 	.word	0x4000a800
 80043f4:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80043f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00f      	beq.n	8004422 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004414:	651a      	str	r2, [r3, #80]	; 0x50
 8004416:	4b81      	ldr	r3, [pc, #516]	; (800461c <HAL_FDCAN_IRQHandler+0x48c>)
 8004418:	2200      	movs	r2, #0
 800441a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f942 	bl	80046a6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d014      	beq.n	8004456 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00f      	beq.n	8004456 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800443e:	651a      	str	r2, [r3, #80]	; 0x50
 8004440:	4b76      	ldr	r3, [pc, #472]	; (800461c <HAL_FDCAN_IRQHandler+0x48c>)
 8004442:	2200      	movs	r2, #0
 8004444:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800444c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00d      	beq.n	8004478 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004462:	4b6f      	ldr	r3, [pc, #444]	; (8004620 <HAL_FDCAN_IRQHandler+0x490>)
 8004464:	400b      	ands	r3, r1
 8004466:	6513      	str	r3, [r2, #80]	; 0x50
 8004468:	4a6c      	ldr	r2, [pc, #432]	; (800461c <HAL_FDCAN_IRQHandler+0x48c>)
 800446a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800446c:	0f9b      	lsrs	r3, r3, #30
 800446e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004470:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f935 	bl	80046e2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447a:	2b00      	cmp	r3, #0
 800447c:	d011      	beq.n	80044a2 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004484:	4b66      	ldr	r3, [pc, #408]	; (8004620 <HAL_FDCAN_IRQHandler+0x490>)
 8004486:	400b      	ands	r3, r1
 8004488:	6513      	str	r3, [r2, #80]	; 0x50
 800448a:	4a64      	ldr	r2, [pc, #400]	; (800461c <HAL_FDCAN_IRQHandler+0x48c>)
 800448c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800448e:	0f9b      	lsrs	r3, r3, #30
 8004490:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a5f      	ldr	r2, [pc, #380]	; (8004624 <HAL_FDCAN_IRQHandler+0x494>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	f040 80aa 	bne.w	8004602 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a2 	beq.w	8004602 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044d2:	4013      	ands	r3, r2
 80044d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ea:	4013      	ands	r3, r2
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004502:	4013      	ands	r3, r2
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8004510:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	6a3a      	ldr	r2, [r7, #32]
 800451a:	4013      	ands	r3, r2
 800451c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8004528:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	4013      	ands	r3, r2
 8004534:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004548:	2b00      	cmp	r3, #0
 800454a:	d007      	beq.n	800455c <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004552:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004554:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8ce 	bl	80046f8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004568:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800456a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f8ce 	bl	800470e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d019      	beq.n	80045b0 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d014      	beq.n	80045b0 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	b29b      	uxth	r3, r3
 8004590:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800459c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2240      	movs	r2, #64	; 0x40
 80045a4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	6939      	ldr	r1, [r7, #16]
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f8ba 	bl	8004724 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045bc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80045be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f8bb 	bl	800473c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	6a3a      	ldr	r2, [r7, #32]
 80045d2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00b      	beq.n	8004602 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	69fa      	ldr	r2, [r7, #28]
 80045f0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f85e 	bl	80046ce <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004612:	bf00      	nop
 8004614:	3758      	adds	r7, #88	; 0x58
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	4000a800 	.word	0x4000a800
 8004620:	3fcfffff 	.word	0x3fcfffff
 8004624:	4000a000 	.word	0x4000a000

08004628 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
	...

08004754 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004760:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800476a:	4ba7      	ldr	r3, [pc, #668]	; (8004a08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800476c:	4013      	ands	r3, r2
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	0091      	lsls	r1, r2, #2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	430b      	orrs	r3, r1
 8004778:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004784:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	041a      	lsls	r2, r3, #16
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	4413      	add	r3, r2
 80047a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80047aa:	4b97      	ldr	r3, [pc, #604]	; (8004a08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	0091      	lsls	r1, r2, #2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	430b      	orrs	r3, r1
 80047b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047cc:	041a      	lsls	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	4413      	add	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80047ec:	4b86      	ldr	r3, [pc, #536]	; (8004a08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	0091      	lsls	r1, r2, #2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	430b      	orrs	r3, r1
 80047fa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004806:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	041a      	lsls	r2, r3, #16
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	4413      	add	r3, r2
 800482a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004834:	4b74      	ldr	r3, [pc, #464]	; (8004a08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004836:	4013      	ands	r3, r2
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	0091      	lsls	r1, r2, #2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	430b      	orrs	r3, r1
 8004842:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800484e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004856:	041a      	lsls	r2, r3, #16
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	4413      	add	r3, r2
 8004872:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800487c:	4b62      	ldr	r3, [pc, #392]	; (8004a08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800487e:	4013      	ands	r3, r2
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	0091      	lsls	r1, r2, #2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	430b      	orrs	r3, r1
 800488a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	4413      	add	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80048a8:	4b57      	ldr	r3, [pc, #348]	; (8004a08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	0091      	lsls	r1, r2, #2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	430b      	orrs	r3, r1
 80048b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048c2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ca:	041a      	lsls	r2, r3, #16
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	4413      	add	r3, r2
 80048e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80048ea:	4b47      	ldr	r3, [pc, #284]	; (8004a08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	0091      	lsls	r1, r2, #2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	430b      	orrs	r3, r1
 80048f8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004904:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490c:	041a      	lsls	r2, r3, #16
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004920:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004928:	061a      	lsls	r2, r3, #24
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004938:	4b34      	ldr	r3, [pc, #208]	; (8004a0c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800493a:	4413      	add	r3, r2
 800493c:	009a      	lsls	r2, r3, #2
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	441a      	add	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	441a      	add	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800496e:	fb01 f303 	mul.w	r3, r1, r3
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	441a      	add	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004986:	fb01 f303 	mul.w	r3, r1, r3
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	441a      	add	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	441a      	add	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	441a      	add	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80049ce:	fb01 f303 	mul.w	r3, r1, r3
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	441a      	add	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	441a      	add	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	4a04      	ldr	r2, [pc, #16]	; (8004a10 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d915      	bls.n	8004a30 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004a04:	e006      	b.n	8004a14 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004a06:	bf00      	nop
 8004a08:	ffff0003 	.word	0xffff0003
 8004a0c:	10002b00 	.word	0x10002b00
 8004a10:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2203      	movs	r2, #3
 8004a28:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e010      	b.n	8004a52 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	e005      	b.n	8004a44 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3304      	adds	r3, #4
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d3f3      	bcc.n	8004a38 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop

08004a60 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b089      	sub	sp, #36	; 0x24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10a      	bne.n	8004a8c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004a7e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	e00a      	b.n	8004aa2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004a94:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004a9a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004a9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aa0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004aac:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004ab2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004ab8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	fb01 f303 	mul.w	r3, r1, r3
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	3304      	adds	r3, #4
 8004aee:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	e020      	b.n	8004b38 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	3303      	adds	r3, #3
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	4413      	add	r3, r2
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	3302      	adds	r3, #2
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	440b      	add	r3, r1
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004b0e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	3301      	adds	r3, #1
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	440b      	add	r3, r1
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8004b1c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	440a      	add	r2, r1
 8004b24:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004b26:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	3304      	adds	r3, #4
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	0c1b      	lsrs	r3, r3, #16
 8004b3e:	4a06      	ldr	r2, [pc, #24]	; (8004b58 <FDCAN_CopyMessageToRAM+0xf8>)
 8004b40:	5cd3      	ldrb	r3, [r2, r3]
 8004b42:	461a      	mov	r2, r3
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d3d5      	bcc.n	8004af6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	bf00      	nop
 8004b4e:	3724      	adds	r7, #36	; 0x24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	08011748 	.word	0x08011748

08004b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b089      	sub	sp, #36	; 0x24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004b6a:	4b89      	ldr	r3, [pc, #548]	; (8004d90 <HAL_GPIO_Init+0x234>)
 8004b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b6e:	e194      	b.n	8004e9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	2101      	movs	r1, #1
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 8186 	beq.w	8004e94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d005      	beq.n	8004ba0 <HAL_GPIO_Init+0x44>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 0303 	and.w	r3, r3, #3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d130      	bne.n	8004c02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	2203      	movs	r2, #3
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	43db      	mvns	r3, r3
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	4013      	ands	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	091b      	lsrs	r3, r3, #4
 8004bec:	f003 0201 	and.w	r2, r3, #1
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	d017      	beq.n	8004c3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	2203      	movs	r2, #3
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	4013      	ands	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d123      	bne.n	8004c92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	08da      	lsrs	r2, r3, #3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3208      	adds	r2, #8
 8004c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	220f      	movs	r2, #15
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	43db      	mvns	r3, r3
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	08da      	lsrs	r2, r3, #3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3208      	adds	r2, #8
 8004c8c:	69b9      	ldr	r1, [r7, #24]
 8004c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f003 0203 	and.w	r2, r3, #3
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 80e0 	beq.w	8004e94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cd4:	4b2f      	ldr	r3, [pc, #188]	; (8004d94 <HAL_GPIO_Init+0x238>)
 8004cd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cda:	4a2e      	ldr	r2, [pc, #184]	; (8004d94 <HAL_GPIO_Init+0x238>)
 8004cdc:	f043 0302 	orr.w	r3, r3, #2
 8004ce0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ce4:	4b2b      	ldr	r3, [pc, #172]	; (8004d94 <HAL_GPIO_Init+0x238>)
 8004ce6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cf2:	4a29      	ldr	r2, [pc, #164]	; (8004d98 <HAL_GPIO_Init+0x23c>)
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	089b      	lsrs	r3, r3, #2
 8004cf8:	3302      	adds	r3, #2
 8004cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	220f      	movs	r2, #15
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4013      	ands	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a20      	ldr	r2, [pc, #128]	; (8004d9c <HAL_GPIO_Init+0x240>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d052      	beq.n	8004dc4 <HAL_GPIO_Init+0x268>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a1f      	ldr	r2, [pc, #124]	; (8004da0 <HAL_GPIO_Init+0x244>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d031      	beq.n	8004d8a <HAL_GPIO_Init+0x22e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a1e      	ldr	r2, [pc, #120]	; (8004da4 <HAL_GPIO_Init+0x248>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d02b      	beq.n	8004d86 <HAL_GPIO_Init+0x22a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a1d      	ldr	r2, [pc, #116]	; (8004da8 <HAL_GPIO_Init+0x24c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d025      	beq.n	8004d82 <HAL_GPIO_Init+0x226>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <HAL_GPIO_Init+0x250>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d01f      	beq.n	8004d7e <HAL_GPIO_Init+0x222>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a1b      	ldr	r2, [pc, #108]	; (8004db0 <HAL_GPIO_Init+0x254>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d019      	beq.n	8004d7a <HAL_GPIO_Init+0x21e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a1a      	ldr	r2, [pc, #104]	; (8004db4 <HAL_GPIO_Init+0x258>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d013      	beq.n	8004d76 <HAL_GPIO_Init+0x21a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a19      	ldr	r2, [pc, #100]	; (8004db8 <HAL_GPIO_Init+0x25c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00d      	beq.n	8004d72 <HAL_GPIO_Init+0x216>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a18      	ldr	r2, [pc, #96]	; (8004dbc <HAL_GPIO_Init+0x260>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d007      	beq.n	8004d6e <HAL_GPIO_Init+0x212>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a17      	ldr	r2, [pc, #92]	; (8004dc0 <HAL_GPIO_Init+0x264>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d101      	bne.n	8004d6a <HAL_GPIO_Init+0x20e>
 8004d66:	2309      	movs	r3, #9
 8004d68:	e02d      	b.n	8004dc6 <HAL_GPIO_Init+0x26a>
 8004d6a:	230a      	movs	r3, #10
 8004d6c:	e02b      	b.n	8004dc6 <HAL_GPIO_Init+0x26a>
 8004d6e:	2308      	movs	r3, #8
 8004d70:	e029      	b.n	8004dc6 <HAL_GPIO_Init+0x26a>
 8004d72:	2307      	movs	r3, #7
 8004d74:	e027      	b.n	8004dc6 <HAL_GPIO_Init+0x26a>
 8004d76:	2306      	movs	r3, #6
 8004d78:	e025      	b.n	8004dc6 <HAL_GPIO_Init+0x26a>
 8004d7a:	2305      	movs	r3, #5
 8004d7c:	e023      	b.n	8004dc6 <HAL_GPIO_Init+0x26a>
 8004d7e:	2304      	movs	r3, #4
 8004d80:	e021      	b.n	8004dc6 <HAL_GPIO_Init+0x26a>
 8004d82:	2303      	movs	r3, #3
 8004d84:	e01f      	b.n	8004dc6 <HAL_GPIO_Init+0x26a>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e01d      	b.n	8004dc6 <HAL_GPIO_Init+0x26a>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e01b      	b.n	8004dc6 <HAL_GPIO_Init+0x26a>
 8004d8e:	bf00      	nop
 8004d90:	58000080 	.word	0x58000080
 8004d94:	58024400 	.word	0x58024400
 8004d98:	58000400 	.word	0x58000400
 8004d9c:	58020000 	.word	0x58020000
 8004da0:	58020400 	.word	0x58020400
 8004da4:	58020800 	.word	0x58020800
 8004da8:	58020c00 	.word	0x58020c00
 8004dac:	58021000 	.word	0x58021000
 8004db0:	58021400 	.word	0x58021400
 8004db4:	58021800 	.word	0x58021800
 8004db8:	58021c00 	.word	0x58021c00
 8004dbc:	58022000 	.word	0x58022000
 8004dc0:	58022400 	.word	0x58022400
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	f002 0203 	and.w	r2, r2, #3
 8004dcc:	0092      	lsls	r2, r2, #2
 8004dce:	4093      	lsls	r3, r2
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dd6:	4938      	ldr	r1, [pc, #224]	; (8004eb8 <HAL_GPIO_Init+0x35c>)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	089b      	lsrs	r3, r3, #2
 8004ddc:	3302      	adds	r3, #2
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	43db      	mvns	r3, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4013      	ands	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	43db      	mvns	r3, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4013      	ands	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	3301      	adds	r3, #1
 8004e98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f47f ae63 	bne.w	8004b70 <HAL_GPIO_Init+0x14>
  }
}
 8004eaa:	bf00      	nop
 8004eac:	bf00      	nop
 8004eae:	3724      	adds	r7, #36	; 0x24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	58000400 	.word	0x58000400

08004ebc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ebe:	b08f      	sub	sp, #60	; 0x3c
 8004ec0:	af0a      	add	r7, sp, #40	; 0x28
 8004ec2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e116      	b.n	80050fc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f00a fa31 	bl	800f350 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d102      	bne.n	8004f08 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f006 fe10 	bl	800bb32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	687e      	ldr	r6, [r7, #4]
 8004f1a:	466d      	mov	r5, sp
 8004f1c:	f106 0410 	add.w	r4, r6, #16
 8004f20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f30:	1d33      	adds	r3, r6, #4
 8004f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f34:	6838      	ldr	r0, [r7, #0]
 8004f36:	f006 fcdb 	bl	800b8f0 <USB_CoreInit>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0d7      	b.n	80050fc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f006 fdfe 	bl	800bb54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f58:	2300      	movs	r3, #0
 8004f5a:	73fb      	strb	r3, [r7, #15]
 8004f5c:	e04a      	b.n	8004ff4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f5e:	7bfa      	ldrb	r2, [r7, #15]
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	333d      	adds	r3, #61	; 0x3d
 8004f6e:	2201      	movs	r2, #1
 8004f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f72:	7bfa      	ldrb	r2, [r7, #15]
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	333c      	adds	r3, #60	; 0x3c
 8004f82:	7bfa      	ldrb	r2, [r7, #15]
 8004f84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f86:	7bfa      	ldrb	r2, [r7, #15]
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	b298      	uxth	r0, r3
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	3356      	adds	r3, #86	; 0x56
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f9e:	7bfa      	ldrb	r2, [r7, #15]
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	3340      	adds	r3, #64	; 0x40
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fb2:	7bfa      	ldrb	r2, [r7, #15]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	3344      	adds	r3, #68	; 0x44
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fc6:	7bfa      	ldrb	r2, [r7, #15]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	3348      	adds	r3, #72	; 0x48
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004fda:	7bfa      	ldrb	r2, [r7, #15]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	334c      	adds	r3, #76	; 0x4c
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
 8004ff4:	7bfa      	ldrb	r2, [r7, #15]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d3af      	bcc.n	8004f5e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]
 8005002:	e044      	b.n	800508e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005004:	7bfa      	ldrb	r2, [r7, #15]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	4413      	add	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800501a:	7bfa      	ldrb	r2, [r7, #15]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800502c:	7bfa      	ldrb	r2, [r7, #15]
 800502e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005030:	7bfa      	ldrb	r2, [r7, #15]
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005046:	7bfa      	ldrb	r2, [r7, #15]
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800505c:	7bfa      	ldrb	r2, [r7, #15]
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	4613      	mov	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005072:	7bfa      	ldrb	r2, [r7, #15]
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	3301      	adds	r3, #1
 800508c:	73fb      	strb	r3, [r7, #15]
 800508e:	7bfa      	ldrb	r2, [r7, #15]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	429a      	cmp	r2, r3
 8005096:	d3b5      	bcc.n	8005004 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	603b      	str	r3, [r7, #0]
 800509e:	687e      	ldr	r6, [r7, #4]
 80050a0:	466d      	mov	r5, sp
 80050a2:	f106 0410 	add.w	r4, r6, #16
 80050a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80050b6:	1d33      	adds	r3, r6, #4
 80050b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050ba:	6838      	ldr	r0, [r7, #0]
 80050bc:	f006 fd96 	bl	800bbec <USB_DevInit>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2202      	movs	r2, #2
 80050ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e014      	b.n	80050fc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d102      	bne.n	80050f0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f001 f970 	bl	80063d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f007 fdd8 	bl	800ccaa <USB_DevDisconnect>

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005104 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_PCD_Start+0x1c>
 800511c:	2302      	movs	r3, #2
 800511e:	e022      	b.n	8005166 <HAL_PCD_Start+0x62>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005130:	2b00      	cmp	r3, #0
 8005132:	d109      	bne.n	8005148 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8005138:	2b01      	cmp	r3, #1
 800513a:	d105      	bne.n	8005148 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f006 fcdf 	bl	800bb10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f007 fd86 	bl	800cc68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800516e:	b590      	push	{r4, r7, lr}
 8005170:	b08d      	sub	sp, #52	; 0x34
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f007 fe44 	bl	800ce12 <USB_GetMode>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	f040 84b7 	bne.w	8005b00 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f007 fda8 	bl	800ccec <USB_ReadInterrupts>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 84ad 	beq.w	8005afe <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	0a1b      	lsrs	r3, r3, #8
 80051ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f007 fd95 	bl	800ccec <USB_ReadInterrupts>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d107      	bne.n	80051dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695a      	ldr	r2, [r3, #20]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f002 0202 	and.w	r2, r2, #2
 80051da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f007 fd83 	bl	800ccec <USB_ReadInterrupts>
 80051e6:	4603      	mov	r3, r0
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d161      	bne.n	80052b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0210 	bic.w	r2, r2, #16
 80051fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	f003 020f 	and.w	r2, r3, #15
 800520c:	4613      	mov	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	4413      	add	r3, r2
 800521c:	3304      	adds	r3, #4
 800521e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	0c5b      	lsrs	r3, r3, #17
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	2b02      	cmp	r3, #2
 800522a:	d124      	bne.n	8005276 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005232:	4013      	ands	r3, r2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d035      	beq.n	80052a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	091b      	lsrs	r3, r3, #4
 8005240:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005246:	b29b      	uxth	r3, r3
 8005248:	461a      	mov	r2, r3
 800524a:	6a38      	ldr	r0, [r7, #32]
 800524c:	f007 fbba 	bl	800c9c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	091b      	lsrs	r3, r3, #4
 8005258:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800525c:	441a      	add	r2, r3
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	695a      	ldr	r2, [r3, #20]
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800526e:	441a      	add	r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	615a      	str	r2, [r3, #20]
 8005274:	e016      	b.n	80052a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	0c5b      	lsrs	r3, r3, #17
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	2b06      	cmp	r3, #6
 8005280:	d110      	bne.n	80052a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005288:	2208      	movs	r2, #8
 800528a:	4619      	mov	r1, r3
 800528c:	6a38      	ldr	r0, [r7, #32]
 800528e:	f007 fb99 	bl	800c9c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	091b      	lsrs	r3, r3, #4
 800529a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800529e:	441a      	add	r2, r3
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0210 	orr.w	r2, r2, #16
 80052b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f007 fd17 	bl	800ccec <USB_ReadInterrupts>
 80052be:	4603      	mov	r3, r0
 80052c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052c8:	f040 80a7 	bne.w	800541a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f007 fd1c 	bl	800cd12 <USB_ReadDevAllOutEpInterrupt>
 80052da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80052dc:	e099      	b.n	8005412 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 808e 	beq.w	8005406 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	4611      	mov	r1, r2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f007 fd40 	bl	800cd7a <USB_ReadDevOutEPInterrupt>
 80052fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00c      	beq.n	8005320 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005312:	461a      	mov	r2, r3
 8005314:	2301      	movs	r3, #1
 8005316:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fed2 	bl	80060c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00c      	beq.n	8005344 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005336:	461a      	mov	r2, r3
 8005338:	2308      	movs	r3, #8
 800533a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800533c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 ffa8 	bl	8006294 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535a:	461a      	mov	r2, r3
 800535c:	2310      	movs	r3, #16
 800535e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d030      	beq.n	80053cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005372:	2b80      	cmp	r3, #128	; 0x80
 8005374:	d109      	bne.n	800538a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005384:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005388:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800538a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538c:	4613      	mov	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	4413      	add	r3, r2
 800539c:	3304      	adds	r3, #4
 800539e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	78db      	ldrb	r3, [r3, #3]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d108      	bne.n	80053ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2200      	movs	r2, #0
 80053ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f00a f901 	bl	800f5bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c6:	461a      	mov	r2, r3
 80053c8:	2302      	movs	r3, #2
 80053ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e2:	461a      	mov	r2, r3
 80053e4:	2320      	movs	r3, #32
 80053e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	461a      	mov	r2, r3
 8005400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005404:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	3301      	adds	r3, #1
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	2b00      	cmp	r3, #0
 8005416:	f47f af62 	bne.w	80052de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f007 fc64 	bl	800ccec <USB_ReadInterrupts>
 8005424:	4603      	mov	r3, r0
 8005426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800542a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800542e:	f040 80db 	bne.w	80055e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f007 fc85 	bl	800cd46 <USB_ReadDevAllInEpInterrupt>
 800543c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005442:	e0cd      	b.n	80055e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 80c2 	beq.w	80055d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	4611      	mov	r1, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f007 fcab 	bl	800cdb6 <USB_ReadDevInEPInterrupt>
 8005460:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d057      	beq.n	800551c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	2201      	movs	r2, #1
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	43db      	mvns	r3, r3
 8005486:	69f9      	ldr	r1, [r7, #28]
 8005488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800548c:	4013      	ands	r3, r2
 800548e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549c:	461a      	mov	r2, r3
 800549e:	2301      	movs	r3, #1
 80054a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d132      	bne.n	8005510 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ae:	4613      	mov	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	4413      	add	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	440b      	add	r3, r1
 80054b8:	3348      	adds	r3, #72	; 0x48
 80054ba:	6819      	ldr	r1, [r3, #0]
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c0:	4613      	mov	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4403      	add	r3, r0
 80054ca:	3344      	adds	r3, #68	; 0x44
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4419      	add	r1, r3
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4403      	add	r3, r0
 80054de:	3348      	adds	r3, #72	; 0x48
 80054e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d113      	bne.n	8005510 <HAL_PCD_IRQHandler+0x3a2>
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	334c      	adds	r3, #76	; 0x4c
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d108      	bne.n	8005510 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005508:	461a      	mov	r2, r3
 800550a:	2101      	movs	r1, #1
 800550c:	f007 fcb4 	bl	800ce78 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	b2db      	uxtb	r3, r3
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f009 ffcb 	bl	800f4b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d008      	beq.n	8005538 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005532:	461a      	mov	r2, r3
 8005534:	2308      	movs	r3, #8
 8005536:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2b00      	cmp	r3, #0
 8005540:	d008      	beq.n	8005554 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554e:	461a      	mov	r2, r3
 8005550:	2310      	movs	r3, #16
 8005552:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555a:	2b00      	cmp	r3, #0
 800555c:	d008      	beq.n	8005570 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556a:	461a      	mov	r2, r3
 800556c:	2340      	movs	r3, #64	; 0x40
 800556e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d023      	beq.n	80055c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800557a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800557c:	6a38      	ldr	r0, [r7, #32]
 800557e:	f006 fc93 	bl	800bea8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005584:	4613      	mov	r3, r2
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	3338      	adds	r3, #56	; 0x38
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	3304      	adds	r3, #4
 8005594:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	78db      	ldrb	r3, [r3, #3]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d108      	bne.n	80055b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2200      	movs	r2, #0
 80055a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	4619      	mov	r1, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f00a f818 	bl	800f5e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	461a      	mov	r2, r3
 80055be:	2302      	movs	r3, #2
 80055c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80055cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fcea 	bl	8005fa8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	3301      	adds	r3, #1
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	085b      	lsrs	r3, r3, #1
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f47f af2e 	bne.w	8005444 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f007 fb7d 	bl	800ccec <USB_ReadInterrupts>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055fc:	d122      	bne.n	8005644 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800560c:	f023 0301 	bic.w	r3, r3, #1
 8005610:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005618:	2b01      	cmp	r3, #1
 800561a:	d108      	bne.n	800562e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005624:	2100      	movs	r1, #0
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fef6 	bl	8006418 <HAL_PCDEx_LPM_Callback>
 800562c:	e002      	b.n	8005634 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f009 ffb6 	bl	800f5a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695a      	ldr	r2, [r3, #20]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005642:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f007 fb4f 	bl	800ccec <USB_ReadInterrupts>
 800564e:	4603      	mov	r3, r0
 8005650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005658:	d112      	bne.n	8005680 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b01      	cmp	r3, #1
 8005668:	d102      	bne.n	8005670 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f009 ff72 	bl	800f554 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800567e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f007 fb31 	bl	800ccec <USB_ReadInterrupts>
 800568a:	4603      	mov	r3, r0
 800568c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005694:	d121      	bne.n	80056da <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80056a4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d111      	bne.n	80056d4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	089b      	lsrs	r3, r3, #2
 80056c0:	f003 020f 	and.w	r2, r3, #15
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80056ca:	2101      	movs	r1, #1
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fea3 	bl	8006418 <HAL_PCDEx_LPM_Callback>
 80056d2:	e002      	b.n	80056da <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f009 ff3d 	bl	800f554 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f007 fb04 	bl	800ccec <USB_ReadInterrupts>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ee:	f040 80b7 	bne.w	8005860 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2110      	movs	r1, #16
 800570c:	4618      	mov	r0, r3
 800570e:	f006 fbcb 	bl	800bea8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005712:	2300      	movs	r3, #0
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005716:	e046      	b.n	80057a6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005724:	461a      	mov	r2, r3
 8005726:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800572a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800572c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800573c:	0151      	lsls	r1, r2, #5
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	440a      	add	r2, r1
 8005742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800574a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005758:	461a      	mov	r2, r3
 800575a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800575e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005770:	0151      	lsls	r1, r2, #5
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	440a      	add	r2, r1
 8005776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800577a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800577e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	440a      	add	r2, r1
 8005796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800579e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	3301      	adds	r3, #1
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d3b3      	bcc.n	8005718 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80057c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d016      	beq.n	80057fa <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057dc:	f043 030b 	orr.w	r3, r3, #11
 80057e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f2:	f043 030b 	orr.w	r3, r3, #11
 80057f6:	6453      	str	r3, [r2, #68]	; 0x44
 80057f8:	e015      	b.n	8005826 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005800:	695a      	ldr	r2, [r3, #20]
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005808:	4619      	mov	r1, r3
 800580a:	f242 032b 	movw	r3, #8235	; 0x202b
 800580e:	4313      	orrs	r3, r2
 8005810:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005820:	f043 030b 	orr.w	r3, r3, #11
 8005824:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005834:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005838:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800584a:	461a      	mov	r2, r3
 800584c:	f007 fb14 	bl	800ce78 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695a      	ldr	r2, [r3, #20]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800585e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f007 fa41 	bl	800ccec <USB_ReadInterrupts>
 800586a:	4603      	mov	r3, r0
 800586c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005874:	d124      	bne.n	80058c0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f007 fad8 	bl	800ce30 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4618      	mov	r0, r3
 8005886:	f006 fb8c 	bl	800bfa2 <USB_GetDevSpeed>
 800588a:	4603      	mov	r3, r0
 800588c:	461a      	mov	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681c      	ldr	r4, [r3, #0]
 8005896:	f001 fd9f 	bl	80073d8 <HAL_RCC_GetHCLKFreq>
 800589a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	461a      	mov	r2, r3
 80058a4:	4620      	mov	r0, r4
 80058a6:	f006 f891 	bl	800b9cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f009 fe29 	bl	800f502 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695a      	ldr	r2, [r3, #20]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80058be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f007 fa11 	bl	800ccec <USB_ReadInterrupts>
 80058ca:	4603      	mov	r3, r0
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d10a      	bne.n	80058ea <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f009 fe06 	bl	800f4e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695a      	ldr	r2, [r3, #20]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f002 0208 	and.w	r2, r2, #8
 80058e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f007 f9fc 	bl	800ccec <USB_ReadInterrupts>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fa:	2b80      	cmp	r3, #128	; 0x80
 80058fc:	d122      	bne.n	8005944 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800590a:	2301      	movs	r3, #1
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
 800590e:	e014      	b.n	800593a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005914:	4613      	mov	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	4413      	add	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d105      	bne.n	8005934 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	b2db      	uxtb	r3, r3
 800592c:	4619      	mov	r1, r3
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fb09 	bl	8005f46 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	3301      	adds	r3, #1
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005940:	429a      	cmp	r2, r3
 8005942:	d3e5      	bcc.n	8005910 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f007 f9cf 	bl	800ccec <USB_ReadInterrupts>
 800594e:	4603      	mov	r3, r0
 8005950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005958:	d13b      	bne.n	80059d2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800595a:	2301      	movs	r3, #1
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
 800595e:	e02b      	b.n	80059b8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005974:	4613      	mov	r3, r2
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	440b      	add	r3, r1
 800597e:	3340      	adds	r3, #64	; 0x40
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d115      	bne.n	80059b2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005986:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005988:	2b00      	cmp	r3, #0
 800598a:	da12      	bge.n	80059b2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005990:	4613      	mov	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	333f      	adds	r3, #63	; 0x3f
 800599c:	2201      	movs	r2, #1
 800599e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 faca 	bl	8005f46 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	3301      	adds	r3, #1
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059be:	429a      	cmp	r2, r3
 80059c0:	d3ce      	bcc.n	8005960 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695a      	ldr	r2, [r3, #20]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80059d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f007 f988 	bl	800ccec <USB_ReadInterrupts>
 80059dc:	4603      	mov	r3, r0
 80059de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059e6:	d155      	bne.n	8005a94 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059e8:	2301      	movs	r3, #1
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
 80059ec:	e045      	b.n	8005a7a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a02:	4613      	mov	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d12e      	bne.n	8005a74 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a16:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	da2b      	bge.n	8005a74 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005a28:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d121      	bne.n	8005a74 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a34:	4613      	mov	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005a42:	2201      	movs	r2, #1
 8005a44:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a70:	6053      	str	r3, [r2, #4]
            break;
 8005a72:	e007      	b.n	8005a84 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	3301      	adds	r3, #1
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d3b4      	bcc.n	80059ee <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695a      	ldr	r2, [r3, #20]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005a92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f007 f927 	bl	800ccec <USB_ReadInterrupts>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa8:	d10a      	bne.n	8005ac0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f009 fdaa 	bl	800f604 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f007 f911 	bl	800ccec <USB_ReadInterrupts>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d115      	bne.n	8005b00 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f009 fd9a 	bl	800f620 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6859      	ldr	r1, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	605a      	str	r2, [r3, #4]
 8005afc:	e000      	b.n	8005b00 <HAL_PCD_IRQHandler+0x992>
      return;
 8005afe:	bf00      	nop
    }
  }
}
 8005b00:	3734      	adds	r7, #52	; 0x34
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd90      	pop	{r4, r7, pc}

08005b06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_PCD_SetAddress+0x1a>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e013      	b.n	8005b48 <HAL_PCD_SetAddress+0x42>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	78fa      	ldrb	r2, [r7, #3]
 8005b2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	78fa      	ldrb	r2, [r7, #3]
 8005b36:	4611      	mov	r1, r2
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f007 f86f 	bl	800cc1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	4608      	mov	r0, r1
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4603      	mov	r3, r0
 8005b60:	70fb      	strb	r3, [r7, #3]
 8005b62:	460b      	mov	r3, r1
 8005b64:	803b      	strh	r3, [r7, #0]
 8005b66:	4613      	mov	r3, r2
 8005b68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	da0f      	bge.n	8005b96 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	f003 020f 	and.w	r2, r3, #15
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	3338      	adds	r3, #56	; 0x38
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	4413      	add	r3, r2
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	705a      	strb	r2, [r3, #1]
 8005b94:	e00f      	b.n	8005bb6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b96:	78fb      	ldrb	r3, [r7, #3]
 8005b98:	f003 020f 	and.w	r2, r3, #15
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	4413      	add	r3, r2
 8005bac:	3304      	adds	r3, #4
 8005bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005bc2:	883a      	ldrh	r2, [r7, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	78ba      	ldrb	r2, [r7, #2]
 8005bcc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d004      	beq.n	8005be0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005be0:	78bb      	ldrb	r3, [r7, #2]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d102      	bne.n	8005bec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_PCD_EP_Open+0xaa>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e00e      	b.n	8005c18 <HAL_PCD_EP_Open+0xc8>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f006 f9ef 	bl	800bfec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005c16:	7afb      	ldrb	r3, [r7, #11]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	da0f      	bge.n	8005c54 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	f003 020f 	and.w	r2, r3, #15
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	3338      	adds	r3, #56	; 0x38
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	4413      	add	r3, r2
 8005c48:	3304      	adds	r3, #4
 8005c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	705a      	strb	r2, [r3, #1]
 8005c52:	e00f      	b.n	8005c74 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	f003 020f 	and.w	r2, r3, #15
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	4413      	add	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4413      	add	r3, r2
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <HAL_PCD_EP_Close+0x6e>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e00e      	b.n	8005cac <HAL_PCD_EP_Close+0x8c>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68f9      	ldr	r1, [r7, #12]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f006 fa2d 	bl	800c0fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	607a      	str	r2, [r7, #4]
 8005cbe:	603b      	str	r3, [r7, #0]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cc4:	7afb      	ldrb	r3, [r7, #11]
 8005cc6:	f003 020f 	and.w	r2, r3, #15
 8005cca:	4613      	mov	r3, r2
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	3304      	adds	r3, #4
 8005cdc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2200      	movs	r2, #0
 8005cee:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cf6:	7afb      	ldrb	r3, [r7, #11]
 8005cf8:	f003 030f 	and.w	r3, r3, #15
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d102      	bne.n	8005d10 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6818      	ldr	r0, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	6979      	ldr	r1, [r7, #20]
 8005d1e:	f006 fac9 	bl	800c2b4 <USB_EPStartXfer>

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 020f 	and.w	r2, r3, #15
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	4613      	mov	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	440b      	add	r3, r1
 8005d4a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8005d4e:	681b      	ldr	r3, [r3, #0]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	607a      	str	r2, [r7, #4]
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d6c:	7afb      	ldrb	r3, [r7, #11]
 8005d6e:	f003 020f 	and.w	r2, r3, #15
 8005d72:	4613      	mov	r3, r2
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	3338      	adds	r3, #56	; 0x38
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	3304      	adds	r3, #4
 8005d82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2200      	movs	r2, #0
 8005d94:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d9c:	7afb      	ldrb	r3, [r7, #11]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d102      	bne.n	8005db6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6979      	ldr	r1, [r7, #20]
 8005dc4:	f006 fa76 	bl	800c2b4 <USB_EPStartXfer>

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005dde:	78fb      	ldrb	r3, [r7, #3]
 8005de0:	f003 020f 	and.w	r2, r3, #15
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d901      	bls.n	8005df0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e050      	b.n	8005e92 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	da0f      	bge.n	8005e18 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005df8:	78fb      	ldrb	r3, [r7, #3]
 8005dfa:	f003 020f 	and.w	r2, r3, #15
 8005dfe:	4613      	mov	r3, r2
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	3338      	adds	r3, #56	; 0x38
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	705a      	strb	r2, [r3, #1]
 8005e16:	e00d      	b.n	8005e34 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e18:	78fa      	ldrb	r2, [r7, #3]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	4413      	add	r3, r2
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_PCD_EP_SetStall+0x82>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e01e      	b.n	8005e92 <HAL_PCD_EP_SetStall+0xc0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68f9      	ldr	r1, [r7, #12]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f006 fe06 	bl	800ca74 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10a      	bne.n	8005e88 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	b2d9      	uxtb	r1, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e82:	461a      	mov	r2, r3
 8005e84:	f006 fff8 	bl	800ce78 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	f003 020f 	and.w	r2, r3, #15
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d901      	bls.n	8005eb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e042      	b.n	8005f3e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	da0f      	bge.n	8005ee0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	f003 020f 	and.w	r2, r3, #15
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	4413      	add	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	3338      	adds	r3, #56	; 0x38
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	705a      	strb	r2, [r3, #1]
 8005ede:	e00f      	b.n	8005f00 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	f003 020f 	and.w	r2, r3, #15
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f06:	78fb      	ldrb	r3, [r7, #3]
 8005f08:	f003 030f 	and.w	r3, r3, #15
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_PCD_EP_ClrStall+0x86>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e00e      	b.n	8005f3e <HAL_PCD_EP_ClrStall+0xa4>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68f9      	ldr	r1, [r7, #12]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f006 fe0e 	bl	800cb50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	da0c      	bge.n	8005f74 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	f003 020f 	and.w	r2, r3, #15
 8005f60:	4613      	mov	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	3338      	adds	r3, #56	; 0x38
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	3304      	adds	r3, #4
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	e00c      	b.n	8005f8e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	f003 020f 	and.w	r2, r3, #15
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	4413      	add	r3, r2
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68f9      	ldr	r1, [r7, #12]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f006 fc2d 	bl	800c7f4 <USB_EPStopXfer>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005f9e:	7afb      	ldrb	r3, [r7, #11]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	3338      	adds	r3, #56	; 0x38
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	4413      	add	r3, r2
 8005fcc:	3304      	adds	r3, #4
 8005fce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	695a      	ldr	r2, [r3, #20]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d901      	bls.n	8005fe0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e06c      	b.n	80060ba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d902      	bls.n	8005ffc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	3303      	adds	r3, #3
 8006000:	089b      	lsrs	r3, r3, #2
 8006002:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006004:	e02b      	b.n	800605e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	691a      	ldr	r2, [r3, #16]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	429a      	cmp	r2, r3
 800601a:	d902      	bls.n	8006022 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	3303      	adds	r3, #3
 8006026:	089b      	lsrs	r3, r3, #2
 8006028:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	68d9      	ldr	r1, [r3, #12]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	b2da      	uxtb	r2, r3
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800603a:	b2db      	uxtb	r3, r3
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	4603      	mov	r3, r0
 8006040:	6978      	ldr	r0, [r7, #20]
 8006042:	f006 fc81 	bl	800c948 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	441a      	add	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	695a      	ldr	r2, [r3, #20]
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	441a      	add	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	429a      	cmp	r2, r3
 8006072:	d809      	bhi.n	8006088 <PCD_WriteEmptyTxFifo+0xe0>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800607c:	429a      	cmp	r2, r3
 800607e:	d203      	bcs.n	8006088 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1be      	bne.n	8006006 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	429a      	cmp	r2, r3
 8006092:	d811      	bhi.n	80060b8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	f003 030f 	and.w	r3, r3, #15
 800609a:	2201      	movs	r2, #1
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	43db      	mvns	r3, r3
 80060ae:	6939      	ldr	r1, [r7, #16]
 80060b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060b4:	4013      	ands	r3, r2
 80060b6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3720      	adds	r7, #32
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	333c      	adds	r3, #60	; 0x3c
 80060dc:	3304      	adds	r3, #4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d17b      	bne.n	80061f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b00      	cmp	r3, #0
 8006102:	d015      	beq.n	8006130 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	4a61      	ldr	r2, [pc, #388]	; (800628c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	f240 80b9 	bls.w	8006280 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 80b3 	beq.w	8006280 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006126:	461a      	mov	r2, r3
 8006128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800612c:	6093      	str	r3, [r2, #8]
 800612e:	e0a7      	b.n	8006280 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b00      	cmp	r3, #0
 8006138:	d009      	beq.n	800614e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006146:	461a      	mov	r2, r3
 8006148:	2320      	movs	r3, #32
 800614a:	6093      	str	r3, [r2, #8]
 800614c:	e098      	b.n	8006280 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006154:	2b00      	cmp	r3, #0
 8006156:	f040 8093 	bne.w	8006280 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	4a4b      	ldr	r2, [pc, #300]	; (800628c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d90f      	bls.n	8006182 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006178:	461a      	mov	r2, r3
 800617a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617e:	6093      	str	r3, [r2, #8]
 8006180:	e07e      	b.n	8006280 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	4413      	add	r3, r2
 8006194:	3304      	adds	r3, #4
 8006196:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a1a      	ldr	r2, [r3, #32]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	0159      	lsls	r1, r3, #5
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	440b      	add	r3, r1
 80061a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ae:	1ad2      	subs	r2, r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d114      	bne.n	80061e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061cc:	461a      	mov	r2, r3
 80061ce:	2101      	movs	r1, #1
 80061d0:	f006 fe52 	bl	800ce78 <USB_EP0_OutStart>
 80061d4:	e006      	b.n	80061e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	441a      	add	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f009 f946 	bl	800f47c <HAL_PCD_DataOutStageCallback>
 80061f0:	e046      	b.n	8006280 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	4a26      	ldr	r2, [pc, #152]	; (8006290 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d124      	bne.n	8006244 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006210:	461a      	mov	r2, r3
 8006212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006216:	6093      	str	r3, [r2, #8]
 8006218:	e032      	b.n	8006280 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d008      	beq.n	8006236 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006230:	461a      	mov	r2, r3
 8006232:	2320      	movs	r3, #32
 8006234:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	b2db      	uxtb	r3, r3
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f009 f91d 	bl	800f47c <HAL_PCD_DataOutStageCallback>
 8006242:	e01d      	b.n	8006280 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d114      	bne.n	8006274 <PCD_EP_OutXfrComplete_int+0x1b0>
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	4613      	mov	r3, r2
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	440b      	add	r3, r1
 8006258:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d108      	bne.n	8006274 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800626c:	461a      	mov	r2, r3
 800626e:	2100      	movs	r1, #0
 8006270:	f006 fe02 	bl	800ce78 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	b2db      	uxtb	r3, r3
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f009 f8fe 	bl	800f47c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3720      	adds	r7, #32
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	4f54300a 	.word	0x4f54300a
 8006290:	4f54310a 	.word	0x4f54310a

08006294 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	333c      	adds	r3, #60	; 0x3c
 80062ac:	3304      	adds	r3, #4
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4a15      	ldr	r2, [pc, #84]	; (800631c <PCD_EP_OutSetupPacket_int+0x88>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d90e      	bls.n	80062e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d009      	beq.n	80062e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e0:	461a      	mov	r2, r3
 80062e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f009 f8b5 	bl	800f458 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4a0a      	ldr	r2, [pc, #40]	; (800631c <PCD_EP_OutSetupPacket_int+0x88>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d90c      	bls.n	8006310 <PCD_EP_OutSetupPacket_int+0x7c>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d108      	bne.n	8006310 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006308:	461a      	mov	r2, r3
 800630a:	2101      	movs	r1, #1
 800630c:	f006 fdb4 	bl	800ce78 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	4f54300a 	.word	0x4f54300a

08006320 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	70fb      	strb	r3, [r7, #3]
 800632c:	4613      	mov	r3, r2
 800632e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d107      	bne.n	800634e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800633e:	883b      	ldrh	r3, [r7, #0]
 8006340:	0419      	lsls	r1, r3, #16
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	430a      	orrs	r2, r1
 800634a:	629a      	str	r2, [r3, #40]	; 0x28
 800634c:	e028      	b.n	80063a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006354:	0c1b      	lsrs	r3, r3, #16
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	4413      	add	r3, r2
 800635a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800635c:	2300      	movs	r3, #0
 800635e:	73fb      	strb	r3, [r7, #15]
 8006360:	e00d      	b.n	800637e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	3340      	adds	r3, #64	; 0x40
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	0c1b      	lsrs	r3, r3, #16
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	4413      	add	r3, r2
 8006376:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	3301      	adds	r3, #1
 800637c:	73fb      	strb	r3, [r7, #15]
 800637e:	7bfa      	ldrb	r2, [r7, #15]
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	3b01      	subs	r3, #1
 8006384:	429a      	cmp	r2, r3
 8006386:	d3ec      	bcc.n	8006362 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006388:	883b      	ldrh	r3, [r7, #0]
 800638a:	0418      	lsls	r0, r3, #16
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6819      	ldr	r1, [r3, #0]
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	3b01      	subs	r3, #1
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	4302      	orrs	r2, r0
 8006398:	3340      	adds	r3, #64	; 0x40
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	460b      	mov	r3, r1
 80063b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	887a      	ldrh	r2, [r7, #2]
 80063c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063fe:	4b05      	ldr	r3, [pc, #20]	; (8006414 <HAL_PCDEx_ActivateLPM+0x44>)
 8006400:	4313      	orrs	r3, r2
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	10000003 	.word	0x10000003

08006418 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006438:	4b19      	ldr	r3, [pc, #100]	; (80064a0 <HAL_PWREx_ConfigSupply+0x70>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b04      	cmp	r3, #4
 8006442:	d00a      	beq.n	800645a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006444:	4b16      	ldr	r3, [pc, #88]	; (80064a0 <HAL_PWREx_ConfigSupply+0x70>)
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	429a      	cmp	r2, r3
 8006450:	d001      	beq.n	8006456 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e01f      	b.n	8006496 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	e01d      	b.n	8006496 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800645a:	4b11      	ldr	r3, [pc, #68]	; (80064a0 <HAL_PWREx_ConfigSupply+0x70>)
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f023 0207 	bic.w	r2, r3, #7
 8006462:	490f      	ldr	r1, [pc, #60]	; (80064a0 <HAL_PWREx_ConfigSupply+0x70>)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4313      	orrs	r3, r2
 8006468:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800646a:	f7fd f871 	bl	8003550 <HAL_GetTick>
 800646e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006470:	e009      	b.n	8006486 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006472:	f7fd f86d 	bl	8003550 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006480:	d901      	bls.n	8006486 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e007      	b.n	8006496 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006486:	4b06      	ldr	r3, [pc, #24]	; (80064a0 <HAL_PWREx_ConfigSupply+0x70>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800648e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006492:	d1ee      	bne.n	8006472 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	58024800 	.word	0x58024800

080064a4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80064a8:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4a04      	ldr	r2, [pc, #16]	; (80064c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80064ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064b2:	60d3      	str	r3, [r2, #12]
}
 80064b4:	bf00      	nop
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	58024800 	.word	0x58024800

080064c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08c      	sub	sp, #48	; 0x30
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d102      	bne.n	80064d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	f000 bc48 	b.w	8006d68 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8088 	beq.w	80065f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064e6:	4b99      	ldr	r3, [pc, #612]	; (800674c <HAL_RCC_OscConfig+0x288>)
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064f0:	4b96      	ldr	r3, [pc, #600]	; (800674c <HAL_RCC_OscConfig+0x288>)
 80064f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80064f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f8:	2b10      	cmp	r3, #16
 80064fa:	d007      	beq.n	800650c <HAL_RCC_OscConfig+0x48>
 80064fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fe:	2b18      	cmp	r3, #24
 8006500:	d111      	bne.n	8006526 <HAL_RCC_OscConfig+0x62>
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	f003 0303 	and.w	r3, r3, #3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d10c      	bne.n	8006526 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800650c:	4b8f      	ldr	r3, [pc, #572]	; (800674c <HAL_RCC_OscConfig+0x288>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d06d      	beq.n	80065f4 <HAL_RCC_OscConfig+0x130>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d169      	bne.n	80065f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	f000 bc21 	b.w	8006d68 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652e:	d106      	bne.n	800653e <HAL_RCC_OscConfig+0x7a>
 8006530:	4b86      	ldr	r3, [pc, #536]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a85      	ldr	r2, [pc, #532]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	e02e      	b.n	800659c <HAL_RCC_OscConfig+0xd8>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10c      	bne.n	8006560 <HAL_RCC_OscConfig+0x9c>
 8006546:	4b81      	ldr	r3, [pc, #516]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a80      	ldr	r2, [pc, #512]	; (800674c <HAL_RCC_OscConfig+0x288>)
 800654c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	4b7e      	ldr	r3, [pc, #504]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a7d      	ldr	r2, [pc, #500]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	e01d      	b.n	800659c <HAL_RCC_OscConfig+0xd8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006568:	d10c      	bne.n	8006584 <HAL_RCC_OscConfig+0xc0>
 800656a:	4b78      	ldr	r3, [pc, #480]	; (800674c <HAL_RCC_OscConfig+0x288>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a77      	ldr	r2, [pc, #476]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	4b75      	ldr	r3, [pc, #468]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a74      	ldr	r2, [pc, #464]	; (800674c <HAL_RCC_OscConfig+0x288>)
 800657c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	e00b      	b.n	800659c <HAL_RCC_OscConfig+0xd8>
 8006584:	4b71      	ldr	r3, [pc, #452]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a70      	ldr	r2, [pc, #448]	; (800674c <HAL_RCC_OscConfig+0x288>)
 800658a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	4b6e      	ldr	r3, [pc, #440]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a6d      	ldr	r2, [pc, #436]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800659a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d013      	beq.n	80065cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a4:	f7fc ffd4 	bl	8003550 <HAL_GetTick>
 80065a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065ac:	f7fc ffd0 	bl	8003550 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b64      	cmp	r3, #100	; 0x64
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e3d4      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065be:	4b63      	ldr	r3, [pc, #396]	; (800674c <HAL_RCC_OscConfig+0x288>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0f0      	beq.n	80065ac <HAL_RCC_OscConfig+0xe8>
 80065ca:	e014      	b.n	80065f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065cc:	f7fc ffc0 	bl	8003550 <HAL_GetTick>
 80065d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065d4:	f7fc ffbc 	bl	8003550 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b64      	cmp	r3, #100	; 0x64
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e3c0      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065e6:	4b59      	ldr	r3, [pc, #356]	; (800674c <HAL_RCC_OscConfig+0x288>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f0      	bne.n	80065d4 <HAL_RCC_OscConfig+0x110>
 80065f2:	e000      	b.n	80065f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 80ca 	beq.w	8006798 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006604:	4b51      	ldr	r3, [pc, #324]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800660c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800660e:	4b4f      	ldr	r3, [pc, #316]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006612:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d007      	beq.n	800662a <HAL_RCC_OscConfig+0x166>
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	2b18      	cmp	r3, #24
 800661e:	d156      	bne.n	80066ce <HAL_RCC_OscConfig+0x20a>
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d151      	bne.n	80066ce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800662a:	4b48      	ldr	r3, [pc, #288]	; (800674c <HAL_RCC_OscConfig+0x288>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	d005      	beq.n	8006642 <HAL_RCC_OscConfig+0x17e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e392      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006642:	4b42      	ldr	r3, [pc, #264]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f023 0219 	bic.w	r2, r3, #25
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	493f      	ldr	r1, [pc, #252]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006650:	4313      	orrs	r3, r2
 8006652:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006654:	f7fc ff7c 	bl	8003550 <HAL_GetTick>
 8006658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800665a:	e008      	b.n	800666e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800665c:	f7fc ff78 	bl	8003550 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e37c      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800666e:	4b37      	ldr	r3, [pc, #220]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	d0f0      	beq.n	800665c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800667a:	f7fc ff99 	bl	80035b0 <HAL_GetREVID>
 800667e:	4603      	mov	r3, r0
 8006680:	f241 0203 	movw	r2, #4099	; 0x1003
 8006684:	4293      	cmp	r3, r2
 8006686:	d817      	bhi.n	80066b8 <HAL_RCC_OscConfig+0x1f4>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d108      	bne.n	80066a2 <HAL_RCC_OscConfig+0x1de>
 8006690:	4b2e      	ldr	r3, [pc, #184]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006698:	4a2c      	ldr	r2, [pc, #176]	; (800674c <HAL_RCC_OscConfig+0x288>)
 800669a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800669e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066a0:	e07a      	b.n	8006798 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a2:	4b2a      	ldr	r3, [pc, #168]	; (800674c <HAL_RCC_OscConfig+0x288>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	031b      	lsls	r3, r3, #12
 80066b0:	4926      	ldr	r1, [pc, #152]	; (800674c <HAL_RCC_OscConfig+0x288>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066b6:	e06f      	b.n	8006798 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066b8:	4b24      	ldr	r3, [pc, #144]	; (800674c <HAL_RCC_OscConfig+0x288>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	061b      	lsls	r3, r3, #24
 80066c6:	4921      	ldr	r1, [pc, #132]	; (800674c <HAL_RCC_OscConfig+0x288>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066cc:	e064      	b.n	8006798 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d047      	beq.n	8006766 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066d6:	4b1d      	ldr	r3, [pc, #116]	; (800674c <HAL_RCC_OscConfig+0x288>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f023 0219 	bic.w	r2, r3, #25
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	491a      	ldr	r1, [pc, #104]	; (800674c <HAL_RCC_OscConfig+0x288>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e8:	f7fc ff32 	bl	8003550 <HAL_GetTick>
 80066ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066ee:	e008      	b.n	8006702 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066f0:	f7fc ff2e 	bl	8003550 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e332      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006702:	4b12      	ldr	r3, [pc, #72]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0304 	and.w	r3, r3, #4
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0f0      	beq.n	80066f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800670e:	f7fc ff4f 	bl	80035b0 <HAL_GetREVID>
 8006712:	4603      	mov	r3, r0
 8006714:	f241 0203 	movw	r2, #4099	; 0x1003
 8006718:	4293      	cmp	r3, r2
 800671a:	d819      	bhi.n	8006750 <HAL_RCC_OscConfig+0x28c>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b40      	cmp	r3, #64	; 0x40
 8006722:	d108      	bne.n	8006736 <HAL_RCC_OscConfig+0x272>
 8006724:	4b09      	ldr	r3, [pc, #36]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800672c:	4a07      	ldr	r2, [pc, #28]	; (800674c <HAL_RCC_OscConfig+0x288>)
 800672e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006732:	6053      	str	r3, [r2, #4]
 8006734:	e030      	b.n	8006798 <HAL_RCC_OscConfig+0x2d4>
 8006736:	4b05      	ldr	r3, [pc, #20]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	031b      	lsls	r3, r3, #12
 8006744:	4901      	ldr	r1, [pc, #4]	; (800674c <HAL_RCC_OscConfig+0x288>)
 8006746:	4313      	orrs	r3, r2
 8006748:	604b      	str	r3, [r1, #4]
 800674a:	e025      	b.n	8006798 <HAL_RCC_OscConfig+0x2d4>
 800674c:	58024400 	.word	0x58024400
 8006750:	4b9a      	ldr	r3, [pc, #616]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	061b      	lsls	r3, r3, #24
 800675e:	4997      	ldr	r1, [pc, #604]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006760:	4313      	orrs	r3, r2
 8006762:	604b      	str	r3, [r1, #4]
 8006764:	e018      	b.n	8006798 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006766:	4b95      	ldr	r3, [pc, #596]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a94      	ldr	r2, [pc, #592]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 800676c:	f023 0301 	bic.w	r3, r3, #1
 8006770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006772:	f7fc feed 	bl	8003550 <HAL_GetTick>
 8006776:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006778:	e008      	b.n	800678c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800677a:	f7fc fee9 	bl	8003550 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e2ed      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800678c:	4b8b      	ldr	r3, [pc, #556]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1f0      	bne.n	800677a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0310 	and.w	r3, r3, #16
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 80a9 	beq.w	80068f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067a6:	4b85      	ldr	r3, [pc, #532]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067b0:	4b82      	ldr	r3, [pc, #520]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 80067b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d007      	beq.n	80067cc <HAL_RCC_OscConfig+0x308>
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	2b18      	cmp	r3, #24
 80067c0:	d13a      	bne.n	8006838 <HAL_RCC_OscConfig+0x374>
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f003 0303 	and.w	r3, r3, #3
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d135      	bne.n	8006838 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067cc:	4b7b      	ldr	r3, [pc, #492]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d005      	beq.n	80067e4 <HAL_RCC_OscConfig+0x320>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	2b80      	cmp	r3, #128	; 0x80
 80067de:	d001      	beq.n	80067e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e2c1      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067e4:	f7fc fee4 	bl	80035b0 <HAL_GetREVID>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d817      	bhi.n	8006822 <HAL_RCC_OscConfig+0x35e>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	2b20      	cmp	r3, #32
 80067f8:	d108      	bne.n	800680c <HAL_RCC_OscConfig+0x348>
 80067fa:	4b70      	ldr	r3, [pc, #448]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006802:	4a6e      	ldr	r2, [pc, #440]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006804:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006808:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800680a:	e075      	b.n	80068f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800680c:	4b6b      	ldr	r3, [pc, #428]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	069b      	lsls	r3, r3, #26
 800681a:	4968      	ldr	r1, [pc, #416]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 800681c:	4313      	orrs	r3, r2
 800681e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006820:	e06a      	b.n	80068f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006822:	4b66      	ldr	r3, [pc, #408]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	061b      	lsls	r3, r3, #24
 8006830:	4962      	ldr	r1, [pc, #392]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006832:	4313      	orrs	r3, r2
 8006834:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006836:	e05f      	b.n	80068f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d042      	beq.n	80068c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006840:	4b5e      	ldr	r3, [pc, #376]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a5d      	ldr	r2, [pc, #372]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684c:	f7fc fe80 	bl	8003550 <HAL_GetTick>
 8006850:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006852:	e008      	b.n	8006866 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006854:	f7fc fe7c 	bl	8003550 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e280      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006866:	4b55      	ldr	r3, [pc, #340]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0f0      	beq.n	8006854 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006872:	f7fc fe9d 	bl	80035b0 <HAL_GetREVID>
 8006876:	4603      	mov	r3, r0
 8006878:	f241 0203 	movw	r2, #4099	; 0x1003
 800687c:	4293      	cmp	r3, r2
 800687e:	d817      	bhi.n	80068b0 <HAL_RCC_OscConfig+0x3ec>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	2b20      	cmp	r3, #32
 8006886:	d108      	bne.n	800689a <HAL_RCC_OscConfig+0x3d6>
 8006888:	4b4c      	ldr	r3, [pc, #304]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006890:	4a4a      	ldr	r2, [pc, #296]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006892:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006896:	6053      	str	r3, [r2, #4]
 8006898:	e02e      	b.n	80068f8 <HAL_RCC_OscConfig+0x434>
 800689a:	4b48      	ldr	r3, [pc, #288]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	069b      	lsls	r3, r3, #26
 80068a8:	4944      	ldr	r1, [pc, #272]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	604b      	str	r3, [r1, #4]
 80068ae:	e023      	b.n	80068f8 <HAL_RCC_OscConfig+0x434>
 80068b0:	4b42      	ldr	r3, [pc, #264]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	061b      	lsls	r3, r3, #24
 80068be:	493f      	ldr	r1, [pc, #252]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60cb      	str	r3, [r1, #12]
 80068c4:	e018      	b.n	80068f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80068c6:	4b3d      	ldr	r3, [pc, #244]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a3c      	ldr	r2, [pc, #240]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 80068cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d2:	f7fc fe3d 	bl	8003550 <HAL_GetTick>
 80068d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80068da:	f7fc fe39 	bl	8003550 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e23d      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068ec:	4b33      	ldr	r3, [pc, #204]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1f0      	bne.n	80068da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b00      	cmp	r3, #0
 8006902:	d036      	beq.n	8006972 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d019      	beq.n	8006940 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800690c:	4b2b      	ldr	r3, [pc, #172]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 800690e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006910:	4a2a      	ldr	r2, [pc, #168]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006912:	f043 0301 	orr.w	r3, r3, #1
 8006916:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006918:	f7fc fe1a 	bl	8003550 <HAL_GetTick>
 800691c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006920:	f7fc fe16 	bl	8003550 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e21a      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006932:	4b22      	ldr	r3, [pc, #136]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0f0      	beq.n	8006920 <HAL_RCC_OscConfig+0x45c>
 800693e:	e018      	b.n	8006972 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006940:	4b1e      	ldr	r3, [pc, #120]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006944:	4a1d      	ldr	r2, [pc, #116]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006946:	f023 0301 	bic.w	r3, r3, #1
 800694a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800694c:	f7fc fe00 	bl	8003550 <HAL_GetTick>
 8006950:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006954:	f7fc fdfc 	bl	8003550 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e200      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006966:	4b15      	ldr	r3, [pc, #84]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f0      	bne.n	8006954 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d039      	beq.n	80069f2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d01c      	beq.n	80069c0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006986:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a0c      	ldr	r2, [pc, #48]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 800698c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006990:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006992:	f7fc fddd 	bl	8003550 <HAL_GetTick>
 8006996:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800699a:	f7fc fdd9 	bl	8003550 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e1dd      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80069ac:	4b03      	ldr	r3, [pc, #12]	; (80069bc <HAL_RCC_OscConfig+0x4f8>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0f0      	beq.n	800699a <HAL_RCC_OscConfig+0x4d6>
 80069b8:	e01b      	b.n	80069f2 <HAL_RCC_OscConfig+0x52e>
 80069ba:	bf00      	nop
 80069bc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069c0:	4b9b      	ldr	r3, [pc, #620]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a9a      	ldr	r2, [pc, #616]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 80069c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069cc:	f7fc fdc0 	bl	8003550 <HAL_GetTick>
 80069d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069d4:	f7fc fdbc 	bl	8003550 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e1c0      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069e6:	4b92      	ldr	r3, [pc, #584]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1f0      	bne.n	80069d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0304 	and.w	r3, r3, #4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 8081 	beq.w	8006b02 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a00:	4b8c      	ldr	r3, [pc, #560]	; (8006c34 <HAL_RCC_OscConfig+0x770>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a8b      	ldr	r2, [pc, #556]	; (8006c34 <HAL_RCC_OscConfig+0x770>)
 8006a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a0c:	f7fc fda0 	bl	8003550 <HAL_GetTick>
 8006a10:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a14:	f7fc fd9c 	bl	8003550 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b64      	cmp	r3, #100	; 0x64
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e1a0      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a26:	4b83      	ldr	r3, [pc, #524]	; (8006c34 <HAL_RCC_OscConfig+0x770>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0f0      	beq.n	8006a14 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d106      	bne.n	8006a48 <HAL_RCC_OscConfig+0x584>
 8006a3a:	4b7d      	ldr	r3, [pc, #500]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3e:	4a7c      	ldr	r2, [pc, #496]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006a40:	f043 0301 	orr.w	r3, r3, #1
 8006a44:	6713      	str	r3, [r2, #112]	; 0x70
 8006a46:	e02d      	b.n	8006aa4 <HAL_RCC_OscConfig+0x5e0>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10c      	bne.n	8006a6a <HAL_RCC_OscConfig+0x5a6>
 8006a50:	4b77      	ldr	r3, [pc, #476]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a54:	4a76      	ldr	r2, [pc, #472]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006a56:	f023 0301 	bic.w	r3, r3, #1
 8006a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a5c:	4b74      	ldr	r3, [pc, #464]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a60:	4a73      	ldr	r2, [pc, #460]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006a62:	f023 0304 	bic.w	r3, r3, #4
 8006a66:	6713      	str	r3, [r2, #112]	; 0x70
 8006a68:	e01c      	b.n	8006aa4 <HAL_RCC_OscConfig+0x5e0>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b05      	cmp	r3, #5
 8006a70:	d10c      	bne.n	8006a8c <HAL_RCC_OscConfig+0x5c8>
 8006a72:	4b6f      	ldr	r3, [pc, #444]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	4a6e      	ldr	r2, [pc, #440]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006a78:	f043 0304 	orr.w	r3, r3, #4
 8006a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a7e:	4b6c      	ldr	r3, [pc, #432]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a82:	4a6b      	ldr	r2, [pc, #428]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	6713      	str	r3, [r2, #112]	; 0x70
 8006a8a:	e00b      	b.n	8006aa4 <HAL_RCC_OscConfig+0x5e0>
 8006a8c:	4b68      	ldr	r3, [pc, #416]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a90:	4a67      	ldr	r2, [pc, #412]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006a92:	f023 0301 	bic.w	r3, r3, #1
 8006a96:	6713      	str	r3, [r2, #112]	; 0x70
 8006a98:	4b65      	ldr	r3, [pc, #404]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9c:	4a64      	ldr	r2, [pc, #400]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006a9e:	f023 0304 	bic.w	r3, r3, #4
 8006aa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d015      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aac:	f7fc fd50 	bl	8003550 <HAL_GetTick>
 8006ab0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ab2:	e00a      	b.n	8006aca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ab4:	f7fc fd4c 	bl	8003550 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e14e      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006aca:	4b59      	ldr	r3, [pc, #356]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0ee      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x5f0>
 8006ad6:	e014      	b.n	8006b02 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad8:	f7fc fd3a 	bl	8003550 <HAL_GetTick>
 8006adc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ade:	e00a      	b.n	8006af6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ae0:	f7fc fd36 	bl	8003550 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e138      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006af6:	4b4e      	ldr	r3, [pc, #312]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1ee      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 812d 	beq.w	8006d66 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b0c:	4b48      	ldr	r3, [pc, #288]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b14:	2b18      	cmp	r3, #24
 8006b16:	f000 80bd 	beq.w	8006c94 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	f040 809e 	bne.w	8006c60 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b24:	4b42      	ldr	r3, [pc, #264]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a41      	ldr	r2, [pc, #260]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b30:	f7fc fd0e 	bl	8003550 <HAL_GetTick>
 8006b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b38:	f7fc fd0a 	bl	8003550 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e10e      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b4a:	4b39      	ldr	r3, [pc, #228]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1f0      	bne.n	8006b38 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b56:	4b36      	ldr	r3, [pc, #216]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b5a:	4b37      	ldr	r3, [pc, #220]	; (8006c38 <HAL_RCC_OscConfig+0x774>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b66:	0112      	lsls	r2, r2, #4
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	4931      	ldr	r1, [pc, #196]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	628b      	str	r3, [r1, #40]	; 0x28
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b74:	3b01      	subs	r3, #1
 8006b76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	025b      	lsls	r3, r3, #9
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	431a      	orrs	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	041b      	lsls	r3, r3, #16
 8006b8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	061b      	lsls	r3, r3, #24
 8006b9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ba0:	4923      	ldr	r1, [pc, #140]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006ba6:	4b22      	ldr	r3, [pc, #136]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006baa:	4a21      	ldr	r2, [pc, #132]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006bac:	f023 0301 	bic.w	r3, r3, #1
 8006bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bb2:	4b1f      	ldr	r3, [pc, #124]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bb6:	4b21      	ldr	r3, [pc, #132]	; (8006c3c <HAL_RCC_OscConfig+0x778>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006bbe:	00d2      	lsls	r2, r2, #3
 8006bc0:	491b      	ldr	r1, [pc, #108]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006bc6:	4b1a      	ldr	r3, [pc, #104]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bca:	f023 020c 	bic.w	r2, r3, #12
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	4917      	ldr	r1, [pc, #92]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006bd8:	4b15      	ldr	r3, [pc, #84]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	f023 0202 	bic.w	r2, r3, #2
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be4:	4912      	ldr	r1, [pc, #72]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006bea:	4b11      	ldr	r3, [pc, #68]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	4a10      	ldr	r2, [pc, #64]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf6:	4b0e      	ldr	r3, [pc, #56]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfa:	4a0d      	ldr	r2, [pc, #52]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c02:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	4a0a      	ldr	r2, [pc, #40]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006c0e:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	4a07      	ldr	r2, [pc, #28]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006c14:	f043 0301 	orr.w	r3, r3, #1
 8006c18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c1a:	4b05      	ldr	r3, [pc, #20]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a04      	ldr	r2, [pc, #16]	; (8006c30 <HAL_RCC_OscConfig+0x76c>)
 8006c20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c26:	f7fc fc93 	bl	8003550 <HAL_GetTick>
 8006c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c2c:	e011      	b.n	8006c52 <HAL_RCC_OscConfig+0x78e>
 8006c2e:	bf00      	nop
 8006c30:	58024400 	.word	0x58024400
 8006c34:	58024800 	.word	0x58024800
 8006c38:	fffffc0c 	.word	0xfffffc0c
 8006c3c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c40:	f7fc fc86 	bl	8003550 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e08a      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c52:	4b47      	ldr	r3, [pc, #284]	; (8006d70 <HAL_RCC_OscConfig+0x8ac>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0f0      	beq.n	8006c40 <HAL_RCC_OscConfig+0x77c>
 8006c5e:	e082      	b.n	8006d66 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c60:	4b43      	ldr	r3, [pc, #268]	; (8006d70 <HAL_RCC_OscConfig+0x8ac>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a42      	ldr	r2, [pc, #264]	; (8006d70 <HAL_RCC_OscConfig+0x8ac>)
 8006c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6c:	f7fc fc70 	bl	8003550 <HAL_GetTick>
 8006c70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c74:	f7fc fc6c 	bl	8003550 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e070      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c86:	4b3a      	ldr	r3, [pc, #232]	; (8006d70 <HAL_RCC_OscConfig+0x8ac>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f0      	bne.n	8006c74 <HAL_RCC_OscConfig+0x7b0>
 8006c92:	e068      	b.n	8006d66 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006c94:	4b36      	ldr	r3, [pc, #216]	; (8006d70 <HAL_RCC_OscConfig+0x8ac>)
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c9a:	4b35      	ldr	r3, [pc, #212]	; (8006d70 <HAL_RCC_OscConfig+0x8ac>)
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d031      	beq.n	8006d0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f003 0203 	and.w	r2, r3, #3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d12a      	bne.n	8006d0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	091b      	lsrs	r3, r3, #4
 8006cba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d122      	bne.n	8006d0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d11a      	bne.n	8006d0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	0a5b      	lsrs	r3, r3, #9
 8006cda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d111      	bne.n	8006d0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	0c1b      	lsrs	r3, r3, #16
 8006cec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d108      	bne.n	8006d0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	0e1b      	lsrs	r3, r3, #24
 8006cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d001      	beq.n	8006d10 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e02b      	b.n	8006d68 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006d10:	4b17      	ldr	r3, [pc, #92]	; (8006d70 <HAL_RCC_OscConfig+0x8ac>)
 8006d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d14:	08db      	lsrs	r3, r3, #3
 8006d16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d1a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d01f      	beq.n	8006d66 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006d26:	4b12      	ldr	r3, [pc, #72]	; (8006d70 <HAL_RCC_OscConfig+0x8ac>)
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	4a11      	ldr	r2, [pc, #68]	; (8006d70 <HAL_RCC_OscConfig+0x8ac>)
 8006d2c:	f023 0301 	bic.w	r3, r3, #1
 8006d30:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d32:	f7fc fc0d 	bl	8003550 <HAL_GetTick>
 8006d36:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006d38:	bf00      	nop
 8006d3a:	f7fc fc09 	bl	8003550 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d0f9      	beq.n	8006d3a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006d46:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <HAL_RCC_OscConfig+0x8ac>)
 8006d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d4a:	4b0a      	ldr	r3, [pc, #40]	; (8006d74 <HAL_RCC_OscConfig+0x8b0>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006d52:	00d2      	lsls	r2, r2, #3
 8006d54:	4906      	ldr	r1, [pc, #24]	; (8006d70 <HAL_RCC_OscConfig+0x8ac>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006d5a:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <HAL_RCC_OscConfig+0x8ac>)
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	4a04      	ldr	r2, [pc, #16]	; (8006d70 <HAL_RCC_OscConfig+0x8ac>)
 8006d60:	f043 0301 	orr.w	r3, r3, #1
 8006d64:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3730      	adds	r7, #48	; 0x30
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	58024400 	.word	0x58024400
 8006d74:	ffff0007 	.word	0xffff0007

08006d78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e19c      	b.n	80070c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d8c:	4b8a      	ldr	r3, [pc, #552]	; (8006fb8 <HAL_RCC_ClockConfig+0x240>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 030f 	and.w	r3, r3, #15
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d910      	bls.n	8006dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d9a:	4b87      	ldr	r3, [pc, #540]	; (8006fb8 <HAL_RCC_ClockConfig+0x240>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f023 020f 	bic.w	r2, r3, #15
 8006da2:	4985      	ldr	r1, [pc, #532]	; (8006fb8 <HAL_RCC_ClockConfig+0x240>)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006daa:	4b83      	ldr	r3, [pc, #524]	; (8006fb8 <HAL_RCC_ClockConfig+0x240>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 030f 	and.w	r3, r3, #15
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d001      	beq.n	8006dbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e184      	b.n	80070c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d010      	beq.n	8006dea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691a      	ldr	r2, [r3, #16]
 8006dcc:	4b7b      	ldr	r3, [pc, #492]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d908      	bls.n	8006dea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006dd8:	4b78      	ldr	r3, [pc, #480]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	4975      	ldr	r1, [pc, #468]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d010      	beq.n	8006e18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	695a      	ldr	r2, [r3, #20]
 8006dfa:	4b70      	ldr	r3, [pc, #448]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d908      	bls.n	8006e18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e06:	4b6d      	ldr	r3, [pc, #436]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	496a      	ldr	r1, [pc, #424]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0310 	and.w	r3, r3, #16
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d010      	beq.n	8006e46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	699a      	ldr	r2, [r3, #24]
 8006e28:	4b64      	ldr	r3, [pc, #400]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d908      	bls.n	8006e46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e34:	4b61      	ldr	r3, [pc, #388]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	495e      	ldr	r1, [pc, #376]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0320 	and.w	r3, r3, #32
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d010      	beq.n	8006e74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69da      	ldr	r2, [r3, #28]
 8006e56:	4b59      	ldr	r3, [pc, #356]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d908      	bls.n	8006e74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006e62:	4b56      	ldr	r3, [pc, #344]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	4953      	ldr	r1, [pc, #332]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d010      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68da      	ldr	r2, [r3, #12]
 8006e84:	4b4d      	ldr	r3, [pc, #308]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	f003 030f 	and.w	r3, r3, #15
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d908      	bls.n	8006ea2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e90:	4b4a      	ldr	r3, [pc, #296]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	f023 020f 	bic.w	r2, r3, #15
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	4947      	ldr	r1, [pc, #284]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d055      	beq.n	8006f5a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006eae:	4b43      	ldr	r3, [pc, #268]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	4940      	ldr	r1, [pc, #256]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d107      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ec8:	4b3c      	ldr	r3, [pc, #240]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d121      	bne.n	8006f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e0f6      	b.n	80070c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d107      	bne.n	8006ef0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ee0:	4b36      	ldr	r3, [pc, #216]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d115      	bne.n	8006f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e0ea      	b.n	80070c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d107      	bne.n	8006f08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ef8:	4b30      	ldr	r3, [pc, #192]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d109      	bne.n	8006f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e0de      	b.n	80070c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f08:	4b2c      	ldr	r3, [pc, #176]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e0d6      	b.n	80070c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f18:	4b28      	ldr	r3, [pc, #160]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	f023 0207 	bic.w	r2, r3, #7
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	4925      	ldr	r1, [pc, #148]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f2a:	f7fc fb11 	bl	8003550 <HAL_GetTick>
 8006f2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f30:	e00a      	b.n	8006f48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f32:	f7fc fb0d 	bl	8003550 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e0be      	b.n	80070c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f48:	4b1c      	ldr	r3, [pc, #112]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d1eb      	bne.n	8006f32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d010      	beq.n	8006f88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	4b14      	ldr	r3, [pc, #80]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d208      	bcs.n	8006f88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f76:	4b11      	ldr	r3, [pc, #68]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	f023 020f 	bic.w	r2, r3, #15
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	490e      	ldr	r1, [pc, #56]	; (8006fbc <HAL_RCC_ClockConfig+0x244>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f88:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <HAL_RCC_ClockConfig+0x240>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 030f 	and.w	r3, r3, #15
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d214      	bcs.n	8006fc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f96:	4b08      	ldr	r3, [pc, #32]	; (8006fb8 <HAL_RCC_ClockConfig+0x240>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f023 020f 	bic.w	r2, r3, #15
 8006f9e:	4906      	ldr	r1, [pc, #24]	; (8006fb8 <HAL_RCC_ClockConfig+0x240>)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fa6:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <HAL_RCC_ClockConfig+0x240>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d005      	beq.n	8006fc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e086      	b.n	80070c6 <HAL_RCC_ClockConfig+0x34e>
 8006fb8:	52002000 	.word	0x52002000
 8006fbc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d010      	beq.n	8006fee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691a      	ldr	r2, [r3, #16]
 8006fd0:	4b3f      	ldr	r3, [pc, #252]	; (80070d0 <HAL_RCC_ClockConfig+0x358>)
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d208      	bcs.n	8006fee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006fdc:	4b3c      	ldr	r3, [pc, #240]	; (80070d0 <HAL_RCC_ClockConfig+0x358>)
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	4939      	ldr	r1, [pc, #228]	; (80070d0 <HAL_RCC_ClockConfig+0x358>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0308 	and.w	r3, r3, #8
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d010      	beq.n	800701c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	695a      	ldr	r2, [r3, #20]
 8006ffe:	4b34      	ldr	r3, [pc, #208]	; (80070d0 <HAL_RCC_ClockConfig+0x358>)
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007006:	429a      	cmp	r2, r3
 8007008:	d208      	bcs.n	800701c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800700a:	4b31      	ldr	r3, [pc, #196]	; (80070d0 <HAL_RCC_ClockConfig+0x358>)
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	492e      	ldr	r1, [pc, #184]	; (80070d0 <HAL_RCC_ClockConfig+0x358>)
 8007018:	4313      	orrs	r3, r2
 800701a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0310 	and.w	r3, r3, #16
 8007024:	2b00      	cmp	r3, #0
 8007026:	d010      	beq.n	800704a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699a      	ldr	r2, [r3, #24]
 800702c:	4b28      	ldr	r3, [pc, #160]	; (80070d0 <HAL_RCC_ClockConfig+0x358>)
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007034:	429a      	cmp	r2, r3
 8007036:	d208      	bcs.n	800704a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007038:	4b25      	ldr	r3, [pc, #148]	; (80070d0 <HAL_RCC_ClockConfig+0x358>)
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	4922      	ldr	r1, [pc, #136]	; (80070d0 <HAL_RCC_ClockConfig+0x358>)
 8007046:	4313      	orrs	r3, r2
 8007048:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0320 	and.w	r3, r3, #32
 8007052:	2b00      	cmp	r3, #0
 8007054:	d010      	beq.n	8007078 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69da      	ldr	r2, [r3, #28]
 800705a:	4b1d      	ldr	r3, [pc, #116]	; (80070d0 <HAL_RCC_ClockConfig+0x358>)
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007062:	429a      	cmp	r2, r3
 8007064:	d208      	bcs.n	8007078 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007066:	4b1a      	ldr	r3, [pc, #104]	; (80070d0 <HAL_RCC_ClockConfig+0x358>)
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	4917      	ldr	r1, [pc, #92]	; (80070d0 <HAL_RCC_ClockConfig+0x358>)
 8007074:	4313      	orrs	r3, r2
 8007076:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007078:	f000 f834 	bl	80070e4 <HAL_RCC_GetSysClockFreq>
 800707c:	4602      	mov	r2, r0
 800707e:	4b14      	ldr	r3, [pc, #80]	; (80070d0 <HAL_RCC_ClockConfig+0x358>)
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	0a1b      	lsrs	r3, r3, #8
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	4912      	ldr	r1, [pc, #72]	; (80070d4 <HAL_RCC_ClockConfig+0x35c>)
 800708a:	5ccb      	ldrb	r3, [r1, r3]
 800708c:	f003 031f 	and.w	r3, r3, #31
 8007090:	fa22 f303 	lsr.w	r3, r2, r3
 8007094:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007096:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <HAL_RCC_ClockConfig+0x358>)
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	4a0d      	ldr	r2, [pc, #52]	; (80070d4 <HAL_RCC_ClockConfig+0x35c>)
 80070a0:	5cd3      	ldrb	r3, [r2, r3]
 80070a2:	f003 031f 	and.w	r3, r3, #31
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	fa22 f303 	lsr.w	r3, r2, r3
 80070ac:	4a0a      	ldr	r2, [pc, #40]	; (80070d8 <HAL_RCC_ClockConfig+0x360>)
 80070ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070b0:	4a0a      	ldr	r2, [pc, #40]	; (80070dc <HAL_RCC_ClockConfig+0x364>)
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80070b6:	4b0a      	ldr	r3, [pc, #40]	; (80070e0 <HAL_RCC_ClockConfig+0x368>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fc f9fe 	bl	80034bc <HAL_InitTick>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	58024400 	.word	0x58024400
 80070d4:	08011738 	.word	0x08011738
 80070d8:	24000004 	.word	0x24000004
 80070dc:	24000000 	.word	0x24000000
 80070e0:	24000008 	.word	0x24000008

080070e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b089      	sub	sp, #36	; 0x24
 80070e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070ea:	4bb3      	ldr	r3, [pc, #716]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070f2:	2b18      	cmp	r3, #24
 80070f4:	f200 8155 	bhi.w	80073a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80070f8:	a201      	add	r2, pc, #4	; (adr r2, 8007100 <HAL_RCC_GetSysClockFreq+0x1c>)
 80070fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fe:	bf00      	nop
 8007100:	08007165 	.word	0x08007165
 8007104:	080073a3 	.word	0x080073a3
 8007108:	080073a3 	.word	0x080073a3
 800710c:	080073a3 	.word	0x080073a3
 8007110:	080073a3 	.word	0x080073a3
 8007114:	080073a3 	.word	0x080073a3
 8007118:	080073a3 	.word	0x080073a3
 800711c:	080073a3 	.word	0x080073a3
 8007120:	0800718b 	.word	0x0800718b
 8007124:	080073a3 	.word	0x080073a3
 8007128:	080073a3 	.word	0x080073a3
 800712c:	080073a3 	.word	0x080073a3
 8007130:	080073a3 	.word	0x080073a3
 8007134:	080073a3 	.word	0x080073a3
 8007138:	080073a3 	.word	0x080073a3
 800713c:	080073a3 	.word	0x080073a3
 8007140:	08007191 	.word	0x08007191
 8007144:	080073a3 	.word	0x080073a3
 8007148:	080073a3 	.word	0x080073a3
 800714c:	080073a3 	.word	0x080073a3
 8007150:	080073a3 	.word	0x080073a3
 8007154:	080073a3 	.word	0x080073a3
 8007158:	080073a3 	.word	0x080073a3
 800715c:	080073a3 	.word	0x080073a3
 8007160:	08007197 	.word	0x08007197
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007164:	4b94      	ldr	r3, [pc, #592]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	d009      	beq.n	8007184 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007170:	4b91      	ldr	r3, [pc, #580]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	08db      	lsrs	r3, r3, #3
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	4a90      	ldr	r2, [pc, #576]	; (80073bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800717c:	fa22 f303 	lsr.w	r3, r2, r3
 8007180:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007182:	e111      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007184:	4b8d      	ldr	r3, [pc, #564]	; (80073bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007186:	61bb      	str	r3, [r7, #24]
      break;
 8007188:	e10e      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800718a:	4b8d      	ldr	r3, [pc, #564]	; (80073c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800718c:	61bb      	str	r3, [r7, #24]
      break;
 800718e:	e10b      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007190:	4b8c      	ldr	r3, [pc, #560]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007192:	61bb      	str	r3, [r7, #24]
      break;
 8007194:	e108      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007196:	4b88      	ldr	r3, [pc, #544]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719a:	f003 0303 	and.w	r3, r3, #3
 800719e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80071a0:	4b85      	ldr	r3, [pc, #532]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a4:	091b      	lsrs	r3, r3, #4
 80071a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80071ac:	4b82      	ldr	r3, [pc, #520]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80071b6:	4b80      	ldr	r3, [pc, #512]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ba:	08db      	lsrs	r3, r3, #3
 80071bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	fb02 f303 	mul.w	r3, r2, r3
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 80e1 	beq.w	800739c <HAL_RCC_GetSysClockFreq+0x2b8>
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	f000 8083 	beq.w	80072e8 <HAL_RCC_GetSysClockFreq+0x204>
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	f200 80a1 	bhi.w	800732c <HAL_RCC_GetSysClockFreq+0x248>
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <HAL_RCC_GetSysClockFreq+0x114>
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d056      	beq.n	80072a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80071f6:	e099      	b.n	800732c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071f8:	4b6f      	ldr	r3, [pc, #444]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0320 	and.w	r3, r3, #32
 8007200:	2b00      	cmp	r3, #0
 8007202:	d02d      	beq.n	8007260 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007204:	4b6c      	ldr	r3, [pc, #432]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	08db      	lsrs	r3, r3, #3
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	4a6b      	ldr	r2, [pc, #428]	; (80073bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007210:	fa22 f303 	lsr.w	r3, r2, r3
 8007214:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	ee07 3a90 	vmov	s15, r3
 800721c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722e:	4b62      	ldr	r3, [pc, #392]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007242:	eddf 5a61 	vldr	s11, [pc, #388]	; 80073c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800724a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800725e:	e087      	b.n	8007370 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80073cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800726e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007272:	4b51      	ldr	r3, [pc, #324]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007282:	ed97 6a02 	vldr	s12, [r7, #8]
 8007286:	eddf 5a50 	vldr	s11, [pc, #320]	; 80073c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800728a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072a2:	e065      	b.n	8007370 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80073d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b6:	4b40      	ldr	r3, [pc, #256]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80072ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80073c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072e6:	e043      	b.n	8007370 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80073d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80072f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fa:	4b2f      	ldr	r3, [pc, #188]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730a:	ed97 6a02 	vldr	s12, [r7, #8]
 800730e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80073c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800731a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800731e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007326:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800732a:	e021      	b.n	8007370 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	eddf 6a26 	vldr	s13, [pc, #152]	; 80073d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800733a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733e:	4b1e      	ldr	r3, [pc, #120]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007352:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80073c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800736e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007370:	4b11      	ldr	r3, [pc, #68]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007374:	0a5b      	lsrs	r3, r3, #9
 8007376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800737a:	3301      	adds	r3, #1
 800737c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	ee07 3a90 	vmov	s15, r3
 8007384:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007388:	edd7 6a07 	vldr	s13, [r7, #28]
 800738c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007394:	ee17 3a90 	vmov	r3, s15
 8007398:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800739a:	e005      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	61bb      	str	r3, [r7, #24]
      break;
 80073a0:	e002      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80073a2:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073a4:	61bb      	str	r3, [r7, #24]
      break;
 80073a6:	bf00      	nop
  }

  return sysclockfreq;
 80073a8:	69bb      	ldr	r3, [r7, #24]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3724      	adds	r7, #36	; 0x24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	58024400 	.word	0x58024400
 80073bc:	03d09000 	.word	0x03d09000
 80073c0:	003d0900 	.word	0x003d0900
 80073c4:	00f42400 	.word	0x00f42400
 80073c8:	46000000 	.word	0x46000000
 80073cc:	4c742400 	.word	0x4c742400
 80073d0:	4a742400 	.word	0x4a742400
 80073d4:	4b742400 	.word	0x4b742400

080073d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80073de:	f7ff fe81 	bl	80070e4 <HAL_RCC_GetSysClockFreq>
 80073e2:	4602      	mov	r2, r0
 80073e4:	4b10      	ldr	r3, [pc, #64]	; (8007428 <HAL_RCC_GetHCLKFreq+0x50>)
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	0a1b      	lsrs	r3, r3, #8
 80073ea:	f003 030f 	and.w	r3, r3, #15
 80073ee:	490f      	ldr	r1, [pc, #60]	; (800742c <HAL_RCC_GetHCLKFreq+0x54>)
 80073f0:	5ccb      	ldrb	r3, [r1, r3]
 80073f2:	f003 031f 	and.w	r3, r3, #31
 80073f6:	fa22 f303 	lsr.w	r3, r2, r3
 80073fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073fc:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <HAL_RCC_GetHCLKFreq+0x50>)
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	f003 030f 	and.w	r3, r3, #15
 8007404:	4a09      	ldr	r2, [pc, #36]	; (800742c <HAL_RCC_GetHCLKFreq+0x54>)
 8007406:	5cd3      	ldrb	r3, [r2, r3]
 8007408:	f003 031f 	and.w	r3, r3, #31
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	fa22 f303 	lsr.w	r3, r2, r3
 8007412:	4a07      	ldr	r2, [pc, #28]	; (8007430 <HAL_RCC_GetHCLKFreq+0x58>)
 8007414:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007416:	4a07      	ldr	r2, [pc, #28]	; (8007434 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800741c:	4b04      	ldr	r3, [pc, #16]	; (8007430 <HAL_RCC_GetHCLKFreq+0x58>)
 800741e:	681b      	ldr	r3, [r3, #0]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	58024400 	.word	0x58024400
 800742c:	08011738 	.word	0x08011738
 8007430:	24000004 	.word	0x24000004
 8007434:	24000000 	.word	0x24000000

08007438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800743c:	f7ff ffcc 	bl	80073d8 <HAL_RCC_GetHCLKFreq>
 8007440:	4602      	mov	r2, r0
 8007442:	4b06      	ldr	r3, [pc, #24]	; (800745c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	091b      	lsrs	r3, r3, #4
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	4904      	ldr	r1, [pc, #16]	; (8007460 <HAL_RCC_GetPCLK1Freq+0x28>)
 800744e:	5ccb      	ldrb	r3, [r1, r3]
 8007450:	f003 031f 	and.w	r3, r3, #31
 8007454:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007458:	4618      	mov	r0, r3
 800745a:	bd80      	pop	{r7, pc}
 800745c:	58024400 	.word	0x58024400
 8007460:	08011738 	.word	0x08011738

08007464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007468:	f7ff ffb6 	bl	80073d8 <HAL_RCC_GetHCLKFreq>
 800746c:	4602      	mov	r2, r0
 800746e:	4b06      	ldr	r3, [pc, #24]	; (8007488 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	0a1b      	lsrs	r3, r3, #8
 8007474:	f003 0307 	and.w	r3, r3, #7
 8007478:	4904      	ldr	r1, [pc, #16]	; (800748c <HAL_RCC_GetPCLK2Freq+0x28>)
 800747a:	5ccb      	ldrb	r3, [r1, r3]
 800747c:	f003 031f 	and.w	r3, r3, #31
 8007480:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007484:	4618      	mov	r0, r3
 8007486:	bd80      	pop	{r7, pc}
 8007488:	58024400 	.word	0x58024400
 800748c:	08011738 	.word	0x08011738

08007490 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007494:	b0ca      	sub	sp, #296	; 0x128
 8007496:	af00      	add	r7, sp, #0
 8007498:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800749c:	2300      	movs	r3, #0
 800749e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074a2:	2300      	movs	r3, #0
 80074a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80074b4:	2500      	movs	r5, #0
 80074b6:	ea54 0305 	orrs.w	r3, r4, r5
 80074ba:	d049      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80074bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074c6:	d02f      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80074c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074cc:	d828      	bhi.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80074ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074d2:	d01a      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80074d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074d8:	d822      	bhi.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80074de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074e2:	d007      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80074e4:	e01c      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e6:	4bb8      	ldr	r3, [pc, #736]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	4ab7      	ldr	r2, [pc, #732]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80074f2:	e01a      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074f8:	3308      	adds	r3, #8
 80074fa:	2102      	movs	r1, #2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f001 fc8f 	bl	8008e20 <RCCEx_PLL2_Config>
 8007502:	4603      	mov	r3, r0
 8007504:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007508:	e00f      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800750a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800750e:	3328      	adds	r3, #40	; 0x28
 8007510:	2102      	movs	r1, #2
 8007512:	4618      	mov	r0, r3
 8007514:	f001 fd36 	bl	8008f84 <RCCEx_PLL3_Config>
 8007518:	4603      	mov	r3, r0
 800751a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800751e:	e004      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007526:	e000      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800752a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10a      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007532:	4ba5      	ldr	r3, [pc, #660]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007536:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800753a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800753e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007540:	4aa1      	ldr	r2, [pc, #644]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007542:	430b      	orrs	r3, r1
 8007544:	6513      	str	r3, [r2, #80]	; 0x50
 8007546:	e003      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007548:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800754c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800755c:	f04f 0900 	mov.w	r9, #0
 8007560:	ea58 0309 	orrs.w	r3, r8, r9
 8007564:	d047      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800756a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800756c:	2b04      	cmp	r3, #4
 800756e:	d82a      	bhi.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007570:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007576:	bf00      	nop
 8007578:	0800758d 	.word	0x0800758d
 800757c:	0800759b 	.word	0x0800759b
 8007580:	080075b1 	.word	0x080075b1
 8007584:	080075cf 	.word	0x080075cf
 8007588:	080075cf 	.word	0x080075cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800758c:	4b8e      	ldr	r3, [pc, #568]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800758e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007590:	4a8d      	ldr	r2, [pc, #564]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007596:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007598:	e01a      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800759a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800759e:	3308      	adds	r3, #8
 80075a0:	2100      	movs	r1, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 fc3c 	bl	8008e20 <RCCEx_PLL2_Config>
 80075a8:	4603      	mov	r3, r0
 80075aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075ae:	e00f      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b4:	3328      	adds	r3, #40	; 0x28
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 fce3 	bl	8008f84 <RCCEx_PLL3_Config>
 80075be:	4603      	mov	r3, r0
 80075c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075c4:	e004      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075cc:	e000      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80075ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075d8:	4b7b      	ldr	r3, [pc, #492]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075dc:	f023 0107 	bic.w	r1, r3, #7
 80075e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e6:	4a78      	ldr	r2, [pc, #480]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075e8:	430b      	orrs	r3, r1
 80075ea:	6513      	str	r3, [r2, #80]	; 0x50
 80075ec:	e003      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80075f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007602:	f04f 0b00 	mov.w	fp, #0
 8007606:	ea5a 030b 	orrs.w	r3, sl, fp
 800760a:	d04c      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800760c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007616:	d030      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800761c:	d829      	bhi.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800761e:	2bc0      	cmp	r3, #192	; 0xc0
 8007620:	d02d      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007622:	2bc0      	cmp	r3, #192	; 0xc0
 8007624:	d825      	bhi.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007626:	2b80      	cmp	r3, #128	; 0x80
 8007628:	d018      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800762a:	2b80      	cmp	r3, #128	; 0x80
 800762c:	d821      	bhi.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800762e:	2b00      	cmp	r3, #0
 8007630:	d002      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007632:	2b40      	cmp	r3, #64	; 0x40
 8007634:	d007      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007636:	e01c      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007638:	4b63      	ldr	r3, [pc, #396]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	4a62      	ldr	r2, [pc, #392]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800763e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007644:	e01c      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800764a:	3308      	adds	r3, #8
 800764c:	2100      	movs	r1, #0
 800764e:	4618      	mov	r0, r3
 8007650:	f001 fbe6 	bl	8008e20 <RCCEx_PLL2_Config>
 8007654:	4603      	mov	r3, r0
 8007656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800765a:	e011      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800765c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007660:	3328      	adds	r3, #40	; 0x28
 8007662:	2100      	movs	r1, #0
 8007664:	4618      	mov	r0, r3
 8007666:	f001 fc8d 	bl	8008f84 <RCCEx_PLL3_Config>
 800766a:	4603      	mov	r3, r0
 800766c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007670:	e006      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007678:	e002      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800767a:	bf00      	nop
 800767c:	e000      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800767e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007688:	4b4f      	ldr	r3, [pc, #316]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800768a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007696:	4a4c      	ldr	r2, [pc, #304]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007698:	430b      	orrs	r3, r1
 800769a:	6513      	str	r3, [r2, #80]	; 0x50
 800769c:	e003      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80076a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ae:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80076b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80076b6:	2300      	movs	r3, #0
 80076b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80076bc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80076c0:	460b      	mov	r3, r1
 80076c2:	4313      	orrs	r3, r2
 80076c4:	d053      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80076c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80076ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076d2:	d035      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80076d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076d8:	d82e      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80076da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076de:	d031      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80076e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076e4:	d828      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80076e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076ea:	d01a      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80076ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076f0:	d822      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80076f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076fa:	d007      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80076fc:	e01c      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076fe:	4b32      	ldr	r3, [pc, #200]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	4a31      	ldr	r2, [pc, #196]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007708:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800770a:	e01c      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800770c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007710:	3308      	adds	r3, #8
 8007712:	2100      	movs	r1, #0
 8007714:	4618      	mov	r0, r3
 8007716:	f001 fb83 	bl	8008e20 <RCCEx_PLL2_Config>
 800771a:	4603      	mov	r3, r0
 800771c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007720:	e011      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007726:	3328      	adds	r3, #40	; 0x28
 8007728:	2100      	movs	r1, #0
 800772a:	4618      	mov	r0, r3
 800772c:	f001 fc2a 	bl	8008f84 <RCCEx_PLL3_Config>
 8007730:	4603      	mov	r3, r0
 8007732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007736:	e006      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800773e:	e002      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007740:	bf00      	nop
 8007742:	e000      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10b      	bne.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800774e:	4b1e      	ldr	r3, [pc, #120]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007752:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800775e:	4a1a      	ldr	r2, [pc, #104]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007760:	430b      	orrs	r3, r1
 8007762:	6593      	str	r3, [r2, #88]	; 0x58
 8007764:	e003      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007766:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800776a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800776e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800777a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800777e:	2300      	movs	r3, #0
 8007780:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007784:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007788:	460b      	mov	r3, r1
 800778a:	4313      	orrs	r3, r2
 800778c:	d056      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800778e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007792:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007796:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800779a:	d038      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800779c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077a0:	d831      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077a6:	d034      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80077a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077ac:	d82b      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077b2:	d01d      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80077b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077b8:	d825      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d006      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80077be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077c2:	d00a      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80077c4:	e01f      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077c6:	bf00      	nop
 80077c8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077cc:	4ba2      	ldr	r3, [pc, #648]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	4aa1      	ldr	r2, [pc, #644]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077d8:	e01c      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077de:	3308      	adds	r3, #8
 80077e0:	2100      	movs	r1, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f001 fb1c 	bl	8008e20 <RCCEx_PLL2_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80077ee:	e011      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f4:	3328      	adds	r3, #40	; 0x28
 80077f6:	2100      	movs	r1, #0
 80077f8:	4618      	mov	r0, r3
 80077fa:	f001 fbc3 	bl	8008f84 <RCCEx_PLL3_Config>
 80077fe:	4603      	mov	r3, r0
 8007800:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007804:	e006      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800780c:	e002      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800780e:	bf00      	nop
 8007810:	e000      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007814:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10b      	bne.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800781c:	4b8e      	ldr	r3, [pc, #568]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800781e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007820:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007828:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800782c:	4a8a      	ldr	r2, [pc, #552]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800782e:	430b      	orrs	r3, r1
 8007830:	6593      	str	r3, [r2, #88]	; 0x58
 8007832:	e003      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007834:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007838:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800783c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007848:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800784c:	2300      	movs	r3, #0
 800784e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007852:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007856:	460b      	mov	r3, r1
 8007858:	4313      	orrs	r3, r2
 800785a:	d03a      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800785c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007862:	2b30      	cmp	r3, #48	; 0x30
 8007864:	d01f      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007866:	2b30      	cmp	r3, #48	; 0x30
 8007868:	d819      	bhi.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800786a:	2b20      	cmp	r3, #32
 800786c:	d00c      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800786e:	2b20      	cmp	r3, #32
 8007870:	d815      	bhi.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d019      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007876:	2b10      	cmp	r3, #16
 8007878:	d111      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800787a:	4b77      	ldr	r3, [pc, #476]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800787c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787e:	4a76      	ldr	r2, [pc, #472]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007884:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007886:	e011      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800788c:	3308      	adds	r3, #8
 800788e:	2102      	movs	r1, #2
 8007890:	4618      	mov	r0, r3
 8007892:	f001 fac5 	bl	8008e20 <RCCEx_PLL2_Config>
 8007896:	4603      	mov	r3, r0
 8007898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800789c:	e006      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078a4:	e002      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80078a6:	bf00      	nop
 80078a8:	e000      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80078aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10a      	bne.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80078b4:	4b68      	ldr	r3, [pc, #416]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80078bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c2:	4a65      	ldr	r2, [pc, #404]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078c4:	430b      	orrs	r3, r1
 80078c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078c8:	e003      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80078d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078da:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80078de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80078e2:	2300      	movs	r3, #0
 80078e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80078e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80078ec:	460b      	mov	r3, r1
 80078ee:	4313      	orrs	r3, r2
 80078f0:	d051      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80078f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078fc:	d035      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80078fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007902:	d82e      	bhi.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007904:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007908:	d031      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800790a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800790e:	d828      	bhi.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007914:	d01a      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800791a:	d822      	bhi.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007924:	d007      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007926:	e01c      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007928:	4b4b      	ldr	r3, [pc, #300]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	4a4a      	ldr	r2, [pc, #296]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800792e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007932:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007934:	e01c      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800793a:	3308      	adds	r3, #8
 800793c:	2100      	movs	r1, #0
 800793e:	4618      	mov	r0, r3
 8007940:	f001 fa6e 	bl	8008e20 <RCCEx_PLL2_Config>
 8007944:	4603      	mov	r3, r0
 8007946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800794a:	e011      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800794c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007950:	3328      	adds	r3, #40	; 0x28
 8007952:	2100      	movs	r1, #0
 8007954:	4618      	mov	r0, r3
 8007956:	f001 fb15 	bl	8008f84 <RCCEx_PLL3_Config>
 800795a:	4603      	mov	r3, r0
 800795c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007960:	e006      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007968:	e002      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800796a:	bf00      	nop
 800796c:	e000      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800796e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007978:	4b37      	ldr	r3, [pc, #220]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800797a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007986:	4a34      	ldr	r2, [pc, #208]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007988:	430b      	orrs	r3, r1
 800798a:	6513      	str	r3, [r2, #80]	; 0x50
 800798c:	e003      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007992:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80079a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079a6:	2300      	movs	r3, #0
 80079a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80079b0:	460b      	mov	r3, r1
 80079b2:	4313      	orrs	r3, r2
 80079b4:	d056      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80079b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079c0:	d033      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80079c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079c6:	d82c      	bhi.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80079c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079cc:	d02f      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80079ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079d2:	d826      	bhi.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80079d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079d8:	d02b      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80079da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079de:	d820      	bhi.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80079e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079e4:	d012      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80079e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079ea:	d81a      	bhi.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d022      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80079f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f4:	d115      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079fa:	3308      	adds	r3, #8
 80079fc:	2101      	movs	r1, #1
 80079fe:	4618      	mov	r0, r3
 8007a00:	f001 fa0e 	bl	8008e20 <RCCEx_PLL2_Config>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a0a:	e015      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a10:	3328      	adds	r3, #40	; 0x28
 8007a12:	2101      	movs	r1, #1
 8007a14:	4618      	mov	r0, r3
 8007a16:	f001 fab5 	bl	8008f84 <RCCEx_PLL3_Config>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a20:	e00a      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a28:	e006      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a2a:	bf00      	nop
 8007a2c:	e004      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a2e:	bf00      	nop
 8007a30:	e002      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a32:	bf00      	nop
 8007a34:	e000      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10d      	bne.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a40:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a44:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a4e:	4a02      	ldr	r2, [pc, #8]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a50:	430b      	orrs	r3, r1
 8007a52:	6513      	str	r3, [r2, #80]	; 0x50
 8007a54:	e006      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007a56:	bf00      	nop
 8007a58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007a70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a74:	2300      	movs	r3, #0
 8007a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a7a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4313      	orrs	r3, r2
 8007a82:	d055      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a90:	d033      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a96:	d82c      	bhi.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a9c:	d02f      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa2:	d826      	bhi.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007aa4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007aa8:	d02b      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007aaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007aae:	d820      	bhi.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ab4:	d012      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aba:	d81a      	bhi.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d022      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007ac0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ac4:	d115      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aca:	3308      	adds	r3, #8
 8007acc:	2101      	movs	r1, #1
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f001 f9a6 	bl	8008e20 <RCCEx_PLL2_Config>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007ada:	e015      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae0:	3328      	adds	r3, #40	; 0x28
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f001 fa4d 	bl	8008f84 <RCCEx_PLL3_Config>
 8007aea:	4603      	mov	r3, r0
 8007aec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007af0:	e00a      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007af8:	e006      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007afa:	bf00      	nop
 8007afc:	e004      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007afe:	bf00      	nop
 8007b00:	e002      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b02:	bf00      	nop
 8007b04:	e000      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10b      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b10:	4ba3      	ldr	r3, [pc, #652]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b14:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b20:	4a9f      	ldr	r2, [pc, #636]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b22:	430b      	orrs	r3, r1
 8007b24:	6593      	str	r3, [r2, #88]	; 0x58
 8007b26:	e003      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b38:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b40:	2300      	movs	r3, #0
 8007b42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	d037      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b5a:	d00e      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b60:	d816      	bhi.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d018      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b6a:	d111      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b6c:	4b8c      	ldr	r3, [pc, #560]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	4a8b      	ldr	r2, [pc, #556]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b78:	e00f      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b7e:	3308      	adds	r3, #8
 8007b80:	2101      	movs	r1, #1
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 f94c 	bl	8008e20 <RCCEx_PLL2_Config>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b8e:	e004      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b96:	e000      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10a      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ba2:	4b7f      	ldr	r3, [pc, #508]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb0:	4a7b      	ldr	r2, [pc, #492]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bb2:	430b      	orrs	r3, r1
 8007bb4:	6513      	str	r3, [r2, #80]	; 0x50
 8007bb6:	e003      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007bd6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	d039      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d81c      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007bea:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf0:	08007c2d 	.word	0x08007c2d
 8007bf4:	08007c01 	.word	0x08007c01
 8007bf8:	08007c0f 	.word	0x08007c0f
 8007bfc:	08007c2d 	.word	0x08007c2d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c00:	4b67      	ldr	r3, [pc, #412]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	4a66      	ldr	r2, [pc, #408]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c0c:	e00f      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c12:	3308      	adds	r3, #8
 8007c14:	2102      	movs	r1, #2
 8007c16:	4618      	mov	r0, r3
 8007c18:	f001 f902 	bl	8008e20 <RCCEx_PLL2_Config>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c22:	e004      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c2a:	e000      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10a      	bne.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c36:	4b5a      	ldr	r3, [pc, #360]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c3a:	f023 0103 	bic.w	r1, r3, #3
 8007c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c44:	4a56      	ldr	r2, [pc, #344]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c46:	430b      	orrs	r3, r1
 8007c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c4a:	e003      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007c60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c64:	2300      	movs	r3, #0
 8007c66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4313      	orrs	r3, r2
 8007c72:	f000 809f 	beq.w	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c76:	4b4b      	ldr	r3, [pc, #300]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a4a      	ldr	r2, [pc, #296]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c82:	f7fb fc65 	bl	8003550 <HAL_GetTick>
 8007c86:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c8a:	e00b      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c8c:	f7fb fc60 	bl	8003550 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	2b64      	cmp	r3, #100	; 0x64
 8007c9a:	d903      	bls.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ca2:	e005      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ca4:	4b3f      	ldr	r3, [pc, #252]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d0ed      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d179      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007cb8:	4b39      	ldr	r3, [pc, #228]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007cc4:	4053      	eors	r3, r2
 8007cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d015      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cce:	4b34      	ldr	r3, [pc, #208]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cda:	4b31      	ldr	r3, [pc, #196]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cde:	4a30      	ldr	r2, [pc, #192]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ce4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ce6:	4b2e      	ldr	r3, [pc, #184]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cea:	4a2d      	ldr	r2, [pc, #180]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cf0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007cf2:	4a2b      	ldr	r2, [pc, #172]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007cf8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d06:	d118      	bne.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d08:	f7fb fc22 	bl	8003550 <HAL_GetTick>
 8007d0c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d10:	e00d      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d12:	f7fb fc1d 	bl	8003550 <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007d1c:	1ad2      	subs	r2, r2, r3
 8007d1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d903      	bls.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007d2c:	e005      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d2e:	4b1c      	ldr	r3, [pc, #112]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0eb      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d129      	bne.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d52:	d10e      	bne.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007d54:	4b12      	ldr	r3, [pc, #72]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d64:	091a      	lsrs	r2, r3, #4
 8007d66:	4b10      	ldr	r3, [pc, #64]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007d68:	4013      	ands	r3, r2
 8007d6a:	4a0d      	ldr	r2, [pc, #52]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d6c:	430b      	orrs	r3, r1
 8007d6e:	6113      	str	r3, [r2, #16]
 8007d70:	e005      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007d72:	4b0b      	ldr	r3, [pc, #44]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	4a0a      	ldr	r2, [pc, #40]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007d7c:	6113      	str	r3, [r2, #16]
 8007d7e:	4b08      	ldr	r3, [pc, #32]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d80:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d8e:	4a04      	ldr	r2, [pc, #16]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d90:	430b      	orrs	r3, r1
 8007d92:	6713      	str	r3, [r2, #112]	; 0x70
 8007d94:	e00e      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007d9e:	e009      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007da0:	58024400 	.word	0x58024400
 8007da4:	58024800 	.word	0x58024800
 8007da8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007db0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	f002 0301 	and.w	r3, r2, #1
 8007dc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007dca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	f000 8089 	beq.w	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ddc:	2b28      	cmp	r3, #40	; 0x28
 8007dde:	d86b      	bhi.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007de0:	a201      	add	r2, pc, #4	; (adr r2, 8007de8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de6:	bf00      	nop
 8007de8:	08007ec1 	.word	0x08007ec1
 8007dec:	08007eb9 	.word	0x08007eb9
 8007df0:	08007eb9 	.word	0x08007eb9
 8007df4:	08007eb9 	.word	0x08007eb9
 8007df8:	08007eb9 	.word	0x08007eb9
 8007dfc:	08007eb9 	.word	0x08007eb9
 8007e00:	08007eb9 	.word	0x08007eb9
 8007e04:	08007eb9 	.word	0x08007eb9
 8007e08:	08007e8d 	.word	0x08007e8d
 8007e0c:	08007eb9 	.word	0x08007eb9
 8007e10:	08007eb9 	.word	0x08007eb9
 8007e14:	08007eb9 	.word	0x08007eb9
 8007e18:	08007eb9 	.word	0x08007eb9
 8007e1c:	08007eb9 	.word	0x08007eb9
 8007e20:	08007eb9 	.word	0x08007eb9
 8007e24:	08007eb9 	.word	0x08007eb9
 8007e28:	08007ea3 	.word	0x08007ea3
 8007e2c:	08007eb9 	.word	0x08007eb9
 8007e30:	08007eb9 	.word	0x08007eb9
 8007e34:	08007eb9 	.word	0x08007eb9
 8007e38:	08007eb9 	.word	0x08007eb9
 8007e3c:	08007eb9 	.word	0x08007eb9
 8007e40:	08007eb9 	.word	0x08007eb9
 8007e44:	08007eb9 	.word	0x08007eb9
 8007e48:	08007ec1 	.word	0x08007ec1
 8007e4c:	08007eb9 	.word	0x08007eb9
 8007e50:	08007eb9 	.word	0x08007eb9
 8007e54:	08007eb9 	.word	0x08007eb9
 8007e58:	08007eb9 	.word	0x08007eb9
 8007e5c:	08007eb9 	.word	0x08007eb9
 8007e60:	08007eb9 	.word	0x08007eb9
 8007e64:	08007eb9 	.word	0x08007eb9
 8007e68:	08007ec1 	.word	0x08007ec1
 8007e6c:	08007eb9 	.word	0x08007eb9
 8007e70:	08007eb9 	.word	0x08007eb9
 8007e74:	08007eb9 	.word	0x08007eb9
 8007e78:	08007eb9 	.word	0x08007eb9
 8007e7c:	08007eb9 	.word	0x08007eb9
 8007e80:	08007eb9 	.word	0x08007eb9
 8007e84:	08007eb9 	.word	0x08007eb9
 8007e88:	08007ec1 	.word	0x08007ec1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e90:	3308      	adds	r3, #8
 8007e92:	2101      	movs	r1, #1
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 ffc3 	bl	8008e20 <RCCEx_PLL2_Config>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ea0:	e00f      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea6:	3328      	adds	r3, #40	; 0x28
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f001 f86a 	bl	8008f84 <RCCEx_PLL3_Config>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007eb6:	e004      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ebe:	e000      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10a      	bne.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007eca:	4bbf      	ldr	r3, [pc, #764]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ece:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ed8:	4abb      	ldr	r2, [pc, #748]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007eda:	430b      	orrs	r3, r1
 8007edc:	6553      	str	r3, [r2, #84]	; 0x54
 8007ede:	e003      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ee4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	f002 0302 	and.w	r3, r2, #2
 8007ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007efe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007f02:	460b      	mov	r3, r1
 8007f04:	4313      	orrs	r3, r2
 8007f06:	d041      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f0e:	2b05      	cmp	r3, #5
 8007f10:	d824      	bhi.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007f12:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f18:	08007f65 	.word	0x08007f65
 8007f1c:	08007f31 	.word	0x08007f31
 8007f20:	08007f47 	.word	0x08007f47
 8007f24:	08007f65 	.word	0x08007f65
 8007f28:	08007f65 	.word	0x08007f65
 8007f2c:	08007f65 	.word	0x08007f65
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f34:	3308      	adds	r3, #8
 8007f36:	2101      	movs	r1, #1
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 ff71 	bl	8008e20 <RCCEx_PLL2_Config>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f44:	e00f      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f4a:	3328      	adds	r3, #40	; 0x28
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f001 f818 	bl	8008f84 <RCCEx_PLL3_Config>
 8007f54:	4603      	mov	r3, r0
 8007f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f5a:	e004      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f62:	e000      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007f6e:	4b96      	ldr	r3, [pc, #600]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f72:	f023 0107 	bic.w	r1, r3, #7
 8007f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f7c:	4a92      	ldr	r2, [pc, #584]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f7e:	430b      	orrs	r3, r1
 8007f80:	6553      	str	r3, [r2, #84]	; 0x54
 8007f82:	e003      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f002 0304 	and.w	r3, r2, #4
 8007f98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fa2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	d044      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fb4:	2b05      	cmp	r3, #5
 8007fb6:	d825      	bhi.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007fb8:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbe:	bf00      	nop
 8007fc0:	0800800d 	.word	0x0800800d
 8007fc4:	08007fd9 	.word	0x08007fd9
 8007fc8:	08007fef 	.word	0x08007fef
 8007fcc:	0800800d 	.word	0x0800800d
 8007fd0:	0800800d 	.word	0x0800800d
 8007fd4:	0800800d 	.word	0x0800800d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fdc:	3308      	adds	r3, #8
 8007fde:	2101      	movs	r1, #1
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 ff1d 	bl	8008e20 <RCCEx_PLL2_Config>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007fec:	e00f      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff2:	3328      	adds	r3, #40	; 0x28
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 ffc4 	bl	8008f84 <RCCEx_PLL3_Config>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008002:	e004      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800800a:	e000      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800800c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800800e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10b      	bne.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008016:	4b6c      	ldr	r3, [pc, #432]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800801a:	f023 0107 	bic.w	r1, r3, #7
 800801e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008026:	4a68      	ldr	r2, [pc, #416]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008028:	430b      	orrs	r3, r1
 800802a:	6593      	str	r3, [r2, #88]	; 0x58
 800802c:	e003      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800802e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008032:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	f002 0320 	and.w	r3, r2, #32
 8008042:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008046:	2300      	movs	r3, #0
 8008048:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800804c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008050:	460b      	mov	r3, r1
 8008052:	4313      	orrs	r3, r2
 8008054:	d055      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800805a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800805e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008062:	d033      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008068:	d82c      	bhi.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800806a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806e:	d02f      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008074:	d826      	bhi.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008076:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800807a:	d02b      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800807c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008080:	d820      	bhi.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008086:	d012      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800808c:	d81a      	bhi.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800808e:	2b00      	cmp	r3, #0
 8008090:	d022      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008092:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008096:	d115      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800809c:	3308      	adds	r3, #8
 800809e:	2100      	movs	r1, #0
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 febd 	bl	8008e20 <RCCEx_PLL2_Config>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80080ac:	e015      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b2:	3328      	adds	r3, #40	; 0x28
 80080b4:	2102      	movs	r1, #2
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 ff64 	bl	8008f84 <RCCEx_PLL3_Config>
 80080bc:	4603      	mov	r3, r0
 80080be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80080c2:	e00a      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080ca:	e006      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080cc:	bf00      	nop
 80080ce:	e004      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080d0:	bf00      	nop
 80080d2:	e002      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080d4:	bf00      	nop
 80080d6:	e000      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10b      	bne.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080e2:	4b39      	ldr	r3, [pc, #228]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80080ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f2:	4a35      	ldr	r2, [pc, #212]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080f4:	430b      	orrs	r3, r1
 80080f6:	6553      	str	r3, [r2, #84]	; 0x54
 80080f8:	e003      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800810e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008112:	2300      	movs	r3, #0
 8008114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008118:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800811c:	460b      	mov	r3, r1
 800811e:	4313      	orrs	r3, r2
 8008120:	d058      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800812a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800812e:	d033      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008130:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008134:	d82c      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813a:	d02f      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800813c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008140:	d826      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008142:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008146:	d02b      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008148:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800814c:	d820      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800814e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008152:	d012      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008158:	d81a      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d022      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800815e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008162:	d115      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008168:	3308      	adds	r3, #8
 800816a:	2100      	movs	r1, #0
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fe57 	bl	8008e20 <RCCEx_PLL2_Config>
 8008172:	4603      	mov	r3, r0
 8008174:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008178:	e015      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800817a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800817e:	3328      	adds	r3, #40	; 0x28
 8008180:	2102      	movs	r1, #2
 8008182:	4618      	mov	r0, r3
 8008184:	f000 fefe 	bl	8008f84 <RCCEx_PLL3_Config>
 8008188:	4603      	mov	r3, r0
 800818a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800818e:	e00a      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008196:	e006      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008198:	bf00      	nop
 800819a:	e004      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800819c:	bf00      	nop
 800819e:	e002      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80081a0:	bf00      	nop
 80081a2:	e000      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80081a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10e      	bne.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80081ae:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80081b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081be:	4a02      	ldr	r2, [pc, #8]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081c0:	430b      	orrs	r3, r1
 80081c2:	6593      	str	r3, [r2, #88]	; 0x58
 80081c4:	e006      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80081c6:	bf00      	nop
 80081c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80081d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081dc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80081e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081e4:	2300      	movs	r3, #0
 80081e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80081ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80081ee:	460b      	mov	r3, r1
 80081f0:	4313      	orrs	r3, r2
 80081f2:	d055      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80081fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008200:	d033      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008202:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008206:	d82c      	bhi.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800820c:	d02f      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800820e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008212:	d826      	bhi.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008214:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008218:	d02b      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800821a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800821e:	d820      	bhi.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008224:	d012      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800822a:	d81a      	bhi.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d022      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008234:	d115      	bne.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800823a:	3308      	adds	r3, #8
 800823c:	2100      	movs	r1, #0
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fdee 	bl	8008e20 <RCCEx_PLL2_Config>
 8008244:	4603      	mov	r3, r0
 8008246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800824a:	e015      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800824c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008250:	3328      	adds	r3, #40	; 0x28
 8008252:	2102      	movs	r1, #2
 8008254:	4618      	mov	r0, r3
 8008256:	f000 fe95 	bl	8008f84 <RCCEx_PLL3_Config>
 800825a:	4603      	mov	r3, r0
 800825c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008260:	e00a      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008268:	e006      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800826a:	bf00      	nop
 800826c:	e004      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800826e:	bf00      	nop
 8008270:	e002      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008272:	bf00      	nop
 8008274:	e000      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008278:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10b      	bne.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008280:	4ba1      	ldr	r3, [pc, #644]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008284:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800828c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008290:	4a9d      	ldr	r2, [pc, #628]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008292:	430b      	orrs	r3, r1
 8008294:	6593      	str	r3, [r2, #88]	; 0x58
 8008296:	e003      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008298:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800829c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80082a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f002 0308 	and.w	r3, r2, #8
 80082ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082b0:	2300      	movs	r3, #0
 80082b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80082b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80082ba:	460b      	mov	r3, r1
 80082bc:	4313      	orrs	r3, r2
 80082be:	d01e      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80082c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082cc:	d10c      	bne.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082d2:	3328      	adds	r3, #40	; 0x28
 80082d4:	2102      	movs	r1, #2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fe54 	bl	8008f84 <RCCEx_PLL3_Config>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80082e8:	4b87      	ldr	r3, [pc, #540]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082f8:	4a83      	ldr	r2, [pc, #524]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082fa:	430b      	orrs	r3, r1
 80082fc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	f002 0310 	and.w	r3, r2, #16
 800830a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800830e:	2300      	movs	r3, #0
 8008310:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008314:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008318:	460b      	mov	r3, r1
 800831a:	4313      	orrs	r3, r2
 800831c:	d01e      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800831e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800832a:	d10c      	bne.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800832c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008330:	3328      	adds	r3, #40	; 0x28
 8008332:	2102      	movs	r1, #2
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fe25 	bl	8008f84 <RCCEx_PLL3_Config>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d002      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008346:	4b70      	ldr	r3, [pc, #448]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800834e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008352:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008356:	4a6c      	ldr	r2, [pc, #432]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008358:	430b      	orrs	r3, r1
 800835a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800835c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800836c:	2300      	movs	r3, #0
 800836e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008372:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008376:	460b      	mov	r3, r1
 8008378:	4313      	orrs	r3, r2
 800837a:	d03e      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800837c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008380:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008388:	d022      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800838a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800838e:	d81b      	bhi.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008398:	d00b      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800839a:	e015      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800839c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a0:	3308      	adds	r3, #8
 80083a2:	2100      	movs	r1, #0
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 fd3b 	bl	8008e20 <RCCEx_PLL2_Config>
 80083aa:	4603      	mov	r3, r0
 80083ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80083b0:	e00f      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083b6:	3328      	adds	r3, #40	; 0x28
 80083b8:	2102      	movs	r1, #2
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fde2 	bl	8008f84 <RCCEx_PLL3_Config>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80083c6:	e004      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083ce:	e000      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80083d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083da:	4b4b      	ldr	r3, [pc, #300]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80083e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083ea:	4a47      	ldr	r2, [pc, #284]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083ec:	430b      	orrs	r3, r1
 80083ee:	6593      	str	r3, [r2, #88]	; 0x58
 80083f0:	e003      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008406:	67bb      	str	r3, [r7, #120]	; 0x78
 8008408:	2300      	movs	r3, #0
 800840a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800840c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008410:	460b      	mov	r3, r1
 8008412:	4313      	orrs	r3, r2
 8008414:	d03b      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800841a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800841e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008422:	d01f      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008424:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008428:	d818      	bhi.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800842a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800842e:	d003      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008430:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008434:	d007      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008436:	e011      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008438:	4b33      	ldr	r3, [pc, #204]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	4a32      	ldr	r2, [pc, #200]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800843e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008444:	e00f      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800844a:	3328      	adds	r3, #40	; 0x28
 800844c:	2101      	movs	r1, #1
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fd98 	bl	8008f84 <RCCEx_PLL3_Config>
 8008454:	4603      	mov	r3, r0
 8008456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800845a:	e004      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008462:	e000      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10b      	bne.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800846e:	4b26      	ldr	r3, [pc, #152]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008472:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800847a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800847e:	4a22      	ldr	r2, [pc, #136]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008480:	430b      	orrs	r3, r1
 8008482:	6553      	str	r3, [r2, #84]	; 0x54
 8008484:	e003      	b.n	800848e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008486:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800848a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800848e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800849a:	673b      	str	r3, [r7, #112]	; 0x70
 800849c:	2300      	movs	r3, #0
 800849e:	677b      	str	r3, [r7, #116]	; 0x74
 80084a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80084a4:	460b      	mov	r3, r1
 80084a6:	4313      	orrs	r3, r2
 80084a8:	d034      	beq.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80084aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d003      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80084b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084b8:	d007      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80084ba:	e011      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084bc:	4b12      	ldr	r3, [pc, #72]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	4a11      	ldr	r2, [pc, #68]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80084c8:	e00e      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ce:	3308      	adds	r3, #8
 80084d0:	2102      	movs	r1, #2
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 fca4 	bl	8008e20 <RCCEx_PLL2_Config>
 80084d8:	4603      	mov	r3, r0
 80084da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80084de:	e003      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10d      	bne.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80084f0:	4b05      	ldr	r3, [pc, #20]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fe:	4a02      	ldr	r2, [pc, #8]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008500:	430b      	orrs	r3, r1
 8008502:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008504:	e006      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008506:	bf00      	nop
 8008508:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800850c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008510:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008520:	66bb      	str	r3, [r7, #104]	; 0x68
 8008522:	2300      	movs	r3, #0
 8008524:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008526:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800852a:	460b      	mov	r3, r1
 800852c:	4313      	orrs	r3, r2
 800852e:	d00c      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008534:	3328      	adds	r3, #40	; 0x28
 8008536:	2102      	movs	r1, #2
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fd23 	bl	8008f84 <RCCEx_PLL3_Config>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800854a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008556:	663b      	str	r3, [r7, #96]	; 0x60
 8008558:	2300      	movs	r3, #0
 800855a:	667b      	str	r3, [r7, #100]	; 0x64
 800855c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008560:	460b      	mov	r3, r1
 8008562:	4313      	orrs	r3, r2
 8008564:	d038      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800856a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800856e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008572:	d018      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008574:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008578:	d811      	bhi.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800857a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800857e:	d014      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008584:	d80b      	bhi.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008586:	2b00      	cmp	r3, #0
 8008588:	d011      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800858a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800858e:	d106      	bne.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008590:	4bc3      	ldr	r3, [pc, #780]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	4ac2      	ldr	r2, [pc, #776]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800859a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800859c:	e008      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085a4:	e004      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80085a6:	bf00      	nop
 80085a8:	e002      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80085aa:	bf00      	nop
 80085ac:	e000      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80085ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10b      	bne.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085b8:	4bb9      	ldr	r3, [pc, #740]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085c8:	4ab5      	ldr	r2, [pc, #724]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085ca:	430b      	orrs	r3, r1
 80085cc:	6553      	str	r3, [r2, #84]	; 0x54
 80085ce:	e003      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80085e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80085e6:	2300      	movs	r3, #0
 80085e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085ea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80085ee:	460b      	mov	r3, r1
 80085f0:	4313      	orrs	r3, r2
 80085f2:	d009      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80085f4:	4baa      	ldr	r3, [pc, #680]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80085fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008602:	4aa7      	ldr	r2, [pc, #668]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008604:	430b      	orrs	r3, r1
 8008606:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008614:	653b      	str	r3, [r7, #80]	; 0x50
 8008616:	2300      	movs	r3, #0
 8008618:	657b      	str	r3, [r7, #84]	; 0x54
 800861a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800861e:	460b      	mov	r3, r1
 8008620:	4313      	orrs	r3, r2
 8008622:	d00a      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008624:	4b9e      	ldr	r3, [pc, #632]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800862c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008630:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008634:	4a9a      	ldr	r2, [pc, #616]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008636:	430b      	orrs	r3, r1
 8008638:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800863a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008646:	64bb      	str	r3, [r7, #72]	; 0x48
 8008648:	2300      	movs	r3, #0
 800864a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800864c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008650:	460b      	mov	r3, r1
 8008652:	4313      	orrs	r3, r2
 8008654:	d009      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008656:	4b92      	ldr	r3, [pc, #584]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800865a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800865e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008664:	4a8e      	ldr	r2, [pc, #568]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008666:	430b      	orrs	r3, r1
 8008668:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800866a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008676:	643b      	str	r3, [r7, #64]	; 0x40
 8008678:	2300      	movs	r3, #0
 800867a:	647b      	str	r3, [r7, #68]	; 0x44
 800867c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008680:	460b      	mov	r3, r1
 8008682:	4313      	orrs	r3, r2
 8008684:	d00e      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008686:	4b86      	ldr	r3, [pc, #536]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	4a85      	ldr	r2, [pc, #532]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800868c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008690:	6113      	str	r3, [r2, #16]
 8008692:	4b83      	ldr	r3, [pc, #524]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008694:	6919      	ldr	r1, [r3, #16]
 8008696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800869a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800869e:	4a80      	ldr	r2, [pc, #512]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086a0:	430b      	orrs	r3, r1
 80086a2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80086a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80086b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80086b2:	2300      	movs	r3, #0
 80086b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086b6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80086ba:	460b      	mov	r3, r1
 80086bc:	4313      	orrs	r3, r2
 80086be:	d009      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80086c0:	4b77      	ldr	r3, [pc, #476]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80086c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ce:	4a74      	ldr	r2, [pc, #464]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086d0:	430b      	orrs	r3, r1
 80086d2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80086d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80086e0:	633b      	str	r3, [r7, #48]	; 0x30
 80086e2:	2300      	movs	r3, #0
 80086e4:	637b      	str	r3, [r7, #52]	; 0x34
 80086e6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80086ea:	460b      	mov	r3, r1
 80086ec:	4313      	orrs	r3, r2
 80086ee:	d00a      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80086f0:	4b6b      	ldr	r3, [pc, #428]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80086f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008700:	4a67      	ldr	r2, [pc, #412]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008702:	430b      	orrs	r3, r1
 8008704:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	2100      	movs	r1, #0
 8008710:	62b9      	str	r1, [r7, #40]	; 0x28
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008718:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800871c:	460b      	mov	r3, r1
 800871e:	4313      	orrs	r3, r2
 8008720:	d011      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008726:	3308      	adds	r3, #8
 8008728:	2100      	movs	r1, #0
 800872a:	4618      	mov	r0, r3
 800872c:	f000 fb78 	bl	8008e20 <RCCEx_PLL2_Config>
 8008730:	4603      	mov	r3, r0
 8008732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800873e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008742:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	2100      	movs	r1, #0
 8008750:	6239      	str	r1, [r7, #32]
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	627b      	str	r3, [r7, #36]	; 0x24
 8008758:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800875c:	460b      	mov	r3, r1
 800875e:	4313      	orrs	r3, r2
 8008760:	d011      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008766:	3308      	adds	r3, #8
 8008768:	2101      	movs	r1, #1
 800876a:	4618      	mov	r0, r3
 800876c:	f000 fb58 	bl	8008e20 <RCCEx_PLL2_Config>
 8008770:	4603      	mov	r3, r0
 8008772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008776:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800877e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008782:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	2100      	movs	r1, #0
 8008790:	61b9      	str	r1, [r7, #24]
 8008792:	f003 0304 	and.w	r3, r3, #4
 8008796:	61fb      	str	r3, [r7, #28]
 8008798:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800879c:	460b      	mov	r3, r1
 800879e:	4313      	orrs	r3, r2
 80087a0:	d011      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087a6:	3308      	adds	r3, #8
 80087a8:	2102      	movs	r1, #2
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fb38 	bl	8008e20 <RCCEx_PLL2_Config>
 80087b0:	4603      	mov	r3, r0
 80087b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80087b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80087c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	2100      	movs	r1, #0
 80087d0:	6139      	str	r1, [r7, #16]
 80087d2:	f003 0308 	and.w	r3, r3, #8
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80087dc:	460b      	mov	r3, r1
 80087de:	4313      	orrs	r3, r2
 80087e0:	d011      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e6:	3328      	adds	r3, #40	; 0x28
 80087e8:	2100      	movs	r1, #0
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 fbca 	bl	8008f84 <RCCEx_PLL3_Config>
 80087f0:	4603      	mov	r3, r0
 80087f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80087f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008802:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	2100      	movs	r1, #0
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	f003 0310 	and.w	r3, r3, #16
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800881c:	460b      	mov	r3, r1
 800881e:	4313      	orrs	r3, r2
 8008820:	d011      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008826:	3328      	adds	r3, #40	; 0x28
 8008828:	2101      	movs	r1, #1
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fbaa 	bl	8008f84 <RCCEx_PLL3_Config>
 8008830:	4603      	mov	r3, r0
 8008832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800883e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008842:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	2100      	movs	r1, #0
 8008850:	6039      	str	r1, [r7, #0]
 8008852:	f003 0320 	and.w	r3, r3, #32
 8008856:	607b      	str	r3, [r7, #4]
 8008858:	e9d7 1200 	ldrd	r1, r2, [r7]
 800885c:	460b      	mov	r3, r1
 800885e:	4313      	orrs	r3, r2
 8008860:	d011      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008866:	3328      	adds	r3, #40	; 0x28
 8008868:	2102      	movs	r1, #2
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fb8a 	bl	8008f84 <RCCEx_PLL3_Config>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008876:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800887e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008882:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008886:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	e000      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
}
 8008894:	4618      	mov	r0, r3
 8008896:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800889a:	46bd      	mov	sp, r7
 800889c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088a0:	58024400 	.word	0x58024400

080088a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80088a8:	f7fe fd96 	bl	80073d8 <HAL_RCC_GetHCLKFreq>
 80088ac:	4602      	mov	r2, r0
 80088ae:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	091b      	lsrs	r3, r3, #4
 80088b4:	f003 0307 	and.w	r3, r3, #7
 80088b8:	4904      	ldr	r1, [pc, #16]	; (80088cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80088ba:	5ccb      	ldrb	r3, [r1, r3]
 80088bc:	f003 031f 	and.w	r3, r3, #31
 80088c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	58024400 	.word	0x58024400
 80088cc:	08011738 	.word	0x08011738

080088d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b089      	sub	sp, #36	; 0x24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088d8:	4ba1      	ldr	r3, [pc, #644]	; (8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088dc:	f003 0303 	and.w	r3, r3, #3
 80088e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80088e2:	4b9f      	ldr	r3, [pc, #636]	; (8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e6:	0b1b      	lsrs	r3, r3, #12
 80088e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80088ee:	4b9c      	ldr	r3, [pc, #624]	; (8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f2:	091b      	lsrs	r3, r3, #4
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80088fa:	4b99      	ldr	r3, [pc, #612]	; (8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088fe:	08db      	lsrs	r3, r3, #3
 8008900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	fb02 f303 	mul.w	r3, r2, r3
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008912:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2b00      	cmp	r3, #0
 800891a:	f000 8111 	beq.w	8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	2b02      	cmp	r3, #2
 8008922:	f000 8083 	beq.w	8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	2b02      	cmp	r3, #2
 800892a:	f200 80a1 	bhi.w	8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d056      	beq.n	80089e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800893a:	e099      	b.n	8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800893c:	4b88      	ldr	r3, [pc, #544]	; (8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0320 	and.w	r3, r3, #32
 8008944:	2b00      	cmp	r3, #0
 8008946:	d02d      	beq.n	80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008948:	4b85      	ldr	r3, [pc, #532]	; (8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	08db      	lsrs	r3, r3, #3
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	4a84      	ldr	r2, [pc, #528]	; (8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008954:	fa22 f303 	lsr.w	r3, r2, r3
 8008958:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	ee07 3a90 	vmov	s15, r3
 8008960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008972:	4b7b      	ldr	r3, [pc, #492]	; (8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897a:	ee07 3a90 	vmov	s15, r3
 800897e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008982:	ed97 6a03 	vldr	s12, [r7, #12]
 8008986:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800898a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800898e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800899e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089a2:	e087      	b.n	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	ee07 3a90 	vmov	s15, r3
 80089aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80089b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089b6:	4b6a      	ldr	r3, [pc, #424]	; (8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089be:	ee07 3a90 	vmov	s15, r3
 80089c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089e6:	e065      	b.n	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80089f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fa:	4b59      	ldr	r3, [pc, #356]	; (8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a02:	ee07 3a90 	vmov	s15, r3
 8008a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a2a:	e043      	b.n	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	ee07 3a90 	vmov	s15, r3
 8008a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a3e:	4b48      	ldr	r3, [pc, #288]	; (8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a6e:	e021      	b.n	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	ee07 3a90 	vmov	s15, r3
 8008a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a82:	4b37      	ldr	r3, [pc, #220]	; (8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ab2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008ab4:	4b2a      	ldr	r3, [pc, #168]	; (8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab8:	0a5b      	lsrs	r3, r3, #9
 8008aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008abe:	ee07 3a90 	vmov	s15, r3
 8008ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ace:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ada:	ee17 2a90 	vmov	r2, s15
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008ae2:	4b1f      	ldr	r3, [pc, #124]	; (8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae6:	0c1b      	lsrs	r3, r3, #16
 8008ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aec:	ee07 3a90 	vmov	s15, r3
 8008af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008af8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008afc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b08:	ee17 2a90 	vmov	r2, s15
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008b10:	4b13      	ldr	r3, [pc, #76]	; (8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b14:	0e1b      	lsrs	r3, r3, #24
 8008b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b1a:	ee07 3a90 	vmov	s15, r3
 8008b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b36:	ee17 2a90 	vmov	r2, s15
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008b3e:	e008      	b.n	8008b52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	609a      	str	r2, [r3, #8]
}
 8008b52:	bf00      	nop
 8008b54:	3724      	adds	r7, #36	; 0x24
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	58024400 	.word	0x58024400
 8008b64:	03d09000 	.word	0x03d09000
 8008b68:	46000000 	.word	0x46000000
 8008b6c:	4c742400 	.word	0x4c742400
 8008b70:	4a742400 	.word	0x4a742400
 8008b74:	4b742400 	.word	0x4b742400

08008b78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b089      	sub	sp, #36	; 0x24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b80:	4ba1      	ldr	r3, [pc, #644]	; (8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b84:	f003 0303 	and.w	r3, r3, #3
 8008b88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008b8a:	4b9f      	ldr	r3, [pc, #636]	; (8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8e:	0d1b      	lsrs	r3, r3, #20
 8008b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008b96:	4b9c      	ldr	r3, [pc, #624]	; (8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	0a1b      	lsrs	r3, r3, #8
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008ba2:	4b99      	ldr	r3, [pc, #612]	; (8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ba6:	08db      	lsrs	r3, r3, #3
 8008ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	fb02 f303 	mul.w	r3, r2, r3
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 8111 	beq.w	8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	f000 8083 	beq.w	8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	f200 80a1 	bhi.w	8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d003      	beq.n	8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d056      	beq.n	8008c90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008be2:	e099      	b.n	8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008be4:	4b88      	ldr	r3, [pc, #544]	; (8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0320 	and.w	r3, r3, #32
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d02d      	beq.n	8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bf0:	4b85      	ldr	r3, [pc, #532]	; (8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	08db      	lsrs	r3, r3, #3
 8008bf6:	f003 0303 	and.w	r3, r3, #3
 8008bfa:	4a84      	ldr	r2, [pc, #528]	; (8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8008c00:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	ee07 3a90 	vmov	s15, r3
 8008c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c1a:	4b7b      	ldr	r3, [pc, #492]	; (8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c22:	ee07 3a90 	vmov	s15, r3
 8008c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c4a:	e087      	b.n	8008d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	ee07 3a90 	vmov	s15, r3
 8008c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c5e:	4b6a      	ldr	r3, [pc, #424]	; (8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c66:	ee07 3a90 	vmov	s15, r3
 8008c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c8e:	e065      	b.n	8008d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca2:	4b59      	ldr	r3, [pc, #356]	; (8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008caa:	ee07 3a90 	vmov	s15, r3
 8008cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cd2:	e043      	b.n	8008d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	ee07 3a90 	vmov	s15, r3
 8008cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cde:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce6:	4b48      	ldr	r3, [pc, #288]	; (8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cee:	ee07 3a90 	vmov	s15, r3
 8008cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cfa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d16:	e021      	b.n	8008d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	ee07 3a90 	vmov	s15, r3
 8008d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2a:	4b37      	ldr	r3, [pc, #220]	; (8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d32:	ee07 3a90 	vmov	s15, r3
 8008d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008d5c:	4b2a      	ldr	r3, [pc, #168]	; (8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d60:	0a5b      	lsrs	r3, r3, #9
 8008d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d66:	ee07 3a90 	vmov	s15, r3
 8008d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d82:	ee17 2a90 	vmov	r2, s15
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008d8a:	4b1f      	ldr	r3, [pc, #124]	; (8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8e:	0c1b      	lsrs	r3, r3, #16
 8008d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d94:	ee07 3a90 	vmov	s15, r3
 8008d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008da0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008da4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008db0:	ee17 2a90 	vmov	r2, s15
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008db8:	4b13      	ldr	r3, [pc, #76]	; (8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbc:	0e1b      	lsrs	r3, r3, #24
 8008dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dc2:	ee07 3a90 	vmov	s15, r3
 8008dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dde:	ee17 2a90 	vmov	r2, s15
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008de6:	e008      	b.n	8008dfa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	609a      	str	r2, [r3, #8]
}
 8008dfa:	bf00      	nop
 8008dfc:	3724      	adds	r7, #36	; 0x24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	58024400 	.word	0x58024400
 8008e0c:	03d09000 	.word	0x03d09000
 8008e10:	46000000 	.word	0x46000000
 8008e14:	4c742400 	.word	0x4c742400
 8008e18:	4a742400 	.word	0x4a742400
 8008e1c:	4b742400 	.word	0x4b742400

08008e20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e2e:	4b53      	ldr	r3, [pc, #332]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e32:	f003 0303 	and.w	r3, r3, #3
 8008e36:	2b03      	cmp	r3, #3
 8008e38:	d101      	bne.n	8008e3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e099      	b.n	8008f72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e3e:	4b4f      	ldr	r3, [pc, #316]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a4e      	ldr	r2, [pc, #312]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008e44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e4a:	f7fa fb81 	bl	8003550 <HAL_GetTick>
 8008e4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e50:	e008      	b.n	8008e64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e52:	f7fa fb7d 	bl	8003550 <HAL_GetTick>
 8008e56:	4602      	mov	r2, r0
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d901      	bls.n	8008e64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e086      	b.n	8008f72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e64:	4b45      	ldr	r3, [pc, #276]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1f0      	bne.n	8008e52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e70:	4b42      	ldr	r3, [pc, #264]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	031b      	lsls	r3, r3, #12
 8008e7e:	493f      	ldr	r1, [pc, #252]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008e80:	4313      	orrs	r3, r2
 8008e82:	628b      	str	r3, [r1, #40]	; 0x28
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	025b      	lsls	r3, r3, #9
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	431a      	orrs	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	041b      	lsls	r3, r3, #16
 8008ea2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ea6:	431a      	orrs	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	061b      	lsls	r3, r3, #24
 8008eb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008eb4:	4931      	ldr	r1, [pc, #196]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008eba:	4b30      	ldr	r3, [pc, #192]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	492d      	ldr	r1, [pc, #180]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ecc:	4b2b      	ldr	r3, [pc, #172]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed0:	f023 0220 	bic.w	r2, r3, #32
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	4928      	ldr	r1, [pc, #160]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ede:	4b27      	ldr	r3, [pc, #156]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee2:	4a26      	ldr	r2, [pc, #152]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008ee4:	f023 0310 	bic.w	r3, r3, #16
 8008ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008eea:	4b24      	ldr	r3, [pc, #144]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008eec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eee:	4b24      	ldr	r3, [pc, #144]	; (8008f80 <RCCEx_PLL2_Config+0x160>)
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	69d2      	ldr	r2, [r2, #28]
 8008ef6:	00d2      	lsls	r2, r2, #3
 8008ef8:	4920      	ldr	r1, [pc, #128]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008efa:	4313      	orrs	r3, r2
 8008efc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008efe:	4b1f      	ldr	r3, [pc, #124]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f02:	4a1e      	ldr	r2, [pc, #120]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008f04:	f043 0310 	orr.w	r3, r3, #16
 8008f08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d106      	bne.n	8008f1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f10:	4b1a      	ldr	r3, [pc, #104]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	4a19      	ldr	r2, [pc, #100]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008f16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f1c:	e00f      	b.n	8008f3e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d106      	bne.n	8008f32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f24:	4b15      	ldr	r3, [pc, #84]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f28:	4a14      	ldr	r2, [pc, #80]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f30:	e005      	b.n	8008f3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f32:	4b12      	ldr	r3, [pc, #72]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f36:	4a11      	ldr	r2, [pc, #68]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f3e:	4b0f      	ldr	r3, [pc, #60]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a0e      	ldr	r2, [pc, #56]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008f44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f4a:	f7fa fb01 	bl	8003550 <HAL_GetTick>
 8008f4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f50:	e008      	b.n	8008f64 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f52:	f7fa fafd 	bl	8003550 <HAL_GetTick>
 8008f56:	4602      	mov	r2, r0
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d901      	bls.n	8008f64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f60:	2303      	movs	r3, #3
 8008f62:	e006      	b.n	8008f72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f64:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <RCCEx_PLL2_Config+0x15c>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d0f0      	beq.n	8008f52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	58024400 	.word	0x58024400
 8008f80:	ffff0007 	.word	0xffff0007

08008f84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f92:	4b53      	ldr	r3, [pc, #332]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 8008f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f96:	f003 0303 	and.w	r3, r3, #3
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d101      	bne.n	8008fa2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e099      	b.n	80090d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008fa2:	4b4f      	ldr	r3, [pc, #316]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a4e      	ldr	r2, [pc, #312]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 8008fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fae:	f7fa facf 	bl	8003550 <HAL_GetTick>
 8008fb2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fb4:	e008      	b.n	8008fc8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008fb6:	f7fa facb 	bl	8003550 <HAL_GetTick>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d901      	bls.n	8008fc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e086      	b.n	80090d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fc8:	4b45      	ldr	r3, [pc, #276]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1f0      	bne.n	8008fb6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008fd4:	4b42      	ldr	r3, [pc, #264]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	051b      	lsls	r3, r3, #20
 8008fe2:	493f      	ldr	r1, [pc, #252]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	628b      	str	r3, [r1, #40]	; 0x28
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	025b      	lsls	r3, r3, #9
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	3b01      	subs	r3, #1
 8009004:	041b      	lsls	r3, r3, #16
 8009006:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800900a:	431a      	orrs	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	3b01      	subs	r3, #1
 8009012:	061b      	lsls	r3, r3, #24
 8009014:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009018:	4931      	ldr	r1, [pc, #196]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 800901a:	4313      	orrs	r3, r2
 800901c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800901e:	4b30      	ldr	r3, [pc, #192]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 8009020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009022:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	492d      	ldr	r1, [pc, #180]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 800902c:	4313      	orrs	r3, r2
 800902e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009030:	4b2b      	ldr	r3, [pc, #172]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 8009032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009034:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	4928      	ldr	r1, [pc, #160]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 800903e:	4313      	orrs	r3, r2
 8009040:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009042:	4b27      	ldr	r3, [pc, #156]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 8009044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009046:	4a26      	ldr	r2, [pc, #152]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 8009048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800904c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800904e:	4b24      	ldr	r3, [pc, #144]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 8009050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009052:	4b24      	ldr	r3, [pc, #144]	; (80090e4 <RCCEx_PLL3_Config+0x160>)
 8009054:	4013      	ands	r3, r2
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	69d2      	ldr	r2, [r2, #28]
 800905a:	00d2      	lsls	r2, r2, #3
 800905c:	4920      	ldr	r1, [pc, #128]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 800905e:	4313      	orrs	r3, r2
 8009060:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009062:	4b1f      	ldr	r3, [pc, #124]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 8009064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009066:	4a1e      	ldr	r2, [pc, #120]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 8009068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800906c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d106      	bne.n	8009082 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009074:	4b1a      	ldr	r3, [pc, #104]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 8009076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009078:	4a19      	ldr	r2, [pc, #100]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 800907a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800907e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009080:	e00f      	b.n	80090a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d106      	bne.n	8009096 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009088:	4b15      	ldr	r3, [pc, #84]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 800908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908c:	4a14      	ldr	r2, [pc, #80]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 800908e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009092:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009094:	e005      	b.n	80090a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009096:	4b12      	ldr	r3, [pc, #72]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 8009098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909a:	4a11      	ldr	r2, [pc, #68]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 800909c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80090a2:	4b0f      	ldr	r3, [pc, #60]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a0e      	ldr	r2, [pc, #56]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 80090a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090ae:	f7fa fa4f 	bl	8003550 <HAL_GetTick>
 80090b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090b4:	e008      	b.n	80090c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090b6:	f7fa fa4b 	bl	8003550 <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d901      	bls.n	80090c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e006      	b.n	80090d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090c8:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <RCCEx_PLL3_Config+0x15c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d0f0      	beq.n	80090b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	58024400 	.word	0x58024400
 80090e4:	ffff0007 	.word	0xffff0007

080090e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e049      	b.n	800918e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d106      	bne.n	8009114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7f9 ff02 	bl	8002f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2202      	movs	r2, #2
 8009118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	3304      	adds	r3, #4
 8009124:	4619      	mov	r1, r3
 8009126:	4610      	mov	r0, r2
 8009128:	f000 fdae 	bl	8009c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
	...

08009198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d001      	beq.n	80091b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e054      	b.n	800925a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2202      	movs	r2, #2
 80091b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f042 0201 	orr.w	r2, r2, #1
 80091c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a26      	ldr	r2, [pc, #152]	; (8009268 <HAL_TIM_Base_Start_IT+0xd0>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d022      	beq.n	8009218 <HAL_TIM_Base_Start_IT+0x80>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091da:	d01d      	beq.n	8009218 <HAL_TIM_Base_Start_IT+0x80>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a22      	ldr	r2, [pc, #136]	; (800926c <HAL_TIM_Base_Start_IT+0xd4>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d018      	beq.n	8009218 <HAL_TIM_Base_Start_IT+0x80>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a21      	ldr	r2, [pc, #132]	; (8009270 <HAL_TIM_Base_Start_IT+0xd8>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d013      	beq.n	8009218 <HAL_TIM_Base_Start_IT+0x80>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a1f      	ldr	r2, [pc, #124]	; (8009274 <HAL_TIM_Base_Start_IT+0xdc>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d00e      	beq.n	8009218 <HAL_TIM_Base_Start_IT+0x80>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a1e      	ldr	r2, [pc, #120]	; (8009278 <HAL_TIM_Base_Start_IT+0xe0>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d009      	beq.n	8009218 <HAL_TIM_Base_Start_IT+0x80>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a1c      	ldr	r2, [pc, #112]	; (800927c <HAL_TIM_Base_Start_IT+0xe4>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d004      	beq.n	8009218 <HAL_TIM_Base_Start_IT+0x80>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a1b      	ldr	r2, [pc, #108]	; (8009280 <HAL_TIM_Base_Start_IT+0xe8>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d115      	bne.n	8009244 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689a      	ldr	r2, [r3, #8]
 800921e:	4b19      	ldr	r3, [pc, #100]	; (8009284 <HAL_TIM_Base_Start_IT+0xec>)
 8009220:	4013      	ands	r3, r2
 8009222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2b06      	cmp	r3, #6
 8009228:	d015      	beq.n	8009256 <HAL_TIM_Base_Start_IT+0xbe>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009230:	d011      	beq.n	8009256 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f042 0201 	orr.w	r2, r2, #1
 8009240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009242:	e008      	b.n	8009256 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 0201 	orr.w	r2, r2, #1
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	e000      	b.n	8009258 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009256:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	40010000 	.word	0x40010000
 800926c:	40000400 	.word	0x40000400
 8009270:	40000800 	.word	0x40000800
 8009274:	40000c00 	.word	0x40000c00
 8009278:	40010400 	.word	0x40010400
 800927c:	40001800 	.word	0x40001800
 8009280:	40014000 	.word	0x40014000
 8009284:	00010007 	.word	0x00010007

08009288 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68da      	ldr	r2, [r3, #12]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f022 0201 	bic.w	r2, r2, #1
 800929e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6a1a      	ldr	r2, [r3, #32]
 80092a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80092aa:	4013      	ands	r3, r2
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10f      	bne.n	80092d0 <HAL_TIM_Base_Stop_IT+0x48>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6a1a      	ldr	r2, [r3, #32]
 80092b6:	f240 4344 	movw	r3, #1092	; 0x444
 80092ba:	4013      	ands	r3, r2
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d107      	bne.n	80092d0 <HAL_TIM_Base_Stop_IT+0x48>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0201 	bic.w	r2, r2, #1
 80092ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e049      	b.n	800938c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	2b00      	cmp	r3, #0
 8009302:	d106      	bne.n	8009312 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f841 	bl	8009394 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2202      	movs	r2, #2
 8009316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	3304      	adds	r3, #4
 8009322:	4619      	mov	r1, r3
 8009324:	4610      	mov	r0, r2
 8009326:	f000 fcaf 	bl	8009c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d109      	bne.n	80093cc <HAL_TIM_PWM_Start+0x24>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	bf14      	ite	ne
 80093c4:	2301      	movne	r3, #1
 80093c6:	2300      	moveq	r3, #0
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	e03c      	b.n	8009446 <HAL_TIM_PWM_Start+0x9e>
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	2b04      	cmp	r3, #4
 80093d0:	d109      	bne.n	80093e6 <HAL_TIM_PWM_Start+0x3e>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b01      	cmp	r3, #1
 80093dc:	bf14      	ite	ne
 80093de:	2301      	movne	r3, #1
 80093e0:	2300      	moveq	r3, #0
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	e02f      	b.n	8009446 <HAL_TIM_PWM_Start+0x9e>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b08      	cmp	r3, #8
 80093ea:	d109      	bne.n	8009400 <HAL_TIM_PWM_Start+0x58>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	bf14      	ite	ne
 80093f8:	2301      	movne	r3, #1
 80093fa:	2300      	moveq	r3, #0
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	e022      	b.n	8009446 <HAL_TIM_PWM_Start+0x9e>
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	2b0c      	cmp	r3, #12
 8009404:	d109      	bne.n	800941a <HAL_TIM_PWM_Start+0x72>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b01      	cmp	r3, #1
 8009410:	bf14      	ite	ne
 8009412:	2301      	movne	r3, #1
 8009414:	2300      	moveq	r3, #0
 8009416:	b2db      	uxtb	r3, r3
 8009418:	e015      	b.n	8009446 <HAL_TIM_PWM_Start+0x9e>
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	2b10      	cmp	r3, #16
 800941e:	d109      	bne.n	8009434 <HAL_TIM_PWM_Start+0x8c>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b01      	cmp	r3, #1
 800942a:	bf14      	ite	ne
 800942c:	2301      	movne	r3, #1
 800942e:	2300      	moveq	r3, #0
 8009430:	b2db      	uxtb	r3, r3
 8009432:	e008      	b.n	8009446 <HAL_TIM_PWM_Start+0x9e>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800943a:	b2db      	uxtb	r3, r3
 800943c:	2b01      	cmp	r3, #1
 800943e:	bf14      	ite	ne
 8009440:	2301      	movne	r3, #1
 8009442:	2300      	moveq	r3, #0
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e0a1      	b.n	8009592 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d104      	bne.n	800945e <HAL_TIM_PWM_Start+0xb6>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2202      	movs	r2, #2
 8009458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800945c:	e023      	b.n	80094a6 <HAL_TIM_PWM_Start+0xfe>
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b04      	cmp	r3, #4
 8009462:	d104      	bne.n	800946e <HAL_TIM_PWM_Start+0xc6>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2202      	movs	r2, #2
 8009468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800946c:	e01b      	b.n	80094a6 <HAL_TIM_PWM_Start+0xfe>
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b08      	cmp	r3, #8
 8009472:	d104      	bne.n	800947e <HAL_TIM_PWM_Start+0xd6>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2202      	movs	r2, #2
 8009478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800947c:	e013      	b.n	80094a6 <HAL_TIM_PWM_Start+0xfe>
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	2b0c      	cmp	r3, #12
 8009482:	d104      	bne.n	800948e <HAL_TIM_PWM_Start+0xe6>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2202      	movs	r2, #2
 8009488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800948c:	e00b      	b.n	80094a6 <HAL_TIM_PWM_Start+0xfe>
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	2b10      	cmp	r3, #16
 8009492:	d104      	bne.n	800949e <HAL_TIM_PWM_Start+0xf6>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2202      	movs	r2, #2
 8009498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800949c:	e003      	b.n	80094a6 <HAL_TIM_PWM_Start+0xfe>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2202      	movs	r2, #2
 80094a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2201      	movs	r2, #1
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 fff8 	bl	800a4a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a38      	ldr	r2, [pc, #224]	; (800959c <HAL_TIM_PWM_Start+0x1f4>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d013      	beq.n	80094e6 <HAL_TIM_PWM_Start+0x13e>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a37      	ldr	r2, [pc, #220]	; (80095a0 <HAL_TIM_PWM_Start+0x1f8>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d00e      	beq.n	80094e6 <HAL_TIM_PWM_Start+0x13e>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a35      	ldr	r2, [pc, #212]	; (80095a4 <HAL_TIM_PWM_Start+0x1fc>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d009      	beq.n	80094e6 <HAL_TIM_PWM_Start+0x13e>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a34      	ldr	r2, [pc, #208]	; (80095a8 <HAL_TIM_PWM_Start+0x200>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d004      	beq.n	80094e6 <HAL_TIM_PWM_Start+0x13e>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a32      	ldr	r2, [pc, #200]	; (80095ac <HAL_TIM_PWM_Start+0x204>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d101      	bne.n	80094ea <HAL_TIM_PWM_Start+0x142>
 80094e6:	2301      	movs	r3, #1
 80094e8:	e000      	b.n	80094ec <HAL_TIM_PWM_Start+0x144>
 80094ea:	2300      	movs	r3, #0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d007      	beq.n	8009500 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a25      	ldr	r2, [pc, #148]	; (800959c <HAL_TIM_PWM_Start+0x1f4>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d022      	beq.n	8009550 <HAL_TIM_PWM_Start+0x1a8>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009512:	d01d      	beq.n	8009550 <HAL_TIM_PWM_Start+0x1a8>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a25      	ldr	r2, [pc, #148]	; (80095b0 <HAL_TIM_PWM_Start+0x208>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d018      	beq.n	8009550 <HAL_TIM_PWM_Start+0x1a8>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a24      	ldr	r2, [pc, #144]	; (80095b4 <HAL_TIM_PWM_Start+0x20c>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d013      	beq.n	8009550 <HAL_TIM_PWM_Start+0x1a8>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a22      	ldr	r2, [pc, #136]	; (80095b8 <HAL_TIM_PWM_Start+0x210>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d00e      	beq.n	8009550 <HAL_TIM_PWM_Start+0x1a8>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a1a      	ldr	r2, [pc, #104]	; (80095a0 <HAL_TIM_PWM_Start+0x1f8>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d009      	beq.n	8009550 <HAL_TIM_PWM_Start+0x1a8>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a1e      	ldr	r2, [pc, #120]	; (80095bc <HAL_TIM_PWM_Start+0x214>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d004      	beq.n	8009550 <HAL_TIM_PWM_Start+0x1a8>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a16      	ldr	r2, [pc, #88]	; (80095a4 <HAL_TIM_PWM_Start+0x1fc>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d115      	bne.n	800957c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	689a      	ldr	r2, [r3, #8]
 8009556:	4b1a      	ldr	r3, [pc, #104]	; (80095c0 <HAL_TIM_PWM_Start+0x218>)
 8009558:	4013      	ands	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2b06      	cmp	r3, #6
 8009560:	d015      	beq.n	800958e <HAL_TIM_PWM_Start+0x1e6>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009568:	d011      	beq.n	800958e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f042 0201 	orr.w	r2, r2, #1
 8009578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800957a:	e008      	b.n	800958e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f042 0201 	orr.w	r2, r2, #1
 800958a:	601a      	str	r2, [r3, #0]
 800958c:	e000      	b.n	8009590 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800958e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	40010000 	.word	0x40010000
 80095a0:	40010400 	.word	0x40010400
 80095a4:	40014000 	.word	0x40014000
 80095a8:	40014400 	.word	0x40014400
 80095ac:	40014800 	.word	0x40014800
 80095b0:	40000400 	.word	0x40000400
 80095b4:	40000800 	.word	0x40000800
 80095b8:	40000c00 	.word	0x40000c00
 80095bc:	40001800 	.word	0x40001800
 80095c0:	00010007 	.word	0x00010007

080095c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	f003 0302 	and.w	r3, r3, #2
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d122      	bne.n	8009620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d11b      	bne.n	8009620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f06f 0202 	mvn.w	r2, #2
 80095f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	f003 0303 	and.w	r3, r3, #3
 8009602:	2b00      	cmp	r3, #0
 8009604:	d003      	beq.n	800960e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fb12 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 800960c:	e005      	b.n	800961a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fb04 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fb15 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	f003 0304 	and.w	r3, r3, #4
 800962a:	2b04      	cmp	r3, #4
 800962c:	d122      	bne.n	8009674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	f003 0304 	and.w	r3, r3, #4
 8009638:	2b04      	cmp	r3, #4
 800963a:	d11b      	bne.n	8009674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f06f 0204 	mvn.w	r2, #4
 8009644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2202      	movs	r2, #2
 800964a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fae8 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 8009660:	e005      	b.n	800966e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fada 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 faeb 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	f003 0308 	and.w	r3, r3, #8
 800967e:	2b08      	cmp	r3, #8
 8009680:	d122      	bne.n	80096c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	f003 0308 	and.w	r3, r3, #8
 800968c:	2b08      	cmp	r3, #8
 800968e:	d11b      	bne.n	80096c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f06f 0208 	mvn.w	r2, #8
 8009698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2204      	movs	r2, #4
 800969e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	69db      	ldr	r3, [r3, #28]
 80096a6:	f003 0303 	and.w	r3, r3, #3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fabe 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 80096b4:	e005      	b.n	80096c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fab0 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fac1 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	f003 0310 	and.w	r3, r3, #16
 80096d2:	2b10      	cmp	r3, #16
 80096d4:	d122      	bne.n	800971c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	f003 0310 	and.w	r3, r3, #16
 80096e0:	2b10      	cmp	r3, #16
 80096e2:	d11b      	bne.n	800971c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f06f 0210 	mvn.w	r2, #16
 80096ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2208      	movs	r2, #8
 80096f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	69db      	ldr	r3, [r3, #28]
 80096fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fa94 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 8009708:	e005      	b.n	8009716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fa86 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fa97 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b01      	cmp	r3, #1
 8009728:	d10e      	bne.n	8009748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	f003 0301 	and.w	r3, r3, #1
 8009734:	2b01      	cmp	r3, #1
 8009736:	d107      	bne.n	8009748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f06f 0201 	mvn.w	r2, #1
 8009740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7f7 fd38 	bl	80011b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009752:	2b80      	cmp	r3, #128	; 0x80
 8009754:	d10e      	bne.n	8009774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009760:	2b80      	cmp	r3, #128	; 0x80
 8009762:	d107      	bne.n	8009774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800976c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 ffd4 	bl	800a71c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800977e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009782:	d10e      	bne.n	80097a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800978e:	2b80      	cmp	r3, #128	; 0x80
 8009790:	d107      	bne.n	80097a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800979a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 ffc7 	bl	800a730 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ac:	2b40      	cmp	r3, #64	; 0x40
 80097ae:	d10e      	bne.n	80097ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ba:	2b40      	cmp	r3, #64	; 0x40
 80097bc:	d107      	bne.n	80097ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80097c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fa45 	bl	8009c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	f003 0320 	and.w	r3, r3, #32
 80097d8:	2b20      	cmp	r3, #32
 80097da:	d10e      	bne.n	80097fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	f003 0320 	and.w	r3, r3, #32
 80097e6:	2b20      	cmp	r3, #32
 80097e8:	d107      	bne.n	80097fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f06f 0220 	mvn.w	r2, #32
 80097f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 ff87 	bl	800a708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097fa:	bf00      	nop
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
	...

08009804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800981a:	2b01      	cmp	r3, #1
 800981c:	d101      	bne.n	8009822 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800981e:	2302      	movs	r3, #2
 8009820:	e0ff      	b.n	8009a22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b14      	cmp	r3, #20
 800982e:	f200 80f0 	bhi.w	8009a12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009832:	a201      	add	r2, pc, #4	; (adr r2, 8009838 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009838:	0800988d 	.word	0x0800988d
 800983c:	08009a13 	.word	0x08009a13
 8009840:	08009a13 	.word	0x08009a13
 8009844:	08009a13 	.word	0x08009a13
 8009848:	080098cd 	.word	0x080098cd
 800984c:	08009a13 	.word	0x08009a13
 8009850:	08009a13 	.word	0x08009a13
 8009854:	08009a13 	.word	0x08009a13
 8009858:	0800990f 	.word	0x0800990f
 800985c:	08009a13 	.word	0x08009a13
 8009860:	08009a13 	.word	0x08009a13
 8009864:	08009a13 	.word	0x08009a13
 8009868:	0800994f 	.word	0x0800994f
 800986c:	08009a13 	.word	0x08009a13
 8009870:	08009a13 	.word	0x08009a13
 8009874:	08009a13 	.word	0x08009a13
 8009878:	08009991 	.word	0x08009991
 800987c:	08009a13 	.word	0x08009a13
 8009880:	08009a13 	.word	0x08009a13
 8009884:	08009a13 	.word	0x08009a13
 8009888:	080099d1 	.word	0x080099d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68b9      	ldr	r1, [r7, #8]
 8009892:	4618      	mov	r0, r3
 8009894:	f000 fa92 	bl	8009dbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	699a      	ldr	r2, [r3, #24]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f042 0208 	orr.w	r2, r2, #8
 80098a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	699a      	ldr	r2, [r3, #24]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f022 0204 	bic.w	r2, r2, #4
 80098b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6999      	ldr	r1, [r3, #24]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	691a      	ldr	r2, [r3, #16]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	619a      	str	r2, [r3, #24]
      break;
 80098ca:	e0a5      	b.n	8009a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68b9      	ldr	r1, [r7, #8]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 fb02 	bl	8009edc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	699a      	ldr	r2, [r3, #24]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	699a      	ldr	r2, [r3, #24]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6999      	ldr	r1, [r3, #24]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	021a      	lsls	r2, r3, #8
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	430a      	orrs	r2, r1
 800990a:	619a      	str	r2, [r3, #24]
      break;
 800990c:	e084      	b.n	8009a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68b9      	ldr	r1, [r7, #8]
 8009914:	4618      	mov	r0, r3
 8009916:	f000 fb6b 	bl	8009ff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	69da      	ldr	r2, [r3, #28]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f042 0208 	orr.w	r2, r2, #8
 8009928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	69da      	ldr	r2, [r3, #28]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f022 0204 	bic.w	r2, r2, #4
 8009938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	69d9      	ldr	r1, [r3, #28]
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	691a      	ldr	r2, [r3, #16]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	430a      	orrs	r2, r1
 800994a:	61da      	str	r2, [r3, #28]
      break;
 800994c:	e064      	b.n	8009a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68b9      	ldr	r1, [r7, #8]
 8009954:	4618      	mov	r0, r3
 8009956:	f000 fbd3 	bl	800a100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	69da      	ldr	r2, [r3, #28]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	69da      	ldr	r2, [r3, #28]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	69d9      	ldr	r1, [r3, #28]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	021a      	lsls	r2, r3, #8
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	430a      	orrs	r2, r1
 800998c:	61da      	str	r2, [r3, #28]
      break;
 800998e:	e043      	b.n	8009a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68b9      	ldr	r1, [r7, #8]
 8009996:	4618      	mov	r0, r3
 8009998:	f000 fc1c 	bl	800a1d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f042 0208 	orr.w	r2, r2, #8
 80099aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f022 0204 	bic.w	r2, r2, #4
 80099ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	691a      	ldr	r2, [r3, #16]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	430a      	orrs	r2, r1
 80099cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80099ce:	e023      	b.n	8009a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68b9      	ldr	r1, [r7, #8]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f000 fc60 	bl	800a29c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	021a      	lsls	r2, r3, #8
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	430a      	orrs	r2, r1
 8009a0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009a10:	e002      	b.n	8009a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	75fb      	strb	r3, [r7, #23]
      break;
 8009a16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3718      	adds	r7, #24
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop

08009a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d101      	bne.n	8009a48 <HAL_TIM_ConfigClockSource+0x1c>
 8009a44:	2302      	movs	r3, #2
 8009a46:	e0dc      	b.n	8009c02 <HAL_TIM_ConfigClockSource+0x1d6>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	4b6a      	ldr	r3, [pc, #424]	; (8009c0c <HAL_TIM_ConfigClockSource+0x1e0>)
 8009a64:	4013      	ands	r3, r2
 8009a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a64      	ldr	r2, [pc, #400]	; (8009c10 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	f000 80a9 	beq.w	8009bd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a84:	4a62      	ldr	r2, [pc, #392]	; (8009c10 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	f200 80ae 	bhi.w	8009be8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a8c:	4a61      	ldr	r2, [pc, #388]	; (8009c14 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	f000 80a1 	beq.w	8009bd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a94:	4a5f      	ldr	r2, [pc, #380]	; (8009c14 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	f200 80a6 	bhi.w	8009be8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a9c:	4a5e      	ldr	r2, [pc, #376]	; (8009c18 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	f000 8099 	beq.w	8009bd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009aa4:	4a5c      	ldr	r2, [pc, #368]	; (8009c18 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	f200 809e 	bhi.w	8009be8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009aac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009ab0:	f000 8091 	beq.w	8009bd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ab4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009ab8:	f200 8096 	bhi.w	8009be8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ac0:	f000 8089 	beq.w	8009bd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ac8:	f200 808e 	bhi.w	8009be8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad0:	d03e      	beq.n	8009b50 <HAL_TIM_ConfigClockSource+0x124>
 8009ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad6:	f200 8087 	bhi.w	8009be8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ade:	f000 8086 	beq.w	8009bee <HAL_TIM_ConfigClockSource+0x1c2>
 8009ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae6:	d87f      	bhi.n	8009be8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ae8:	2b70      	cmp	r3, #112	; 0x70
 8009aea:	d01a      	beq.n	8009b22 <HAL_TIM_ConfigClockSource+0xf6>
 8009aec:	2b70      	cmp	r3, #112	; 0x70
 8009aee:	d87b      	bhi.n	8009be8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009af0:	2b60      	cmp	r3, #96	; 0x60
 8009af2:	d050      	beq.n	8009b96 <HAL_TIM_ConfigClockSource+0x16a>
 8009af4:	2b60      	cmp	r3, #96	; 0x60
 8009af6:	d877      	bhi.n	8009be8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009af8:	2b50      	cmp	r3, #80	; 0x50
 8009afa:	d03c      	beq.n	8009b76 <HAL_TIM_ConfigClockSource+0x14a>
 8009afc:	2b50      	cmp	r3, #80	; 0x50
 8009afe:	d873      	bhi.n	8009be8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b00:	2b40      	cmp	r3, #64	; 0x40
 8009b02:	d058      	beq.n	8009bb6 <HAL_TIM_ConfigClockSource+0x18a>
 8009b04:	2b40      	cmp	r3, #64	; 0x40
 8009b06:	d86f      	bhi.n	8009be8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b08:	2b30      	cmp	r3, #48	; 0x30
 8009b0a:	d064      	beq.n	8009bd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009b0c:	2b30      	cmp	r3, #48	; 0x30
 8009b0e:	d86b      	bhi.n	8009be8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b10:	2b20      	cmp	r3, #32
 8009b12:	d060      	beq.n	8009bd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009b14:	2b20      	cmp	r3, #32
 8009b16:	d867      	bhi.n	8009be8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d05c      	beq.n	8009bd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009b1c:	2b10      	cmp	r3, #16
 8009b1e:	d05a      	beq.n	8009bd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009b20:	e062      	b.n	8009be8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b32:	f000 fc97 	bl	800a464 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	609a      	str	r2, [r3, #8]
      break;
 8009b4e:	e04f      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b60:	f000 fc80 	bl	800a464 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	689a      	ldr	r2, [r3, #8]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b72:	609a      	str	r2, [r3, #8]
      break;
 8009b74:	e03c      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b82:	461a      	mov	r2, r3
 8009b84:	f000 fbf0 	bl	800a368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2150      	movs	r1, #80	; 0x50
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 fc4a 	bl	800a428 <TIM_ITRx_SetConfig>
      break;
 8009b94:	e02c      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f000 fc0f 	bl	800a3c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2160      	movs	r1, #96	; 0x60
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 fc3a 	bl	800a428 <TIM_ITRx_SetConfig>
      break;
 8009bb4:	e01c      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	f000 fbd0 	bl	800a368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2140      	movs	r1, #64	; 0x40
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 fc2a 	bl	800a428 <TIM_ITRx_SetConfig>
      break;
 8009bd4:	e00c      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4619      	mov	r1, r3
 8009be0:	4610      	mov	r0, r2
 8009be2:	f000 fc21 	bl	800a428 <TIM_ITRx_SetConfig>
      break;
 8009be6:	e003      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	73fb      	strb	r3, [r7, #15]
      break;
 8009bec:	e000      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009bee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	ffceff88 	.word	0xffceff88
 8009c10:	00100040 	.word	0x00100040
 8009c14:	00100030 	.word	0x00100030
 8009c18:	00100020 	.word	0x00100020

08009c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(const TIM_HandleTypeDef *htim)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  return htim->State;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c7a:	b2db      	uxtb	r3, r3
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a40      	ldr	r2, [pc, #256]	; (8009d9c <TIM_Base_SetConfig+0x114>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d013      	beq.n	8009cc8 <TIM_Base_SetConfig+0x40>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ca6:	d00f      	beq.n	8009cc8 <TIM_Base_SetConfig+0x40>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a3d      	ldr	r2, [pc, #244]	; (8009da0 <TIM_Base_SetConfig+0x118>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d00b      	beq.n	8009cc8 <TIM_Base_SetConfig+0x40>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a3c      	ldr	r2, [pc, #240]	; (8009da4 <TIM_Base_SetConfig+0x11c>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d007      	beq.n	8009cc8 <TIM_Base_SetConfig+0x40>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a3b      	ldr	r2, [pc, #236]	; (8009da8 <TIM_Base_SetConfig+0x120>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d003      	beq.n	8009cc8 <TIM_Base_SetConfig+0x40>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a3a      	ldr	r2, [pc, #232]	; (8009dac <TIM_Base_SetConfig+0x124>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d108      	bne.n	8009cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a2f      	ldr	r2, [pc, #188]	; (8009d9c <TIM_Base_SetConfig+0x114>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d01f      	beq.n	8009d22 <TIM_Base_SetConfig+0x9a>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce8:	d01b      	beq.n	8009d22 <TIM_Base_SetConfig+0x9a>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a2c      	ldr	r2, [pc, #176]	; (8009da0 <TIM_Base_SetConfig+0x118>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d017      	beq.n	8009d22 <TIM_Base_SetConfig+0x9a>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a2b      	ldr	r2, [pc, #172]	; (8009da4 <TIM_Base_SetConfig+0x11c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d013      	beq.n	8009d22 <TIM_Base_SetConfig+0x9a>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a2a      	ldr	r2, [pc, #168]	; (8009da8 <TIM_Base_SetConfig+0x120>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d00f      	beq.n	8009d22 <TIM_Base_SetConfig+0x9a>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a29      	ldr	r2, [pc, #164]	; (8009dac <TIM_Base_SetConfig+0x124>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d00b      	beq.n	8009d22 <TIM_Base_SetConfig+0x9a>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a28      	ldr	r2, [pc, #160]	; (8009db0 <TIM_Base_SetConfig+0x128>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d007      	beq.n	8009d22 <TIM_Base_SetConfig+0x9a>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a27      	ldr	r2, [pc, #156]	; (8009db4 <TIM_Base_SetConfig+0x12c>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d003      	beq.n	8009d22 <TIM_Base_SetConfig+0x9a>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a26      	ldr	r2, [pc, #152]	; (8009db8 <TIM_Base_SetConfig+0x130>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d108      	bne.n	8009d34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	695b      	ldr	r3, [r3, #20]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	689a      	ldr	r2, [r3, #8]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a10      	ldr	r2, [pc, #64]	; (8009d9c <TIM_Base_SetConfig+0x114>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d00f      	beq.n	8009d80 <TIM_Base_SetConfig+0xf8>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a12      	ldr	r2, [pc, #72]	; (8009dac <TIM_Base_SetConfig+0x124>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d00b      	beq.n	8009d80 <TIM_Base_SetConfig+0xf8>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a11      	ldr	r2, [pc, #68]	; (8009db0 <TIM_Base_SetConfig+0x128>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d007      	beq.n	8009d80 <TIM_Base_SetConfig+0xf8>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a10      	ldr	r2, [pc, #64]	; (8009db4 <TIM_Base_SetConfig+0x12c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d003      	beq.n	8009d80 <TIM_Base_SetConfig+0xf8>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a0f      	ldr	r2, [pc, #60]	; (8009db8 <TIM_Base_SetConfig+0x130>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d103      	bne.n	8009d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	691a      	ldr	r2, [r3, #16]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	615a      	str	r2, [r3, #20]
}
 8009d8e:	bf00      	nop
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	40010000 	.word	0x40010000
 8009da0:	40000400 	.word	0x40000400
 8009da4:	40000800 	.word	0x40000800
 8009da8:	40000c00 	.word	0x40000c00
 8009dac:	40010400 	.word	0x40010400
 8009db0:	40014000 	.word	0x40014000
 8009db4:	40014400 	.word	0x40014400
 8009db8:	40014800 	.word	0x40014800

08009dbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	f023 0201 	bic.w	r2, r3, #1
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	4b37      	ldr	r3, [pc, #220]	; (8009ec4 <TIM_OC1_SetConfig+0x108>)
 8009de8:	4013      	ands	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f023 0303 	bic.w	r3, r3, #3
 8009df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f023 0302 	bic.w	r3, r3, #2
 8009e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	697a      	ldr	r2, [r7, #20]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a2d      	ldr	r2, [pc, #180]	; (8009ec8 <TIM_OC1_SetConfig+0x10c>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d00f      	beq.n	8009e38 <TIM_OC1_SetConfig+0x7c>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a2c      	ldr	r2, [pc, #176]	; (8009ecc <TIM_OC1_SetConfig+0x110>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d00b      	beq.n	8009e38 <TIM_OC1_SetConfig+0x7c>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a2b      	ldr	r2, [pc, #172]	; (8009ed0 <TIM_OC1_SetConfig+0x114>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d007      	beq.n	8009e38 <TIM_OC1_SetConfig+0x7c>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a2a      	ldr	r2, [pc, #168]	; (8009ed4 <TIM_OC1_SetConfig+0x118>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d003      	beq.n	8009e38 <TIM_OC1_SetConfig+0x7c>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a29      	ldr	r2, [pc, #164]	; (8009ed8 <TIM_OC1_SetConfig+0x11c>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d10c      	bne.n	8009e52 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	f023 0308 	bic.w	r3, r3, #8
 8009e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	697a      	ldr	r2, [r7, #20]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f023 0304 	bic.w	r3, r3, #4
 8009e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a1c      	ldr	r2, [pc, #112]	; (8009ec8 <TIM_OC1_SetConfig+0x10c>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d00f      	beq.n	8009e7a <TIM_OC1_SetConfig+0xbe>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a1b      	ldr	r2, [pc, #108]	; (8009ecc <TIM_OC1_SetConfig+0x110>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d00b      	beq.n	8009e7a <TIM_OC1_SetConfig+0xbe>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a1a      	ldr	r2, [pc, #104]	; (8009ed0 <TIM_OC1_SetConfig+0x114>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d007      	beq.n	8009e7a <TIM_OC1_SetConfig+0xbe>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a19      	ldr	r2, [pc, #100]	; (8009ed4 <TIM_OC1_SetConfig+0x118>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d003      	beq.n	8009e7a <TIM_OC1_SetConfig+0xbe>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a18      	ldr	r2, [pc, #96]	; (8009ed8 <TIM_OC1_SetConfig+0x11c>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d111      	bne.n	8009e9e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	695b      	ldr	r3, [r3, #20]
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	685a      	ldr	r2, [r3, #4]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	697a      	ldr	r2, [r7, #20]
 8009eb6:	621a      	str	r2, [r3, #32]
}
 8009eb8:	bf00      	nop
 8009eba:	371c      	adds	r7, #28
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	fffeff8f 	.word	0xfffeff8f
 8009ec8:	40010000 	.word	0x40010000
 8009ecc:	40010400 	.word	0x40010400
 8009ed0:	40014000 	.word	0x40014000
 8009ed4:	40014400 	.word	0x40014400
 8009ed8:	40014800 	.word	0x40014800

08009edc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b087      	sub	sp, #28
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	f023 0210 	bic.w	r2, r3, #16
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	4b34      	ldr	r3, [pc, #208]	; (8009fd8 <TIM_OC2_SetConfig+0xfc>)
 8009f08:	4013      	ands	r3, r2
 8009f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	021b      	lsls	r3, r3, #8
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	f023 0320 	bic.w	r3, r3, #32
 8009f26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	011b      	lsls	r3, r3, #4
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a29      	ldr	r2, [pc, #164]	; (8009fdc <TIM_OC2_SetConfig+0x100>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d003      	beq.n	8009f44 <TIM_OC2_SetConfig+0x68>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4a28      	ldr	r2, [pc, #160]	; (8009fe0 <TIM_OC2_SetConfig+0x104>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d10d      	bne.n	8009f60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	011b      	lsls	r3, r3, #4
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a1e      	ldr	r2, [pc, #120]	; (8009fdc <TIM_OC2_SetConfig+0x100>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d00f      	beq.n	8009f88 <TIM_OC2_SetConfig+0xac>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a1d      	ldr	r2, [pc, #116]	; (8009fe0 <TIM_OC2_SetConfig+0x104>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d00b      	beq.n	8009f88 <TIM_OC2_SetConfig+0xac>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a1c      	ldr	r2, [pc, #112]	; (8009fe4 <TIM_OC2_SetConfig+0x108>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d007      	beq.n	8009f88 <TIM_OC2_SetConfig+0xac>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a1b      	ldr	r2, [pc, #108]	; (8009fe8 <TIM_OC2_SetConfig+0x10c>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d003      	beq.n	8009f88 <TIM_OC2_SetConfig+0xac>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a1a      	ldr	r2, [pc, #104]	; (8009fec <TIM_OC2_SetConfig+0x110>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d113      	bne.n	8009fb0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	695b      	ldr	r3, [r3, #20]
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	621a      	str	r2, [r3, #32]
}
 8009fca:	bf00      	nop
 8009fcc:	371c      	adds	r7, #28
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	feff8fff 	.word	0xfeff8fff
 8009fdc:	40010000 	.word	0x40010000
 8009fe0:	40010400 	.word	0x40010400
 8009fe4:	40014000 	.word	0x40014000
 8009fe8:	40014400 	.word	0x40014400
 8009fec:	40014800 	.word	0x40014800

08009ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	69db      	ldr	r3, [r3, #28]
 800a016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	4b33      	ldr	r3, [pc, #204]	; (800a0e8 <TIM_OC3_SetConfig+0xf8>)
 800a01c:	4013      	ands	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f023 0303 	bic.w	r3, r3, #3
 800a026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	4313      	orrs	r3, r2
 800a030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	021b      	lsls	r3, r3, #8
 800a040:	697a      	ldr	r2, [r7, #20]
 800a042:	4313      	orrs	r3, r2
 800a044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a28      	ldr	r2, [pc, #160]	; (800a0ec <TIM_OC3_SetConfig+0xfc>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d003      	beq.n	800a056 <TIM_OC3_SetConfig+0x66>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a27      	ldr	r2, [pc, #156]	; (800a0f0 <TIM_OC3_SetConfig+0x100>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d10d      	bne.n	800a072 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a05c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	021b      	lsls	r3, r3, #8
 800a064:	697a      	ldr	r2, [r7, #20]
 800a066:	4313      	orrs	r3, r2
 800a068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a1d      	ldr	r2, [pc, #116]	; (800a0ec <TIM_OC3_SetConfig+0xfc>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d00f      	beq.n	800a09a <TIM_OC3_SetConfig+0xaa>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a1c      	ldr	r2, [pc, #112]	; (800a0f0 <TIM_OC3_SetConfig+0x100>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d00b      	beq.n	800a09a <TIM_OC3_SetConfig+0xaa>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a1b      	ldr	r2, [pc, #108]	; (800a0f4 <TIM_OC3_SetConfig+0x104>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d007      	beq.n	800a09a <TIM_OC3_SetConfig+0xaa>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a1a      	ldr	r2, [pc, #104]	; (800a0f8 <TIM_OC3_SetConfig+0x108>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d003      	beq.n	800a09a <TIM_OC3_SetConfig+0xaa>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a19      	ldr	r2, [pc, #100]	; (800a0fc <TIM_OC3_SetConfig+0x10c>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d113      	bne.n	800a0c2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	011b      	lsls	r3, r3, #4
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	011b      	lsls	r3, r3, #4
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	685a      	ldr	r2, [r3, #4]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	697a      	ldr	r2, [r7, #20]
 800a0da:	621a      	str	r2, [r3, #32]
}
 800a0dc:	bf00      	nop
 800a0de:	371c      	adds	r7, #28
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr
 800a0e8:	fffeff8f 	.word	0xfffeff8f
 800a0ec:	40010000 	.word	0x40010000
 800a0f0:	40010400 	.word	0x40010400
 800a0f4:	40014000 	.word	0x40014000
 800a0f8:	40014400 	.word	0x40014400
 800a0fc:	40014800 	.word	0x40014800

0800a100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a100:	b480      	push	{r7}
 800a102:	b087      	sub	sp, #28
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a1b      	ldr	r3, [r3, #32]
 800a10e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	69db      	ldr	r3, [r3, #28]
 800a126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	4b24      	ldr	r3, [pc, #144]	; (800a1bc <TIM_OC4_SetConfig+0xbc>)
 800a12c:	4013      	ands	r3, r2
 800a12e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	021b      	lsls	r3, r3, #8
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	4313      	orrs	r3, r2
 800a142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a14a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	031b      	lsls	r3, r3, #12
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	4313      	orrs	r3, r2
 800a156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a19      	ldr	r2, [pc, #100]	; (800a1c0 <TIM_OC4_SetConfig+0xc0>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d00f      	beq.n	800a180 <TIM_OC4_SetConfig+0x80>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a18      	ldr	r2, [pc, #96]	; (800a1c4 <TIM_OC4_SetConfig+0xc4>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d00b      	beq.n	800a180 <TIM_OC4_SetConfig+0x80>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a17      	ldr	r2, [pc, #92]	; (800a1c8 <TIM_OC4_SetConfig+0xc8>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d007      	beq.n	800a180 <TIM_OC4_SetConfig+0x80>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a16      	ldr	r2, [pc, #88]	; (800a1cc <TIM_OC4_SetConfig+0xcc>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d003      	beq.n	800a180 <TIM_OC4_SetConfig+0x80>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a15      	ldr	r2, [pc, #84]	; (800a1d0 <TIM_OC4_SetConfig+0xd0>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d109      	bne.n	800a194 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	695b      	ldr	r3, [r3, #20]
 800a18c:	019b      	lsls	r3, r3, #6
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	4313      	orrs	r3, r2
 800a192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	697a      	ldr	r2, [r7, #20]
 800a198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	621a      	str	r2, [r3, #32]
}
 800a1ae:	bf00      	nop
 800a1b0:	371c      	adds	r7, #28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	feff8fff 	.word	0xfeff8fff
 800a1c0:	40010000 	.word	0x40010000
 800a1c4:	40010400 	.word	0x40010400
 800a1c8:	40014000 	.word	0x40014000
 800a1cc:	40014400 	.word	0x40014400
 800a1d0:	40014800 	.word	0x40014800

0800a1d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a1b      	ldr	r3, [r3, #32]
 800a1e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a1b      	ldr	r3, [r3, #32]
 800a1ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	4b21      	ldr	r3, [pc, #132]	; (800a284 <TIM_OC5_SetConfig+0xb0>)
 800a200:	4013      	ands	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a214:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	041b      	lsls	r3, r3, #16
 800a21c:	693a      	ldr	r2, [r7, #16]
 800a21e:	4313      	orrs	r3, r2
 800a220:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a18      	ldr	r2, [pc, #96]	; (800a288 <TIM_OC5_SetConfig+0xb4>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d00f      	beq.n	800a24a <TIM_OC5_SetConfig+0x76>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a17      	ldr	r2, [pc, #92]	; (800a28c <TIM_OC5_SetConfig+0xb8>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d00b      	beq.n	800a24a <TIM_OC5_SetConfig+0x76>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a16      	ldr	r2, [pc, #88]	; (800a290 <TIM_OC5_SetConfig+0xbc>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d007      	beq.n	800a24a <TIM_OC5_SetConfig+0x76>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a15      	ldr	r2, [pc, #84]	; (800a294 <TIM_OC5_SetConfig+0xc0>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d003      	beq.n	800a24a <TIM_OC5_SetConfig+0x76>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a14      	ldr	r2, [pc, #80]	; (800a298 <TIM_OC5_SetConfig+0xc4>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d109      	bne.n	800a25e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a250:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	021b      	lsls	r3, r3, #8
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	697a      	ldr	r2, [r7, #20]
 800a262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	621a      	str	r2, [r3, #32]
}
 800a278:	bf00      	nop
 800a27a:	371c      	adds	r7, #28
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	fffeff8f 	.word	0xfffeff8f
 800a288:	40010000 	.word	0x40010000
 800a28c:	40010400 	.word	0x40010400
 800a290:	40014000 	.word	0x40014000
 800a294:	40014400 	.word	0x40014400
 800a298:	40014800 	.word	0x40014800

0800a29c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b087      	sub	sp, #28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	4b22      	ldr	r3, [pc, #136]	; (800a350 <TIM_OC6_SetConfig+0xb4>)
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	021b      	lsls	r3, r3, #8
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	051b      	lsls	r3, r3, #20
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a19      	ldr	r2, [pc, #100]	; (800a354 <TIM_OC6_SetConfig+0xb8>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d00f      	beq.n	800a314 <TIM_OC6_SetConfig+0x78>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a18      	ldr	r2, [pc, #96]	; (800a358 <TIM_OC6_SetConfig+0xbc>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d00b      	beq.n	800a314 <TIM_OC6_SetConfig+0x78>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a17      	ldr	r2, [pc, #92]	; (800a35c <TIM_OC6_SetConfig+0xc0>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d007      	beq.n	800a314 <TIM_OC6_SetConfig+0x78>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a16      	ldr	r2, [pc, #88]	; (800a360 <TIM_OC6_SetConfig+0xc4>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d003      	beq.n	800a314 <TIM_OC6_SetConfig+0x78>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a15      	ldr	r2, [pc, #84]	; (800a364 <TIM_OC6_SetConfig+0xc8>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d109      	bne.n	800a328 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a31a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	029b      	lsls	r3, r3, #10
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	4313      	orrs	r3, r2
 800a326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	621a      	str	r2, [r3, #32]
}
 800a342:	bf00      	nop
 800a344:	371c      	adds	r7, #28
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	feff8fff 	.word	0xfeff8fff
 800a354:	40010000 	.word	0x40010000
 800a358:	40010400 	.word	0x40010400
 800a35c:	40014000 	.word	0x40014000
 800a360:	40014400 	.word	0x40014400
 800a364:	40014800 	.word	0x40014800

0800a368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a368:	b480      	push	{r7}
 800a36a:	b087      	sub	sp, #28
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6a1b      	ldr	r3, [r3, #32]
 800a378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	f023 0201 	bic.w	r2, r3, #1
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	011b      	lsls	r3, r3, #4
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f023 030a 	bic.w	r3, r3, #10
 800a3a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	621a      	str	r2, [r3, #32]
}
 800a3ba:	bf00      	nop
 800a3bc:	371c      	adds	r7, #28
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b087      	sub	sp, #28
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	f023 0210 	bic.w	r2, r3, #16
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6a1b      	ldr	r3, [r3, #32]
 800a3e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	031b      	lsls	r3, r3, #12
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a402:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	011b      	lsls	r3, r3, #4
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	697a      	ldr	r2, [r7, #20]
 800a412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	693a      	ldr	r2, [r7, #16]
 800a418:	621a      	str	r2, [r3, #32]
}
 800a41a:	bf00      	nop
 800a41c:	371c      	adds	r7, #28
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
	...

0800a428 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	4b09      	ldr	r3, [pc, #36]	; (800a460 <TIM_ITRx_SetConfig+0x38>)
 800a43c:	4013      	ands	r3, r2
 800a43e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	4313      	orrs	r3, r2
 800a446:	f043 0307 	orr.w	r3, r3, #7
 800a44a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	609a      	str	r2, [r3, #8]
}
 800a452:	bf00      	nop
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	ffcfff8f 	.word	0xffcfff8f

0800a464 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a464:	b480      	push	{r7}
 800a466:	b087      	sub	sp, #28
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
 800a470:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a47e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	021a      	lsls	r2, r3, #8
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	431a      	orrs	r2, r3
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	697a      	ldr	r2, [r7, #20]
 800a48e:	4313      	orrs	r3, r2
 800a490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	697a      	ldr	r2, [r7, #20]
 800a496:	609a      	str	r2, [r3, #8]
}
 800a498:	bf00      	nop
 800a49a:	371c      	adds	r7, #28
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	f003 031f 	and.w	r3, r3, #31
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6a1a      	ldr	r2, [r3, #32]
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	43db      	mvns	r3, r3
 800a4c6:	401a      	ands	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6a1a      	ldr	r2, [r3, #32]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	f003 031f 	and.w	r3, r3, #31
 800a4d6:	6879      	ldr	r1, [r7, #4]
 800a4d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	621a      	str	r2, [r3, #32]
}
 800a4e2:	bf00      	nop
 800a4e4:	371c      	adds	r7, #28
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
	...

0800a4f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a500:	2b01      	cmp	r3, #1
 800a502:	d101      	bne.n	800a508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a504:	2302      	movs	r3, #2
 800a506:	e06d      	b.n	800a5e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2202      	movs	r2, #2
 800a514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a30      	ldr	r2, [pc, #192]	; (800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d004      	beq.n	800a53c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a2f      	ldr	r2, [pc, #188]	; (800a5f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d108      	bne.n	800a54e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a542:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a554:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a20      	ldr	r2, [pc, #128]	; (800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d022      	beq.n	800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a57a:	d01d      	beq.n	800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a1d      	ldr	r2, [pc, #116]	; (800a5f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d018      	beq.n	800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a1c      	ldr	r2, [pc, #112]	; (800a5fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d013      	beq.n	800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a1a      	ldr	r2, [pc, #104]	; (800a600 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d00e      	beq.n	800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a15      	ldr	r2, [pc, #84]	; (800a5f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d009      	beq.n	800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a16      	ldr	r2, [pc, #88]	; (800a604 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d004      	beq.n	800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a15      	ldr	r2, [pc, #84]	; (800a608 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d10c      	bne.n	800a5d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	40010000 	.word	0x40010000
 800a5f4:	40010400 	.word	0x40010400
 800a5f8:	40000400 	.word	0x40000400
 800a5fc:	40000800 	.word	0x40000800
 800a600:	40000c00 	.word	0x40000c00
 800a604:	40001800 	.word	0x40001800
 800a608:	40014000 	.word	0x40014000

0800a60c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a616:	2300      	movs	r3, #0
 800a618:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a620:	2b01      	cmp	r3, #1
 800a622:	d101      	bne.n	800a628 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a624:	2302      	movs	r3, #2
 800a626:	e065      	b.n	800a6f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	4313      	orrs	r3, r2
 800a64a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	4313      	orrs	r3, r2
 800a658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4313      	orrs	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	4313      	orrs	r3, r2
 800a674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	695b      	ldr	r3, [r3, #20]
 800a680:	4313      	orrs	r3, r2
 800a682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68e:	4313      	orrs	r3, r2
 800a690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	041b      	lsls	r3, r3, #16
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a16      	ldr	r2, [pc, #88]	; (800a700 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d004      	beq.n	800a6b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a14      	ldr	r2, [pc, #80]	; (800a704 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d115      	bne.n	800a6e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c0:	051b      	lsls	r3, r3, #20
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	6a1b      	ldr	r3, [r3, #32]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr
 800a700:	40010000 	.word	0x40010000
 800a704:	40010400 	.word	0x40010400

0800a708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a724:	bf00      	nop
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d101      	bne.n	800a756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	e042      	b.n	800a7dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d106      	bne.n	800a76e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f7f8 fd87 	bl	800327c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2224      	movs	r2, #36	; 0x24
 800a772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f022 0201 	bic.w	r2, r2, #1
 800a784:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f82c 	bl	800a7e4 <UART_SetConfig>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d101      	bne.n	800a796 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	e022      	b.n	800a7dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d002      	beq.n	800a7a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fd88 	bl	800b2b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	685a      	ldr	r2, [r3, #4]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	689a      	ldr	r2, [r3, #8]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f042 0201 	orr.w	r2, r2, #1
 800a7d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fe0f 	bl	800b3f8 <UART_CheckIdleState>
 800a7da:	4603      	mov	r3, r0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7e8:	b092      	sub	sp, #72	; 0x48
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	689a      	ldr	r2, [r3, #8]
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	431a      	orrs	r2, r3
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	431a      	orrs	r2, r3
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	4313      	orrs	r3, r2
 800a80a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	4bbe      	ldr	r3, [pc, #760]	; (800ab0c <UART_SetConfig+0x328>)
 800a814:	4013      	ands	r3, r2
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	6812      	ldr	r2, [r2, #0]
 800a81a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a81c:	430b      	orrs	r3, r1
 800a81e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	68da      	ldr	r2, [r3, #12]
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4ab3      	ldr	r2, [pc, #716]	; (800ab10 <UART_SetConfig+0x32c>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d004      	beq.n	800a850 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a84c:	4313      	orrs	r3, r2
 800a84e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	689a      	ldr	r2, [r3, #8]
 800a856:	4baf      	ldr	r3, [pc, #700]	; (800ab14 <UART_SetConfig+0x330>)
 800a858:	4013      	ands	r3, r2
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	6812      	ldr	r2, [r2, #0]
 800a85e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a860:	430b      	orrs	r3, r1
 800a862:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86a:	f023 010f 	bic.w	r1, r3, #15
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	430a      	orrs	r2, r1
 800a878:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4aa6      	ldr	r2, [pc, #664]	; (800ab18 <UART_SetConfig+0x334>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d177      	bne.n	800a974 <UART_SetConfig+0x190>
 800a884:	4ba5      	ldr	r3, [pc, #660]	; (800ab1c <UART_SetConfig+0x338>)
 800a886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a888:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a88c:	2b28      	cmp	r3, #40	; 0x28
 800a88e:	d86d      	bhi.n	800a96c <UART_SetConfig+0x188>
 800a890:	a201      	add	r2, pc, #4	; (adr r2, 800a898 <UART_SetConfig+0xb4>)
 800a892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a896:	bf00      	nop
 800a898:	0800a93d 	.word	0x0800a93d
 800a89c:	0800a96d 	.word	0x0800a96d
 800a8a0:	0800a96d 	.word	0x0800a96d
 800a8a4:	0800a96d 	.word	0x0800a96d
 800a8a8:	0800a96d 	.word	0x0800a96d
 800a8ac:	0800a96d 	.word	0x0800a96d
 800a8b0:	0800a96d 	.word	0x0800a96d
 800a8b4:	0800a96d 	.word	0x0800a96d
 800a8b8:	0800a945 	.word	0x0800a945
 800a8bc:	0800a96d 	.word	0x0800a96d
 800a8c0:	0800a96d 	.word	0x0800a96d
 800a8c4:	0800a96d 	.word	0x0800a96d
 800a8c8:	0800a96d 	.word	0x0800a96d
 800a8cc:	0800a96d 	.word	0x0800a96d
 800a8d0:	0800a96d 	.word	0x0800a96d
 800a8d4:	0800a96d 	.word	0x0800a96d
 800a8d8:	0800a94d 	.word	0x0800a94d
 800a8dc:	0800a96d 	.word	0x0800a96d
 800a8e0:	0800a96d 	.word	0x0800a96d
 800a8e4:	0800a96d 	.word	0x0800a96d
 800a8e8:	0800a96d 	.word	0x0800a96d
 800a8ec:	0800a96d 	.word	0x0800a96d
 800a8f0:	0800a96d 	.word	0x0800a96d
 800a8f4:	0800a96d 	.word	0x0800a96d
 800a8f8:	0800a955 	.word	0x0800a955
 800a8fc:	0800a96d 	.word	0x0800a96d
 800a900:	0800a96d 	.word	0x0800a96d
 800a904:	0800a96d 	.word	0x0800a96d
 800a908:	0800a96d 	.word	0x0800a96d
 800a90c:	0800a96d 	.word	0x0800a96d
 800a910:	0800a96d 	.word	0x0800a96d
 800a914:	0800a96d 	.word	0x0800a96d
 800a918:	0800a95d 	.word	0x0800a95d
 800a91c:	0800a96d 	.word	0x0800a96d
 800a920:	0800a96d 	.word	0x0800a96d
 800a924:	0800a96d 	.word	0x0800a96d
 800a928:	0800a96d 	.word	0x0800a96d
 800a92c:	0800a96d 	.word	0x0800a96d
 800a930:	0800a96d 	.word	0x0800a96d
 800a934:	0800a96d 	.word	0x0800a96d
 800a938:	0800a965 	.word	0x0800a965
 800a93c:	2301      	movs	r3, #1
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a942:	e222      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a944:	2304      	movs	r3, #4
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94a:	e21e      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a94c:	2308      	movs	r3, #8
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a952:	e21a      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a954:	2310      	movs	r3, #16
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a95a:	e216      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a95c:	2320      	movs	r3, #32
 800a95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a962:	e212      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a964:	2340      	movs	r3, #64	; 0x40
 800a966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a96a:	e20e      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a96c:	2380      	movs	r3, #128	; 0x80
 800a96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a972:	e20a      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a69      	ldr	r2, [pc, #420]	; (800ab20 <UART_SetConfig+0x33c>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d130      	bne.n	800a9e0 <UART_SetConfig+0x1fc>
 800a97e:	4b67      	ldr	r3, [pc, #412]	; (800ab1c <UART_SetConfig+0x338>)
 800a980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a982:	f003 0307 	and.w	r3, r3, #7
 800a986:	2b05      	cmp	r3, #5
 800a988:	d826      	bhi.n	800a9d8 <UART_SetConfig+0x1f4>
 800a98a:	a201      	add	r2, pc, #4	; (adr r2, 800a990 <UART_SetConfig+0x1ac>)
 800a98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a990:	0800a9a9 	.word	0x0800a9a9
 800a994:	0800a9b1 	.word	0x0800a9b1
 800a998:	0800a9b9 	.word	0x0800a9b9
 800a99c:	0800a9c1 	.word	0x0800a9c1
 800a9a0:	0800a9c9 	.word	0x0800a9c9
 800a9a4:	0800a9d1 	.word	0x0800a9d1
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ae:	e1ec      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a9b0:	2304      	movs	r3, #4
 800a9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9b6:	e1e8      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a9b8:	2308      	movs	r3, #8
 800a9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9be:	e1e4      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a9c0:	2310      	movs	r3, #16
 800a9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9c6:	e1e0      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a9c8:	2320      	movs	r3, #32
 800a9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ce:	e1dc      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a9d0:	2340      	movs	r3, #64	; 0x40
 800a9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9d6:	e1d8      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a9d8:	2380      	movs	r3, #128	; 0x80
 800a9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9de:	e1d4      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a4f      	ldr	r2, [pc, #316]	; (800ab24 <UART_SetConfig+0x340>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d130      	bne.n	800aa4c <UART_SetConfig+0x268>
 800a9ea:	4b4c      	ldr	r3, [pc, #304]	; (800ab1c <UART_SetConfig+0x338>)
 800a9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ee:	f003 0307 	and.w	r3, r3, #7
 800a9f2:	2b05      	cmp	r3, #5
 800a9f4:	d826      	bhi.n	800aa44 <UART_SetConfig+0x260>
 800a9f6:	a201      	add	r2, pc, #4	; (adr r2, 800a9fc <UART_SetConfig+0x218>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa15 	.word	0x0800aa15
 800aa00:	0800aa1d 	.word	0x0800aa1d
 800aa04:	0800aa25 	.word	0x0800aa25
 800aa08:	0800aa2d 	.word	0x0800aa2d
 800aa0c:	0800aa35 	.word	0x0800aa35
 800aa10:	0800aa3d 	.word	0x0800aa3d
 800aa14:	2300      	movs	r3, #0
 800aa16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa1a:	e1b6      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa1c:	2304      	movs	r3, #4
 800aa1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa22:	e1b2      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa24:	2308      	movs	r3, #8
 800aa26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa2a:	e1ae      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa2c:	2310      	movs	r3, #16
 800aa2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa32:	e1aa      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa34:	2320      	movs	r3, #32
 800aa36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa3a:	e1a6      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa3c:	2340      	movs	r3, #64	; 0x40
 800aa3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa42:	e1a2      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa44:	2380      	movs	r3, #128	; 0x80
 800aa46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa4a:	e19e      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a35      	ldr	r2, [pc, #212]	; (800ab28 <UART_SetConfig+0x344>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d130      	bne.n	800aab8 <UART_SetConfig+0x2d4>
 800aa56:	4b31      	ldr	r3, [pc, #196]	; (800ab1c <UART_SetConfig+0x338>)
 800aa58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa5a:	f003 0307 	and.w	r3, r3, #7
 800aa5e:	2b05      	cmp	r3, #5
 800aa60:	d826      	bhi.n	800aab0 <UART_SetConfig+0x2cc>
 800aa62:	a201      	add	r2, pc, #4	; (adr r2, 800aa68 <UART_SetConfig+0x284>)
 800aa64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa68:	0800aa81 	.word	0x0800aa81
 800aa6c:	0800aa89 	.word	0x0800aa89
 800aa70:	0800aa91 	.word	0x0800aa91
 800aa74:	0800aa99 	.word	0x0800aa99
 800aa78:	0800aaa1 	.word	0x0800aaa1
 800aa7c:	0800aaa9 	.word	0x0800aaa9
 800aa80:	2300      	movs	r3, #0
 800aa82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa86:	e180      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa88:	2304      	movs	r3, #4
 800aa8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa8e:	e17c      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa90:	2308      	movs	r3, #8
 800aa92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa96:	e178      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa98:	2310      	movs	r3, #16
 800aa9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa9e:	e174      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aaa0:	2320      	movs	r3, #32
 800aaa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaa6:	e170      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aaa8:	2340      	movs	r3, #64	; 0x40
 800aaaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaae:	e16c      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aab0:	2380      	movs	r3, #128	; 0x80
 800aab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aab6:	e168      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a1b      	ldr	r2, [pc, #108]	; (800ab2c <UART_SetConfig+0x348>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d142      	bne.n	800ab48 <UART_SetConfig+0x364>
 800aac2:	4b16      	ldr	r3, [pc, #88]	; (800ab1c <UART_SetConfig+0x338>)
 800aac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aac6:	f003 0307 	and.w	r3, r3, #7
 800aaca:	2b05      	cmp	r3, #5
 800aacc:	d838      	bhi.n	800ab40 <UART_SetConfig+0x35c>
 800aace:	a201      	add	r2, pc, #4	; (adr r2, 800aad4 <UART_SetConfig+0x2f0>)
 800aad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad4:	0800aaed 	.word	0x0800aaed
 800aad8:	0800aaf5 	.word	0x0800aaf5
 800aadc:	0800aafd 	.word	0x0800aafd
 800aae0:	0800ab05 	.word	0x0800ab05
 800aae4:	0800ab31 	.word	0x0800ab31
 800aae8:	0800ab39 	.word	0x0800ab39
 800aaec:	2300      	movs	r3, #0
 800aaee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaf2:	e14a      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aaf4:	2304      	movs	r3, #4
 800aaf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aafa:	e146      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aafc:	2308      	movs	r3, #8
 800aafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab02:	e142      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ab04:	2310      	movs	r3, #16
 800ab06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab0a:	e13e      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ab0c:	cfff69f3 	.word	0xcfff69f3
 800ab10:	58000c00 	.word	0x58000c00
 800ab14:	11fff4ff 	.word	0x11fff4ff
 800ab18:	40011000 	.word	0x40011000
 800ab1c:	58024400 	.word	0x58024400
 800ab20:	40004400 	.word	0x40004400
 800ab24:	40004800 	.word	0x40004800
 800ab28:	40004c00 	.word	0x40004c00
 800ab2c:	40005000 	.word	0x40005000
 800ab30:	2320      	movs	r3, #32
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab36:	e128      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ab38:	2340      	movs	r3, #64	; 0x40
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab3e:	e124      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ab40:	2380      	movs	r3, #128	; 0x80
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab46:	e120      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4acb      	ldr	r2, [pc, #812]	; (800ae7c <UART_SetConfig+0x698>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d176      	bne.n	800ac40 <UART_SetConfig+0x45c>
 800ab52:	4bcb      	ldr	r3, [pc, #812]	; (800ae80 <UART_SetConfig+0x69c>)
 800ab54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab5a:	2b28      	cmp	r3, #40	; 0x28
 800ab5c:	d86c      	bhi.n	800ac38 <UART_SetConfig+0x454>
 800ab5e:	a201      	add	r2, pc, #4	; (adr r2, 800ab64 <UART_SetConfig+0x380>)
 800ab60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab64:	0800ac09 	.word	0x0800ac09
 800ab68:	0800ac39 	.word	0x0800ac39
 800ab6c:	0800ac39 	.word	0x0800ac39
 800ab70:	0800ac39 	.word	0x0800ac39
 800ab74:	0800ac39 	.word	0x0800ac39
 800ab78:	0800ac39 	.word	0x0800ac39
 800ab7c:	0800ac39 	.word	0x0800ac39
 800ab80:	0800ac39 	.word	0x0800ac39
 800ab84:	0800ac11 	.word	0x0800ac11
 800ab88:	0800ac39 	.word	0x0800ac39
 800ab8c:	0800ac39 	.word	0x0800ac39
 800ab90:	0800ac39 	.word	0x0800ac39
 800ab94:	0800ac39 	.word	0x0800ac39
 800ab98:	0800ac39 	.word	0x0800ac39
 800ab9c:	0800ac39 	.word	0x0800ac39
 800aba0:	0800ac39 	.word	0x0800ac39
 800aba4:	0800ac19 	.word	0x0800ac19
 800aba8:	0800ac39 	.word	0x0800ac39
 800abac:	0800ac39 	.word	0x0800ac39
 800abb0:	0800ac39 	.word	0x0800ac39
 800abb4:	0800ac39 	.word	0x0800ac39
 800abb8:	0800ac39 	.word	0x0800ac39
 800abbc:	0800ac39 	.word	0x0800ac39
 800abc0:	0800ac39 	.word	0x0800ac39
 800abc4:	0800ac21 	.word	0x0800ac21
 800abc8:	0800ac39 	.word	0x0800ac39
 800abcc:	0800ac39 	.word	0x0800ac39
 800abd0:	0800ac39 	.word	0x0800ac39
 800abd4:	0800ac39 	.word	0x0800ac39
 800abd8:	0800ac39 	.word	0x0800ac39
 800abdc:	0800ac39 	.word	0x0800ac39
 800abe0:	0800ac39 	.word	0x0800ac39
 800abe4:	0800ac29 	.word	0x0800ac29
 800abe8:	0800ac39 	.word	0x0800ac39
 800abec:	0800ac39 	.word	0x0800ac39
 800abf0:	0800ac39 	.word	0x0800ac39
 800abf4:	0800ac39 	.word	0x0800ac39
 800abf8:	0800ac39 	.word	0x0800ac39
 800abfc:	0800ac39 	.word	0x0800ac39
 800ac00:	0800ac39 	.word	0x0800ac39
 800ac04:	0800ac31 	.word	0x0800ac31
 800ac08:	2301      	movs	r3, #1
 800ac0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac0e:	e0bc      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac10:	2304      	movs	r3, #4
 800ac12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac16:	e0b8      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac18:	2308      	movs	r3, #8
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac1e:	e0b4      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac20:	2310      	movs	r3, #16
 800ac22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac26:	e0b0      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac28:	2320      	movs	r3, #32
 800ac2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac2e:	e0ac      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac30:	2340      	movs	r3, #64	; 0x40
 800ac32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac36:	e0a8      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac38:	2380      	movs	r3, #128	; 0x80
 800ac3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac3e:	e0a4      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a8f      	ldr	r2, [pc, #572]	; (800ae84 <UART_SetConfig+0x6a0>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d130      	bne.n	800acac <UART_SetConfig+0x4c8>
 800ac4a:	4b8d      	ldr	r3, [pc, #564]	; (800ae80 <UART_SetConfig+0x69c>)
 800ac4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac4e:	f003 0307 	and.w	r3, r3, #7
 800ac52:	2b05      	cmp	r3, #5
 800ac54:	d826      	bhi.n	800aca4 <UART_SetConfig+0x4c0>
 800ac56:	a201      	add	r2, pc, #4	; (adr r2, 800ac5c <UART_SetConfig+0x478>)
 800ac58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5c:	0800ac75 	.word	0x0800ac75
 800ac60:	0800ac7d 	.word	0x0800ac7d
 800ac64:	0800ac85 	.word	0x0800ac85
 800ac68:	0800ac8d 	.word	0x0800ac8d
 800ac6c:	0800ac95 	.word	0x0800ac95
 800ac70:	0800ac9d 	.word	0x0800ac9d
 800ac74:	2300      	movs	r3, #0
 800ac76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac7a:	e086      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac7c:	2304      	movs	r3, #4
 800ac7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac82:	e082      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac84:	2308      	movs	r3, #8
 800ac86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac8a:	e07e      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac8c:	2310      	movs	r3, #16
 800ac8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac92:	e07a      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac94:	2320      	movs	r3, #32
 800ac96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac9a:	e076      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac9c:	2340      	movs	r3, #64	; 0x40
 800ac9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aca2:	e072      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aca4:	2380      	movs	r3, #128	; 0x80
 800aca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acaa:	e06e      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a75      	ldr	r2, [pc, #468]	; (800ae88 <UART_SetConfig+0x6a4>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d130      	bne.n	800ad18 <UART_SetConfig+0x534>
 800acb6:	4b72      	ldr	r3, [pc, #456]	; (800ae80 <UART_SetConfig+0x69c>)
 800acb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acba:	f003 0307 	and.w	r3, r3, #7
 800acbe:	2b05      	cmp	r3, #5
 800acc0:	d826      	bhi.n	800ad10 <UART_SetConfig+0x52c>
 800acc2:	a201      	add	r2, pc, #4	; (adr r2, 800acc8 <UART_SetConfig+0x4e4>)
 800acc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc8:	0800ace1 	.word	0x0800ace1
 800accc:	0800ace9 	.word	0x0800ace9
 800acd0:	0800acf1 	.word	0x0800acf1
 800acd4:	0800acf9 	.word	0x0800acf9
 800acd8:	0800ad01 	.word	0x0800ad01
 800acdc:	0800ad09 	.word	0x0800ad09
 800ace0:	2300      	movs	r3, #0
 800ace2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ace6:	e050      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ace8:	2304      	movs	r3, #4
 800acea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acee:	e04c      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800acf0:	2308      	movs	r3, #8
 800acf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acf6:	e048      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800acf8:	2310      	movs	r3, #16
 800acfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acfe:	e044      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad00:	2320      	movs	r3, #32
 800ad02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad06:	e040      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad08:	2340      	movs	r3, #64	; 0x40
 800ad0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad0e:	e03c      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad10:	2380      	movs	r3, #128	; 0x80
 800ad12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad16:	e038      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a5b      	ldr	r2, [pc, #364]	; (800ae8c <UART_SetConfig+0x6a8>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d130      	bne.n	800ad84 <UART_SetConfig+0x5a0>
 800ad22:	4b57      	ldr	r3, [pc, #348]	; (800ae80 <UART_SetConfig+0x69c>)
 800ad24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad26:	f003 0307 	and.w	r3, r3, #7
 800ad2a:	2b05      	cmp	r3, #5
 800ad2c:	d826      	bhi.n	800ad7c <UART_SetConfig+0x598>
 800ad2e:	a201      	add	r2, pc, #4	; (adr r2, 800ad34 <UART_SetConfig+0x550>)
 800ad30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad34:	0800ad4d 	.word	0x0800ad4d
 800ad38:	0800ad55 	.word	0x0800ad55
 800ad3c:	0800ad5d 	.word	0x0800ad5d
 800ad40:	0800ad65 	.word	0x0800ad65
 800ad44:	0800ad6d 	.word	0x0800ad6d
 800ad48:	0800ad75 	.word	0x0800ad75
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad52:	e01a      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad54:	2304      	movs	r3, #4
 800ad56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad5a:	e016      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad5c:	2308      	movs	r3, #8
 800ad5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad62:	e012      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad64:	2310      	movs	r3, #16
 800ad66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad6a:	e00e      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad6c:	2320      	movs	r3, #32
 800ad6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad72:	e00a      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad74:	2340      	movs	r3, #64	; 0x40
 800ad76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad7a:	e006      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad7c:	2380      	movs	r3, #128	; 0x80
 800ad7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad82:	e002      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad84:	2380      	movs	r3, #128	; 0x80
 800ad86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a3f      	ldr	r2, [pc, #252]	; (800ae8c <UART_SetConfig+0x6a8>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	f040 80f8 	bne.w	800af86 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ad96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad9a:	2b20      	cmp	r3, #32
 800ad9c:	dc46      	bgt.n	800ae2c <UART_SetConfig+0x648>
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	f2c0 8082 	blt.w	800aea8 <UART_SetConfig+0x6c4>
 800ada4:	3b02      	subs	r3, #2
 800ada6:	2b1e      	cmp	r3, #30
 800ada8:	d87e      	bhi.n	800aea8 <UART_SetConfig+0x6c4>
 800adaa:	a201      	add	r2, pc, #4	; (adr r2, 800adb0 <UART_SetConfig+0x5cc>)
 800adac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb0:	0800ae33 	.word	0x0800ae33
 800adb4:	0800aea9 	.word	0x0800aea9
 800adb8:	0800ae3b 	.word	0x0800ae3b
 800adbc:	0800aea9 	.word	0x0800aea9
 800adc0:	0800aea9 	.word	0x0800aea9
 800adc4:	0800aea9 	.word	0x0800aea9
 800adc8:	0800ae4b 	.word	0x0800ae4b
 800adcc:	0800aea9 	.word	0x0800aea9
 800add0:	0800aea9 	.word	0x0800aea9
 800add4:	0800aea9 	.word	0x0800aea9
 800add8:	0800aea9 	.word	0x0800aea9
 800addc:	0800aea9 	.word	0x0800aea9
 800ade0:	0800aea9 	.word	0x0800aea9
 800ade4:	0800aea9 	.word	0x0800aea9
 800ade8:	0800ae5b 	.word	0x0800ae5b
 800adec:	0800aea9 	.word	0x0800aea9
 800adf0:	0800aea9 	.word	0x0800aea9
 800adf4:	0800aea9 	.word	0x0800aea9
 800adf8:	0800aea9 	.word	0x0800aea9
 800adfc:	0800aea9 	.word	0x0800aea9
 800ae00:	0800aea9 	.word	0x0800aea9
 800ae04:	0800aea9 	.word	0x0800aea9
 800ae08:	0800aea9 	.word	0x0800aea9
 800ae0c:	0800aea9 	.word	0x0800aea9
 800ae10:	0800aea9 	.word	0x0800aea9
 800ae14:	0800aea9 	.word	0x0800aea9
 800ae18:	0800aea9 	.word	0x0800aea9
 800ae1c:	0800aea9 	.word	0x0800aea9
 800ae20:	0800aea9 	.word	0x0800aea9
 800ae24:	0800aea9 	.word	0x0800aea9
 800ae28:	0800ae9b 	.word	0x0800ae9b
 800ae2c:	2b40      	cmp	r3, #64	; 0x40
 800ae2e:	d037      	beq.n	800aea0 <UART_SetConfig+0x6bc>
 800ae30:	e03a      	b.n	800aea8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ae32:	f7fd fd37 	bl	80088a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800ae36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae38:	e03c      	b.n	800aeb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fd fd46 	bl	80088d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae48:	e034      	b.n	800aeb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae4a:	f107 0318 	add.w	r3, r7, #24
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fd fe92 	bl	8008b78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae58:	e02c      	b.n	800aeb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae5a:	4b09      	ldr	r3, [pc, #36]	; (800ae80 <UART_SetConfig+0x69c>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 0320 	and.w	r3, r3, #32
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d016      	beq.n	800ae94 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae66:	4b06      	ldr	r3, [pc, #24]	; (800ae80 <UART_SetConfig+0x69c>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	08db      	lsrs	r3, r3, #3
 800ae6c:	f003 0303 	and.w	r3, r3, #3
 800ae70:	4a07      	ldr	r2, [pc, #28]	; (800ae90 <UART_SetConfig+0x6ac>)
 800ae72:	fa22 f303 	lsr.w	r3, r2, r3
 800ae76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae78:	e01c      	b.n	800aeb4 <UART_SetConfig+0x6d0>
 800ae7a:	bf00      	nop
 800ae7c:	40011400 	.word	0x40011400
 800ae80:	58024400 	.word	0x58024400
 800ae84:	40007800 	.word	0x40007800
 800ae88:	40007c00 	.word	0x40007c00
 800ae8c:	58000c00 	.word	0x58000c00
 800ae90:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ae94:	4b9d      	ldr	r3, [pc, #628]	; (800b10c <UART_SetConfig+0x928>)
 800ae96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae98:	e00c      	b.n	800aeb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae9a:	4b9d      	ldr	r3, [pc, #628]	; (800b110 <UART_SetConfig+0x92c>)
 800ae9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae9e:	e009      	b.n	800aeb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aea6:	e005      	b.n	800aeb4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aeb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aeb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f000 81de 	beq.w	800b278 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec0:	4a94      	ldr	r2, [pc, #592]	; (800b114 <UART_SetConfig+0x930>)
 800aec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aec6:	461a      	mov	r2, r3
 800aec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeca:	fbb3 f3f2 	udiv	r3, r3, r2
 800aece:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	685a      	ldr	r2, [r3, #4]
 800aed4:	4613      	mov	r3, r2
 800aed6:	005b      	lsls	r3, r3, #1
 800aed8:	4413      	add	r3, r2
 800aeda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aedc:	429a      	cmp	r2, r3
 800aede:	d305      	bcc.n	800aeec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d903      	bls.n	800aef4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aef2:	e1c1      	b.n	800b278 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef6:	2200      	movs	r2, #0
 800aef8:	60bb      	str	r3, [r7, #8]
 800aefa:	60fa      	str	r2, [r7, #12]
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af00:	4a84      	ldr	r2, [pc, #528]	; (800b114 <UART_SetConfig+0x930>)
 800af02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af06:	b29b      	uxth	r3, r3
 800af08:	2200      	movs	r2, #0
 800af0a:	603b      	str	r3, [r7, #0]
 800af0c:	607a      	str	r2, [r7, #4]
 800af0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af16:	f7f5 f9e7 	bl	80002e8 <__aeabi_uldivmod>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	4610      	mov	r0, r2
 800af20:	4619      	mov	r1, r3
 800af22:	f04f 0200 	mov.w	r2, #0
 800af26:	f04f 0300 	mov.w	r3, #0
 800af2a:	020b      	lsls	r3, r1, #8
 800af2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af30:	0202      	lsls	r2, r0, #8
 800af32:	6979      	ldr	r1, [r7, #20]
 800af34:	6849      	ldr	r1, [r1, #4]
 800af36:	0849      	lsrs	r1, r1, #1
 800af38:	2000      	movs	r0, #0
 800af3a:	460c      	mov	r4, r1
 800af3c:	4605      	mov	r5, r0
 800af3e:	eb12 0804 	adds.w	r8, r2, r4
 800af42:	eb43 0905 	adc.w	r9, r3, r5
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	469a      	mov	sl, r3
 800af4e:	4693      	mov	fp, r2
 800af50:	4652      	mov	r2, sl
 800af52:	465b      	mov	r3, fp
 800af54:	4640      	mov	r0, r8
 800af56:	4649      	mov	r1, r9
 800af58:	f7f5 f9c6 	bl	80002e8 <__aeabi_uldivmod>
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	4613      	mov	r3, r2
 800af62:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af6a:	d308      	bcc.n	800af7e <UART_SetConfig+0x79a>
 800af6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af72:	d204      	bcs.n	800af7e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af7a:	60da      	str	r2, [r3, #12]
 800af7c:	e17c      	b.n	800b278 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800af84:	e178      	b.n	800b278 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	69db      	ldr	r3, [r3, #28]
 800af8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af8e:	f040 80c5 	bne.w	800b11c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800af92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800af96:	2b20      	cmp	r3, #32
 800af98:	dc48      	bgt.n	800b02c <UART_SetConfig+0x848>
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	db7b      	blt.n	800b096 <UART_SetConfig+0x8b2>
 800af9e:	2b20      	cmp	r3, #32
 800afa0:	d879      	bhi.n	800b096 <UART_SetConfig+0x8b2>
 800afa2:	a201      	add	r2, pc, #4	; (adr r2, 800afa8 <UART_SetConfig+0x7c4>)
 800afa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa8:	0800b033 	.word	0x0800b033
 800afac:	0800b03b 	.word	0x0800b03b
 800afb0:	0800b097 	.word	0x0800b097
 800afb4:	0800b097 	.word	0x0800b097
 800afb8:	0800b043 	.word	0x0800b043
 800afbc:	0800b097 	.word	0x0800b097
 800afc0:	0800b097 	.word	0x0800b097
 800afc4:	0800b097 	.word	0x0800b097
 800afc8:	0800b053 	.word	0x0800b053
 800afcc:	0800b097 	.word	0x0800b097
 800afd0:	0800b097 	.word	0x0800b097
 800afd4:	0800b097 	.word	0x0800b097
 800afd8:	0800b097 	.word	0x0800b097
 800afdc:	0800b097 	.word	0x0800b097
 800afe0:	0800b097 	.word	0x0800b097
 800afe4:	0800b097 	.word	0x0800b097
 800afe8:	0800b063 	.word	0x0800b063
 800afec:	0800b097 	.word	0x0800b097
 800aff0:	0800b097 	.word	0x0800b097
 800aff4:	0800b097 	.word	0x0800b097
 800aff8:	0800b097 	.word	0x0800b097
 800affc:	0800b097 	.word	0x0800b097
 800b000:	0800b097 	.word	0x0800b097
 800b004:	0800b097 	.word	0x0800b097
 800b008:	0800b097 	.word	0x0800b097
 800b00c:	0800b097 	.word	0x0800b097
 800b010:	0800b097 	.word	0x0800b097
 800b014:	0800b097 	.word	0x0800b097
 800b018:	0800b097 	.word	0x0800b097
 800b01c:	0800b097 	.word	0x0800b097
 800b020:	0800b097 	.word	0x0800b097
 800b024:	0800b097 	.word	0x0800b097
 800b028:	0800b089 	.word	0x0800b089
 800b02c:	2b40      	cmp	r3, #64	; 0x40
 800b02e:	d02e      	beq.n	800b08e <UART_SetConfig+0x8aa>
 800b030:	e031      	b.n	800b096 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b032:	f7fc fa01 	bl	8007438 <HAL_RCC_GetPCLK1Freq>
 800b036:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b038:	e033      	b.n	800b0a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b03a:	f7fc fa13 	bl	8007464 <HAL_RCC_GetPCLK2Freq>
 800b03e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b040:	e02f      	b.n	800b0a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b046:	4618      	mov	r0, r3
 800b048:	f7fd fc42 	bl	80088d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b050:	e027      	b.n	800b0a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b052:	f107 0318 	add.w	r3, r7, #24
 800b056:	4618      	mov	r0, r3
 800b058:	f7fd fd8e 	bl	8008b78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b060:	e01f      	b.n	800b0a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b062:	4b2d      	ldr	r3, [pc, #180]	; (800b118 <UART_SetConfig+0x934>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 0320 	and.w	r3, r3, #32
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d009      	beq.n	800b082 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b06e:	4b2a      	ldr	r3, [pc, #168]	; (800b118 <UART_SetConfig+0x934>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	08db      	lsrs	r3, r3, #3
 800b074:	f003 0303 	and.w	r3, r3, #3
 800b078:	4a24      	ldr	r2, [pc, #144]	; (800b10c <UART_SetConfig+0x928>)
 800b07a:	fa22 f303 	lsr.w	r3, r2, r3
 800b07e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b080:	e00f      	b.n	800b0a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b082:	4b22      	ldr	r3, [pc, #136]	; (800b10c <UART_SetConfig+0x928>)
 800b084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b086:	e00c      	b.n	800b0a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b088:	4b21      	ldr	r3, [pc, #132]	; (800b110 <UART_SetConfig+0x92c>)
 800b08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b08c:	e009      	b.n	800b0a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b08e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b094:	e005      	b.n	800b0a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b096:	2300      	movs	r3, #0
 800b098:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b0a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 80e7 	beq.w	800b278 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ae:	4a19      	ldr	r2, [pc, #100]	; (800b114 <UART_SetConfig+0x930>)
 800b0b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0bc:	005a      	lsls	r2, r3, #1
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	085b      	lsrs	r3, r3, #1
 800b0c4:	441a      	add	r2, r3
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d2:	2b0f      	cmp	r3, #15
 800b0d4:	d916      	bls.n	800b104 <UART_SetConfig+0x920>
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0dc:	d212      	bcs.n	800b104 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	f023 030f 	bic.w	r3, r3, #15
 800b0e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ea:	085b      	lsrs	r3, r3, #1
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	f003 0307 	and.w	r3, r3, #7
 800b0f2:	b29a      	uxth	r2, r3
 800b0f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b100:	60da      	str	r2, [r3, #12]
 800b102:	e0b9      	b.n	800b278 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b10a:	e0b5      	b.n	800b278 <UART_SetConfig+0xa94>
 800b10c:	03d09000 	.word	0x03d09000
 800b110:	003d0900 	.word	0x003d0900
 800b114:	08011758 	.word	0x08011758
 800b118:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b11c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b120:	2b20      	cmp	r3, #32
 800b122:	dc49      	bgt.n	800b1b8 <UART_SetConfig+0x9d4>
 800b124:	2b00      	cmp	r3, #0
 800b126:	db7c      	blt.n	800b222 <UART_SetConfig+0xa3e>
 800b128:	2b20      	cmp	r3, #32
 800b12a:	d87a      	bhi.n	800b222 <UART_SetConfig+0xa3e>
 800b12c:	a201      	add	r2, pc, #4	; (adr r2, 800b134 <UART_SetConfig+0x950>)
 800b12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b132:	bf00      	nop
 800b134:	0800b1bf 	.word	0x0800b1bf
 800b138:	0800b1c7 	.word	0x0800b1c7
 800b13c:	0800b223 	.word	0x0800b223
 800b140:	0800b223 	.word	0x0800b223
 800b144:	0800b1cf 	.word	0x0800b1cf
 800b148:	0800b223 	.word	0x0800b223
 800b14c:	0800b223 	.word	0x0800b223
 800b150:	0800b223 	.word	0x0800b223
 800b154:	0800b1df 	.word	0x0800b1df
 800b158:	0800b223 	.word	0x0800b223
 800b15c:	0800b223 	.word	0x0800b223
 800b160:	0800b223 	.word	0x0800b223
 800b164:	0800b223 	.word	0x0800b223
 800b168:	0800b223 	.word	0x0800b223
 800b16c:	0800b223 	.word	0x0800b223
 800b170:	0800b223 	.word	0x0800b223
 800b174:	0800b1ef 	.word	0x0800b1ef
 800b178:	0800b223 	.word	0x0800b223
 800b17c:	0800b223 	.word	0x0800b223
 800b180:	0800b223 	.word	0x0800b223
 800b184:	0800b223 	.word	0x0800b223
 800b188:	0800b223 	.word	0x0800b223
 800b18c:	0800b223 	.word	0x0800b223
 800b190:	0800b223 	.word	0x0800b223
 800b194:	0800b223 	.word	0x0800b223
 800b198:	0800b223 	.word	0x0800b223
 800b19c:	0800b223 	.word	0x0800b223
 800b1a0:	0800b223 	.word	0x0800b223
 800b1a4:	0800b223 	.word	0x0800b223
 800b1a8:	0800b223 	.word	0x0800b223
 800b1ac:	0800b223 	.word	0x0800b223
 800b1b0:	0800b223 	.word	0x0800b223
 800b1b4:	0800b215 	.word	0x0800b215
 800b1b8:	2b40      	cmp	r3, #64	; 0x40
 800b1ba:	d02e      	beq.n	800b21a <UART_SetConfig+0xa36>
 800b1bc:	e031      	b.n	800b222 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1be:	f7fc f93b 	bl	8007438 <HAL_RCC_GetPCLK1Freq>
 800b1c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1c4:	e033      	b.n	800b22e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1c6:	f7fc f94d 	bl	8007464 <HAL_RCC_GetPCLK2Freq>
 800b1ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1cc:	e02f      	b.n	800b22e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fd fb7c 	bl	80088d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1dc:	e027      	b.n	800b22e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1de:	f107 0318 	add.w	r3, r7, #24
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fd fcc8 	bl	8008b78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1ec:	e01f      	b.n	800b22e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1ee:	4b2d      	ldr	r3, [pc, #180]	; (800b2a4 <UART_SetConfig+0xac0>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 0320 	and.w	r3, r3, #32
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d009      	beq.n	800b20e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1fa:	4b2a      	ldr	r3, [pc, #168]	; (800b2a4 <UART_SetConfig+0xac0>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	08db      	lsrs	r3, r3, #3
 800b200:	f003 0303 	and.w	r3, r3, #3
 800b204:	4a28      	ldr	r2, [pc, #160]	; (800b2a8 <UART_SetConfig+0xac4>)
 800b206:	fa22 f303 	lsr.w	r3, r2, r3
 800b20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b20c:	e00f      	b.n	800b22e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b20e:	4b26      	ldr	r3, [pc, #152]	; (800b2a8 <UART_SetConfig+0xac4>)
 800b210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b212:	e00c      	b.n	800b22e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b214:	4b25      	ldr	r3, [pc, #148]	; (800b2ac <UART_SetConfig+0xac8>)
 800b216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b218:	e009      	b.n	800b22e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b21a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b220:	e005      	b.n	800b22e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b222:	2300      	movs	r3, #0
 800b224:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b22c:	bf00      	nop
    }

    if (pclk != 0U)
 800b22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b230:	2b00      	cmp	r3, #0
 800b232:	d021      	beq.n	800b278 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b238:	4a1d      	ldr	r2, [pc, #116]	; (800b2b0 <UART_SetConfig+0xacc>)
 800b23a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b23e:	461a      	mov	r2, r3
 800b240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b242:	fbb3 f2f2 	udiv	r2, r3, r2
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	085b      	lsrs	r3, r3, #1
 800b24c:	441a      	add	r2, r3
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	fbb2 f3f3 	udiv	r3, r2, r3
 800b256:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25a:	2b0f      	cmp	r3, #15
 800b25c:	d909      	bls.n	800b272 <UART_SetConfig+0xa8e>
 800b25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b264:	d205      	bcs.n	800b272 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b268:	b29a      	uxth	r2, r3
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	60da      	str	r2, [r3, #12]
 800b270:	e002      	b.n	800b278 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2201      	movs	r2, #1
 800b284:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2200      	movs	r2, #0
 800b28c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	2200      	movs	r2, #0
 800b292:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b294:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3748      	adds	r7, #72	; 0x48
 800b29c:	46bd      	mov	sp, r7
 800b29e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2a2:	bf00      	nop
 800b2a4:	58024400 	.word	0x58024400
 800b2a8:	03d09000 	.word	0x03d09000
 800b2ac:	003d0900 	.word	0x003d0900
 800b2b0:	08011758 	.word	0x08011758

0800b2b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c0:	f003 0301 	and.w	r3, r3, #1
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d00a      	beq.n	800b2de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	430a      	orrs	r2, r1
 800b2dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e2:	f003 0302 	and.w	r3, r3, #2
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00a      	beq.n	800b300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	430a      	orrs	r2, r1
 800b2fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b304:	f003 0304 	and.w	r3, r3, #4
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00a      	beq.n	800b322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	430a      	orrs	r2, r1
 800b320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b326:	f003 0308 	and.w	r3, r3, #8
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00a      	beq.n	800b344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	430a      	orrs	r2, r1
 800b342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b348:	f003 0310 	and.w	r3, r3, #16
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00a      	beq.n	800b366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	430a      	orrs	r2, r1
 800b364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36a:	f003 0320 	and.w	r3, r3, #32
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00a      	beq.n	800b388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	430a      	orrs	r2, r1
 800b386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b390:	2b00      	cmp	r3, #0
 800b392:	d01a      	beq.n	800b3ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3b2:	d10a      	bne.n	800b3ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	430a      	orrs	r2, r1
 800b3c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00a      	beq.n	800b3ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	430a      	orrs	r2, r1
 800b3ea:	605a      	str	r2, [r3, #4]
  }
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b098      	sub	sp, #96	; 0x60
 800b3fc:	af02      	add	r7, sp, #8
 800b3fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b408:	f7f8 f8a2 	bl	8003550 <HAL_GetTick>
 800b40c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 0308 	and.w	r3, r3, #8
 800b418:	2b08      	cmp	r3, #8
 800b41a:	d12f      	bne.n	800b47c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b41c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b424:	2200      	movs	r2, #0
 800b426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f88e 	bl	800b54c <UART_WaitOnFlagUntilTimeout>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d022      	beq.n	800b47c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43e:	e853 3f00 	ldrex	r3, [r3]
 800b442:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b44a:	653b      	str	r3, [r7, #80]	; 0x50
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	461a      	mov	r2, r3
 800b452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b454:	647b      	str	r3, [r7, #68]	; 0x44
 800b456:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b458:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b45a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b45c:	e841 2300 	strex	r3, r2, [r1]
 800b460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1e6      	bne.n	800b436 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2220      	movs	r2, #32
 800b46c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b478:	2303      	movs	r3, #3
 800b47a:	e063      	b.n	800b544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f003 0304 	and.w	r3, r3, #4
 800b486:	2b04      	cmp	r3, #4
 800b488:	d149      	bne.n	800b51e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b48a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b492:	2200      	movs	r2, #0
 800b494:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 f857 	bl	800b54c <UART_WaitOnFlagUntilTimeout>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d03c      	beq.n	800b51e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	e853 3f00 	ldrex	r3, [r3]
 800b4b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4c2:	633b      	str	r3, [r7, #48]	; 0x30
 800b4c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4ca:	e841 2300 	strex	r3, r2, [r1]
 800b4ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1e6      	bne.n	800b4a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3308      	adds	r3, #8
 800b4dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	e853 3f00 	ldrex	r3, [r3]
 800b4e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f023 0301 	bic.w	r3, r3, #1
 800b4ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3308      	adds	r3, #8
 800b4f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4f6:	61fa      	str	r2, [r7, #28]
 800b4f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fa:	69b9      	ldr	r1, [r7, #24]
 800b4fc:	69fa      	ldr	r2, [r7, #28]
 800b4fe:	e841 2300 	strex	r3, r2, [r1]
 800b502:	617b      	str	r3, [r7, #20]
   return(result);
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1e5      	bne.n	800b4d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2220      	movs	r2, #32
 800b50e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b51a:	2303      	movs	r3, #3
 800b51c:	e012      	b.n	800b544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2220      	movs	r2, #32
 800b522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2220      	movs	r2, #32
 800b52a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3758      	adds	r7, #88	; 0x58
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	603b      	str	r3, [r7, #0]
 800b558:	4613      	mov	r3, r2
 800b55a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b55c:	e049      	b.n	800b5f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b564:	d045      	beq.n	800b5f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b566:	f7f7 fff3 	bl	8003550 <HAL_GetTick>
 800b56a:	4602      	mov	r2, r0
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	69ba      	ldr	r2, [r7, #24]
 800b572:	429a      	cmp	r2, r3
 800b574:	d302      	bcc.n	800b57c <UART_WaitOnFlagUntilTimeout+0x30>
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b57c:	2303      	movs	r3, #3
 800b57e:	e048      	b.n	800b612 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 0304 	and.w	r3, r3, #4
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d031      	beq.n	800b5f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	69db      	ldr	r3, [r3, #28]
 800b594:	f003 0308 	and.w	r3, r3, #8
 800b598:	2b08      	cmp	r3, #8
 800b59a:	d110      	bne.n	800b5be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2208      	movs	r2, #8
 800b5a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f000 f839 	bl	800b61c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2208      	movs	r2, #8
 800b5ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e029      	b.n	800b612 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	69db      	ldr	r3, [r3, #28]
 800b5c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5cc:	d111      	bne.n	800b5f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b5d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f000 f81f 	bl	800b61c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2220      	movs	r2, #32
 800b5e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b5ee:	2303      	movs	r3, #3
 800b5f0:	e00f      	b.n	800b612 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	69da      	ldr	r2, [r3, #28]
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	bf0c      	ite	eq
 800b602:	2301      	moveq	r3, #1
 800b604:	2300      	movne	r3, #0
 800b606:	b2db      	uxtb	r3, r3
 800b608:	461a      	mov	r2, r3
 800b60a:	79fb      	ldrb	r3, [r7, #7]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d0a6      	beq.n	800b55e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
	...

0800b61c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b095      	sub	sp, #84	; 0x54
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b62c:	e853 3f00 	ldrex	r3, [r3]
 800b630:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b638:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	461a      	mov	r2, r3
 800b640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b642:	643b      	str	r3, [r7, #64]	; 0x40
 800b644:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b646:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b64a:	e841 2300 	strex	r3, r2, [r1]
 800b64e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1e6      	bne.n	800b624 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	3308      	adds	r3, #8
 800b65c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65e:	6a3b      	ldr	r3, [r7, #32]
 800b660:	e853 3f00 	ldrex	r3, [r3]
 800b664:	61fb      	str	r3, [r7, #28]
   return(result);
 800b666:	69fa      	ldr	r2, [r7, #28]
 800b668:	4b1e      	ldr	r3, [pc, #120]	; (800b6e4 <UART_EndRxTransfer+0xc8>)
 800b66a:	4013      	ands	r3, r2
 800b66c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3308      	adds	r3, #8
 800b674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b676:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b678:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b67c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b67e:	e841 2300 	strex	r3, r2, [r1]
 800b682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1e5      	bne.n	800b656 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d118      	bne.n	800b6c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	e853 3f00 	ldrex	r3, [r3]
 800b69e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	f023 0310 	bic.w	r3, r3, #16
 800b6a6:	647b      	str	r3, [r7, #68]	; 0x44
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6b0:	61bb      	str	r3, [r7, #24]
 800b6b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b4:	6979      	ldr	r1, [r7, #20]
 800b6b6:	69ba      	ldr	r2, [r7, #24]
 800b6b8:	e841 2300 	strex	r3, r2, [r1]
 800b6bc:	613b      	str	r3, [r7, #16]
   return(result);
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1e6      	bne.n	800b692 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2220      	movs	r2, #32
 800b6c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b6d8:	bf00      	nop
 800b6da:	3754      	adds	r7, #84	; 0x54
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr
 800b6e4:	effffffe 	.word	0xeffffffe

0800b6e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d101      	bne.n	800b6fe <HAL_UARTEx_DisableFifoMode+0x16>
 800b6fa:	2302      	movs	r3, #2
 800b6fc:	e027      	b.n	800b74e <HAL_UARTEx_DisableFifoMode+0x66>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2201      	movs	r2, #1
 800b702:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2224      	movs	r2, #36	; 0x24
 800b70a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f022 0201 	bic.w	r2, r2, #1
 800b724:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b72c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2220      	movs	r2, #32
 800b740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr

0800b75a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b084      	sub	sp, #16
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
 800b762:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d101      	bne.n	800b772 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b76e:	2302      	movs	r3, #2
 800b770:	e02d      	b.n	800b7ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2201      	movs	r2, #1
 800b776:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2224      	movs	r2, #36	; 0x24
 800b77e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f022 0201 	bic.w	r2, r2, #1
 800b798:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	683a      	ldr	r2, [r7, #0]
 800b7aa:	430a      	orrs	r2, r1
 800b7ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f850 	bl	800b854 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68fa      	ldr	r2, [r7, #12]
 800b7ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2220      	movs	r2, #32
 800b7c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b084      	sub	sp, #16
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d101      	bne.n	800b7ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b7ea:	2302      	movs	r3, #2
 800b7ec:	e02d      	b.n	800b84a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2224      	movs	r2, #36	; 0x24
 800b7fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f022 0201 	bic.w	r2, r2, #1
 800b814:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	683a      	ldr	r2, [r7, #0]
 800b826:	430a      	orrs	r2, r1
 800b828:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 f812 	bl	800b854 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2220      	movs	r2, #32
 800b83c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
	...

0800b854 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b860:	2b00      	cmp	r3, #0
 800b862:	d108      	bne.n	800b876 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b874:	e031      	b.n	800b8da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b876:	2310      	movs	r3, #16
 800b878:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b87a:	2310      	movs	r3, #16
 800b87c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	0e5b      	lsrs	r3, r3, #25
 800b886:	b2db      	uxtb	r3, r3
 800b888:	f003 0307 	and.w	r3, r3, #7
 800b88c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	0f5b      	lsrs	r3, r3, #29
 800b896:	b2db      	uxtb	r3, r3
 800b898:	f003 0307 	and.w	r3, r3, #7
 800b89c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b89e:	7bbb      	ldrb	r3, [r7, #14]
 800b8a0:	7b3a      	ldrb	r2, [r7, #12]
 800b8a2:	4911      	ldr	r1, [pc, #68]	; (800b8e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b8a4:	5c8a      	ldrb	r2, [r1, r2]
 800b8a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b8aa:	7b3a      	ldrb	r2, [r7, #12]
 800b8ac:	490f      	ldr	r1, [pc, #60]	; (800b8ec <UARTEx_SetNbDataToProcess+0x98>)
 800b8ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8b4:	b29a      	uxth	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8bc:	7bfb      	ldrb	r3, [r7, #15]
 800b8be:	7b7a      	ldrb	r2, [r7, #13]
 800b8c0:	4909      	ldr	r1, [pc, #36]	; (800b8e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b8c2:	5c8a      	ldrb	r2, [r1, r2]
 800b8c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b8c8:	7b7a      	ldrb	r2, [r7, #13]
 800b8ca:	4908      	ldr	r1, [pc, #32]	; (800b8ec <UARTEx_SetNbDataToProcess+0x98>)
 800b8cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b8da:	bf00      	nop
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	08011770 	.word	0x08011770
 800b8ec:	08011778 	.word	0x08011778

0800b8f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8f0:	b084      	sub	sp, #16
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b084      	sub	sp, #16
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
 800b8fa:	f107 001c 	add.w	r0, r7, #28
 800b8fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b904:	2b01      	cmp	r3, #1
 800b906:	d120      	bne.n	800b94a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	68da      	ldr	r2, [r3, #12]
 800b918:	4b2a      	ldr	r3, [pc, #168]	; (800b9c4 <USB_CoreInit+0xd4>)
 800b91a:	4013      	ands	r3, r2
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b92c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d105      	bne.n	800b93e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f001 faf8 	bl	800cf34 <USB_CoreReset>
 800b944:	4603      	mov	r3, r0
 800b946:	73fb      	strb	r3, [r7, #15]
 800b948:	e01a      	b.n	800b980 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f001 faec 	bl	800cf34 <USB_CoreReset>
 800b95c:	4603      	mov	r3, r0
 800b95e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b962:	2b00      	cmp	r3, #0
 800b964:	d106      	bne.n	800b974 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	639a      	str	r2, [r3, #56]	; 0x38
 800b972:	e005      	b.n	800b980 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b978:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b982:	2b01      	cmp	r3, #1
 800b984:	d116      	bne.n	800b9b4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b994:	4b0c      	ldr	r3, [pc, #48]	; (800b9c8 <USB_CoreInit+0xd8>)
 800b996:	4313      	orrs	r3, r2
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	f043 0206 	orr.w	r2, r3, #6
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	f043 0220 	orr.w	r2, r3, #32
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9c0:	b004      	add	sp, #16
 800b9c2:	4770      	bx	lr
 800b9c4:	ffbdffbf 	.word	0xffbdffbf
 800b9c8:	03ee0000 	.word	0x03ee0000

0800b9cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b087      	sub	sp, #28
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b9da:	79fb      	ldrb	r3, [r7, #7]
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d165      	bne.n	800baac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	4a41      	ldr	r2, [pc, #260]	; (800bae8 <USB_SetTurnaroundTime+0x11c>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d906      	bls.n	800b9f6 <USB_SetTurnaroundTime+0x2a>
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	4a40      	ldr	r2, [pc, #256]	; (800baec <USB_SetTurnaroundTime+0x120>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d202      	bcs.n	800b9f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b9f0:	230f      	movs	r3, #15
 800b9f2:	617b      	str	r3, [r7, #20]
 800b9f4:	e062      	b.n	800babc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	4a3c      	ldr	r2, [pc, #240]	; (800baec <USB_SetTurnaroundTime+0x120>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d306      	bcc.n	800ba0c <USB_SetTurnaroundTime+0x40>
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	4a3b      	ldr	r2, [pc, #236]	; (800baf0 <USB_SetTurnaroundTime+0x124>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d202      	bcs.n	800ba0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ba06:	230e      	movs	r3, #14
 800ba08:	617b      	str	r3, [r7, #20]
 800ba0a:	e057      	b.n	800babc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	4a38      	ldr	r2, [pc, #224]	; (800baf0 <USB_SetTurnaroundTime+0x124>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d306      	bcc.n	800ba22 <USB_SetTurnaroundTime+0x56>
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	4a37      	ldr	r2, [pc, #220]	; (800baf4 <USB_SetTurnaroundTime+0x128>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d202      	bcs.n	800ba22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ba1c:	230d      	movs	r3, #13
 800ba1e:	617b      	str	r3, [r7, #20]
 800ba20:	e04c      	b.n	800babc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	4a33      	ldr	r2, [pc, #204]	; (800baf4 <USB_SetTurnaroundTime+0x128>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d306      	bcc.n	800ba38 <USB_SetTurnaroundTime+0x6c>
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	4a32      	ldr	r2, [pc, #200]	; (800baf8 <USB_SetTurnaroundTime+0x12c>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d802      	bhi.n	800ba38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ba32:	230c      	movs	r3, #12
 800ba34:	617b      	str	r3, [r7, #20]
 800ba36:	e041      	b.n	800babc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	4a2f      	ldr	r2, [pc, #188]	; (800baf8 <USB_SetTurnaroundTime+0x12c>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d906      	bls.n	800ba4e <USB_SetTurnaroundTime+0x82>
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	4a2e      	ldr	r2, [pc, #184]	; (800bafc <USB_SetTurnaroundTime+0x130>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d802      	bhi.n	800ba4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ba48:	230b      	movs	r3, #11
 800ba4a:	617b      	str	r3, [r7, #20]
 800ba4c:	e036      	b.n	800babc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	4a2a      	ldr	r2, [pc, #168]	; (800bafc <USB_SetTurnaroundTime+0x130>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d906      	bls.n	800ba64 <USB_SetTurnaroundTime+0x98>
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	4a29      	ldr	r2, [pc, #164]	; (800bb00 <USB_SetTurnaroundTime+0x134>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d802      	bhi.n	800ba64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ba5e:	230a      	movs	r3, #10
 800ba60:	617b      	str	r3, [r7, #20]
 800ba62:	e02b      	b.n	800babc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	4a26      	ldr	r2, [pc, #152]	; (800bb00 <USB_SetTurnaroundTime+0x134>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d906      	bls.n	800ba7a <USB_SetTurnaroundTime+0xae>
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	4a25      	ldr	r2, [pc, #148]	; (800bb04 <USB_SetTurnaroundTime+0x138>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d202      	bcs.n	800ba7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ba74:	2309      	movs	r3, #9
 800ba76:	617b      	str	r3, [r7, #20]
 800ba78:	e020      	b.n	800babc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	4a21      	ldr	r2, [pc, #132]	; (800bb04 <USB_SetTurnaroundTime+0x138>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d306      	bcc.n	800ba90 <USB_SetTurnaroundTime+0xc4>
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	4a20      	ldr	r2, [pc, #128]	; (800bb08 <USB_SetTurnaroundTime+0x13c>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d802      	bhi.n	800ba90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ba8a:	2308      	movs	r3, #8
 800ba8c:	617b      	str	r3, [r7, #20]
 800ba8e:	e015      	b.n	800babc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	4a1d      	ldr	r2, [pc, #116]	; (800bb08 <USB_SetTurnaroundTime+0x13c>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d906      	bls.n	800baa6 <USB_SetTurnaroundTime+0xda>
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	4a1c      	ldr	r2, [pc, #112]	; (800bb0c <USB_SetTurnaroundTime+0x140>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d202      	bcs.n	800baa6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800baa0:	2307      	movs	r3, #7
 800baa2:	617b      	str	r3, [r7, #20]
 800baa4:	e00a      	b.n	800babc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800baa6:	2306      	movs	r3, #6
 800baa8:	617b      	str	r3, [r7, #20]
 800baaa:	e007      	b.n	800babc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800baac:	79fb      	ldrb	r3, [r7, #7]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d102      	bne.n	800bab8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bab2:	2309      	movs	r3, #9
 800bab4:	617b      	str	r3, [r7, #20]
 800bab6:	e001      	b.n	800babc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bab8:	2309      	movs	r3, #9
 800baba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	68da      	ldr	r2, [r3, #12]
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	029b      	lsls	r3, r3, #10
 800bad0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bad4:	431a      	orrs	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	371c      	adds	r7, #28
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr
 800bae8:	00d8acbf 	.word	0x00d8acbf
 800baec:	00e4e1c0 	.word	0x00e4e1c0
 800baf0:	00f42400 	.word	0x00f42400
 800baf4:	01067380 	.word	0x01067380
 800baf8:	011a499f 	.word	0x011a499f
 800bafc:	01312cff 	.word	0x01312cff
 800bb00:	014ca43f 	.word	0x014ca43f
 800bb04:	016e3600 	.word	0x016e3600
 800bb08:	01a6ab1f 	.word	0x01a6ab1f
 800bb0c:	01e84800 	.word	0x01e84800

0800bb10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	f043 0201 	orr.w	r2, r3, #1
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	370c      	adds	r7, #12
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr

0800bb32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb32:	b480      	push	{r7}
 800bb34:	b083      	sub	sp, #12
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	f023 0201 	bic.w	r2, r3, #1
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bb60:	2300      	movs	r3, #0
 800bb62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bb70:	78fb      	ldrb	r3, [r7, #3]
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d115      	bne.n	800bba2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bb82:	2001      	movs	r0, #1
 800bb84:	f7f7 fcf0 	bl	8003568 <HAL_Delay>
      ms++;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f001 f93f 	bl	800ce12 <USB_GetMode>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d01e      	beq.n	800bbd8 <USB_SetCurrentMode+0x84>
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2b31      	cmp	r3, #49	; 0x31
 800bb9e:	d9f0      	bls.n	800bb82 <USB_SetCurrentMode+0x2e>
 800bba0:	e01a      	b.n	800bbd8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bba2:	78fb      	ldrb	r3, [r7, #3]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d115      	bne.n	800bbd4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bbb4:	2001      	movs	r0, #1
 800bbb6:	f7f7 fcd7 	bl	8003568 <HAL_Delay>
      ms++;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f001 f926 	bl	800ce12 <USB_GetMode>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d005      	beq.n	800bbd8 <USB_SetCurrentMode+0x84>
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2b31      	cmp	r3, #49	; 0x31
 800bbd0:	d9f0      	bls.n	800bbb4 <USB_SetCurrentMode+0x60>
 800bbd2:	e001      	b.n	800bbd8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	e005      	b.n	800bbe4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2b32      	cmp	r3, #50	; 0x32
 800bbdc:	d101      	bne.n	800bbe2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e000      	b.n	800bbe4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bbec:	b084      	sub	sp, #16
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b086      	sub	sp, #24
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
 800bbf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bbfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bc06:	2300      	movs	r3, #0
 800bc08:	613b      	str	r3, [r7, #16]
 800bc0a:	e009      	b.n	800bc20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	3340      	adds	r3, #64	; 0x40
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	4413      	add	r3, r2
 800bc16:	2200      	movs	r2, #0
 800bc18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	613b      	str	r3, [r7, #16]
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	2b0e      	cmp	r3, #14
 800bc24:	d9f2      	bls.n	800bc0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bc26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d11c      	bne.n	800bc66 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc3a:	f043 0302 	orr.w	r3, r3, #2
 800bc3e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc44:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	601a      	str	r2, [r3, #0]
 800bc64:	e005      	b.n	800bc72 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc78:	461a      	mov	r2, r3
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc84:	4619      	mov	r1, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	680b      	ldr	r3, [r1, #0]
 800bc90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d10c      	bne.n	800bcb2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d104      	bne.n	800bca8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bc9e:	2100      	movs	r1, #0
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 f965 	bl	800bf70 <USB_SetDevSpeed>
 800bca6:	e008      	b.n	800bcba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bca8:	2101      	movs	r1, #1
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f960 	bl	800bf70 <USB_SetDevSpeed>
 800bcb0:	e003      	b.n	800bcba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bcb2:	2103      	movs	r1, #3
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 f95b 	bl	800bf70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bcba:	2110      	movs	r1, #16
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 f8f3 	bl	800bea8 <USB_FlushTxFifo>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d001      	beq.n	800bccc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 f91f 	bl	800bf10 <USB_FlushRxFifo>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d001      	beq.n	800bcdc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bce2:	461a      	mov	r2, r3
 800bce4:	2300      	movs	r3, #0
 800bce6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcee:	461a      	mov	r2, r3
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd00:	2300      	movs	r3, #0
 800bd02:	613b      	str	r3, [r7, #16]
 800bd04:	e043      	b.n	800bd8e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	015a      	lsls	r2, r3, #5
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd1c:	d118      	bne.n	800bd50 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10a      	bne.n	800bd3a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	015a      	lsls	r2, r3, #5
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd30:	461a      	mov	r2, r3
 800bd32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bd36:	6013      	str	r3, [r2, #0]
 800bd38:	e013      	b.n	800bd62 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	015a      	lsls	r2, r3, #5
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	4413      	add	r3, r2
 800bd42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd46:	461a      	mov	r2, r3
 800bd48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bd4c:	6013      	str	r3, [r2, #0]
 800bd4e:	e008      	b.n	800bd62 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	015a      	lsls	r2, r3, #5
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	4413      	add	r3, r2
 800bd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	2300      	movs	r3, #0
 800bd60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	015a      	lsls	r2, r3, #5
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	4413      	add	r3, r2
 800bd6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd6e:	461a      	mov	r2, r3
 800bd70:	2300      	movs	r3, #0
 800bd72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	015a      	lsls	r2, r3, #5
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd80:	461a      	mov	r2, r3
 800bd82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	613b      	str	r3, [r7, #16]
 800bd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd90:	693a      	ldr	r2, [r7, #16]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d3b7      	bcc.n	800bd06 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd96:	2300      	movs	r3, #0
 800bd98:	613b      	str	r3, [r7, #16]
 800bd9a:	e043      	b.n	800be24 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	015a      	lsls	r2, r3, #5
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	4413      	add	r3, r2
 800bda4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdb2:	d118      	bne.n	800bde6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d10a      	bne.n	800bdd0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	015a      	lsls	r2, r3, #5
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bdcc:	6013      	str	r3, [r2, #0]
 800bdce:	e013      	b.n	800bdf8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	015a      	lsls	r2, r3, #5
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bddc:	461a      	mov	r2, r3
 800bdde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	e008      	b.n	800bdf8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	015a      	lsls	r2, r3, #5
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	4413      	add	r3, r2
 800bdee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	015a      	lsls	r2, r3, #5
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	4413      	add	r3, r2
 800be00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be04:	461a      	mov	r2, r3
 800be06:	2300      	movs	r3, #0
 800be08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	015a      	lsls	r2, r3, #5
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	4413      	add	r3, r2
 800be12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be16:	461a      	mov	r2, r3
 800be18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800be1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	3301      	adds	r3, #1
 800be22:	613b      	str	r3, [r7, #16]
 800be24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be26:	693a      	ldr	r2, [r7, #16]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d3b7      	bcc.n	800bd9c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	68fa      	ldr	r2, [r7, #12]
 800be36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800be4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800be4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be50:	2b00      	cmp	r3, #0
 800be52:	d105      	bne.n	800be60 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	699b      	ldr	r3, [r3, #24]
 800be58:	f043 0210 	orr.w	r2, r3, #16
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	699a      	ldr	r2, [r3, #24]
 800be64:	4b0e      	ldr	r3, [pc, #56]	; (800bea0 <USB_DevInit+0x2b4>)
 800be66:	4313      	orrs	r3, r2
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800be6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d005      	beq.n	800be7e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	f043 0208 	orr.w	r2, r3, #8
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800be7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be80:	2b01      	cmp	r3, #1
 800be82:	d105      	bne.n	800be90 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	699a      	ldr	r2, [r3, #24]
 800be88:	4b06      	ldr	r3, [pc, #24]	; (800bea4 <USB_DevInit+0x2b8>)
 800be8a:	4313      	orrs	r3, r2
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800be90:	7dfb      	ldrb	r3, [r7, #23]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3718      	adds	r7, #24
 800be96:	46bd      	mov	sp, r7
 800be98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be9c:	b004      	add	sp, #16
 800be9e:	4770      	bx	lr
 800bea0:	803c3800 	.word	0x803c3800
 800bea4:	40000004 	.word	0x40000004

0800bea8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800beb2:	2300      	movs	r3, #0
 800beb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3301      	adds	r3, #1
 800beba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	4a13      	ldr	r2, [pc, #76]	; (800bf0c <USB_FlushTxFifo+0x64>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d901      	bls.n	800bec8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bec4:	2303      	movs	r3, #3
 800bec6:	e01b      	b.n	800bf00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	691b      	ldr	r3, [r3, #16]
 800becc:	2b00      	cmp	r3, #0
 800bece:	daf2      	bge.n	800beb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bed0:	2300      	movs	r3, #0
 800bed2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	019b      	lsls	r3, r3, #6
 800bed8:	f043 0220 	orr.w	r2, r3, #32
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	3301      	adds	r3, #1
 800bee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	4a08      	ldr	r2, [pc, #32]	; (800bf0c <USB_FlushTxFifo+0x64>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d901      	bls.n	800bef2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800beee:	2303      	movs	r3, #3
 800bef0:	e006      	b.n	800bf00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	f003 0320 	and.w	r3, r3, #32
 800befa:	2b20      	cmp	r3, #32
 800befc:	d0f0      	beq.n	800bee0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3714      	adds	r7, #20
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr
 800bf0c:	00030d40 	.word	0x00030d40

0800bf10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	4a11      	ldr	r2, [pc, #68]	; (800bf6c <USB_FlushRxFifo+0x5c>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d901      	bls.n	800bf2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	e018      	b.n	800bf60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	daf2      	bge.n	800bf1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bf36:	2300      	movs	r3, #0
 800bf38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2210      	movs	r2, #16
 800bf3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	3301      	adds	r3, #1
 800bf44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	4a08      	ldr	r2, [pc, #32]	; (800bf6c <USB_FlushRxFifo+0x5c>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d901      	bls.n	800bf52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	e006      	b.n	800bf60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	f003 0310 	and.w	r3, r3, #16
 800bf5a:	2b10      	cmp	r3, #16
 800bf5c:	d0f0      	beq.n	800bf40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3714      	adds	r7, #20
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr
 800bf6c:	00030d40 	.word	0x00030d40

0800bf70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	78fb      	ldrb	r3, [r7, #3]
 800bf8a:	68f9      	ldr	r1, [r7, #12]
 800bf8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf90:	4313      	orrs	r3, r2
 800bf92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3714      	adds	r7, #20
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr

0800bfa2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bfa2:	b480      	push	{r7}
 800bfa4:	b087      	sub	sp, #28
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	f003 0306 	and.w	r3, r3, #6
 800bfba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d102      	bne.n	800bfc8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	75fb      	strb	r3, [r7, #23]
 800bfc6:	e00a      	b.n	800bfde <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2b02      	cmp	r3, #2
 800bfcc:	d002      	beq.n	800bfd4 <USB_GetDevSpeed+0x32>
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2b06      	cmp	r3, #6
 800bfd2:	d102      	bne.n	800bfda <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bfd4:	2302      	movs	r3, #2
 800bfd6:	75fb      	strb	r3, [r7, #23]
 800bfd8:	e001      	b.n	800bfde <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bfda:	230f      	movs	r3, #15
 800bfdc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bfde:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	371c      	adds	r7, #28
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	785b      	ldrb	r3, [r3, #1]
 800c004:	2b01      	cmp	r3, #1
 800c006:	d139      	bne.n	800c07c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c00e:	69da      	ldr	r2, [r3, #28]
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	f003 030f 	and.w	r3, r3, #15
 800c018:	2101      	movs	r1, #1
 800c01a:	fa01 f303 	lsl.w	r3, r1, r3
 800c01e:	b29b      	uxth	r3, r3
 800c020:	68f9      	ldr	r1, [r7, #12]
 800c022:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c026:	4313      	orrs	r3, r2
 800c028:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	015a      	lsls	r2, r3, #5
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	4413      	add	r3, r2
 800c032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d153      	bne.n	800c0e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	015a      	lsls	r2, r3, #5
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	4413      	add	r3, r2
 800c048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	791b      	ldrb	r3, [r3, #4]
 800c05a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c05c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	059b      	lsls	r3, r3, #22
 800c062:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c064:	431a      	orrs	r2, r3
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	0159      	lsls	r1, r3, #5
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	440b      	add	r3, r1
 800c06e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c072:	4619      	mov	r1, r3
 800c074:	4b20      	ldr	r3, [pc, #128]	; (800c0f8 <USB_ActivateEndpoint+0x10c>)
 800c076:	4313      	orrs	r3, r2
 800c078:	600b      	str	r3, [r1, #0]
 800c07a:	e035      	b.n	800c0e8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c082:	69da      	ldr	r2, [r3, #28]
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	f003 030f 	and.w	r3, r3, #15
 800c08c:	2101      	movs	r1, #1
 800c08e:	fa01 f303 	lsl.w	r3, r1, r3
 800c092:	041b      	lsls	r3, r3, #16
 800c094:	68f9      	ldr	r1, [r7, #12]
 800c096:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c09a:	4313      	orrs	r3, r2
 800c09c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	015a      	lsls	r2, r3, #5
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d119      	bne.n	800c0e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	015a      	lsls	r2, r3, #5
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	791b      	ldrb	r3, [r3, #4]
 800c0ce:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c0d0:	430b      	orrs	r3, r1
 800c0d2:	431a      	orrs	r2, r3
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	0159      	lsls	r1, r3, #5
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	440b      	add	r3, r1
 800c0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	4b05      	ldr	r3, [pc, #20]	; (800c0f8 <USB_ActivateEndpoint+0x10c>)
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3714      	adds	r7, #20
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr
 800c0f6:	bf00      	nop
 800c0f8:	10008000 	.word	0x10008000

0800c0fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	785b      	ldrb	r3, [r3, #1]
 800c114:	2b01      	cmp	r3, #1
 800c116:	d161      	bne.n	800c1dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	015a      	lsls	r2, r3, #5
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	4413      	add	r3, r2
 800c120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c12a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c12e:	d11f      	bne.n	800c170 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	015a      	lsls	r2, r3, #5
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	4413      	add	r3, r2
 800c138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	68ba      	ldr	r2, [r7, #8]
 800c140:	0151      	lsls	r1, r2, #5
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	440a      	add	r2, r1
 800c146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c14a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c14e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	015a      	lsls	r2, r3, #5
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	4413      	add	r3, r2
 800c158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68ba      	ldr	r2, [r7, #8]
 800c160:	0151      	lsls	r1, r2, #5
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	440a      	add	r2, r1
 800c166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c16a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c16e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	f003 030f 	and.w	r3, r3, #15
 800c180:	2101      	movs	r1, #1
 800c182:	fa01 f303 	lsl.w	r3, r1, r3
 800c186:	b29b      	uxth	r3, r3
 800c188:	43db      	mvns	r3, r3
 800c18a:	68f9      	ldr	r1, [r7, #12]
 800c18c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c190:	4013      	ands	r3, r2
 800c192:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c19a:	69da      	ldr	r2, [r3, #28]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	f003 030f 	and.w	r3, r3, #15
 800c1a4:	2101      	movs	r1, #1
 800c1a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	43db      	mvns	r3, r3
 800c1ae:	68f9      	ldr	r1, [r7, #12]
 800c1b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	015a      	lsls	r2, r3, #5
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	4413      	add	r3, r2
 800c1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	0159      	lsls	r1, r3, #5
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	440b      	add	r3, r1
 800c1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	4b35      	ldr	r3, [pc, #212]	; (800c2ac <USB_DeactivateEndpoint+0x1b0>)
 800c1d6:	4013      	ands	r3, r2
 800c1d8:	600b      	str	r3, [r1, #0]
 800c1da:	e060      	b.n	800c29e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	015a      	lsls	r2, r3, #5
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1f2:	d11f      	bne.n	800c234 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	015a      	lsls	r2, r3, #5
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	0151      	lsls	r1, r2, #5
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	440a      	add	r2, r1
 800c20a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c20e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c212:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	015a      	lsls	r2, r3, #5
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	4413      	add	r3, r2
 800c21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	0151      	lsls	r1, r2, #5
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	440a      	add	r2, r1
 800c22a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c22e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c232:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c23a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	f003 030f 	and.w	r3, r3, #15
 800c244:	2101      	movs	r1, #1
 800c246:	fa01 f303 	lsl.w	r3, r1, r3
 800c24a:	041b      	lsls	r3, r3, #16
 800c24c:	43db      	mvns	r3, r3
 800c24e:	68f9      	ldr	r1, [r7, #12]
 800c250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c254:	4013      	ands	r3, r2
 800c256:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c25e:	69da      	ldr	r2, [r3, #28]
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	f003 030f 	and.w	r3, r3, #15
 800c268:	2101      	movs	r1, #1
 800c26a:	fa01 f303 	lsl.w	r3, r1, r3
 800c26e:	041b      	lsls	r3, r3, #16
 800c270:	43db      	mvns	r3, r3
 800c272:	68f9      	ldr	r1, [r7, #12]
 800c274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c278:	4013      	ands	r3, r2
 800c27a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	015a      	lsls	r2, r3, #5
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	4413      	add	r3, r2
 800c284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	0159      	lsls	r1, r3, #5
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	440b      	add	r3, r1
 800c292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c296:	4619      	mov	r1, r3
 800c298:	4b05      	ldr	r3, [pc, #20]	; (800c2b0 <USB_DeactivateEndpoint+0x1b4>)
 800c29a:	4013      	ands	r3, r2
 800c29c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3714      	adds	r7, #20
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	ec337800 	.word	0xec337800
 800c2b0:	eff37800 	.word	0xeff37800

0800c2b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b08a      	sub	sp, #40	; 0x28
 800c2b8:	af02      	add	r7, sp, #8
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	785b      	ldrb	r3, [r3, #1]
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	f040 8181 	bne.w	800c5d8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	691b      	ldr	r3, [r3, #16]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d132      	bne.n	800c344 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	015a      	lsls	r2, r3, #5
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ea:	691a      	ldr	r2, [r3, #16]
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	0159      	lsls	r1, r3, #5
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	440b      	add	r3, r1
 800c2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4ba5      	ldr	r3, [pc, #660]	; (800c590 <USB_EPStartXfer+0x2dc>)
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	015a      	lsls	r2, r3, #5
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	4413      	add	r3, r2
 800c308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c30c:	691b      	ldr	r3, [r3, #16]
 800c30e:	69ba      	ldr	r2, [r7, #24]
 800c310:	0151      	lsls	r1, r2, #5
 800c312:	69fa      	ldr	r2, [r7, #28]
 800c314:	440a      	add	r2, r1
 800c316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c31a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c31e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	015a      	lsls	r2, r3, #5
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	4413      	add	r3, r2
 800c328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c32c:	691a      	ldr	r2, [r3, #16]
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	0159      	lsls	r1, r3, #5
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	440b      	add	r3, r1
 800c336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c33a:	4619      	mov	r1, r3
 800c33c:	4b95      	ldr	r3, [pc, #596]	; (800c594 <USB_EPStartXfer+0x2e0>)
 800c33e:	4013      	ands	r3, r2
 800c340:	610b      	str	r3, [r1, #16]
 800c342:	e092      	b.n	800c46a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	015a      	lsls	r2, r3, #5
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	4413      	add	r3, r2
 800c34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c350:	691a      	ldr	r2, [r3, #16]
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	0159      	lsls	r1, r3, #5
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	440b      	add	r3, r1
 800c35a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c35e:	4619      	mov	r1, r3
 800c360:	4b8c      	ldr	r3, [pc, #560]	; (800c594 <USB_EPStartXfer+0x2e0>)
 800c362:	4013      	ands	r3, r2
 800c364:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	015a      	lsls	r2, r3, #5
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	4413      	add	r3, r2
 800c36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c372:	691a      	ldr	r2, [r3, #16]
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	0159      	lsls	r1, r3, #5
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	440b      	add	r3, r1
 800c37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c380:	4619      	mov	r1, r3
 800c382:	4b83      	ldr	r3, [pc, #524]	; (800c590 <USB_EPStartXfer+0x2dc>)
 800c384:	4013      	ands	r3, r2
 800c386:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d11a      	bne.n	800c3c4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	691a      	ldr	r2, [r3, #16]
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	429a      	cmp	r2, r3
 800c398:	d903      	bls.n	800c3a2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	689a      	ldr	r2, [r3, #8]
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	015a      	lsls	r2, r3, #5
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ae:	691b      	ldr	r3, [r3, #16]
 800c3b0:	69ba      	ldr	r2, [r7, #24]
 800c3b2:	0151      	lsls	r1, r2, #5
 800c3b4:	69fa      	ldr	r2, [r7, #28]
 800c3b6:	440a      	add	r2, r1
 800c3b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3c0:	6113      	str	r3, [r2, #16]
 800c3c2:	e01b      	b.n	800c3fc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	015a      	lsls	r2, r3, #5
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3d0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	6919      	ldr	r1, [r3, #16]
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	440b      	add	r3, r1
 800c3dc:	1e59      	subs	r1, r3, #1
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	fbb1 f3f3 	udiv	r3, r1, r3
 800c3e6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c3e8:	4b6b      	ldr	r3, [pc, #428]	; (800c598 <USB_EPStartXfer+0x2e4>)
 800c3ea:	400b      	ands	r3, r1
 800c3ec:	69b9      	ldr	r1, [r7, #24]
 800c3ee:	0148      	lsls	r0, r1, #5
 800c3f0:	69f9      	ldr	r1, [r7, #28]
 800c3f2:	4401      	add	r1, r0
 800c3f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	015a      	lsls	r2, r3, #5
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	4413      	add	r3, r2
 800c404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c408:	691a      	ldr	r2, [r3, #16]
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c412:	69b9      	ldr	r1, [r7, #24]
 800c414:	0148      	lsls	r0, r1, #5
 800c416:	69f9      	ldr	r1, [r7, #28]
 800c418:	4401      	add	r1, r0
 800c41a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c41e:	4313      	orrs	r3, r2
 800c420:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	791b      	ldrb	r3, [r3, #4]
 800c426:	2b01      	cmp	r3, #1
 800c428:	d11f      	bne.n	800c46a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	015a      	lsls	r2, r3, #5
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	4413      	add	r3, r2
 800c432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c436:	691b      	ldr	r3, [r3, #16]
 800c438:	69ba      	ldr	r2, [r7, #24]
 800c43a:	0151      	lsls	r1, r2, #5
 800c43c:	69fa      	ldr	r2, [r7, #28]
 800c43e:	440a      	add	r2, r1
 800c440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c444:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c448:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	015a      	lsls	r2, r3, #5
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	4413      	add	r3, r2
 800c452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	69ba      	ldr	r2, [r7, #24]
 800c45a:	0151      	lsls	r1, r2, #5
 800c45c:	69fa      	ldr	r2, [r7, #28]
 800c45e:	440a      	add	r2, r1
 800c460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c464:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c468:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c46a:	79fb      	ldrb	r3, [r7, #7]
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d14b      	bne.n	800c508 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	69db      	ldr	r3, [r3, #28]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d009      	beq.n	800c48c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	015a      	lsls	r2, r3, #5
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	4413      	add	r3, r2
 800c480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c484:	461a      	mov	r2, r3
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	69db      	ldr	r3, [r3, #28]
 800c48a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	791b      	ldrb	r3, [r3, #4]
 800c490:	2b01      	cmp	r3, #1
 800c492:	d128      	bne.n	800c4e6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d110      	bne.n	800c4c6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	015a      	lsls	r2, r3, #5
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	69ba      	ldr	r2, [r7, #24]
 800c4b4:	0151      	lsls	r1, r2, #5
 800c4b6:	69fa      	ldr	r2, [r7, #28]
 800c4b8:	440a      	add	r2, r1
 800c4ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c4c2:	6013      	str	r3, [r2, #0]
 800c4c4:	e00f      	b.n	800c4e6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	015a      	lsls	r2, r3, #5
 800c4ca:	69fb      	ldr	r3, [r7, #28]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	69ba      	ldr	r2, [r7, #24]
 800c4d6:	0151      	lsls	r1, r2, #5
 800c4d8:	69fa      	ldr	r2, [r7, #28]
 800c4da:	440a      	add	r2, r1
 800c4dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	015a      	lsls	r2, r3, #5
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	69ba      	ldr	r2, [r7, #24]
 800c4f6:	0151      	lsls	r1, r2, #5
 800c4f8:	69fa      	ldr	r2, [r7, #28]
 800c4fa:	440a      	add	r2, r1
 800c4fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c500:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c504:	6013      	str	r3, [r2, #0]
 800c506:	e16a      	b.n	800c7de <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	015a      	lsls	r2, r3, #5
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	4413      	add	r3, r2
 800c510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	69ba      	ldr	r2, [r7, #24]
 800c518:	0151      	lsls	r1, r2, #5
 800c51a:	69fa      	ldr	r2, [r7, #28]
 800c51c:	440a      	add	r2, r1
 800c51e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c522:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c526:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	791b      	ldrb	r3, [r3, #4]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d015      	beq.n	800c55c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	f000 8152 	beq.w	800c7de <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	f003 030f 	and.w	r3, r3, #15
 800c54a:	2101      	movs	r1, #1
 800c54c:	fa01 f303 	lsl.w	r3, r1, r3
 800c550:	69f9      	ldr	r1, [r7, #28]
 800c552:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c556:	4313      	orrs	r3, r2
 800c558:	634b      	str	r3, [r1, #52]	; 0x34
 800c55a:	e140      	b.n	800c7de <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d117      	bne.n	800c59c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	015a      	lsls	r2, r3, #5
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	4413      	add	r3, r2
 800c574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	69ba      	ldr	r2, [r7, #24]
 800c57c:	0151      	lsls	r1, r2, #5
 800c57e:	69fa      	ldr	r2, [r7, #28]
 800c580:	440a      	add	r2, r1
 800c582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c586:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c58a:	6013      	str	r3, [r2, #0]
 800c58c:	e016      	b.n	800c5bc <USB_EPStartXfer+0x308>
 800c58e:	bf00      	nop
 800c590:	e007ffff 	.word	0xe007ffff
 800c594:	fff80000 	.word	0xfff80000
 800c598:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	015a      	lsls	r2, r3, #5
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	4413      	add	r3, r2
 800c5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	69ba      	ldr	r2, [r7, #24]
 800c5ac:	0151      	lsls	r1, r2, #5
 800c5ae:	69fa      	ldr	r2, [r7, #28]
 800c5b0:	440a      	add	r2, r1
 800c5b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5ba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	68d9      	ldr	r1, [r3, #12]
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	781a      	ldrb	r2, [r3, #0]
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	b298      	uxth	r0, r3
 800c5ca:	79fb      	ldrb	r3, [r7, #7]
 800c5cc:	9300      	str	r3, [sp, #0]
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f000 f9b9 	bl	800c948 <USB_WritePacket>
 800c5d6:	e102      	b.n	800c7de <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	015a      	lsls	r2, r3, #5
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	4413      	add	r3, r2
 800c5e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5e4:	691a      	ldr	r2, [r3, #16]
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	0159      	lsls	r1, r3, #5
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	440b      	add	r3, r1
 800c5ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	4b7c      	ldr	r3, [pc, #496]	; (800c7e8 <USB_EPStartXfer+0x534>)
 800c5f6:	4013      	ands	r3, r2
 800c5f8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	015a      	lsls	r2, r3, #5
 800c5fe:	69fb      	ldr	r3, [r7, #28]
 800c600:	4413      	add	r3, r2
 800c602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c606:	691a      	ldr	r2, [r3, #16]
 800c608:	69bb      	ldr	r3, [r7, #24]
 800c60a:	0159      	lsls	r1, r3, #5
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	440b      	add	r3, r1
 800c610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c614:	4619      	mov	r1, r3
 800c616:	4b75      	ldr	r3, [pc, #468]	; (800c7ec <USB_EPStartXfer+0x538>)
 800c618:	4013      	ands	r3, r2
 800c61a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d12f      	bne.n	800c682 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d003      	beq.n	800c632 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	689a      	ldr	r2, [r3, #8]
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	689a      	ldr	r2, [r3, #8]
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	015a      	lsls	r2, r3, #5
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	4413      	add	r3, r2
 800c642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c646:	691a      	ldr	r2, [r3, #16]
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	6a1b      	ldr	r3, [r3, #32]
 800c64c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c650:	69b9      	ldr	r1, [r7, #24]
 800c652:	0148      	lsls	r0, r1, #5
 800c654:	69f9      	ldr	r1, [r7, #28]
 800c656:	4401      	add	r1, r0
 800c658:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c65c:	4313      	orrs	r3, r2
 800c65e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	015a      	lsls	r2, r3, #5
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	4413      	add	r3, r2
 800c668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c66c:	691b      	ldr	r3, [r3, #16]
 800c66e:	69ba      	ldr	r2, [r7, #24]
 800c670:	0151      	lsls	r1, r2, #5
 800c672:	69fa      	ldr	r2, [r7, #28]
 800c674:	440a      	add	r2, r1
 800c676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c67a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c67e:	6113      	str	r3, [r2, #16]
 800c680:	e05f      	b.n	800c742 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	691b      	ldr	r3, [r3, #16]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d123      	bne.n	800c6d2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	015a      	lsls	r2, r3, #5
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	4413      	add	r3, r2
 800c692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c696:	691a      	ldr	r2, [r3, #16]
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6a0:	69b9      	ldr	r1, [r7, #24]
 800c6a2:	0148      	lsls	r0, r1, #5
 800c6a4:	69f9      	ldr	r1, [r7, #28]
 800c6a6:	4401      	add	r1, r0
 800c6a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	015a      	lsls	r2, r3, #5
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6bc:	691b      	ldr	r3, [r3, #16]
 800c6be:	69ba      	ldr	r2, [r7, #24]
 800c6c0:	0151      	lsls	r1, r2, #5
 800c6c2:	69fa      	ldr	r2, [r7, #28]
 800c6c4:	440a      	add	r2, r1
 800c6c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6ce:	6113      	str	r3, [r2, #16]
 800c6d0:	e037      	b.n	800c742 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	691a      	ldr	r2, [r3, #16]
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	689b      	ldr	r3, [r3, #8]
 800c6da:	4413      	add	r3, r2
 800c6dc:	1e5a      	subs	r2, r3, #1
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6e6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	8afa      	ldrh	r2, [r7, #22]
 800c6ee:	fb03 f202 	mul.w	r2, r3, r2
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	015a      	lsls	r2, r3, #5
 800c6fa:	69fb      	ldr	r3, [r7, #28]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c702:	691a      	ldr	r2, [r3, #16]
 800c704:	8afb      	ldrh	r3, [r7, #22]
 800c706:	04d9      	lsls	r1, r3, #19
 800c708:	4b39      	ldr	r3, [pc, #228]	; (800c7f0 <USB_EPStartXfer+0x53c>)
 800c70a:	400b      	ands	r3, r1
 800c70c:	69b9      	ldr	r1, [r7, #24]
 800c70e:	0148      	lsls	r0, r1, #5
 800c710:	69f9      	ldr	r1, [r7, #28]
 800c712:	4401      	add	r1, r0
 800c714:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c718:	4313      	orrs	r3, r2
 800c71a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	015a      	lsls	r2, r3, #5
 800c720:	69fb      	ldr	r3, [r7, #28]
 800c722:	4413      	add	r3, r2
 800c724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c728:	691a      	ldr	r2, [r3, #16]
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	6a1b      	ldr	r3, [r3, #32]
 800c72e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c732:	69b9      	ldr	r1, [r7, #24]
 800c734:	0148      	lsls	r0, r1, #5
 800c736:	69f9      	ldr	r1, [r7, #28]
 800c738:	4401      	add	r1, r0
 800c73a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c73e:	4313      	orrs	r3, r2
 800c740:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c742:	79fb      	ldrb	r3, [r7, #7]
 800c744:	2b01      	cmp	r3, #1
 800c746:	d10d      	bne.n	800c764 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d009      	beq.n	800c764 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	68d9      	ldr	r1, [r3, #12]
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	015a      	lsls	r2, r3, #5
 800c758:	69fb      	ldr	r3, [r7, #28]
 800c75a:	4413      	add	r3, r2
 800c75c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c760:	460a      	mov	r2, r1
 800c762:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	791b      	ldrb	r3, [r3, #4]
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d128      	bne.n	800c7be <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d110      	bne.n	800c79e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	015a      	lsls	r2, r3, #5
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	4413      	add	r3, r2
 800c784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	69ba      	ldr	r2, [r7, #24]
 800c78c:	0151      	lsls	r1, r2, #5
 800c78e:	69fa      	ldr	r2, [r7, #28]
 800c790:	440a      	add	r2, r1
 800c792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c796:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c79a:	6013      	str	r3, [r2, #0]
 800c79c:	e00f      	b.n	800c7be <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c79e:	69bb      	ldr	r3, [r7, #24]
 800c7a0:	015a      	lsls	r2, r3, #5
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	69ba      	ldr	r2, [r7, #24]
 800c7ae:	0151      	lsls	r1, r2, #5
 800c7b0:	69fa      	ldr	r2, [r7, #28]
 800c7b2:	440a      	add	r2, r1
 800c7b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7bc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	015a      	lsls	r2, r3, #5
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	69ba      	ldr	r2, [r7, #24]
 800c7ce:	0151      	lsls	r1, r2, #5
 800c7d0:	69fa      	ldr	r2, [r7, #28]
 800c7d2:	440a      	add	r2, r1
 800c7d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c7dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3720      	adds	r7, #32
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	fff80000 	.word	0xfff80000
 800c7ec:	e007ffff 	.word	0xe007ffff
 800c7f0:	1ff80000 	.word	0x1ff80000

0800c7f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b087      	sub	sp, #28
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c7fe:	2300      	movs	r3, #0
 800c800:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	785b      	ldrb	r3, [r3, #1]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d14a      	bne.n	800c8a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	015a      	lsls	r2, r3, #5
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	4413      	add	r3, r2
 800c81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c826:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c82a:	f040 8086 	bne.w	800c93a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	015a      	lsls	r2, r3, #5
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	4413      	add	r3, r2
 800c838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	7812      	ldrb	r2, [r2, #0]
 800c842:	0151      	lsls	r1, r2, #5
 800c844:	693a      	ldr	r2, [r7, #16]
 800c846:	440a      	add	r2, r1
 800c848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c84c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c850:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	015a      	lsls	r2, r3, #5
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	4413      	add	r3, r2
 800c85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	683a      	ldr	r2, [r7, #0]
 800c864:	7812      	ldrb	r2, [r2, #0]
 800c866:	0151      	lsls	r1, r2, #5
 800c868:	693a      	ldr	r2, [r7, #16]
 800c86a:	440a      	add	r2, r1
 800c86c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c874:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	3301      	adds	r3, #1
 800c87a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f242 7210 	movw	r2, #10000	; 0x2710
 800c882:	4293      	cmp	r3, r2
 800c884:	d902      	bls.n	800c88c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c886:	2301      	movs	r3, #1
 800c888:	75fb      	strb	r3, [r7, #23]
          break;
 800c88a:	e056      	b.n	800c93a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	015a      	lsls	r2, r3, #5
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	4413      	add	r3, r2
 800c896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8a4:	d0e7      	beq.n	800c876 <USB_EPStopXfer+0x82>
 800c8a6:	e048      	b.n	800c93a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	015a      	lsls	r2, r3, #5
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8c0:	d13b      	bne.n	800c93a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	015a      	lsls	r2, r3, #5
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	7812      	ldrb	r2, [r2, #0]
 800c8d6:	0151      	lsls	r1, r2, #5
 800c8d8:	693a      	ldr	r2, [r7, #16]
 800c8da:	440a      	add	r2, r1
 800c8dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c8e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	015a      	lsls	r2, r3, #5
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	683a      	ldr	r2, [r7, #0]
 800c8f8:	7812      	ldrb	r2, [r2, #0]
 800c8fa:	0151      	lsls	r1, r2, #5
 800c8fc:	693a      	ldr	r2, [r7, #16]
 800c8fe:	440a      	add	r2, r1
 800c900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c904:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c908:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	3301      	adds	r3, #1
 800c90e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f242 7210 	movw	r2, #10000	; 0x2710
 800c916:	4293      	cmp	r3, r2
 800c918:	d902      	bls.n	800c920 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c91a:	2301      	movs	r3, #1
 800c91c:	75fb      	strb	r3, [r7, #23]
          break;
 800c91e:	e00c      	b.n	800c93a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	015a      	lsls	r2, r3, #5
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	4413      	add	r3, r2
 800c92a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c938:	d0e7      	beq.n	800c90a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c93a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	371c      	adds	r7, #28
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c948:	b480      	push	{r7}
 800c94a:	b089      	sub	sp, #36	; 0x24
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	4611      	mov	r1, r2
 800c954:	461a      	mov	r2, r3
 800c956:	460b      	mov	r3, r1
 800c958:	71fb      	strb	r3, [r7, #7]
 800c95a:	4613      	mov	r3, r2
 800c95c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c966:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d123      	bne.n	800c9b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c96e:	88bb      	ldrh	r3, [r7, #4]
 800c970:	3303      	adds	r3, #3
 800c972:	089b      	lsrs	r3, r3, #2
 800c974:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c976:	2300      	movs	r3, #0
 800c978:	61bb      	str	r3, [r7, #24]
 800c97a:	e018      	b.n	800c9ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c97c:	79fb      	ldrb	r3, [r7, #7]
 800c97e:	031a      	lsls	r2, r3, #12
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	4413      	add	r3, r2
 800c984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c988:	461a      	mov	r2, r3
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	3301      	adds	r3, #1
 800c994:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	3301      	adds	r3, #1
 800c99a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	61bb      	str	r3, [r7, #24]
 800c9ae:	69ba      	ldr	r2, [r7, #24]
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d3e2      	bcc.n	800c97c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3724      	adds	r7, #36	; 0x24
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b08b      	sub	sp, #44	; 0x2c
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c9da:	88fb      	ldrh	r3, [r7, #6]
 800c9dc:	089b      	lsrs	r3, r3, #2
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c9e2:	88fb      	ldrh	r3, [r7, #6]
 800c9e4:	f003 0303 	and.w	r3, r3, #3
 800c9e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	623b      	str	r3, [r7, #32]
 800c9ee:	e014      	b.n	800ca1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	601a      	str	r2, [r3, #0]
    pDest++;
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fe:	3301      	adds	r3, #1
 800ca00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ca02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca04:	3301      	adds	r3, #1
 800ca06:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ca08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ca0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca10:	3301      	adds	r3, #1
 800ca12:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	3301      	adds	r3, #1
 800ca18:	623b      	str	r3, [r7, #32]
 800ca1a:	6a3a      	ldr	r2, [r7, #32]
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d3e6      	bcc.n	800c9f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ca22:	8bfb      	ldrh	r3, [r7, #30]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d01e      	beq.n	800ca66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ca2c:	69bb      	ldr	r3, [r7, #24]
 800ca2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca32:	461a      	mov	r2, r3
 800ca34:	f107 0310 	add.w	r3, r7, #16
 800ca38:	6812      	ldr	r2, [r2, #0]
 800ca3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ca3c:	693a      	ldr	r2, [r7, #16]
 800ca3e:	6a3b      	ldr	r3, [r7, #32]
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	00db      	lsls	r3, r3, #3
 800ca44:	fa22 f303 	lsr.w	r3, r2, r3
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4c:	701a      	strb	r2, [r3, #0]
      i++;
 800ca4e:	6a3b      	ldr	r3, [r7, #32]
 800ca50:	3301      	adds	r3, #1
 800ca52:	623b      	str	r3, [r7, #32]
      pDest++;
 800ca54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca56:	3301      	adds	r3, #1
 800ca58:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ca5a:	8bfb      	ldrh	r3, [r7, #30]
 800ca5c:	3b01      	subs	r3, #1
 800ca5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ca60:	8bfb      	ldrh	r3, [r7, #30]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1ea      	bne.n	800ca3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ca66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	372c      	adds	r7, #44	; 0x2c
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b085      	sub	sp, #20
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	785b      	ldrb	r3, [r3, #1]
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d12c      	bne.n	800caea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	015a      	lsls	r2, r3, #5
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	4413      	add	r3, r2
 800ca98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	db12      	blt.n	800cac8 <USB_EPSetStall+0x54>
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00f      	beq.n	800cac8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	015a      	lsls	r2, r3, #5
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	4413      	add	r3, r2
 800cab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	68ba      	ldr	r2, [r7, #8]
 800cab8:	0151      	lsls	r1, r2, #5
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	440a      	add	r2, r1
 800cabe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cac2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cac6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	015a      	lsls	r2, r3, #5
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	4413      	add	r3, r2
 800cad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68ba      	ldr	r2, [r7, #8]
 800cad8:	0151      	lsls	r1, r2, #5
 800cada:	68fa      	ldr	r2, [r7, #12]
 800cadc:	440a      	add	r2, r1
 800cade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cae2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cae6:	6013      	str	r3, [r2, #0]
 800cae8:	e02b      	b.n	800cb42 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	015a      	lsls	r2, r3, #5
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	4413      	add	r3, r2
 800caf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	db12      	blt.n	800cb22 <USB_EPSetStall+0xae>
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00f      	beq.n	800cb22 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	015a      	lsls	r2, r3, #5
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	4413      	add	r3, r2
 800cb0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	68ba      	ldr	r2, [r7, #8]
 800cb12:	0151      	lsls	r1, r2, #5
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	440a      	add	r2, r1
 800cb18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cb20:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	015a      	lsls	r2, r3, #5
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	4413      	add	r3, r2
 800cb2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	0151      	lsls	r1, r2, #5
 800cb34:	68fa      	ldr	r2, [r7, #12]
 800cb36:	440a      	add	r2, r1
 800cb38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cb40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	785b      	ldrb	r3, [r3, #1]
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d128      	bne.n	800cbbe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	015a      	lsls	r2, r3, #5
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	4413      	add	r3, r2
 800cb74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	68ba      	ldr	r2, [r7, #8]
 800cb7c:	0151      	lsls	r1, r2, #5
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	440a      	add	r2, r1
 800cb82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	791b      	ldrb	r3, [r3, #4]
 800cb90:	2b03      	cmp	r3, #3
 800cb92:	d003      	beq.n	800cb9c <USB_EPClearStall+0x4c>
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	791b      	ldrb	r3, [r3, #4]
 800cb98:	2b02      	cmp	r3, #2
 800cb9a:	d138      	bne.n	800cc0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	015a      	lsls	r2, r3, #5
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	4413      	add	r3, r2
 800cba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	68ba      	ldr	r2, [r7, #8]
 800cbac:	0151      	lsls	r1, r2, #5
 800cbae:	68fa      	ldr	r2, [r7, #12]
 800cbb0:	440a      	add	r2, r1
 800cbb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbba:	6013      	str	r3, [r2, #0]
 800cbbc:	e027      	b.n	800cc0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	015a      	lsls	r2, r3, #5
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	4413      	add	r3, r2
 800cbc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	68ba      	ldr	r2, [r7, #8]
 800cbce:	0151      	lsls	r1, r2, #5
 800cbd0:	68fa      	ldr	r2, [r7, #12]
 800cbd2:	440a      	add	r2, r1
 800cbd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cbdc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	791b      	ldrb	r3, [r3, #4]
 800cbe2:	2b03      	cmp	r3, #3
 800cbe4:	d003      	beq.n	800cbee <USB_EPClearStall+0x9e>
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	791b      	ldrb	r3, [r3, #4]
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	d10f      	bne.n	800cc0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	015a      	lsls	r2, r3, #5
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	68ba      	ldr	r2, [r7, #8]
 800cbfe:	0151      	lsls	r1, r2, #5
 800cc00:	68fa      	ldr	r2, [r7, #12]
 800cc02:	440a      	add	r2, r1
 800cc04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cc0e:	2300      	movs	r3, #0
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3714      	adds	r7, #20
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	460b      	mov	r3, r1
 800cc26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cc3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	78fb      	ldrb	r3, [r7, #3]
 800cc4a:	011b      	lsls	r3, r3, #4
 800cc4c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cc50:	68f9      	ldr	r1, [r7, #12]
 800cc52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc56:	4313      	orrs	r3, r2
 800cc58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cc5a:	2300      	movs	r3, #0
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3714      	adds	r7, #20
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc82:	f023 0303 	bic.w	r3, r3, #3
 800cc86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc96:	f023 0302 	bic.w	r3, r3, #2
 800cc9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc9c:	2300      	movs	r3, #0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3714      	adds	r7, #20
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr

0800ccaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ccaa:	b480      	push	{r7}
 800ccac:	b085      	sub	sp, #20
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	68fa      	ldr	r2, [r7, #12]
 800ccc0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ccc4:	f023 0303 	bic.w	r3, r3, #3
 800ccc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	68fa      	ldr	r2, [r7, #12]
 800ccd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccd8:	f043 0302 	orr.w	r3, r3, #2
 800ccdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ccde:	2300      	movs	r3, #0
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3714      	adds	r7, #20
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	695b      	ldr	r3, [r3, #20]
 800ccf8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	699b      	ldr	r3, [r3, #24]
 800ccfe:	68fa      	ldr	r2, [r7, #12]
 800cd00:	4013      	ands	r3, r2
 800cd02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cd04:	68fb      	ldr	r3, [r7, #12]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3714      	adds	r7, #20
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr

0800cd12 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd12:	b480      	push	{r7}
 800cd14:	b085      	sub	sp, #20
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd24:	699b      	ldr	r3, [r3, #24]
 800cd26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd2e:	69db      	ldr	r3, [r3, #28]
 800cd30:	68ba      	ldr	r2, [r7, #8]
 800cd32:	4013      	ands	r3, r2
 800cd34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	0c1b      	lsrs	r3, r3, #16
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3714      	adds	r7, #20
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd46:	b480      	push	{r7}
 800cd48:	b085      	sub	sp, #20
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	4013      	ands	r3, r2
 800cd68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	b29b      	uxth	r3, r3
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3714      	adds	r7, #20
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr

0800cd7a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cd7a:	b480      	push	{r7}
 800cd7c:	b085      	sub	sp, #20
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
 800cd82:	460b      	mov	r3, r1
 800cd84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cd8a:	78fb      	ldrb	r3, [r7, #3]
 800cd8c:	015a      	lsls	r2, r3, #5
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	4413      	add	r3, r2
 800cd92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cda0:	695b      	ldr	r3, [r3, #20]
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	4013      	ands	r3, r2
 800cda6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cda8:	68bb      	ldr	r3, [r7, #8]
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3714      	adds	r7, #20
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cdb6:	b480      	push	{r7}
 800cdb8:	b087      	sub	sp, #28
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdd8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cdda:	78fb      	ldrb	r3, [r7, #3]
 800cddc:	f003 030f 	and.w	r3, r3, #15
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	fa22 f303 	lsr.w	r3, r2, r3
 800cde6:	01db      	lsls	r3, r3, #7
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	693a      	ldr	r2, [r7, #16]
 800cdec:	4313      	orrs	r3, r2
 800cdee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cdf0:	78fb      	ldrb	r3, [r7, #3]
 800cdf2:	015a      	lsls	r2, r3, #5
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	693a      	ldr	r2, [r7, #16]
 800ce00:	4013      	ands	r3, r2
 800ce02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ce04:	68bb      	ldr	r3, [r7, #8]
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	371c      	adds	r7, #28
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr

0800ce12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ce12:	b480      	push	{r7}
 800ce14:	b083      	sub	sp, #12
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	695b      	ldr	r3, [r3, #20]
 800ce1e:	f003 0301 	and.w	r3, r3, #1
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	370c      	adds	r7, #12
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr
	...

0800ce30 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b085      	sub	sp, #20
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	4b09      	ldr	r3, [pc, #36]	; (800ce74 <USB_ActivateSetup+0x44>)
 800ce4e:	4013      	ands	r3, r2
 800ce50:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3714      	adds	r7, #20
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr
 800ce74:	fffff800 	.word	0xfffff800

0800ce78 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b087      	sub	sp, #28
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	460b      	mov	r3, r1
 800ce82:	607a      	str	r2, [r7, #4]
 800ce84:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	333c      	adds	r3, #60	; 0x3c
 800ce8e:	3304      	adds	r3, #4
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	4a26      	ldr	r2, [pc, #152]	; (800cf30 <USB_EP0_OutStart+0xb8>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d90a      	bls.n	800ceb2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ceac:	d101      	bne.n	800ceb2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	e037      	b.n	800cf22 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceb8:	461a      	mov	r2, r3
 800ceba:	2300      	movs	r3, #0
 800cebc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec4:	691b      	ldr	r3, [r3, #16]
 800cec6:	697a      	ldr	r2, [r7, #20]
 800cec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cecc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ced0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	697a      	ldr	r2, [r7, #20]
 800cedc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cee0:	f043 0318 	orr.w	r3, r3, #24
 800cee4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceec:	691b      	ldr	r3, [r3, #16]
 800ceee:	697a      	ldr	r2, [r7, #20]
 800cef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cef4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cef8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cefa:	7afb      	ldrb	r3, [r7, #11]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d10f      	bne.n	800cf20 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf06:	461a      	mov	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	697a      	ldr	r2, [r7, #20]
 800cf16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf1a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cf1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	371c      	adds	r7, #28
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	4f54300a 	.word	0x4f54300a

0800cf34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	3301      	adds	r3, #1
 800cf44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	4a13      	ldr	r2, [pc, #76]	; (800cf98 <USB_CoreReset+0x64>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d901      	bls.n	800cf52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cf4e:	2303      	movs	r3, #3
 800cf50:	e01b      	b.n	800cf8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	691b      	ldr	r3, [r3, #16]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	daf2      	bge.n	800cf40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	691b      	ldr	r3, [r3, #16]
 800cf62:	f043 0201 	orr.w	r2, r3, #1
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	4a09      	ldr	r2, [pc, #36]	; (800cf98 <USB_CoreReset+0x64>)
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d901      	bls.n	800cf7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cf78:	2303      	movs	r3, #3
 800cf7a:	e006      	b.n	800cf8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	691b      	ldr	r3, [r3, #16]
 800cf80:	f003 0301 	and.w	r3, r3, #1
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d0f0      	beq.n	800cf6a <USB_CoreReset+0x36>

  return HAL_OK;
 800cf88:	2300      	movs	r3, #0
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3714      	adds	r7, #20
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	00030d40 	.word	0x00030d40

0800cf9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cfa8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cfac:	f002 fcd4 	bl	800f958 <USBD_static_malloc>
 800cfb0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d109      	bne.n	800cfcc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	32b0      	adds	r2, #176	; 0xb0
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cfc8:	2302      	movs	r3, #2
 800cfca:	e0d4      	b.n	800d176 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cfcc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	68f8      	ldr	r0, [r7, #12]
 800cfd4:	f004 f982 	bl	80112dc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	32b0      	adds	r2, #176	; 0xb0
 800cfe2:	68f9      	ldr	r1, [r7, #12]
 800cfe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	32b0      	adds	r2, #176	; 0xb0
 800cff2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	7c1b      	ldrb	r3, [r3, #16]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d138      	bne.n	800d076 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d004:	4b5e      	ldr	r3, [pc, #376]	; (800d180 <USBD_CDC_Init+0x1e4>)
 800d006:	7819      	ldrb	r1, [r3, #0]
 800d008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d00c:	2202      	movs	r2, #2
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f002 fb7f 	bl	800f712 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d014:	4b5a      	ldr	r3, [pc, #360]	; (800d180 <USBD_CDC_Init+0x1e4>)
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	f003 020f 	and.w	r2, r3, #15
 800d01c:	6879      	ldr	r1, [r7, #4]
 800d01e:	4613      	mov	r3, r2
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	4413      	add	r3, r2
 800d024:	009b      	lsls	r3, r3, #2
 800d026:	440b      	add	r3, r1
 800d028:	3324      	adds	r3, #36	; 0x24
 800d02a:	2201      	movs	r2, #1
 800d02c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d02e:	4b55      	ldr	r3, [pc, #340]	; (800d184 <USBD_CDC_Init+0x1e8>)
 800d030:	7819      	ldrb	r1, [r3, #0]
 800d032:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d036:	2202      	movs	r2, #2
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f002 fb6a 	bl	800f712 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d03e:	4b51      	ldr	r3, [pc, #324]	; (800d184 <USBD_CDC_Init+0x1e8>)
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	f003 020f 	and.w	r2, r3, #15
 800d046:	6879      	ldr	r1, [r7, #4]
 800d048:	4613      	mov	r3, r2
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	4413      	add	r3, r2
 800d04e:	009b      	lsls	r3, r3, #2
 800d050:	440b      	add	r3, r1
 800d052:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d056:	2201      	movs	r2, #1
 800d058:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d05a:	4b4b      	ldr	r3, [pc, #300]	; (800d188 <USBD_CDC_Init+0x1ec>)
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	f003 020f 	and.w	r2, r3, #15
 800d062:	6879      	ldr	r1, [r7, #4]
 800d064:	4613      	mov	r3, r2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	4413      	add	r3, r2
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	440b      	add	r3, r1
 800d06e:	3326      	adds	r3, #38	; 0x26
 800d070:	2210      	movs	r2, #16
 800d072:	801a      	strh	r2, [r3, #0]
 800d074:	e035      	b.n	800d0e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d076:	4b42      	ldr	r3, [pc, #264]	; (800d180 <USBD_CDC_Init+0x1e4>)
 800d078:	7819      	ldrb	r1, [r3, #0]
 800d07a:	2340      	movs	r3, #64	; 0x40
 800d07c:	2202      	movs	r2, #2
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f002 fb47 	bl	800f712 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d084:	4b3e      	ldr	r3, [pc, #248]	; (800d180 <USBD_CDC_Init+0x1e4>)
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	f003 020f 	and.w	r2, r3, #15
 800d08c:	6879      	ldr	r1, [r7, #4]
 800d08e:	4613      	mov	r3, r2
 800d090:	009b      	lsls	r3, r3, #2
 800d092:	4413      	add	r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	440b      	add	r3, r1
 800d098:	3324      	adds	r3, #36	; 0x24
 800d09a:	2201      	movs	r2, #1
 800d09c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d09e:	4b39      	ldr	r3, [pc, #228]	; (800d184 <USBD_CDC_Init+0x1e8>)
 800d0a0:	7819      	ldrb	r1, [r3, #0]
 800d0a2:	2340      	movs	r3, #64	; 0x40
 800d0a4:	2202      	movs	r2, #2
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f002 fb33 	bl	800f712 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d0ac:	4b35      	ldr	r3, [pc, #212]	; (800d184 <USBD_CDC_Init+0x1e8>)
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	f003 020f 	and.w	r2, r3, #15
 800d0b4:	6879      	ldr	r1, [r7, #4]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4413      	add	r3, r2
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	440b      	add	r3, r1
 800d0c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d0c8:	4b2f      	ldr	r3, [pc, #188]	; (800d188 <USBD_CDC_Init+0x1ec>)
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	f003 020f 	and.w	r2, r3, #15
 800d0d0:	6879      	ldr	r1, [r7, #4]
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	4413      	add	r3, r2
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	440b      	add	r3, r1
 800d0dc:	3326      	adds	r3, #38	; 0x26
 800d0de:	2210      	movs	r2, #16
 800d0e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d0e2:	4b29      	ldr	r3, [pc, #164]	; (800d188 <USBD_CDC_Init+0x1ec>)
 800d0e4:	7819      	ldrb	r1, [r3, #0]
 800d0e6:	2308      	movs	r3, #8
 800d0e8:	2203      	movs	r2, #3
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f002 fb11 	bl	800f712 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d0f0:	4b25      	ldr	r3, [pc, #148]	; (800d188 <USBD_CDC_Init+0x1ec>)
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	f003 020f 	and.w	r2, r3, #15
 800d0f8:	6879      	ldr	r1, [r7, #4]
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	009b      	lsls	r3, r3, #2
 800d0fe:	4413      	add	r3, r2
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	440b      	add	r3, r1
 800d104:	3324      	adds	r3, #36	; 0x24
 800d106:	2201      	movs	r2, #1
 800d108:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2200      	movs	r2, #0
 800d10e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	33b0      	adds	r3, #176	; 0xb0
 800d11c:	009b      	lsls	r3, r3, #2
 800d11e:	4413      	add	r3, r2
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2200      	movs	r2, #0
 800d12a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2200      	movs	r2, #0
 800d132:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d101      	bne.n	800d144 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d140:	2302      	movs	r3, #2
 800d142:	e018      	b.n	800d176 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	7c1b      	ldrb	r3, [r3, #16]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d10a      	bne.n	800d162 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d14c:	4b0d      	ldr	r3, [pc, #52]	; (800d184 <USBD_CDC_Init+0x1e8>)
 800d14e:	7819      	ldrb	r1, [r3, #0]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f002 fbc8 	bl	800f8f0 <USBD_LL_PrepareReceive>
 800d160:	e008      	b.n	800d174 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d162:	4b08      	ldr	r3, [pc, #32]	; (800d184 <USBD_CDC_Init+0x1e8>)
 800d164:	7819      	ldrb	r1, [r3, #0]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d16c:	2340      	movs	r3, #64	; 0x40
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f002 fbbe 	bl	800f8f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	24000097 	.word	0x24000097
 800d184:	24000098 	.word	0x24000098
 800d188:	24000099 	.word	0x24000099

0800d18c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	460b      	mov	r3, r1
 800d196:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d198:	4b3a      	ldr	r3, [pc, #232]	; (800d284 <USBD_CDC_DeInit+0xf8>)
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	4619      	mov	r1, r3
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f002 fadd 	bl	800f75e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d1a4:	4b37      	ldr	r3, [pc, #220]	; (800d284 <USBD_CDC_DeInit+0xf8>)
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	f003 020f 	and.w	r2, r3, #15
 800d1ac:	6879      	ldr	r1, [r7, #4]
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	4413      	add	r3, r2
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	440b      	add	r3, r1
 800d1b8:	3324      	adds	r3, #36	; 0x24
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d1be:	4b32      	ldr	r3, [pc, #200]	; (800d288 <USBD_CDC_DeInit+0xfc>)
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f002 faca 	bl	800f75e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d1ca:	4b2f      	ldr	r3, [pc, #188]	; (800d288 <USBD_CDC_DeInit+0xfc>)
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	f003 020f 	and.w	r2, r3, #15
 800d1d2:	6879      	ldr	r1, [r7, #4]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4413      	add	r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	440b      	add	r3, r1
 800d1de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d1e6:	4b29      	ldr	r3, [pc, #164]	; (800d28c <USBD_CDC_DeInit+0x100>)
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f002 fab6 	bl	800f75e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d1f2:	4b26      	ldr	r3, [pc, #152]	; (800d28c <USBD_CDC_DeInit+0x100>)
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	f003 020f 	and.w	r2, r3, #15
 800d1fa:	6879      	ldr	r1, [r7, #4]
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	4413      	add	r3, r2
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	440b      	add	r3, r1
 800d206:	3324      	adds	r3, #36	; 0x24
 800d208:	2200      	movs	r2, #0
 800d20a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d20c:	4b1f      	ldr	r3, [pc, #124]	; (800d28c <USBD_CDC_DeInit+0x100>)
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	f003 020f 	and.w	r2, r3, #15
 800d214:	6879      	ldr	r1, [r7, #4]
 800d216:	4613      	mov	r3, r2
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	4413      	add	r3, r2
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	440b      	add	r3, r1
 800d220:	3326      	adds	r3, #38	; 0x26
 800d222:	2200      	movs	r2, #0
 800d224:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	32b0      	adds	r2, #176	; 0xb0
 800d230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d01f      	beq.n	800d278 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	33b0      	adds	r3, #176	; 0xb0
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4413      	add	r3, r2
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	32b0      	adds	r2, #176	; 0xb0
 800d256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d25a:	4618      	mov	r0, r3
 800d25c:	f002 fb8a 	bl	800f974 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	32b0      	adds	r2, #176	; 0xb0
 800d26a:	2100      	movs	r1, #0
 800d26c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d278:	2300      	movs	r3, #0
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3708      	adds	r7, #8
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	24000097 	.word	0x24000097
 800d288:	24000098 	.word	0x24000098
 800d28c:	24000099 	.word	0x24000099

0800d290 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	32b0      	adds	r2, #176	; 0xb0
 800d2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d101      	bne.n	800d2c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d2bc:	2303      	movs	r3, #3
 800d2be:	e0bf      	b.n	800d440 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d050      	beq.n	800d36e <USBD_CDC_Setup+0xde>
 800d2cc:	2b20      	cmp	r3, #32
 800d2ce:	f040 80af 	bne.w	800d430 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	88db      	ldrh	r3, [r3, #6]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d03a      	beq.n	800d350 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	b25b      	sxtb	r3, r3
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	da1b      	bge.n	800d31c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	33b0      	adds	r3, #176	; 0xb0
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	4413      	add	r3, r2
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	689b      	ldr	r3, [r3, #8]
 800d2f6:	683a      	ldr	r2, [r7, #0]
 800d2f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d2fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d2fc:	683a      	ldr	r2, [r7, #0]
 800d2fe:	88d2      	ldrh	r2, [r2, #6]
 800d300:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	88db      	ldrh	r3, [r3, #6]
 800d306:	2b07      	cmp	r3, #7
 800d308:	bf28      	it	cs
 800d30a:	2307      	movcs	r3, #7
 800d30c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	89fa      	ldrh	r2, [r7, #14]
 800d312:	4619      	mov	r1, r3
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f001 fdb3 	bl	800ee80 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d31a:	e090      	b.n	800d43e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	785a      	ldrb	r2, [r3, #1]
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	88db      	ldrh	r3, [r3, #6]
 800d32a:	2b3f      	cmp	r3, #63	; 0x3f
 800d32c:	d803      	bhi.n	800d336 <USBD_CDC_Setup+0xa6>
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	88db      	ldrh	r3, [r3, #6]
 800d332:	b2da      	uxtb	r2, r3
 800d334:	e000      	b.n	800d338 <USBD_CDC_Setup+0xa8>
 800d336:	2240      	movs	r2, #64	; 0x40
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d33e:	6939      	ldr	r1, [r7, #16]
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d346:	461a      	mov	r2, r3
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f001 fdc5 	bl	800eed8 <USBD_CtlPrepareRx>
      break;
 800d34e:	e076      	b.n	800d43e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	33b0      	adds	r3, #176	; 0xb0
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	4413      	add	r3, r2
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	683a      	ldr	r2, [r7, #0]
 800d364:	7850      	ldrb	r0, [r2, #1]
 800d366:	2200      	movs	r2, #0
 800d368:	6839      	ldr	r1, [r7, #0]
 800d36a:	4798      	blx	r3
      break;
 800d36c:	e067      	b.n	800d43e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	785b      	ldrb	r3, [r3, #1]
 800d372:	2b0b      	cmp	r3, #11
 800d374:	d851      	bhi.n	800d41a <USBD_CDC_Setup+0x18a>
 800d376:	a201      	add	r2, pc, #4	; (adr r2, 800d37c <USBD_CDC_Setup+0xec>)
 800d378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d37c:	0800d3ad 	.word	0x0800d3ad
 800d380:	0800d429 	.word	0x0800d429
 800d384:	0800d41b 	.word	0x0800d41b
 800d388:	0800d41b 	.word	0x0800d41b
 800d38c:	0800d41b 	.word	0x0800d41b
 800d390:	0800d41b 	.word	0x0800d41b
 800d394:	0800d41b 	.word	0x0800d41b
 800d398:	0800d41b 	.word	0x0800d41b
 800d39c:	0800d41b 	.word	0x0800d41b
 800d3a0:	0800d41b 	.word	0x0800d41b
 800d3a4:	0800d3d7 	.word	0x0800d3d7
 800d3a8:	0800d401 	.word	0x0800d401
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	2b03      	cmp	r3, #3
 800d3b6:	d107      	bne.n	800d3c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d3b8:	f107 030a 	add.w	r3, r7, #10
 800d3bc:	2202      	movs	r2, #2
 800d3be:	4619      	mov	r1, r3
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f001 fd5d 	bl	800ee80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d3c6:	e032      	b.n	800d42e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d3c8:	6839      	ldr	r1, [r7, #0]
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f001 fce7 	bl	800ed9e <USBD_CtlError>
            ret = USBD_FAIL;
 800d3d0:	2303      	movs	r3, #3
 800d3d2:	75fb      	strb	r3, [r7, #23]
          break;
 800d3d4:	e02b      	b.n	800d42e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	2b03      	cmp	r3, #3
 800d3e0:	d107      	bne.n	800d3f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d3e2:	f107 030d 	add.w	r3, r7, #13
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f001 fd48 	bl	800ee80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d3f0:	e01d      	b.n	800d42e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d3f2:	6839      	ldr	r1, [r7, #0]
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f001 fcd2 	bl	800ed9e <USBD_CtlError>
            ret = USBD_FAIL;
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	75fb      	strb	r3, [r7, #23]
          break;
 800d3fe:	e016      	b.n	800d42e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d406:	b2db      	uxtb	r3, r3
 800d408:	2b03      	cmp	r3, #3
 800d40a:	d00f      	beq.n	800d42c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d40c:	6839      	ldr	r1, [r7, #0]
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f001 fcc5 	bl	800ed9e <USBD_CtlError>
            ret = USBD_FAIL;
 800d414:	2303      	movs	r3, #3
 800d416:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d418:	e008      	b.n	800d42c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d41a:	6839      	ldr	r1, [r7, #0]
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f001 fcbe 	bl	800ed9e <USBD_CtlError>
          ret = USBD_FAIL;
 800d422:	2303      	movs	r3, #3
 800d424:	75fb      	strb	r3, [r7, #23]
          break;
 800d426:	e002      	b.n	800d42e <USBD_CDC_Setup+0x19e>
          break;
 800d428:	bf00      	nop
 800d42a:	e008      	b.n	800d43e <USBD_CDC_Setup+0x1ae>
          break;
 800d42c:	bf00      	nop
      }
      break;
 800d42e:	e006      	b.n	800d43e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d430:	6839      	ldr	r1, [r7, #0]
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f001 fcb3 	bl	800ed9e <USBD_CtlError>
      ret = USBD_FAIL;
 800d438:	2303      	movs	r3, #3
 800d43a:	75fb      	strb	r3, [r7, #23]
      break;
 800d43c:	bf00      	nop
  }

  return (uint8_t)ret;
 800d43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d440:	4618      	mov	r0, r3
 800d442:	3718      	adds	r7, #24
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	460b      	mov	r3, r1
 800d452:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d45a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	32b0      	adds	r2, #176	; 0xb0
 800d466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d101      	bne.n	800d472 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d46e:	2303      	movs	r3, #3
 800d470:	e065      	b.n	800d53e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	32b0      	adds	r2, #176	; 0xb0
 800d47c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d480:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d482:	78fb      	ldrb	r3, [r7, #3]
 800d484:	f003 020f 	and.w	r2, r3, #15
 800d488:	6879      	ldr	r1, [r7, #4]
 800d48a:	4613      	mov	r3, r2
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	4413      	add	r3, r2
 800d490:	009b      	lsls	r3, r3, #2
 800d492:	440b      	add	r3, r1
 800d494:	3318      	adds	r3, #24
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d02f      	beq.n	800d4fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d49c:	78fb      	ldrb	r3, [r7, #3]
 800d49e:	f003 020f 	and.w	r2, r3, #15
 800d4a2:	6879      	ldr	r1, [r7, #4]
 800d4a4:	4613      	mov	r3, r2
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	4413      	add	r3, r2
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	440b      	add	r3, r1
 800d4ae:	3318      	adds	r3, #24
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	78fb      	ldrb	r3, [r7, #3]
 800d4b4:	f003 010f 	and.w	r1, r3, #15
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	00db      	lsls	r3, r3, #3
 800d4be:	440b      	add	r3, r1
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	4403      	add	r3, r0
 800d4c4:	3344      	adds	r3, #68	; 0x44
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	fbb2 f1f3 	udiv	r1, r2, r3
 800d4cc:	fb01 f303 	mul.w	r3, r1, r3
 800d4d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d112      	bne.n	800d4fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d4d6:	78fb      	ldrb	r3, [r7, #3]
 800d4d8:	f003 020f 	and.w	r2, r3, #15
 800d4dc:	6879      	ldr	r1, [r7, #4]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	4413      	add	r3, r2
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	440b      	add	r3, r1
 800d4e8:	3318      	adds	r3, #24
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d4ee:	78f9      	ldrb	r1, [r7, #3]
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f002 f9da 	bl	800f8ae <USBD_LL_Transmit>
 800d4fa:	e01f      	b.n	800d53c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	2200      	movs	r2, #0
 800d500:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	33b0      	adds	r3, #176	; 0xb0
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	4413      	add	r3, r2
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	691b      	ldr	r3, [r3, #16]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d010      	beq.n	800d53c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d520:	687a      	ldr	r2, [r7, #4]
 800d522:	33b0      	adds	r3, #176	; 0xb0
 800d524:	009b      	lsls	r3, r3, #2
 800d526:	4413      	add	r3, r2
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	691b      	ldr	r3, [r3, #16]
 800d52c:	68ba      	ldr	r2, [r7, #8]
 800d52e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d532:	68ba      	ldr	r2, [r7, #8]
 800d534:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d538:	78fa      	ldrb	r2, [r7, #3]
 800d53a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d546:	b580      	push	{r7, lr}
 800d548:	b084      	sub	sp, #16
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
 800d54e:	460b      	mov	r3, r1
 800d550:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	32b0      	adds	r2, #176	; 0xb0
 800d55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d560:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	32b0      	adds	r2, #176	; 0xb0
 800d56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d101      	bne.n	800d578 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d574:	2303      	movs	r3, #3
 800d576:	e01a      	b.n	800d5ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d578:	78fb      	ldrb	r3, [r7, #3]
 800d57a:	4619      	mov	r1, r3
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f002 f9d8 	bl	800f932 <USBD_LL_GetRxDataSize>
 800d582:	4602      	mov	r2, r0
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	33b0      	adds	r3, #176	; 0xb0
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	4413      	add	r3, r2
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	68db      	ldr	r3, [r3, #12]
 800d59c:	68fa      	ldr	r2, [r7, #12]
 800d59e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d5a2:	68fa      	ldr	r2, [r7, #12]
 800d5a4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d5a8:	4611      	mov	r1, r2
 800d5aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d5ac:	2300      	movs	r3, #0
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3710      	adds	r7, #16
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}

0800d5b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d5b6:	b580      	push	{r7, lr}
 800d5b8:	b084      	sub	sp, #16
 800d5ba:	af00      	add	r7, sp, #0
 800d5bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	32b0      	adds	r2, #176	; 0xb0
 800d5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d101      	bne.n	800d5d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d5d4:	2303      	movs	r3, #3
 800d5d6:	e025      	b.n	800d624 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	33b0      	adds	r3, #176	; 0xb0
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	4413      	add	r3, r2
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d01a      	beq.n	800d622 <USBD_CDC_EP0_RxReady+0x6c>
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d5f2:	2bff      	cmp	r3, #255	; 0xff
 800d5f4:	d015      	beq.n	800d622 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	33b0      	adds	r3, #176	; 0xb0
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	4413      	add	r3, r2
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	68fa      	ldr	r2, [r7, #12]
 800d60a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d60e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d616:	b292      	uxth	r2, r2
 800d618:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	22ff      	movs	r2, #255	; 0xff
 800d61e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d622:	2300      	movs	r3, #0
}
 800d624:	4618      	mov	r0, r3
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d634:	2182      	movs	r1, #130	; 0x82
 800d636:	4818      	ldr	r0, [pc, #96]	; (800d698 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d638:	f000 fd4f 	bl	800e0da <USBD_GetEpDesc>
 800d63c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d63e:	2101      	movs	r1, #1
 800d640:	4815      	ldr	r0, [pc, #84]	; (800d698 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d642:	f000 fd4a 	bl	800e0da <USBD_GetEpDesc>
 800d646:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d648:	2181      	movs	r1, #129	; 0x81
 800d64a:	4813      	ldr	r0, [pc, #76]	; (800d698 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d64c:	f000 fd45 	bl	800e0da <USBD_GetEpDesc>
 800d650:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d002      	beq.n	800d65e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	2210      	movs	r2, #16
 800d65c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d006      	beq.n	800d672 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	2200      	movs	r2, #0
 800d668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d66c:	711a      	strb	r2, [r3, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d006      	beq.n	800d686 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2200      	movs	r2, #0
 800d67c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d680:	711a      	strb	r2, [r3, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2243      	movs	r2, #67	; 0x43
 800d68a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d68c:	4b02      	ldr	r3, [pc, #8]	; (800d698 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3718      	adds	r7, #24
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	24000054 	.word	0x24000054

0800d69c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b086      	sub	sp, #24
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d6a4:	2182      	movs	r1, #130	; 0x82
 800d6a6:	4818      	ldr	r0, [pc, #96]	; (800d708 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d6a8:	f000 fd17 	bl	800e0da <USBD_GetEpDesc>
 800d6ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d6ae:	2101      	movs	r1, #1
 800d6b0:	4815      	ldr	r0, [pc, #84]	; (800d708 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d6b2:	f000 fd12 	bl	800e0da <USBD_GetEpDesc>
 800d6b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d6b8:	2181      	movs	r1, #129	; 0x81
 800d6ba:	4813      	ldr	r0, [pc, #76]	; (800d708 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d6bc:	f000 fd0d 	bl	800e0da <USBD_GetEpDesc>
 800d6c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d002      	beq.n	800d6ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	2210      	movs	r2, #16
 800d6cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d006      	beq.n	800d6e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	711a      	strb	r2, [r3, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f042 0202 	orr.w	r2, r2, #2
 800d6e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d006      	beq.n	800d6f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	711a      	strb	r2, [r3, #4]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f042 0202 	orr.w	r2, r2, #2
 800d6f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2243      	movs	r2, #67	; 0x43
 800d6fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d6fc:	4b02      	ldr	r3, [pc, #8]	; (800d708 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3718      	adds	r7, #24
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	24000054 	.word	0x24000054

0800d70c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d714:	2182      	movs	r1, #130	; 0x82
 800d716:	4818      	ldr	r0, [pc, #96]	; (800d778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d718:	f000 fcdf 	bl	800e0da <USBD_GetEpDesc>
 800d71c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d71e:	2101      	movs	r1, #1
 800d720:	4815      	ldr	r0, [pc, #84]	; (800d778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d722:	f000 fcda 	bl	800e0da <USBD_GetEpDesc>
 800d726:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d728:	2181      	movs	r1, #129	; 0x81
 800d72a:	4813      	ldr	r0, [pc, #76]	; (800d778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d72c:	f000 fcd5 	bl	800e0da <USBD_GetEpDesc>
 800d730:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	2210      	movs	r2, #16
 800d73c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d006      	beq.n	800d752 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	2200      	movs	r2, #0
 800d748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d74c:	711a      	strb	r2, [r3, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d006      	beq.n	800d766 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2200      	movs	r2, #0
 800d75c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d760:	711a      	strb	r2, [r3, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2243      	movs	r2, #67	; 0x43
 800d76a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d76c:	4b02      	ldr	r3, [pc, #8]	; (800d778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3718      	adds	r7, #24
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	24000054 	.word	0x24000054

0800d77c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	220a      	movs	r2, #10
 800d788:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d78a:	4b03      	ldr	r3, [pc, #12]	; (800d798 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr
 800d798:	24000010 	.word	0x24000010

0800d79c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d101      	bne.n	800d7b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d7ac:	2303      	movs	r3, #3
 800d7ae:	e009      	b.n	800d7c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	33b0      	adds	r3, #176	; 0xb0
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	4413      	add	r3, r2
 800d7be:	683a      	ldr	r2, [r7, #0]
 800d7c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d7c2:	2300      	movs	r3, #0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	370c      	adds	r7, #12
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr

0800d7d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b087      	sub	sp, #28
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	32b0      	adds	r2, #176	; 0xb0
 800d7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d101      	bne.n	800d7f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d7f2:	2303      	movs	r3, #3
 800d7f4:	e008      	b.n	800d808 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	68ba      	ldr	r2, [r7, #8]
 800d7fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d806:	2300      	movs	r3, #0
}
 800d808:	4618      	mov	r0, r3
 800d80a:	371c      	adds	r7, #28
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr

0800d814 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d814:	b480      	push	{r7}
 800d816:	b085      	sub	sp, #20
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	32b0      	adds	r2, #176	; 0xb0
 800d828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d82c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d101      	bne.n	800d838 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d834:	2303      	movs	r3, #3
 800d836:	e004      	b.n	800d842 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	683a      	ldr	r2, [r7, #0]
 800d83c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d840:	2300      	movs	r3, #0
}
 800d842:	4618      	mov	r0, r3
 800d844:	3714      	adds	r7, #20
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr
	...

0800d850 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	32b0      	adds	r2, #176	; 0xb0
 800d862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d866:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d868:	2301      	movs	r3, #1
 800d86a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d101      	bne.n	800d876 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d872:	2303      	movs	r3, #3
 800d874:	e025      	b.n	800d8c2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d11f      	bne.n	800d8c0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	2201      	movs	r2, #1
 800d884:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d888:	4b10      	ldr	r3, [pc, #64]	; (800d8cc <USBD_CDC_TransmitPacket+0x7c>)
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	f003 020f 	and.w	r2, r3, #15
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	4613      	mov	r3, r2
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	4413      	add	r3, r2
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	4403      	add	r3, r0
 800d8a2:	3318      	adds	r3, #24
 800d8a4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d8a6:	4b09      	ldr	r3, [pc, #36]	; (800d8cc <USBD_CDC_TransmitPacket+0x7c>)
 800d8a8:	7819      	ldrb	r1, [r3, #0]
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f001 fff9 	bl	800f8ae <USBD_LL_Transmit>

    ret = USBD_OK;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3710      	adds	r7, #16
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	24000097 	.word	0x24000097

0800d8d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	32b0      	adds	r2, #176	; 0xb0
 800d8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	32b0      	adds	r2, #176	; 0xb0
 800d8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d101      	bne.n	800d8fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d8fa:	2303      	movs	r3, #3
 800d8fc:	e018      	b.n	800d930 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	7c1b      	ldrb	r3, [r3, #16]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d10a      	bne.n	800d91c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d906:	4b0c      	ldr	r3, [pc, #48]	; (800d938 <USBD_CDC_ReceivePacket+0x68>)
 800d908:	7819      	ldrb	r1, [r3, #0]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d910:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f001 ffeb 	bl	800f8f0 <USBD_LL_PrepareReceive>
 800d91a:	e008      	b.n	800d92e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d91c:	4b06      	ldr	r3, [pc, #24]	; (800d938 <USBD_CDC_ReceivePacket+0x68>)
 800d91e:	7819      	ldrb	r1, [r3, #0]
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d926:	2340      	movs	r3, #64	; 0x40
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f001 ffe1 	bl	800f8f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d92e:	2300      	movs	r3, #0
}
 800d930:	4618      	mov	r0, r3
 800d932:	3710      	adds	r7, #16
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	24000098 	.word	0x24000098

0800d93c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b086      	sub	sp, #24
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	4613      	mov	r3, r2
 800d948:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d101      	bne.n	800d954 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d950:	2303      	movs	r3, #3
 800d952:	e01f      	b.n	800d994 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2200      	movs	r2, #0
 800d958:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2200      	movs	r2, #0
 800d960:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2200      	movs	r2, #0
 800d968:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d003      	beq.n	800d97a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	68ba      	ldr	r2, [r7, #8]
 800d976:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2201      	movs	r2, #1
 800d97e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	79fa      	ldrb	r2, [r7, #7]
 800d986:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f001 fe57 	bl	800f63c <USBD_LL_Init>
 800d98e:	4603      	mov	r3, r0
 800d990:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d992:	7dfb      	ldrb	r3, [r7, #23]
}
 800d994:	4618      	mov	r0, r3
 800d996:	3718      	adds	r7, #24
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d101      	bne.n	800d9b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d9b0:	2303      	movs	r3, #3
 800d9b2:	e025      	b.n	800da00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	683a      	ldr	r2, [r7, #0]
 800d9b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	32ae      	adds	r2, #174	; 0xae
 800d9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00f      	beq.n	800d9f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	32ae      	adds	r2, #174	; 0xae
 800d9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e0:	f107 020e 	add.w	r2, r7, #14
 800d9e4:	4610      	mov	r0, r2
 800d9e6:	4798      	blx	r3
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d9f6:	1c5a      	adds	r2, r3, #1
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d9fe:	2300      	movs	r3, #0
}
 800da00:	4618      	mov	r0, r3
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f001 fe63 	bl	800f6dc <USBD_LL_Start>
 800da16:	4603      	mov	r3, r0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800da28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	370c      	adds	r7, #12
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr

0800da36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da36:	b580      	push	{r7, lr}
 800da38:	b084      	sub	sp, #16
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
 800da3e:	460b      	mov	r3, r1
 800da40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800da42:	2300      	movs	r3, #0
 800da44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d009      	beq.n	800da64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	78fa      	ldrb	r2, [r7, #3]
 800da5a:	4611      	mov	r1, r2
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	4798      	blx	r3
 800da60:	4603      	mov	r3, r0
 800da62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800da64:	7bfb      	ldrb	r3, [r7, #15]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da6e:	b580      	push	{r7, lr}
 800da70:	b084      	sub	sp, #16
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
 800da76:	460b      	mov	r3, r1
 800da78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800da7a:	2300      	movs	r3, #0
 800da7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	78fa      	ldrb	r2, [r7, #3]
 800da88:	4611      	mov	r1, r2
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	4798      	blx	r3
 800da8e:	4603      	mov	r3, r0
 800da90:	2b00      	cmp	r3, #0
 800da92:	d001      	beq.n	800da98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800da94:	2303      	movs	r3, #3
 800da96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800da98:	7bfb      	ldrb	r3, [r7, #15]
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b084      	sub	sp, #16
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dab2:	6839      	ldr	r1, [r7, #0]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f001 f938 	bl	800ed2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2201      	movs	r2, #1
 800dabe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dac8:	461a      	mov	r2, r3
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dad6:	f003 031f 	and.w	r3, r3, #31
 800dada:	2b02      	cmp	r3, #2
 800dadc:	d01a      	beq.n	800db14 <USBD_LL_SetupStage+0x72>
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d822      	bhi.n	800db28 <USBD_LL_SetupStage+0x86>
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d002      	beq.n	800daec <USBD_LL_SetupStage+0x4a>
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d00a      	beq.n	800db00 <USBD_LL_SetupStage+0x5e>
 800daea:	e01d      	b.n	800db28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800daf2:	4619      	mov	r1, r3
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 fb65 	bl	800e1c4 <USBD_StdDevReq>
 800dafa:	4603      	mov	r3, r0
 800dafc:	73fb      	strb	r3, [r7, #15]
      break;
 800dafe:	e020      	b.n	800db42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db06:	4619      	mov	r1, r3
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f000 fbcd 	bl	800e2a8 <USBD_StdItfReq>
 800db0e:	4603      	mov	r3, r0
 800db10:	73fb      	strb	r3, [r7, #15]
      break;
 800db12:	e016      	b.n	800db42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db1a:	4619      	mov	r1, r3
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 fc2f 	bl	800e380 <USBD_StdEPReq>
 800db22:	4603      	mov	r3, r0
 800db24:	73fb      	strb	r3, [r7, #15]
      break;
 800db26:	e00c      	b.n	800db42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800db32:	b2db      	uxtb	r3, r3
 800db34:	4619      	mov	r1, r3
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f001 fe30 	bl	800f79c <USBD_LL_StallEP>
 800db3c:	4603      	mov	r3, r0
 800db3e:	73fb      	strb	r3, [r7, #15]
      break;
 800db40:	bf00      	nop
  }

  return ret;
 800db42:	7bfb      	ldrb	r3, [r7, #15]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3710      	adds	r7, #16
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b086      	sub	sp, #24
 800db50:	af00      	add	r7, sp, #0
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	460b      	mov	r3, r1
 800db56:	607a      	str	r2, [r7, #4]
 800db58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800db5a:	2300      	movs	r3, #0
 800db5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800db5e:	7afb      	ldrb	r3, [r7, #11]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d16e      	bne.n	800dc42 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800db6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800db72:	2b03      	cmp	r3, #3
 800db74:	f040 8098 	bne.w	800dca8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	689a      	ldr	r2, [r3, #8]
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	429a      	cmp	r2, r3
 800db82:	d913      	bls.n	800dbac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	689a      	ldr	r2, [r3, #8]
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	1ad2      	subs	r2, r2, r3
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	68da      	ldr	r2, [r3, #12]
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	689b      	ldr	r3, [r3, #8]
 800db9a:	4293      	cmp	r3, r2
 800db9c:	bf28      	it	cs
 800db9e:	4613      	movcs	r3, r2
 800dba0:	461a      	mov	r2, r3
 800dba2:	6879      	ldr	r1, [r7, #4]
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	f001 f9b4 	bl	800ef12 <USBD_CtlContinueRx>
 800dbaa:	e07d      	b.n	800dca8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dbb2:	f003 031f 	and.w	r3, r3, #31
 800dbb6:	2b02      	cmp	r3, #2
 800dbb8:	d014      	beq.n	800dbe4 <USBD_LL_DataOutStage+0x98>
 800dbba:	2b02      	cmp	r3, #2
 800dbbc:	d81d      	bhi.n	800dbfa <USBD_LL_DataOutStage+0xae>
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d002      	beq.n	800dbc8 <USBD_LL_DataOutStage+0x7c>
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d003      	beq.n	800dbce <USBD_LL_DataOutStage+0x82>
 800dbc6:	e018      	b.n	800dbfa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	75bb      	strb	r3, [r7, #22]
            break;
 800dbcc:	e018      	b.n	800dc00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	68f8      	ldr	r0, [r7, #12]
 800dbda:	f000 fa64 	bl	800e0a6 <USBD_CoreFindIF>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	75bb      	strb	r3, [r7, #22]
            break;
 800dbe2:	e00d      	b.n	800dc00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	4619      	mov	r1, r3
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f000 fa66 	bl	800e0c0 <USBD_CoreFindEP>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	75bb      	strb	r3, [r7, #22]
            break;
 800dbf8:	e002      	b.n	800dc00 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	75bb      	strb	r3, [r7, #22]
            break;
 800dbfe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dc00:	7dbb      	ldrb	r3, [r7, #22]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d119      	bne.n	800dc3a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	2b03      	cmp	r3, #3
 800dc10:	d113      	bne.n	800dc3a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dc12:	7dba      	ldrb	r2, [r7, #22]
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	32ae      	adds	r2, #174	; 0xae
 800dc18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc1c:	691b      	ldr	r3, [r3, #16]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00b      	beq.n	800dc3a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dc22:	7dba      	ldrb	r2, [r7, #22]
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dc2a:	7dba      	ldrb	r2, [r7, #22]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	32ae      	adds	r2, #174	; 0xae
 800dc30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc34:	691b      	ldr	r3, [r3, #16]
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	f001 f97a 	bl	800ef34 <USBD_CtlSendStatus>
 800dc40:	e032      	b.n	800dca8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dc42:	7afb      	ldrb	r3, [r7, #11]
 800dc44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	68f8      	ldr	r0, [r7, #12]
 800dc4e:	f000 fa37 	bl	800e0c0 <USBD_CoreFindEP>
 800dc52:	4603      	mov	r3, r0
 800dc54:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc56:	7dbb      	ldrb	r3, [r7, #22]
 800dc58:	2bff      	cmp	r3, #255	; 0xff
 800dc5a:	d025      	beq.n	800dca8 <USBD_LL_DataOutStage+0x15c>
 800dc5c:	7dbb      	ldrb	r3, [r7, #22]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d122      	bne.n	800dca8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	2b03      	cmp	r3, #3
 800dc6c:	d117      	bne.n	800dc9e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dc6e:	7dba      	ldrb	r2, [r7, #22]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	32ae      	adds	r2, #174	; 0xae
 800dc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc78:	699b      	ldr	r3, [r3, #24]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d00f      	beq.n	800dc9e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dc7e:	7dba      	ldrb	r2, [r7, #22]
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dc86:	7dba      	ldrb	r2, [r7, #22]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	32ae      	adds	r2, #174	; 0xae
 800dc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc90:	699b      	ldr	r3, [r3, #24]
 800dc92:	7afa      	ldrb	r2, [r7, #11]
 800dc94:	4611      	mov	r1, r2
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	4798      	blx	r3
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dc9e:	7dfb      	ldrb	r3, [r7, #23]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d001      	beq.n	800dca8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dca4:	7dfb      	ldrb	r3, [r7, #23]
 800dca6:	e000      	b.n	800dcaa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3718      	adds	r7, #24
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b086      	sub	sp, #24
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	60f8      	str	r0, [r7, #12]
 800dcba:	460b      	mov	r3, r1
 800dcbc:	607a      	str	r2, [r7, #4]
 800dcbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dcc0:	7afb      	ldrb	r3, [r7, #11]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d16f      	bne.n	800dda6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	3314      	adds	r3, #20
 800dcca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dcd2:	2b02      	cmp	r3, #2
 800dcd4:	d15a      	bne.n	800dd8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	689a      	ldr	r2, [r3, #8]
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	68db      	ldr	r3, [r3, #12]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d914      	bls.n	800dd0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	689a      	ldr	r2, [r3, #8]
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	68db      	ldr	r3, [r3, #12]
 800dcea:	1ad2      	subs	r2, r2, r3
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	689b      	ldr	r3, [r3, #8]
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	6879      	ldr	r1, [r7, #4]
 800dcf8:	68f8      	ldr	r0, [r7, #12]
 800dcfa:	f001 f8dc 	bl	800eeb6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dcfe:	2300      	movs	r3, #0
 800dd00:	2200      	movs	r2, #0
 800dd02:	2100      	movs	r1, #0
 800dd04:	68f8      	ldr	r0, [r7, #12]
 800dd06:	f001 fdf3 	bl	800f8f0 <USBD_LL_PrepareReceive>
 800dd0a:	e03f      	b.n	800dd8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	68da      	ldr	r2, [r3, #12]
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d11c      	bne.n	800dd52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	685a      	ldr	r2, [r3, #4]
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d316      	bcc.n	800dd52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	685a      	ldr	r2, [r3, #4]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d20f      	bcs.n	800dd52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dd32:	2200      	movs	r2, #0
 800dd34:	2100      	movs	r1, #0
 800dd36:	68f8      	ldr	r0, [r7, #12]
 800dd38:	f001 f8bd 	bl	800eeb6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd44:	2300      	movs	r3, #0
 800dd46:	2200      	movs	r2, #0
 800dd48:	2100      	movs	r1, #0
 800dd4a:	68f8      	ldr	r0, [r7, #12]
 800dd4c:	f001 fdd0 	bl	800f8f0 <USBD_LL_PrepareReceive>
 800dd50:	e01c      	b.n	800dd8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	2b03      	cmp	r3, #3
 800dd5c:	d10f      	bne.n	800dd7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d009      	beq.n	800dd7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd7e:	2180      	movs	r1, #128	; 0x80
 800dd80:	68f8      	ldr	r0, [r7, #12]
 800dd82:	f001 fd0b 	bl	800f79c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f001 f8e7 	bl	800ef5a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d03a      	beq.n	800de0c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dd96:	68f8      	ldr	r0, [r7, #12]
 800dd98:	f7ff fe42 	bl	800da20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dda4:	e032      	b.n	800de0c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dda6:	7afb      	ldrb	r3, [r7, #11]
 800dda8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	4619      	mov	r1, r3
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	f000 f985 	bl	800e0c0 <USBD_CoreFindEP>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ddba:	7dfb      	ldrb	r3, [r7, #23]
 800ddbc:	2bff      	cmp	r3, #255	; 0xff
 800ddbe:	d025      	beq.n	800de0c <USBD_LL_DataInStage+0x15a>
 800ddc0:	7dfb      	ldrb	r3, [r7, #23]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d122      	bne.n	800de0c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	2b03      	cmp	r3, #3
 800ddd0:	d11c      	bne.n	800de0c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ddd2:	7dfa      	ldrb	r2, [r7, #23]
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	32ae      	adds	r2, #174	; 0xae
 800ddd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dddc:	695b      	ldr	r3, [r3, #20]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d014      	beq.n	800de0c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800dde2:	7dfa      	ldrb	r2, [r7, #23]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ddea:	7dfa      	ldrb	r2, [r7, #23]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	32ae      	adds	r2, #174	; 0xae
 800ddf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddf4:	695b      	ldr	r3, [r3, #20]
 800ddf6:	7afa      	ldrb	r2, [r7, #11]
 800ddf8:	4611      	mov	r1, r2
 800ddfa:	68f8      	ldr	r0, [r7, #12]
 800ddfc:	4798      	blx	r3
 800ddfe:	4603      	mov	r3, r0
 800de00:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800de02:	7dbb      	ldrb	r3, [r7, #22]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d001      	beq.n	800de0c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800de08:	7dbb      	ldrb	r3, [r7, #22]
 800de0a:	e000      	b.n	800de0e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800de0c:	2300      	movs	r3, #0
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3718      	adds	r7, #24
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b084      	sub	sp, #16
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800de1e:	2300      	movs	r3, #0
 800de20:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2201      	movs	r2, #1
 800de26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2200      	movs	r2, #0
 800de2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2200      	movs	r2, #0
 800de3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d014      	beq.n	800de7c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d00e      	beq.n	800de7c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	6852      	ldr	r2, [r2, #4]
 800de6a:	b2d2      	uxtb	r2, r2
 800de6c:	4611      	mov	r1, r2
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	4798      	blx	r3
 800de72:	4603      	mov	r3, r0
 800de74:	2b00      	cmp	r3, #0
 800de76:	d001      	beq.n	800de7c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800de78:	2303      	movs	r3, #3
 800de7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de7c:	2340      	movs	r3, #64	; 0x40
 800de7e:	2200      	movs	r2, #0
 800de80:	2100      	movs	r1, #0
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f001 fc45 	bl	800f712 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2240      	movs	r2, #64	; 0x40
 800de94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de98:	2340      	movs	r3, #64	; 0x40
 800de9a:	2200      	movs	r2, #0
 800de9c:	2180      	movs	r1, #128	; 0x80
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f001 fc37 	bl	800f712 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2201      	movs	r2, #1
 800dea8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2240      	movs	r2, #64	; 0x40
 800deae:	621a      	str	r2, [r3, #32]

  return ret;
 800deb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3710      	adds	r7, #16
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}

0800deba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800deba:	b480      	push	{r7}
 800debc:	b083      	sub	sp, #12
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
 800dec2:	460b      	mov	r3, r1
 800dec4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	78fa      	ldrb	r2, [r7, #3]
 800deca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	370c      	adds	r7, #12
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr

0800deda <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800deda:	b480      	push	{r7}
 800dedc:	b083      	sub	sp, #12
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	2b04      	cmp	r3, #4
 800deec:	d006      	beq.n	800defc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800def4:	b2da      	uxtb	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2204      	movs	r2, #4
 800df00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800df04:	2300      	movs	r3, #0
}
 800df06:	4618      	mov	r0, r3
 800df08:	370c      	adds	r7, #12
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr

0800df12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800df12:	b480      	push	{r7}
 800df14:	b083      	sub	sp, #12
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df20:	b2db      	uxtb	r3, r3
 800df22:	2b04      	cmp	r3, #4
 800df24:	d106      	bne.n	800df34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800df2c:	b2da      	uxtb	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800df34:	2300      	movs	r3, #0
}
 800df36:	4618      	mov	r0, r3
 800df38:	370c      	adds	r7, #12
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr

0800df42 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800df42:	b580      	push	{r7, lr}
 800df44:	b082      	sub	sp, #8
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df50:	b2db      	uxtb	r3, r3
 800df52:	2b03      	cmp	r3, #3
 800df54:	d110      	bne.n	800df78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d00b      	beq.n	800df78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df66:	69db      	ldr	r3, [r3, #28]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d005      	beq.n	800df78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df72:	69db      	ldr	r3, [r3, #28]
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3708      	adds	r7, #8
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b082      	sub	sp, #8
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
 800df8a:	460b      	mov	r3, r1
 800df8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	32ae      	adds	r2, #174	; 0xae
 800df98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d101      	bne.n	800dfa4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dfa0:	2303      	movs	r3, #3
 800dfa2:	e01c      	b.n	800dfde <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	2b03      	cmp	r3, #3
 800dfae:	d115      	bne.n	800dfdc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	32ae      	adds	r2, #174	; 0xae
 800dfba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfbe:	6a1b      	ldr	r3, [r3, #32]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d00b      	beq.n	800dfdc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	32ae      	adds	r2, #174	; 0xae
 800dfce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfd2:	6a1b      	ldr	r3, [r3, #32]
 800dfd4:	78fa      	ldrb	r2, [r7, #3]
 800dfd6:	4611      	mov	r1, r2
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dfdc:	2300      	movs	r3, #0
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3708      	adds	r7, #8
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}

0800dfe6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dfe6:	b580      	push	{r7, lr}
 800dfe8:	b082      	sub	sp, #8
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
 800dfee:	460b      	mov	r3, r1
 800dff0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	32ae      	adds	r2, #174	; 0xae
 800dffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d101      	bne.n	800e008 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e004:	2303      	movs	r3, #3
 800e006:	e01c      	b.n	800e042 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	2b03      	cmp	r3, #3
 800e012:	d115      	bne.n	800e040 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	32ae      	adds	r2, #174	; 0xae
 800e01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e024:	2b00      	cmp	r3, #0
 800e026:	d00b      	beq.n	800e040 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	32ae      	adds	r2, #174	; 0xae
 800e032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e038:	78fa      	ldrb	r2, [r7, #3]
 800e03a:	4611      	mov	r1, r2
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e040:	2300      	movs	r3, #0
}
 800e042:	4618      	mov	r0, r3
 800e044:	3708      	adds	r7, #8
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e04a:	b480      	push	{r7}
 800e04c:	b083      	sub	sp, #12
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e068:	2300      	movs	r3, #0
 800e06a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2201      	movs	r2, #1
 800e070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d00e      	beq.n	800e09c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	6852      	ldr	r2, [r2, #4]
 800e08a:	b2d2      	uxtb	r2, r2
 800e08c:	4611      	mov	r1, r2
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	4798      	blx	r3
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d001      	beq.n	800e09c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e098:	2303      	movs	r3, #3
 800e09a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}

0800e0a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e0a6:	b480      	push	{r7}
 800e0a8:	b083      	sub	sp, #12
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e0b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	370c      	adds	r7, #12
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr

0800e0c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e0cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	370c      	adds	r7, #12
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr

0800e0da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e0da:	b580      	push	{r7, lr}
 800e0dc:	b086      	sub	sp, #24
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	885b      	ldrh	r3, [r3, #2]
 800e0f6:	b29a      	uxth	r2, r3
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d920      	bls.n	800e144 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	b29b      	uxth	r3, r3
 800e108:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e10a:	e013      	b.n	800e134 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e10c:	f107 030a 	add.w	r3, r7, #10
 800e110:	4619      	mov	r1, r3
 800e112:	6978      	ldr	r0, [r7, #20]
 800e114:	f000 f81b 	bl	800e14e <USBD_GetNextDesc>
 800e118:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	785b      	ldrb	r3, [r3, #1]
 800e11e:	2b05      	cmp	r3, #5
 800e120:	d108      	bne.n	800e134 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	789b      	ldrb	r3, [r3, #2]
 800e12a:	78fa      	ldrb	r2, [r7, #3]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d008      	beq.n	800e142 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e130:	2300      	movs	r3, #0
 800e132:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	885b      	ldrh	r3, [r3, #2]
 800e138:	b29a      	uxth	r2, r3
 800e13a:	897b      	ldrh	r3, [r7, #10]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d8e5      	bhi.n	800e10c <USBD_GetEpDesc+0x32>
 800e140:	e000      	b.n	800e144 <USBD_GetEpDesc+0x6a>
          break;
 800e142:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e144:	693b      	ldr	r3, [r7, #16]
}
 800e146:	4618      	mov	r0, r3
 800e148:	3718      	adds	r7, #24
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}

0800e14e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e14e:	b480      	push	{r7}
 800e150:	b085      	sub	sp, #20
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
 800e156:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	881a      	ldrh	r2, [r3, #0]
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	b29b      	uxth	r3, r3
 800e166:	4413      	add	r3, r2
 800e168:	b29a      	uxth	r2, r3
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	461a      	mov	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4413      	add	r3, r2
 800e178:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e17a:	68fb      	ldr	r3, [r7, #12]
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3714      	adds	r7, #20
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e188:	b480      	push	{r7}
 800e18a:	b087      	sub	sp, #28
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	3301      	adds	r3, #1
 800e19e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e1a6:	8a3b      	ldrh	r3, [r7, #16]
 800e1a8:	021b      	lsls	r3, r3, #8
 800e1aa:	b21a      	sxth	r2, r3
 800e1ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	b21b      	sxth	r3, r3
 800e1b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e1b6:	89fb      	ldrh	r3, [r7, #14]
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	371c      	adds	r7, #28
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr

0800e1c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1da:	2b40      	cmp	r3, #64	; 0x40
 800e1dc:	d005      	beq.n	800e1ea <USBD_StdDevReq+0x26>
 800e1de:	2b40      	cmp	r3, #64	; 0x40
 800e1e0:	d857      	bhi.n	800e292 <USBD_StdDevReq+0xce>
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d00f      	beq.n	800e206 <USBD_StdDevReq+0x42>
 800e1e6:	2b20      	cmp	r3, #32
 800e1e8:	d153      	bne.n	800e292 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	32ae      	adds	r2, #174	; 0xae
 800e1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	6839      	ldr	r1, [r7, #0]
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	4798      	blx	r3
 800e200:	4603      	mov	r3, r0
 800e202:	73fb      	strb	r3, [r7, #15]
      break;
 800e204:	e04a      	b.n	800e29c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	785b      	ldrb	r3, [r3, #1]
 800e20a:	2b09      	cmp	r3, #9
 800e20c:	d83b      	bhi.n	800e286 <USBD_StdDevReq+0xc2>
 800e20e:	a201      	add	r2, pc, #4	; (adr r2, 800e214 <USBD_StdDevReq+0x50>)
 800e210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e214:	0800e269 	.word	0x0800e269
 800e218:	0800e27d 	.word	0x0800e27d
 800e21c:	0800e287 	.word	0x0800e287
 800e220:	0800e273 	.word	0x0800e273
 800e224:	0800e287 	.word	0x0800e287
 800e228:	0800e247 	.word	0x0800e247
 800e22c:	0800e23d 	.word	0x0800e23d
 800e230:	0800e287 	.word	0x0800e287
 800e234:	0800e25f 	.word	0x0800e25f
 800e238:	0800e251 	.word	0x0800e251
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e23c:	6839      	ldr	r1, [r7, #0]
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 fa3c 	bl	800e6bc <USBD_GetDescriptor>
          break;
 800e244:	e024      	b.n	800e290 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e246:	6839      	ldr	r1, [r7, #0]
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 fbcb 	bl	800e9e4 <USBD_SetAddress>
          break;
 800e24e:	e01f      	b.n	800e290 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e250:	6839      	ldr	r1, [r7, #0]
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 fc0a 	bl	800ea6c <USBD_SetConfig>
 800e258:	4603      	mov	r3, r0
 800e25a:	73fb      	strb	r3, [r7, #15]
          break;
 800e25c:	e018      	b.n	800e290 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e25e:	6839      	ldr	r1, [r7, #0]
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f000 fcad 	bl	800ebc0 <USBD_GetConfig>
          break;
 800e266:	e013      	b.n	800e290 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e268:	6839      	ldr	r1, [r7, #0]
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f000 fcde 	bl	800ec2c <USBD_GetStatus>
          break;
 800e270:	e00e      	b.n	800e290 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e272:	6839      	ldr	r1, [r7, #0]
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 fd0d 	bl	800ec94 <USBD_SetFeature>
          break;
 800e27a:	e009      	b.n	800e290 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e27c:	6839      	ldr	r1, [r7, #0]
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 fd31 	bl	800ece6 <USBD_ClrFeature>
          break;
 800e284:	e004      	b.n	800e290 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e286:	6839      	ldr	r1, [r7, #0]
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 fd88 	bl	800ed9e <USBD_CtlError>
          break;
 800e28e:	bf00      	nop
      }
      break;
 800e290:	e004      	b.n	800e29c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e292:	6839      	ldr	r1, [r7, #0]
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f000 fd82 	bl	800ed9e <USBD_CtlError>
      break;
 800e29a:	bf00      	nop
  }

  return ret;
 800e29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop

0800e2a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b084      	sub	sp, #16
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2be:	2b40      	cmp	r3, #64	; 0x40
 800e2c0:	d005      	beq.n	800e2ce <USBD_StdItfReq+0x26>
 800e2c2:	2b40      	cmp	r3, #64	; 0x40
 800e2c4:	d852      	bhi.n	800e36c <USBD_StdItfReq+0xc4>
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d001      	beq.n	800e2ce <USBD_StdItfReq+0x26>
 800e2ca:	2b20      	cmp	r3, #32
 800e2cc:	d14e      	bne.n	800e36c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	d840      	bhi.n	800e35e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	889b      	ldrh	r3, [r3, #4]
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	d836      	bhi.n	800e354 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	889b      	ldrh	r3, [r3, #4]
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f7ff fed9 	bl	800e0a6 <USBD_CoreFindIF>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e2f8:	7bbb      	ldrb	r3, [r7, #14]
 800e2fa:	2bff      	cmp	r3, #255	; 0xff
 800e2fc:	d01d      	beq.n	800e33a <USBD_StdItfReq+0x92>
 800e2fe:	7bbb      	ldrb	r3, [r7, #14]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d11a      	bne.n	800e33a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e304:	7bba      	ldrb	r2, [r7, #14]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	32ae      	adds	r2, #174	; 0xae
 800e30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e30e:	689b      	ldr	r3, [r3, #8]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d00f      	beq.n	800e334 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e314:	7bba      	ldrb	r2, [r7, #14]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e31c:	7bba      	ldrb	r2, [r7, #14]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	32ae      	adds	r2, #174	; 0xae
 800e322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e326:	689b      	ldr	r3, [r3, #8]
 800e328:	6839      	ldr	r1, [r7, #0]
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	4798      	blx	r3
 800e32e:	4603      	mov	r3, r0
 800e330:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e332:	e004      	b.n	800e33e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e334:	2303      	movs	r3, #3
 800e336:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e338:	e001      	b.n	800e33e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e33a:	2303      	movs	r3, #3
 800e33c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	88db      	ldrh	r3, [r3, #6]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d110      	bne.n	800e368 <USBD_StdItfReq+0xc0>
 800e346:	7bfb      	ldrb	r3, [r7, #15]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d10d      	bne.n	800e368 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 fdf1 	bl	800ef34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e352:	e009      	b.n	800e368 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e354:	6839      	ldr	r1, [r7, #0]
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 fd21 	bl	800ed9e <USBD_CtlError>
          break;
 800e35c:	e004      	b.n	800e368 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e35e:	6839      	ldr	r1, [r7, #0]
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 fd1c 	bl	800ed9e <USBD_CtlError>
          break;
 800e366:	e000      	b.n	800e36a <USBD_StdItfReq+0xc2>
          break;
 800e368:	bf00      	nop
      }
      break;
 800e36a:	e004      	b.n	800e376 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e36c:	6839      	ldr	r1, [r7, #0]
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 fd15 	bl	800ed9e <USBD_CtlError>
      break;
 800e374:	bf00      	nop
  }

  return ret;
 800e376:	7bfb      	ldrb	r3, [r7, #15]
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3710      	adds	r7, #16
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e38a:	2300      	movs	r3, #0
 800e38c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	889b      	ldrh	r3, [r3, #4]
 800e392:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e39c:	2b40      	cmp	r3, #64	; 0x40
 800e39e:	d007      	beq.n	800e3b0 <USBD_StdEPReq+0x30>
 800e3a0:	2b40      	cmp	r3, #64	; 0x40
 800e3a2:	f200 817f 	bhi.w	800e6a4 <USBD_StdEPReq+0x324>
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d02a      	beq.n	800e400 <USBD_StdEPReq+0x80>
 800e3aa:	2b20      	cmp	r3, #32
 800e3ac:	f040 817a 	bne.w	800e6a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e3b0:	7bbb      	ldrb	r3, [r7, #14]
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f7ff fe83 	bl	800e0c0 <USBD_CoreFindEP>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e3be:	7b7b      	ldrb	r3, [r7, #13]
 800e3c0:	2bff      	cmp	r3, #255	; 0xff
 800e3c2:	f000 8174 	beq.w	800e6ae <USBD_StdEPReq+0x32e>
 800e3c6:	7b7b      	ldrb	r3, [r7, #13]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	f040 8170 	bne.w	800e6ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e3ce:	7b7a      	ldrb	r2, [r7, #13]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e3d6:	7b7a      	ldrb	r2, [r7, #13]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	32ae      	adds	r2, #174	; 0xae
 800e3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3e0:	689b      	ldr	r3, [r3, #8]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f000 8163 	beq.w	800e6ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e3e8:	7b7a      	ldrb	r2, [r7, #13]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	32ae      	adds	r2, #174	; 0xae
 800e3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	6839      	ldr	r1, [r7, #0]
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	4798      	blx	r3
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e3fe:	e156      	b.n	800e6ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	785b      	ldrb	r3, [r3, #1]
 800e404:	2b03      	cmp	r3, #3
 800e406:	d008      	beq.n	800e41a <USBD_StdEPReq+0x9a>
 800e408:	2b03      	cmp	r3, #3
 800e40a:	f300 8145 	bgt.w	800e698 <USBD_StdEPReq+0x318>
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f000 809b 	beq.w	800e54a <USBD_StdEPReq+0x1ca>
 800e414:	2b01      	cmp	r3, #1
 800e416:	d03c      	beq.n	800e492 <USBD_StdEPReq+0x112>
 800e418:	e13e      	b.n	800e698 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e420:	b2db      	uxtb	r3, r3
 800e422:	2b02      	cmp	r3, #2
 800e424:	d002      	beq.n	800e42c <USBD_StdEPReq+0xac>
 800e426:	2b03      	cmp	r3, #3
 800e428:	d016      	beq.n	800e458 <USBD_StdEPReq+0xd8>
 800e42a:	e02c      	b.n	800e486 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e42c:	7bbb      	ldrb	r3, [r7, #14]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d00d      	beq.n	800e44e <USBD_StdEPReq+0xce>
 800e432:	7bbb      	ldrb	r3, [r7, #14]
 800e434:	2b80      	cmp	r3, #128	; 0x80
 800e436:	d00a      	beq.n	800e44e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e438:	7bbb      	ldrb	r3, [r7, #14]
 800e43a:	4619      	mov	r1, r3
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f001 f9ad 	bl	800f79c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e442:	2180      	movs	r1, #128	; 0x80
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f001 f9a9 	bl	800f79c <USBD_LL_StallEP>
 800e44a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e44c:	e020      	b.n	800e490 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e44e:	6839      	ldr	r1, [r7, #0]
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 fca4 	bl	800ed9e <USBD_CtlError>
              break;
 800e456:	e01b      	b.n	800e490 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	885b      	ldrh	r3, [r3, #2]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d10e      	bne.n	800e47e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e460:	7bbb      	ldrb	r3, [r7, #14]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d00b      	beq.n	800e47e <USBD_StdEPReq+0xfe>
 800e466:	7bbb      	ldrb	r3, [r7, #14]
 800e468:	2b80      	cmp	r3, #128	; 0x80
 800e46a:	d008      	beq.n	800e47e <USBD_StdEPReq+0xfe>
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	88db      	ldrh	r3, [r3, #6]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d104      	bne.n	800e47e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e474:	7bbb      	ldrb	r3, [r7, #14]
 800e476:	4619      	mov	r1, r3
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f001 f98f 	bl	800f79c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 fd58 	bl	800ef34 <USBD_CtlSendStatus>

              break;
 800e484:	e004      	b.n	800e490 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e486:	6839      	ldr	r1, [r7, #0]
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f000 fc88 	bl	800ed9e <USBD_CtlError>
              break;
 800e48e:	bf00      	nop
          }
          break;
 800e490:	e107      	b.n	800e6a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e498:	b2db      	uxtb	r3, r3
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	d002      	beq.n	800e4a4 <USBD_StdEPReq+0x124>
 800e49e:	2b03      	cmp	r3, #3
 800e4a0:	d016      	beq.n	800e4d0 <USBD_StdEPReq+0x150>
 800e4a2:	e04b      	b.n	800e53c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e4a4:	7bbb      	ldrb	r3, [r7, #14]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00d      	beq.n	800e4c6 <USBD_StdEPReq+0x146>
 800e4aa:	7bbb      	ldrb	r3, [r7, #14]
 800e4ac:	2b80      	cmp	r3, #128	; 0x80
 800e4ae:	d00a      	beq.n	800e4c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e4b0:	7bbb      	ldrb	r3, [r7, #14]
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f001 f971 	bl	800f79c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e4ba:	2180      	movs	r1, #128	; 0x80
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f001 f96d 	bl	800f79c <USBD_LL_StallEP>
 800e4c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e4c4:	e040      	b.n	800e548 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e4c6:	6839      	ldr	r1, [r7, #0]
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 fc68 	bl	800ed9e <USBD_CtlError>
              break;
 800e4ce:	e03b      	b.n	800e548 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	885b      	ldrh	r3, [r3, #2]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d136      	bne.n	800e546 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e4d8:	7bbb      	ldrb	r3, [r7, #14]
 800e4da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d004      	beq.n	800e4ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e4e2:	7bbb      	ldrb	r3, [r7, #14]
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f001 f977 	bl	800f7da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 fd21 	bl	800ef34 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e4f2:	7bbb      	ldrb	r3, [r7, #14]
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f7ff fde2 	bl	800e0c0 <USBD_CoreFindEP>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e500:	7b7b      	ldrb	r3, [r7, #13]
 800e502:	2bff      	cmp	r3, #255	; 0xff
 800e504:	d01f      	beq.n	800e546 <USBD_StdEPReq+0x1c6>
 800e506:	7b7b      	ldrb	r3, [r7, #13]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d11c      	bne.n	800e546 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e50c:	7b7a      	ldrb	r2, [r7, #13]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e514:	7b7a      	ldrb	r2, [r7, #13]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	32ae      	adds	r2, #174	; 0xae
 800e51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e51e:	689b      	ldr	r3, [r3, #8]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d010      	beq.n	800e546 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e524:	7b7a      	ldrb	r2, [r7, #13]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	32ae      	adds	r2, #174	; 0xae
 800e52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e52e:	689b      	ldr	r3, [r3, #8]
 800e530:	6839      	ldr	r1, [r7, #0]
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	4798      	blx	r3
 800e536:	4603      	mov	r3, r0
 800e538:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e53a:	e004      	b.n	800e546 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e53c:	6839      	ldr	r1, [r7, #0]
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f000 fc2d 	bl	800ed9e <USBD_CtlError>
              break;
 800e544:	e000      	b.n	800e548 <USBD_StdEPReq+0x1c8>
              break;
 800e546:	bf00      	nop
          }
          break;
 800e548:	e0ab      	b.n	800e6a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e550:	b2db      	uxtb	r3, r3
 800e552:	2b02      	cmp	r3, #2
 800e554:	d002      	beq.n	800e55c <USBD_StdEPReq+0x1dc>
 800e556:	2b03      	cmp	r3, #3
 800e558:	d032      	beq.n	800e5c0 <USBD_StdEPReq+0x240>
 800e55a:	e097      	b.n	800e68c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e55c:	7bbb      	ldrb	r3, [r7, #14]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d007      	beq.n	800e572 <USBD_StdEPReq+0x1f2>
 800e562:	7bbb      	ldrb	r3, [r7, #14]
 800e564:	2b80      	cmp	r3, #128	; 0x80
 800e566:	d004      	beq.n	800e572 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e568:	6839      	ldr	r1, [r7, #0]
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 fc17 	bl	800ed9e <USBD_CtlError>
                break;
 800e570:	e091      	b.n	800e696 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e572:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e576:	2b00      	cmp	r3, #0
 800e578:	da0b      	bge.n	800e592 <USBD_StdEPReq+0x212>
 800e57a:	7bbb      	ldrb	r3, [r7, #14]
 800e57c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e580:	4613      	mov	r3, r2
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	4413      	add	r3, r2
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	3310      	adds	r3, #16
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	4413      	add	r3, r2
 800e58e:	3304      	adds	r3, #4
 800e590:	e00b      	b.n	800e5aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e592:	7bbb      	ldrb	r3, [r7, #14]
 800e594:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e598:	4613      	mov	r3, r2
 800e59a:	009b      	lsls	r3, r3, #2
 800e59c:	4413      	add	r3, r2
 800e59e:	009b      	lsls	r3, r3, #2
 800e5a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	3304      	adds	r3, #4
 800e5aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	2202      	movs	r2, #2
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f000 fc61 	bl	800ee80 <USBD_CtlSendData>
              break;
 800e5be:	e06a      	b.n	800e696 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e5c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	da11      	bge.n	800e5ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e5c8:	7bbb      	ldrb	r3, [r7, #14]
 800e5ca:	f003 020f 	and.w	r2, r3, #15
 800e5ce:	6879      	ldr	r1, [r7, #4]
 800e5d0:	4613      	mov	r3, r2
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	4413      	add	r3, r2
 800e5d6:	009b      	lsls	r3, r3, #2
 800e5d8:	440b      	add	r3, r1
 800e5da:	3324      	adds	r3, #36	; 0x24
 800e5dc:	881b      	ldrh	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d117      	bne.n	800e612 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e5e2:	6839      	ldr	r1, [r7, #0]
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 fbda 	bl	800ed9e <USBD_CtlError>
                  break;
 800e5ea:	e054      	b.n	800e696 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e5ec:	7bbb      	ldrb	r3, [r7, #14]
 800e5ee:	f003 020f 	and.w	r2, r3, #15
 800e5f2:	6879      	ldr	r1, [r7, #4]
 800e5f4:	4613      	mov	r3, r2
 800e5f6:	009b      	lsls	r3, r3, #2
 800e5f8:	4413      	add	r3, r2
 800e5fa:	009b      	lsls	r3, r3, #2
 800e5fc:	440b      	add	r3, r1
 800e5fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e602:	881b      	ldrh	r3, [r3, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d104      	bne.n	800e612 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e608:	6839      	ldr	r1, [r7, #0]
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 fbc7 	bl	800ed9e <USBD_CtlError>
                  break;
 800e610:	e041      	b.n	800e696 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e612:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e616:	2b00      	cmp	r3, #0
 800e618:	da0b      	bge.n	800e632 <USBD_StdEPReq+0x2b2>
 800e61a:	7bbb      	ldrb	r3, [r7, #14]
 800e61c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e620:	4613      	mov	r3, r2
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	4413      	add	r3, r2
 800e626:	009b      	lsls	r3, r3, #2
 800e628:	3310      	adds	r3, #16
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	4413      	add	r3, r2
 800e62e:	3304      	adds	r3, #4
 800e630:	e00b      	b.n	800e64a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e632:	7bbb      	ldrb	r3, [r7, #14]
 800e634:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e638:	4613      	mov	r3, r2
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	4413      	add	r3, r2
 800e63e:	009b      	lsls	r3, r3, #2
 800e640:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e644:	687a      	ldr	r2, [r7, #4]
 800e646:	4413      	add	r3, r2
 800e648:	3304      	adds	r3, #4
 800e64a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e64c:	7bbb      	ldrb	r3, [r7, #14]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d002      	beq.n	800e658 <USBD_StdEPReq+0x2d8>
 800e652:	7bbb      	ldrb	r3, [r7, #14]
 800e654:	2b80      	cmp	r3, #128	; 0x80
 800e656:	d103      	bne.n	800e660 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	2200      	movs	r2, #0
 800e65c:	601a      	str	r2, [r3, #0]
 800e65e:	e00e      	b.n	800e67e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e660:	7bbb      	ldrb	r3, [r7, #14]
 800e662:	4619      	mov	r1, r3
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f001 f8d7 	bl	800f818 <USBD_LL_IsStallEP>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d003      	beq.n	800e678 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	2201      	movs	r2, #1
 800e674:	601a      	str	r2, [r3, #0]
 800e676:	e002      	b.n	800e67e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	2200      	movs	r2, #0
 800e67c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	2202      	movs	r2, #2
 800e682:	4619      	mov	r1, r3
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f000 fbfb 	bl	800ee80 <USBD_CtlSendData>
              break;
 800e68a:	e004      	b.n	800e696 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e68c:	6839      	ldr	r1, [r7, #0]
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 fb85 	bl	800ed9e <USBD_CtlError>
              break;
 800e694:	bf00      	nop
          }
          break;
 800e696:	e004      	b.n	800e6a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e698:	6839      	ldr	r1, [r7, #0]
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 fb7f 	bl	800ed9e <USBD_CtlError>
          break;
 800e6a0:	bf00      	nop
      }
      break;
 800e6a2:	e005      	b.n	800e6b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e6a4:	6839      	ldr	r1, [r7, #0]
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 fb79 	bl	800ed9e <USBD_CtlError>
      break;
 800e6ac:	e000      	b.n	800e6b0 <USBD_StdEPReq+0x330>
      break;
 800e6ae:	bf00      	nop
  }

  return ret;
 800e6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
	...

0800e6bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	885b      	ldrh	r3, [r3, #2]
 800e6d6:	0a1b      	lsrs	r3, r3, #8
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	2b0e      	cmp	r3, #14
 800e6de:	f200 8152 	bhi.w	800e986 <USBD_GetDescriptor+0x2ca>
 800e6e2:	a201      	add	r2, pc, #4	; (adr r2, 800e6e8 <USBD_GetDescriptor+0x2c>)
 800e6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e8:	0800e759 	.word	0x0800e759
 800e6ec:	0800e771 	.word	0x0800e771
 800e6f0:	0800e7b1 	.word	0x0800e7b1
 800e6f4:	0800e987 	.word	0x0800e987
 800e6f8:	0800e987 	.word	0x0800e987
 800e6fc:	0800e927 	.word	0x0800e927
 800e700:	0800e953 	.word	0x0800e953
 800e704:	0800e987 	.word	0x0800e987
 800e708:	0800e987 	.word	0x0800e987
 800e70c:	0800e987 	.word	0x0800e987
 800e710:	0800e987 	.word	0x0800e987
 800e714:	0800e987 	.word	0x0800e987
 800e718:	0800e987 	.word	0x0800e987
 800e71c:	0800e987 	.word	0x0800e987
 800e720:	0800e725 	.word	0x0800e725
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e72a:	69db      	ldr	r3, [r3, #28]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d00b      	beq.n	800e748 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e736:	69db      	ldr	r3, [r3, #28]
 800e738:	687a      	ldr	r2, [r7, #4]
 800e73a:	7c12      	ldrb	r2, [r2, #16]
 800e73c:	f107 0108 	add.w	r1, r7, #8
 800e740:	4610      	mov	r0, r2
 800e742:	4798      	blx	r3
 800e744:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e746:	e126      	b.n	800e996 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e748:	6839      	ldr	r1, [r7, #0]
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f000 fb27 	bl	800ed9e <USBD_CtlError>
        err++;
 800e750:	7afb      	ldrb	r3, [r7, #11]
 800e752:	3301      	adds	r3, #1
 800e754:	72fb      	strb	r3, [r7, #11]
      break;
 800e756:	e11e      	b.n	800e996 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	687a      	ldr	r2, [r7, #4]
 800e762:	7c12      	ldrb	r2, [r2, #16]
 800e764:	f107 0108 	add.w	r1, r7, #8
 800e768:	4610      	mov	r0, r2
 800e76a:	4798      	blx	r3
 800e76c:	60f8      	str	r0, [r7, #12]
      break;
 800e76e:	e112      	b.n	800e996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	7c1b      	ldrb	r3, [r3, #16]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d10d      	bne.n	800e794 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e780:	f107 0208 	add.w	r2, r7, #8
 800e784:	4610      	mov	r0, r2
 800e786:	4798      	blx	r3
 800e788:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	3301      	adds	r3, #1
 800e78e:	2202      	movs	r2, #2
 800e790:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e792:	e100      	b.n	800e996 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e79c:	f107 0208 	add.w	r2, r7, #8
 800e7a0:	4610      	mov	r0, r2
 800e7a2:	4798      	blx	r3
 800e7a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	2202      	movs	r2, #2
 800e7ac:	701a      	strb	r2, [r3, #0]
      break;
 800e7ae:	e0f2      	b.n	800e996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	885b      	ldrh	r3, [r3, #2]
 800e7b4:	b2db      	uxtb	r3, r3
 800e7b6:	2b05      	cmp	r3, #5
 800e7b8:	f200 80ac 	bhi.w	800e914 <USBD_GetDescriptor+0x258>
 800e7bc:	a201      	add	r2, pc, #4	; (adr r2, 800e7c4 <USBD_GetDescriptor+0x108>)
 800e7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7c2:	bf00      	nop
 800e7c4:	0800e7dd 	.word	0x0800e7dd
 800e7c8:	0800e811 	.word	0x0800e811
 800e7cc:	0800e845 	.word	0x0800e845
 800e7d0:	0800e879 	.word	0x0800e879
 800e7d4:	0800e8ad 	.word	0x0800e8ad
 800e7d8:	0800e8e1 	.word	0x0800e8e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d00b      	beq.n	800e800 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	7c12      	ldrb	r2, [r2, #16]
 800e7f4:	f107 0108 	add.w	r1, r7, #8
 800e7f8:	4610      	mov	r0, r2
 800e7fa:	4798      	blx	r3
 800e7fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7fe:	e091      	b.n	800e924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e800:	6839      	ldr	r1, [r7, #0]
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 facb 	bl	800ed9e <USBD_CtlError>
            err++;
 800e808:	7afb      	ldrb	r3, [r7, #11]
 800e80a:	3301      	adds	r3, #1
 800e80c:	72fb      	strb	r3, [r7, #11]
          break;
 800e80e:	e089      	b.n	800e924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e816:	689b      	ldr	r3, [r3, #8]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d00b      	beq.n	800e834 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e822:	689b      	ldr	r3, [r3, #8]
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	7c12      	ldrb	r2, [r2, #16]
 800e828:	f107 0108 	add.w	r1, r7, #8
 800e82c:	4610      	mov	r0, r2
 800e82e:	4798      	blx	r3
 800e830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e832:	e077      	b.n	800e924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e834:	6839      	ldr	r1, [r7, #0]
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 fab1 	bl	800ed9e <USBD_CtlError>
            err++;
 800e83c:	7afb      	ldrb	r3, [r7, #11]
 800e83e:	3301      	adds	r3, #1
 800e840:	72fb      	strb	r3, [r7, #11]
          break;
 800e842:	e06f      	b.n	800e924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00b      	beq.n	800e868 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e856:	68db      	ldr	r3, [r3, #12]
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	7c12      	ldrb	r2, [r2, #16]
 800e85c:	f107 0108 	add.w	r1, r7, #8
 800e860:	4610      	mov	r0, r2
 800e862:	4798      	blx	r3
 800e864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e866:	e05d      	b.n	800e924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e868:	6839      	ldr	r1, [r7, #0]
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 fa97 	bl	800ed9e <USBD_CtlError>
            err++;
 800e870:	7afb      	ldrb	r3, [r7, #11]
 800e872:	3301      	adds	r3, #1
 800e874:	72fb      	strb	r3, [r7, #11]
          break;
 800e876:	e055      	b.n	800e924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e87e:	691b      	ldr	r3, [r3, #16]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00b      	beq.n	800e89c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e88a:	691b      	ldr	r3, [r3, #16]
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	7c12      	ldrb	r2, [r2, #16]
 800e890:	f107 0108 	add.w	r1, r7, #8
 800e894:	4610      	mov	r0, r2
 800e896:	4798      	blx	r3
 800e898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e89a:	e043      	b.n	800e924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e89c:	6839      	ldr	r1, [r7, #0]
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 fa7d 	bl	800ed9e <USBD_CtlError>
            err++;
 800e8a4:	7afb      	ldrb	r3, [r7, #11]
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e8aa:	e03b      	b.n	800e924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8b2:	695b      	ldr	r3, [r3, #20]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d00b      	beq.n	800e8d0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8be:	695b      	ldr	r3, [r3, #20]
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	7c12      	ldrb	r2, [r2, #16]
 800e8c4:	f107 0108 	add.w	r1, r7, #8
 800e8c8:	4610      	mov	r0, r2
 800e8ca:	4798      	blx	r3
 800e8cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8ce:	e029      	b.n	800e924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e8d0:	6839      	ldr	r1, [r7, #0]
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 fa63 	bl	800ed9e <USBD_CtlError>
            err++;
 800e8d8:	7afb      	ldrb	r3, [r7, #11]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	72fb      	strb	r3, [r7, #11]
          break;
 800e8de:	e021      	b.n	800e924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8e6:	699b      	ldr	r3, [r3, #24]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d00b      	beq.n	800e904 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8f2:	699b      	ldr	r3, [r3, #24]
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	7c12      	ldrb	r2, [r2, #16]
 800e8f8:	f107 0108 	add.w	r1, r7, #8
 800e8fc:	4610      	mov	r0, r2
 800e8fe:	4798      	blx	r3
 800e900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e902:	e00f      	b.n	800e924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e904:	6839      	ldr	r1, [r7, #0]
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f000 fa49 	bl	800ed9e <USBD_CtlError>
            err++;
 800e90c:	7afb      	ldrb	r3, [r7, #11]
 800e90e:	3301      	adds	r3, #1
 800e910:	72fb      	strb	r3, [r7, #11]
          break;
 800e912:	e007      	b.n	800e924 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e914:	6839      	ldr	r1, [r7, #0]
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f000 fa41 	bl	800ed9e <USBD_CtlError>
          err++;
 800e91c:	7afb      	ldrb	r3, [r7, #11]
 800e91e:	3301      	adds	r3, #1
 800e920:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e922:	bf00      	nop
      }
      break;
 800e924:	e037      	b.n	800e996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	7c1b      	ldrb	r3, [r3, #16]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d109      	bne.n	800e942 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e936:	f107 0208 	add.w	r2, r7, #8
 800e93a:	4610      	mov	r0, r2
 800e93c:	4798      	blx	r3
 800e93e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e940:	e029      	b.n	800e996 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e942:	6839      	ldr	r1, [r7, #0]
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 fa2a 	bl	800ed9e <USBD_CtlError>
        err++;
 800e94a:	7afb      	ldrb	r3, [r7, #11]
 800e94c:	3301      	adds	r3, #1
 800e94e:	72fb      	strb	r3, [r7, #11]
      break;
 800e950:	e021      	b.n	800e996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	7c1b      	ldrb	r3, [r3, #16]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d10d      	bne.n	800e976 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e962:	f107 0208 	add.w	r2, r7, #8
 800e966:	4610      	mov	r0, r2
 800e968:	4798      	blx	r3
 800e96a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	3301      	adds	r3, #1
 800e970:	2207      	movs	r2, #7
 800e972:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e974:	e00f      	b.n	800e996 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e976:	6839      	ldr	r1, [r7, #0]
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 fa10 	bl	800ed9e <USBD_CtlError>
        err++;
 800e97e:	7afb      	ldrb	r3, [r7, #11]
 800e980:	3301      	adds	r3, #1
 800e982:	72fb      	strb	r3, [r7, #11]
      break;
 800e984:	e007      	b.n	800e996 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e986:	6839      	ldr	r1, [r7, #0]
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f000 fa08 	bl	800ed9e <USBD_CtlError>
      err++;
 800e98e:	7afb      	ldrb	r3, [r7, #11]
 800e990:	3301      	adds	r3, #1
 800e992:	72fb      	strb	r3, [r7, #11]
      break;
 800e994:	bf00      	nop
  }

  if (err != 0U)
 800e996:	7afb      	ldrb	r3, [r7, #11]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d11e      	bne.n	800e9da <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	88db      	ldrh	r3, [r3, #6]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d016      	beq.n	800e9d2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e9a4:	893b      	ldrh	r3, [r7, #8]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d00e      	beq.n	800e9c8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	88da      	ldrh	r2, [r3, #6]
 800e9ae:	893b      	ldrh	r3, [r7, #8]
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	bf28      	it	cs
 800e9b4:	4613      	movcs	r3, r2
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e9ba:	893b      	ldrh	r3, [r7, #8]
 800e9bc:	461a      	mov	r2, r3
 800e9be:	68f9      	ldr	r1, [r7, #12]
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f000 fa5d 	bl	800ee80 <USBD_CtlSendData>
 800e9c6:	e009      	b.n	800e9dc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e9c8:	6839      	ldr	r1, [r7, #0]
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 f9e7 	bl	800ed9e <USBD_CtlError>
 800e9d0:	e004      	b.n	800e9dc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f000 faae 	bl	800ef34 <USBD_CtlSendStatus>
 800e9d8:	e000      	b.n	800e9dc <USBD_GetDescriptor+0x320>
    return;
 800e9da:	bf00      	nop
  }
}
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop

0800e9e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b084      	sub	sp, #16
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	889b      	ldrh	r3, [r3, #4]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d131      	bne.n	800ea5a <USBD_SetAddress+0x76>
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	88db      	ldrh	r3, [r3, #6]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d12d      	bne.n	800ea5a <USBD_SetAddress+0x76>
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	885b      	ldrh	r3, [r3, #2]
 800ea02:	2b7f      	cmp	r3, #127	; 0x7f
 800ea04:	d829      	bhi.n	800ea5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	885b      	ldrh	r3, [r3, #2]
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	2b03      	cmp	r3, #3
 800ea1c:	d104      	bne.n	800ea28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ea1e:	6839      	ldr	r1, [r7, #0]
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 f9bc 	bl	800ed9e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea26:	e01d      	b.n	800ea64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	7bfa      	ldrb	r2, [r7, #15]
 800ea2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ea30:	7bfb      	ldrb	r3, [r7, #15]
 800ea32:	4619      	mov	r1, r3
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 ff1b 	bl	800f870 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 fa7a 	bl	800ef34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ea40:	7bfb      	ldrb	r3, [r7, #15]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d004      	beq.n	800ea50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2202      	movs	r2, #2
 800ea4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea4e:	e009      	b.n	800ea64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2201      	movs	r2, #1
 800ea54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea58:	e004      	b.n	800ea64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ea5a:	6839      	ldr	r1, [r7, #0]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 f99e 	bl	800ed9e <USBD_CtlError>
  }
}
 800ea62:	bf00      	nop
 800ea64:	bf00      	nop
 800ea66:	3710      	adds	r7, #16
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea76:	2300      	movs	r3, #0
 800ea78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	885b      	ldrh	r3, [r3, #2]
 800ea7e:	b2da      	uxtb	r2, r3
 800ea80:	4b4e      	ldr	r3, [pc, #312]	; (800ebbc <USBD_SetConfig+0x150>)
 800ea82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ea84:	4b4d      	ldr	r3, [pc, #308]	; (800ebbc <USBD_SetConfig+0x150>)
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	2b01      	cmp	r3, #1
 800ea8a:	d905      	bls.n	800ea98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ea8c:	6839      	ldr	r1, [r7, #0]
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f000 f985 	bl	800ed9e <USBD_CtlError>
    return USBD_FAIL;
 800ea94:	2303      	movs	r3, #3
 800ea96:	e08c      	b.n	800ebb2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea9e:	b2db      	uxtb	r3, r3
 800eaa0:	2b02      	cmp	r3, #2
 800eaa2:	d002      	beq.n	800eaaa <USBD_SetConfig+0x3e>
 800eaa4:	2b03      	cmp	r3, #3
 800eaa6:	d029      	beq.n	800eafc <USBD_SetConfig+0x90>
 800eaa8:	e075      	b.n	800eb96 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800eaaa:	4b44      	ldr	r3, [pc, #272]	; (800ebbc <USBD_SetConfig+0x150>)
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d020      	beq.n	800eaf4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800eab2:	4b42      	ldr	r3, [pc, #264]	; (800ebbc <USBD_SetConfig+0x150>)
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	461a      	mov	r2, r3
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eabc:	4b3f      	ldr	r3, [pc, #252]	; (800ebbc <USBD_SetConfig+0x150>)
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	4619      	mov	r1, r3
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f7fe ffb7 	bl	800da36 <USBD_SetClassConfig>
 800eac8:	4603      	mov	r3, r0
 800eaca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800eacc:	7bfb      	ldrb	r3, [r7, #15]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d008      	beq.n	800eae4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ead2:	6839      	ldr	r1, [r7, #0]
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 f962 	bl	800ed9e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2202      	movs	r2, #2
 800eade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eae2:	e065      	b.n	800ebb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f000 fa25 	bl	800ef34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2203      	movs	r2, #3
 800eaee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eaf2:	e05d      	b.n	800ebb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f000 fa1d 	bl	800ef34 <USBD_CtlSendStatus>
      break;
 800eafa:	e059      	b.n	800ebb0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800eafc:	4b2f      	ldr	r3, [pc, #188]	; (800ebbc <USBD_SetConfig+0x150>)
 800eafe:	781b      	ldrb	r3, [r3, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d112      	bne.n	800eb2a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2202      	movs	r2, #2
 800eb08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800eb0c:	4b2b      	ldr	r3, [pc, #172]	; (800ebbc <USBD_SetConfig+0x150>)
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	461a      	mov	r2, r3
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eb16:	4b29      	ldr	r3, [pc, #164]	; (800ebbc <USBD_SetConfig+0x150>)
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f7fe ffa6 	bl	800da6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f000 fa06 	bl	800ef34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eb28:	e042      	b.n	800ebb0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800eb2a:	4b24      	ldr	r3, [pc, #144]	; (800ebbc <USBD_SetConfig+0x150>)
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	461a      	mov	r2, r3
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d02a      	beq.n	800eb8e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	4619      	mov	r1, r3
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7fe ff94 	bl	800da6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800eb46:	4b1d      	ldr	r3, [pc, #116]	; (800ebbc <USBD_SetConfig+0x150>)
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eb50:	4b1a      	ldr	r3, [pc, #104]	; (800ebbc <USBD_SetConfig+0x150>)
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	4619      	mov	r1, r3
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7fe ff6d 	bl	800da36 <USBD_SetClassConfig>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800eb60:	7bfb      	ldrb	r3, [r7, #15]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d00f      	beq.n	800eb86 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800eb66:	6839      	ldr	r1, [r7, #0]
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f000 f918 	bl	800ed9e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	b2db      	uxtb	r3, r3
 800eb74:	4619      	mov	r1, r3
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f7fe ff79 	bl	800da6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2202      	movs	r2, #2
 800eb80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eb84:	e014      	b.n	800ebb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 f9d4 	bl	800ef34 <USBD_CtlSendStatus>
      break;
 800eb8c:	e010      	b.n	800ebb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f000 f9d0 	bl	800ef34 <USBD_CtlSendStatus>
      break;
 800eb94:	e00c      	b.n	800ebb0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800eb96:	6839      	ldr	r1, [r7, #0]
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f000 f900 	bl	800ed9e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eb9e:	4b07      	ldr	r3, [pc, #28]	; (800ebbc <USBD_SetConfig+0x150>)
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	4619      	mov	r1, r3
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f7fe ff62 	bl	800da6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ebaa:	2303      	movs	r3, #3
 800ebac:	73fb      	strb	r3, [r7, #15]
      break;
 800ebae:	bf00      	nop
  }

  return ret;
 800ebb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3710      	adds	r7, #16
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop
 800ebbc:	240010a8 	.word	0x240010a8

0800ebc0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	88db      	ldrh	r3, [r3, #6]
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	d004      	beq.n	800ebdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ebd2:	6839      	ldr	r1, [r7, #0]
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f000 f8e2 	bl	800ed9e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ebda:	e023      	b.n	800ec24 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebe2:	b2db      	uxtb	r3, r3
 800ebe4:	2b02      	cmp	r3, #2
 800ebe6:	dc02      	bgt.n	800ebee <USBD_GetConfig+0x2e>
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	dc03      	bgt.n	800ebf4 <USBD_GetConfig+0x34>
 800ebec:	e015      	b.n	800ec1a <USBD_GetConfig+0x5a>
 800ebee:	2b03      	cmp	r3, #3
 800ebf0:	d00b      	beq.n	800ec0a <USBD_GetConfig+0x4a>
 800ebf2:	e012      	b.n	800ec1a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	3308      	adds	r3, #8
 800ebfe:	2201      	movs	r2, #1
 800ec00:	4619      	mov	r1, r3
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 f93c 	bl	800ee80 <USBD_CtlSendData>
        break;
 800ec08:	e00c      	b.n	800ec24 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	3304      	adds	r3, #4
 800ec0e:	2201      	movs	r2, #1
 800ec10:	4619      	mov	r1, r3
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 f934 	bl	800ee80 <USBD_CtlSendData>
        break;
 800ec18:	e004      	b.n	800ec24 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ec1a:	6839      	ldr	r1, [r7, #0]
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f000 f8be 	bl	800ed9e <USBD_CtlError>
        break;
 800ec22:	bf00      	nop
}
 800ec24:	bf00      	nop
 800ec26:	3708      	adds	r7, #8
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	2b02      	cmp	r3, #2
 800ec42:	d81e      	bhi.n	800ec82 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	88db      	ldrh	r3, [r3, #6]
 800ec48:	2b02      	cmp	r3, #2
 800ec4a:	d004      	beq.n	800ec56 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ec4c:	6839      	ldr	r1, [r7, #0]
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f000 f8a5 	bl	800ed9e <USBD_CtlError>
        break;
 800ec54:	e01a      	b.n	800ec8c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d005      	beq.n	800ec72 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	68db      	ldr	r3, [r3, #12]
 800ec6a:	f043 0202 	orr.w	r2, r3, #2
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	330c      	adds	r3, #12
 800ec76:	2202      	movs	r2, #2
 800ec78:	4619      	mov	r1, r3
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 f900 	bl	800ee80 <USBD_CtlSendData>
      break;
 800ec80:	e004      	b.n	800ec8c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ec82:	6839      	ldr	r1, [r7, #0]
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f000 f88a 	bl	800ed9e <USBD_CtlError>
      break;
 800ec8a:	bf00      	nop
  }
}
 800ec8c:	bf00      	nop
 800ec8e:	3708      	adds	r7, #8
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	885b      	ldrh	r3, [r3, #2]
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d107      	bne.n	800ecb6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2201      	movs	r2, #1
 800ecaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f000 f940 	bl	800ef34 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ecb4:	e013      	b.n	800ecde <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	885b      	ldrh	r3, [r3, #2]
 800ecba:	2b02      	cmp	r3, #2
 800ecbc:	d10b      	bne.n	800ecd6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	889b      	ldrh	r3, [r3, #4]
 800ecc2:	0a1b      	lsrs	r3, r3, #8
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	b2da      	uxtb	r2, r3
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 f930 	bl	800ef34 <USBD_CtlSendStatus>
}
 800ecd4:	e003      	b.n	800ecde <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ecd6:	6839      	ldr	r1, [r7, #0]
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f000 f860 	bl	800ed9e <USBD_CtlError>
}
 800ecde:	bf00      	nop
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}

0800ece6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b082      	sub	sp, #8
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
 800ecee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	3b01      	subs	r3, #1
 800ecfa:	2b02      	cmp	r3, #2
 800ecfc:	d80b      	bhi.n	800ed16 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	885b      	ldrh	r3, [r3, #2]
 800ed02:	2b01      	cmp	r3, #1
 800ed04:	d10c      	bne.n	800ed20 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f000 f910 	bl	800ef34 <USBD_CtlSendStatus>
      }
      break;
 800ed14:	e004      	b.n	800ed20 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ed16:	6839      	ldr	r1, [r7, #0]
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f000 f840 	bl	800ed9e <USBD_CtlError>
      break;
 800ed1e:	e000      	b.n	800ed22 <USBD_ClrFeature+0x3c>
      break;
 800ed20:	bf00      	nop
  }
}
 800ed22:	bf00      	nop
 800ed24:	3708      	adds	r7, #8
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}

0800ed2a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ed2a:	b580      	push	{r7, lr}
 800ed2c:	b084      	sub	sp, #16
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
 800ed32:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	781a      	ldrb	r2, [r3, #0]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	3301      	adds	r3, #1
 800ed44:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	781a      	ldrb	r2, [r3, #0]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	3301      	adds	r3, #1
 800ed52:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ed54:	68f8      	ldr	r0, [r7, #12]
 800ed56:	f7ff fa17 	bl	800e188 <SWAPBYTE>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	3301      	adds	r3, #1
 800ed66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ed6e:	68f8      	ldr	r0, [r7, #12]
 800ed70:	f7ff fa0a 	bl	800e188 <SWAPBYTE>
 800ed74:	4603      	mov	r3, r0
 800ed76:	461a      	mov	r2, r3
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	3301      	adds	r3, #1
 800ed80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	3301      	adds	r3, #1
 800ed86:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	f7ff f9fd 	bl	800e188 <SWAPBYTE>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	461a      	mov	r2, r3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	80da      	strh	r2, [r3, #6]
}
 800ed96:	bf00      	nop
 800ed98:	3710      	adds	r7, #16
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b082      	sub	sp, #8
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
 800eda6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eda8:	2180      	movs	r1, #128	; 0x80
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f000 fcf6 	bl	800f79c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800edb0:	2100      	movs	r1, #0
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f000 fcf2 	bl	800f79c <USBD_LL_StallEP>
}
 800edb8:	bf00      	nop
 800edba:	3708      	adds	r7, #8
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}

0800edc0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b086      	sub	sp, #24
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	60f8      	str	r0, [r7, #12]
 800edc8:	60b9      	str	r1, [r7, #8]
 800edca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800edcc:	2300      	movs	r3, #0
 800edce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d036      	beq.n	800ee44 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800edda:	6938      	ldr	r0, [r7, #16]
 800eddc:	f000 f836 	bl	800ee4c <USBD_GetLen>
 800ede0:	4603      	mov	r3, r0
 800ede2:	3301      	adds	r3, #1
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	005b      	lsls	r3, r3, #1
 800ede8:	b29a      	uxth	r2, r3
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800edee:	7dfb      	ldrb	r3, [r7, #23]
 800edf0:	68ba      	ldr	r2, [r7, #8]
 800edf2:	4413      	add	r3, r2
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	7812      	ldrb	r2, [r2, #0]
 800edf8:	701a      	strb	r2, [r3, #0]
  idx++;
 800edfa:	7dfb      	ldrb	r3, [r7, #23]
 800edfc:	3301      	adds	r3, #1
 800edfe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ee00:	7dfb      	ldrb	r3, [r7, #23]
 800ee02:	68ba      	ldr	r2, [r7, #8]
 800ee04:	4413      	add	r3, r2
 800ee06:	2203      	movs	r2, #3
 800ee08:	701a      	strb	r2, [r3, #0]
  idx++;
 800ee0a:	7dfb      	ldrb	r3, [r7, #23]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ee10:	e013      	b.n	800ee3a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ee12:	7dfb      	ldrb	r3, [r7, #23]
 800ee14:	68ba      	ldr	r2, [r7, #8]
 800ee16:	4413      	add	r3, r2
 800ee18:	693a      	ldr	r2, [r7, #16]
 800ee1a:	7812      	ldrb	r2, [r2, #0]
 800ee1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	3301      	adds	r3, #1
 800ee22:	613b      	str	r3, [r7, #16]
    idx++;
 800ee24:	7dfb      	ldrb	r3, [r7, #23]
 800ee26:	3301      	adds	r3, #1
 800ee28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ee2a:	7dfb      	ldrb	r3, [r7, #23]
 800ee2c:	68ba      	ldr	r2, [r7, #8]
 800ee2e:	4413      	add	r3, r2
 800ee30:	2200      	movs	r2, #0
 800ee32:	701a      	strb	r2, [r3, #0]
    idx++;
 800ee34:	7dfb      	ldrb	r3, [r7, #23]
 800ee36:	3301      	adds	r3, #1
 800ee38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d1e7      	bne.n	800ee12 <USBD_GetString+0x52>
 800ee42:	e000      	b.n	800ee46 <USBD_GetString+0x86>
    return;
 800ee44:	bf00      	nop
  }
}
 800ee46:	3718      	adds	r7, #24
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b085      	sub	sp, #20
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ee54:	2300      	movs	r3, #0
 800ee56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ee5c:	e005      	b.n	800ee6a <USBD_GetLen+0x1e>
  {
    len++;
 800ee5e:	7bfb      	ldrb	r3, [r7, #15]
 800ee60:	3301      	adds	r3, #1
 800ee62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	3301      	adds	r3, #1
 800ee68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d1f5      	bne.n	800ee5e <USBD_GetLen+0x12>
  }

  return len;
 800ee72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3714      	adds	r7, #20
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr

0800ee80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2202      	movs	r2, #2
 800ee90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	68ba      	ldr	r2, [r7, #8]
 800eea4:	2100      	movs	r1, #0
 800eea6:	68f8      	ldr	r0, [r7, #12]
 800eea8:	f000 fd01 	bl	800f8ae <USBD_LL_Transmit>

  return USBD_OK;
 800eeac:	2300      	movs	r3, #0
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3710      	adds	r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b084      	sub	sp, #16
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	60f8      	str	r0, [r7, #12]
 800eebe:	60b9      	str	r1, [r7, #8]
 800eec0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	68ba      	ldr	r2, [r7, #8]
 800eec6:	2100      	movs	r1, #0
 800eec8:	68f8      	ldr	r0, [r7, #12]
 800eeca:	f000 fcf0 	bl	800f8ae <USBD_LL_Transmit>

  return USBD_OK;
 800eece:	2300      	movs	r3, #0
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3710      	adds	r7, #16
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	60b9      	str	r1, [r7, #8]
 800eee2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2203      	movs	r2, #3
 800eee8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	68ba      	ldr	r2, [r7, #8]
 800ef00:	2100      	movs	r1, #0
 800ef02:	68f8      	ldr	r0, [r7, #12]
 800ef04:	f000 fcf4 	bl	800f8f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef08:	2300      	movs	r3, #0
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3710      	adds	r7, #16
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ef12:	b580      	push	{r7, lr}
 800ef14:	b084      	sub	sp, #16
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	60f8      	str	r0, [r7, #12]
 800ef1a:	60b9      	str	r1, [r7, #8]
 800ef1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	68ba      	ldr	r2, [r7, #8]
 800ef22:	2100      	movs	r1, #0
 800ef24:	68f8      	ldr	r0, [r7, #12]
 800ef26:	f000 fce3 	bl	800f8f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef2a:	2300      	movs	r3, #0
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3710      	adds	r7, #16
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2204      	movs	r2, #4
 800ef40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ef44:	2300      	movs	r3, #0
 800ef46:	2200      	movs	r2, #0
 800ef48:	2100      	movs	r1, #0
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f000 fcaf 	bl	800f8ae <USBD_LL_Transmit>

  return USBD_OK;
 800ef50:	2300      	movs	r3, #0
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3708      	adds	r7, #8
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}

0800ef5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ef5a:	b580      	push	{r7, lr}
 800ef5c:	b082      	sub	sp, #8
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2205      	movs	r2, #5
 800ef66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	2100      	movs	r1, #0
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f000 fcbd 	bl	800f8f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef76:	2300      	movs	r3, #0
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3708      	adds	r7, #8
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ef84:	2200      	movs	r2, #0
 800ef86:	4913      	ldr	r1, [pc, #76]	; (800efd4 <MX_USB_DEVICE_Init+0x54>)
 800ef88:	4813      	ldr	r0, [pc, #76]	; (800efd8 <MX_USB_DEVICE_Init+0x58>)
 800ef8a:	f7fe fcd7 	bl	800d93c <USBD_Init>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d001      	beq.n	800ef98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ef94:	f7f2 fab0 	bl	80014f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ef98:	4910      	ldr	r1, [pc, #64]	; (800efdc <MX_USB_DEVICE_Init+0x5c>)
 800ef9a:	480f      	ldr	r0, [pc, #60]	; (800efd8 <MX_USB_DEVICE_Init+0x58>)
 800ef9c:	f7fe fcfe 	bl	800d99c <USBD_RegisterClass>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d001      	beq.n	800efaa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800efa6:	f7f2 faa7 	bl	80014f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800efaa:	490d      	ldr	r1, [pc, #52]	; (800efe0 <MX_USB_DEVICE_Init+0x60>)
 800efac:	480a      	ldr	r0, [pc, #40]	; (800efd8 <MX_USB_DEVICE_Init+0x58>)
 800efae:	f7fe fbf5 	bl	800d79c <USBD_CDC_RegisterInterface>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d001      	beq.n	800efbc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800efb8:	f7f2 fa9e 	bl	80014f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800efbc:	4806      	ldr	r0, [pc, #24]	; (800efd8 <MX_USB_DEVICE_Init+0x58>)
 800efbe:	f7fe fd23 	bl	800da08 <USBD_Start>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d001      	beq.n	800efcc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800efc8:	f7f2 fa96 	bl	80014f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800efcc:	f7f7 fa6a 	bl	80064a4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800efd0:	bf00      	nop
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	240000b0 	.word	0x240000b0
 800efd8:	240010ac 	.word	0x240010ac
 800efdc:	2400001c 	.word	0x2400001c
 800efe0:	2400009c 	.word	0x2400009c

0800efe4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800efe8:	2200      	movs	r2, #0
 800efea:	4905      	ldr	r1, [pc, #20]	; (800f000 <CDC_Init_FS+0x1c>)
 800efec:	4805      	ldr	r0, [pc, #20]	; (800f004 <CDC_Init_FS+0x20>)
 800efee:	f7fe fbef 	bl	800d7d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800eff2:	4905      	ldr	r1, [pc, #20]	; (800f008 <CDC_Init_FS+0x24>)
 800eff4:	4803      	ldr	r0, [pc, #12]	; (800f004 <CDC_Init_FS+0x20>)
 800eff6:	f7fe fc0d 	bl	800d814 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800effa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800effc:	4618      	mov	r0, r3
 800effe:	bd80      	pop	{r7, pc}
 800f000:	24001b88 	.word	0x24001b88
 800f004:	240010ac 	.word	0x240010ac
 800f008:	24001388 	.word	0x24001388

0800f00c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f00c:	b480      	push	{r7}
 800f00e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f010:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f012:	4618      	mov	r0, r3
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr

0800f01c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	4603      	mov	r3, r0
 800f024:	6039      	str	r1, [r7, #0]
 800f026:	71fb      	strb	r3, [r7, #7]
 800f028:	4613      	mov	r3, r2
 800f02a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f02c:	79fb      	ldrb	r3, [r7, #7]
 800f02e:	2b23      	cmp	r3, #35	; 0x23
 800f030:	d84a      	bhi.n	800f0c8 <CDC_Control_FS+0xac>
 800f032:	a201      	add	r2, pc, #4	; (adr r2, 800f038 <CDC_Control_FS+0x1c>)
 800f034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f038:	0800f0c9 	.word	0x0800f0c9
 800f03c:	0800f0c9 	.word	0x0800f0c9
 800f040:	0800f0c9 	.word	0x0800f0c9
 800f044:	0800f0c9 	.word	0x0800f0c9
 800f048:	0800f0c9 	.word	0x0800f0c9
 800f04c:	0800f0c9 	.word	0x0800f0c9
 800f050:	0800f0c9 	.word	0x0800f0c9
 800f054:	0800f0c9 	.word	0x0800f0c9
 800f058:	0800f0c9 	.word	0x0800f0c9
 800f05c:	0800f0c9 	.word	0x0800f0c9
 800f060:	0800f0c9 	.word	0x0800f0c9
 800f064:	0800f0c9 	.word	0x0800f0c9
 800f068:	0800f0c9 	.word	0x0800f0c9
 800f06c:	0800f0c9 	.word	0x0800f0c9
 800f070:	0800f0c9 	.word	0x0800f0c9
 800f074:	0800f0c9 	.word	0x0800f0c9
 800f078:	0800f0c9 	.word	0x0800f0c9
 800f07c:	0800f0c9 	.word	0x0800f0c9
 800f080:	0800f0c9 	.word	0x0800f0c9
 800f084:	0800f0c9 	.word	0x0800f0c9
 800f088:	0800f0c9 	.word	0x0800f0c9
 800f08c:	0800f0c9 	.word	0x0800f0c9
 800f090:	0800f0c9 	.word	0x0800f0c9
 800f094:	0800f0c9 	.word	0x0800f0c9
 800f098:	0800f0c9 	.word	0x0800f0c9
 800f09c:	0800f0c9 	.word	0x0800f0c9
 800f0a0:	0800f0c9 	.word	0x0800f0c9
 800f0a4:	0800f0c9 	.word	0x0800f0c9
 800f0a8:	0800f0c9 	.word	0x0800f0c9
 800f0ac:	0800f0c9 	.word	0x0800f0c9
 800f0b0:	0800f0c9 	.word	0x0800f0c9
 800f0b4:	0800f0c9 	.word	0x0800f0c9
 800f0b8:	0800f0c9 	.word	0x0800f0c9
 800f0bc:	0800f0c9 	.word	0x0800f0c9
 800f0c0:	0800f0c9 	.word	0x0800f0c9
 800f0c4:	0800f0c9 	.word	0x0800f0c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f0c8:	bf00      	nop
  }

  return (USBD_OK);
 800f0ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	370c      	adds	r7, #12
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr

0800f0d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f0e2:	6879      	ldr	r1, [r7, #4]
 800f0e4:	4808      	ldr	r0, [pc, #32]	; (800f108 <CDC_Receive_FS+0x30>)
 800f0e6:	f7fe fb95 	bl	800d814 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f0ea:	4807      	ldr	r0, [pc, #28]	; (800f108 <CDC_Receive_FS+0x30>)
 800f0ec:	f7fe fbf0 	bl	800d8d0 <USBD_CDC_ReceivePacket>

  usb_cdc_rx_callback(Buf,*Len);
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f7f2 f8f6 	bl	80012e8 <usb_cdc_rx_callback>
  return (USBD_OK);
 800f0fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3708      	adds	r7, #8
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
 800f106:	bf00      	nop
 800f108:	240010ac 	.word	0x240010ac

0800f10c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f10c:	b480      	push	{r7}
 800f10e:	b087      	sub	sp, #28
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	4613      	mov	r3, r2
 800f118:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f11a:	2300      	movs	r3, #0
 800f11c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f11e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f122:	4618      	mov	r0, r3
 800f124:	371c      	adds	r7, #28
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr
	...

0800f130 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0
 800f136:	4603      	mov	r3, r0
 800f138:	6039      	str	r1, [r7, #0]
 800f13a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	2212      	movs	r2, #18
 800f140:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f142:	4b03      	ldr	r3, [pc, #12]	; (800f150 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f144:	4618      	mov	r0, r3
 800f146:	370c      	adds	r7, #12
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr
 800f150:	240000d0 	.word	0x240000d0

0800f154 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f154:	b480      	push	{r7}
 800f156:	b083      	sub	sp, #12
 800f158:	af00      	add	r7, sp, #0
 800f15a:	4603      	mov	r3, r0
 800f15c:	6039      	str	r1, [r7, #0]
 800f15e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	2204      	movs	r2, #4
 800f164:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f166:	4b03      	ldr	r3, [pc, #12]	; (800f174 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f168:	4618      	mov	r0, r3
 800f16a:	370c      	adds	r7, #12
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr
 800f174:	240000e4 	.word	0x240000e4

0800f178 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	4603      	mov	r3, r0
 800f180:	6039      	str	r1, [r7, #0]
 800f182:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f184:	79fb      	ldrb	r3, [r7, #7]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d105      	bne.n	800f196 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f18a:	683a      	ldr	r2, [r7, #0]
 800f18c:	4907      	ldr	r1, [pc, #28]	; (800f1ac <USBD_FS_ProductStrDescriptor+0x34>)
 800f18e:	4808      	ldr	r0, [pc, #32]	; (800f1b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f190:	f7ff fe16 	bl	800edc0 <USBD_GetString>
 800f194:	e004      	b.n	800f1a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f196:	683a      	ldr	r2, [r7, #0]
 800f198:	4904      	ldr	r1, [pc, #16]	; (800f1ac <USBD_FS_ProductStrDescriptor+0x34>)
 800f19a:	4805      	ldr	r0, [pc, #20]	; (800f1b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f19c:	f7ff fe10 	bl	800edc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1a0:	4b02      	ldr	r3, [pc, #8]	; (800f1ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3708      	adds	r7, #8
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	24002388 	.word	0x24002388
 800f1b0:	08011518 	.word	0x08011518

0800f1b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	6039      	str	r1, [r7, #0]
 800f1be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f1c0:	683a      	ldr	r2, [r7, #0]
 800f1c2:	4904      	ldr	r1, [pc, #16]	; (800f1d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f1c4:	4804      	ldr	r0, [pc, #16]	; (800f1d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f1c6:	f7ff fdfb 	bl	800edc0 <USBD_GetString>
  return USBD_StrDesc;
 800f1ca:	4b02      	ldr	r3, [pc, #8]	; (800f1d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3708      	adds	r7, #8
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	24002388 	.word	0x24002388
 800f1d8:	08011530 	.word	0x08011530

0800f1dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	6039      	str	r1, [r7, #0]
 800f1e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	221a      	movs	r2, #26
 800f1ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f1ee:	f000 f843 	bl	800f278 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f1f2:	4b02      	ldr	r3, [pc, #8]	; (800f1fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3708      	adds	r7, #8
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	240000e8 	.word	0x240000e8

0800f200 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b082      	sub	sp, #8
 800f204:	af00      	add	r7, sp, #0
 800f206:	4603      	mov	r3, r0
 800f208:	6039      	str	r1, [r7, #0]
 800f20a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f20c:	79fb      	ldrb	r3, [r7, #7]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d105      	bne.n	800f21e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f212:	683a      	ldr	r2, [r7, #0]
 800f214:	4907      	ldr	r1, [pc, #28]	; (800f234 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f216:	4808      	ldr	r0, [pc, #32]	; (800f238 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f218:	f7ff fdd2 	bl	800edc0 <USBD_GetString>
 800f21c:	e004      	b.n	800f228 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f21e:	683a      	ldr	r2, [r7, #0]
 800f220:	4904      	ldr	r1, [pc, #16]	; (800f234 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f222:	4805      	ldr	r0, [pc, #20]	; (800f238 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f224:	f7ff fdcc 	bl	800edc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f228:	4b02      	ldr	r3, [pc, #8]	; (800f234 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3708      	adds	r7, #8
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	24002388 	.word	0x24002388
 800f238:	08011544 	.word	0x08011544

0800f23c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	4603      	mov	r3, r0
 800f244:	6039      	str	r1, [r7, #0]
 800f246:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f248:	79fb      	ldrb	r3, [r7, #7]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d105      	bne.n	800f25a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f24e:	683a      	ldr	r2, [r7, #0]
 800f250:	4907      	ldr	r1, [pc, #28]	; (800f270 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f252:	4808      	ldr	r0, [pc, #32]	; (800f274 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f254:	f7ff fdb4 	bl	800edc0 <USBD_GetString>
 800f258:	e004      	b.n	800f264 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f25a:	683a      	ldr	r2, [r7, #0]
 800f25c:	4904      	ldr	r1, [pc, #16]	; (800f270 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f25e:	4805      	ldr	r0, [pc, #20]	; (800f274 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f260:	f7ff fdae 	bl	800edc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f264:	4b02      	ldr	r3, [pc, #8]	; (800f270 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f266:	4618      	mov	r0, r3
 800f268:	3708      	adds	r7, #8
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
 800f26e:	bf00      	nop
 800f270:	24002388 	.word	0x24002388
 800f274:	08011550 	.word	0x08011550

0800f278 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b084      	sub	sp, #16
 800f27c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f27e:	4b0f      	ldr	r3, [pc, #60]	; (800f2bc <Get_SerialNum+0x44>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f284:	4b0e      	ldr	r3, [pc, #56]	; (800f2c0 <Get_SerialNum+0x48>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f28a:	4b0e      	ldr	r3, [pc, #56]	; (800f2c4 <Get_SerialNum+0x4c>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f290:	68fa      	ldr	r2, [r7, #12]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	4413      	add	r3, r2
 800f296:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d009      	beq.n	800f2b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f29e:	2208      	movs	r2, #8
 800f2a0:	4909      	ldr	r1, [pc, #36]	; (800f2c8 <Get_SerialNum+0x50>)
 800f2a2:	68f8      	ldr	r0, [r7, #12]
 800f2a4:	f000 f814 	bl	800f2d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f2a8:	2204      	movs	r2, #4
 800f2aa:	4908      	ldr	r1, [pc, #32]	; (800f2cc <Get_SerialNum+0x54>)
 800f2ac:	68b8      	ldr	r0, [r7, #8]
 800f2ae:	f000 f80f 	bl	800f2d0 <IntToUnicode>
  }
}
 800f2b2:	bf00      	nop
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	1ff1e800 	.word	0x1ff1e800
 800f2c0:	1ff1e804 	.word	0x1ff1e804
 800f2c4:	1ff1e808 	.word	0x1ff1e808
 800f2c8:	240000ea 	.word	0x240000ea
 800f2cc:	240000fa 	.word	0x240000fa

0800f2d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b087      	sub	sp, #28
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	60f8      	str	r0, [r7, #12]
 800f2d8:	60b9      	str	r1, [r7, #8]
 800f2da:	4613      	mov	r3, r2
 800f2dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	75fb      	strb	r3, [r7, #23]
 800f2e6:	e027      	b.n	800f338 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	0f1b      	lsrs	r3, r3, #28
 800f2ec:	2b09      	cmp	r3, #9
 800f2ee:	d80b      	bhi.n	800f308 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	0f1b      	lsrs	r3, r3, #28
 800f2f4:	b2da      	uxtb	r2, r3
 800f2f6:	7dfb      	ldrb	r3, [r7, #23]
 800f2f8:	005b      	lsls	r3, r3, #1
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	440b      	add	r3, r1
 800f300:	3230      	adds	r2, #48	; 0x30
 800f302:	b2d2      	uxtb	r2, r2
 800f304:	701a      	strb	r2, [r3, #0]
 800f306:	e00a      	b.n	800f31e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	0f1b      	lsrs	r3, r3, #28
 800f30c:	b2da      	uxtb	r2, r3
 800f30e:	7dfb      	ldrb	r3, [r7, #23]
 800f310:	005b      	lsls	r3, r3, #1
 800f312:	4619      	mov	r1, r3
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	440b      	add	r3, r1
 800f318:	3237      	adds	r2, #55	; 0x37
 800f31a:	b2d2      	uxtb	r2, r2
 800f31c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	011b      	lsls	r3, r3, #4
 800f322:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f324:	7dfb      	ldrb	r3, [r7, #23]
 800f326:	005b      	lsls	r3, r3, #1
 800f328:	3301      	adds	r3, #1
 800f32a:	68ba      	ldr	r2, [r7, #8]
 800f32c:	4413      	add	r3, r2
 800f32e:	2200      	movs	r2, #0
 800f330:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f332:	7dfb      	ldrb	r3, [r7, #23]
 800f334:	3301      	adds	r3, #1
 800f336:	75fb      	strb	r3, [r7, #23]
 800f338:	7dfa      	ldrb	r2, [r7, #23]
 800f33a:	79fb      	ldrb	r3, [r7, #7]
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d3d3      	bcc.n	800f2e8 <IntToUnicode+0x18>
  }
}
 800f340:	bf00      	nop
 800f342:	bf00      	nop
 800f344:	371c      	adds	r7, #28
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr
	...

0800f350 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b0ba      	sub	sp, #232	; 0xe8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f358:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f35c:	2200      	movs	r2, #0
 800f35e:	601a      	str	r2, [r3, #0]
 800f360:	605a      	str	r2, [r3, #4]
 800f362:	609a      	str	r2, [r3, #8]
 800f364:	60da      	str	r2, [r3, #12]
 800f366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f368:	f107 0310 	add.w	r3, r7, #16
 800f36c:	22c0      	movs	r2, #192	; 0xc0
 800f36e:	2100      	movs	r1, #0
 800f370:	4618      	mov	r0, r3
 800f372:	f001 ffb3 	bl	80112dc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	4a34      	ldr	r2, [pc, #208]	; (800f44c <HAL_PCD_MspInit+0xfc>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d161      	bne.n	800f444 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f380:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800f384:	f04f 0300 	mov.w	r3, #0
 800f388:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800f38c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f394:	f107 0310 	add.w	r3, r7, #16
 800f398:	4618      	mov	r0, r3
 800f39a:	f7f8 f879 	bl	8007490 <HAL_RCCEx_PeriphCLKConfig>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d001      	beq.n	800f3a8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800f3a4:	f7f2 f8a8 	bl	80014f8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f3a8:	f7f7 f87c 	bl	80064a4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f3ac:	4b28      	ldr	r3, [pc, #160]	; (800f450 <HAL_PCD_MspInit+0x100>)
 800f3ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3b2:	4a27      	ldr	r2, [pc, #156]	; (800f450 <HAL_PCD_MspInit+0x100>)
 800f3b4:	f043 0301 	orr.w	r3, r3, #1
 800f3b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f3bc:	4b24      	ldr	r3, [pc, #144]	; (800f450 <HAL_PCD_MspInit+0x100>)
 800f3be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3c2:	f003 0301 	and.w	r3, r3, #1
 800f3c6:	60fb      	str	r3, [r7, #12]
 800f3c8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f3ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f3ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f3d2:	2302      	movs	r3, #2
 800f3d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f3e4:	230a      	movs	r3, #10
 800f3e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f3ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	4818      	ldr	r0, [pc, #96]	; (800f454 <HAL_PCD_MspInit+0x104>)
 800f3f2:	f7f5 fbb3 	bl	8004b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f3f6:	4b16      	ldr	r3, [pc, #88]	; (800f450 <HAL_PCD_MspInit+0x100>)
 800f3f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f3fc:	4a14      	ldr	r2, [pc, #80]	; (800f450 <HAL_PCD_MspInit+0x100>)
 800f3fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f402:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f406:	4b12      	ldr	r3, [pc, #72]	; (800f450 <HAL_PCD_MspInit+0x100>)
 800f408:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f40c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f410:	60bb      	str	r3, [r7, #8]
 800f412:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 800f414:	2200      	movs	r2, #0
 800f416:	2100      	movs	r1, #0
 800f418:	2062      	movs	r0, #98	; 0x62
 800f41a:	f7f4 f9b0 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 800f41e:	2062      	movs	r0, #98	; 0x62
 800f420:	f7f4 f9c7 	bl	80037b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 800f424:	2200      	movs	r2, #0
 800f426:	2100      	movs	r1, #0
 800f428:	2063      	movs	r0, #99	; 0x63
 800f42a:	f7f4 f9a8 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 800f42e:	2063      	movs	r0, #99	; 0x63
 800f430:	f7f4 f9bf 	bl	80037b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f434:	2200      	movs	r2, #0
 800f436:	2100      	movs	r1, #0
 800f438:	2065      	movs	r0, #101	; 0x65
 800f43a:	f7f4 f9a0 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f43e:	2065      	movs	r0, #101	; 0x65
 800f440:	f7f4 f9b7 	bl	80037b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f444:	bf00      	nop
 800f446:	37e8      	adds	r7, #232	; 0xe8
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}
 800f44c:	40080000 	.word	0x40080000
 800f450:	58024400 	.word	0x58024400
 800f454:	58020000 	.word	0x58020000

0800f458 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f46c:	4619      	mov	r1, r3
 800f46e:	4610      	mov	r0, r2
 800f470:	f7fe fb17 	bl	800daa2 <USBD_LL_SetupStage>
}
 800f474:	bf00      	nop
 800f476:	3708      	adds	r7, #8
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	460b      	mov	r3, r1
 800f486:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f48e:	78fa      	ldrb	r2, [r7, #3]
 800f490:	6879      	ldr	r1, [r7, #4]
 800f492:	4613      	mov	r3, r2
 800f494:	00db      	lsls	r3, r3, #3
 800f496:	4413      	add	r3, r2
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	440b      	add	r3, r1
 800f49c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f4a0:	681a      	ldr	r2, [r3, #0]
 800f4a2:	78fb      	ldrb	r3, [r7, #3]
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	f7fe fb51 	bl	800db4c <USBD_LL_DataOutStage>
}
 800f4aa:	bf00      	nop
 800f4ac:	3708      	adds	r7, #8
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}

0800f4b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4b2:	b580      	push	{r7, lr}
 800f4b4:	b082      	sub	sp, #8
 800f4b6:	af00      	add	r7, sp, #0
 800f4b8:	6078      	str	r0, [r7, #4]
 800f4ba:	460b      	mov	r3, r1
 800f4bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f4c4:	78fa      	ldrb	r2, [r7, #3]
 800f4c6:	6879      	ldr	r1, [r7, #4]
 800f4c8:	4613      	mov	r3, r2
 800f4ca:	00db      	lsls	r3, r3, #3
 800f4cc:	4413      	add	r3, r2
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	440b      	add	r3, r1
 800f4d2:	3348      	adds	r3, #72	; 0x48
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	78fb      	ldrb	r3, [r7, #3]
 800f4d8:	4619      	mov	r1, r3
 800f4da:	f7fe fbea 	bl	800dcb2 <USBD_LL_DataInStage>
}
 800f4de:	bf00      	nop
 800f4e0:	3708      	adds	r7, #8
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}

0800f4e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4e6:	b580      	push	{r7, lr}
 800f4e8:	b082      	sub	sp, #8
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7fe fd24 	bl	800df42 <USBD_LL_SOF>
}
 800f4fa:	bf00      	nop
 800f4fc:	3708      	adds	r7, #8
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}

0800f502 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f502:	b580      	push	{r7, lr}
 800f504:	b084      	sub	sp, #16
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f50a:	2301      	movs	r3, #1
 800f50c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	691b      	ldr	r3, [r3, #16]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d102      	bne.n	800f51c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f516:	2300      	movs	r3, #0
 800f518:	73fb      	strb	r3, [r7, #15]
 800f51a:	e008      	b.n	800f52e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	691b      	ldr	r3, [r3, #16]
 800f520:	2b02      	cmp	r3, #2
 800f522:	d102      	bne.n	800f52a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f524:	2301      	movs	r3, #1
 800f526:	73fb      	strb	r3, [r7, #15]
 800f528:	e001      	b.n	800f52e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f52a:	f7f1 ffe5 	bl	80014f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f534:	7bfa      	ldrb	r2, [r7, #15]
 800f536:	4611      	mov	r1, r2
 800f538:	4618      	mov	r0, r3
 800f53a:	f7fe fcbe 	bl	800deba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f544:	4618      	mov	r0, r3
 800f546:	f7fe fc66 	bl	800de16 <USBD_LL_Reset>
}
 800f54a:	bf00      	nop
 800f54c:	3710      	adds	r7, #16
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
	...

0800f554 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b082      	sub	sp, #8
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f562:	4618      	mov	r0, r3
 800f564:	f7fe fcb9 	bl	800deda <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	6812      	ldr	r2, [r2, #0]
 800f576:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f57a:	f043 0301 	orr.w	r3, r3, #1
 800f57e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6a1b      	ldr	r3, [r3, #32]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d005      	beq.n	800f594 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f588:	4b04      	ldr	r3, [pc, #16]	; (800f59c <HAL_PCD_SuspendCallback+0x48>)
 800f58a:	691b      	ldr	r3, [r3, #16]
 800f58c:	4a03      	ldr	r2, [pc, #12]	; (800f59c <HAL_PCD_SuspendCallback+0x48>)
 800f58e:	f043 0306 	orr.w	r3, r3, #6
 800f592:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f594:	bf00      	nop
 800f596:	3708      	adds	r7, #8
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}
 800f59c:	e000ed00 	.word	0xe000ed00

0800f5a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fe fcaf 	bl	800df12 <USBD_LL_Resume>
}
 800f5b4:	bf00      	nop
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5ce:	78fa      	ldrb	r2, [r7, #3]
 800f5d0:	4611      	mov	r1, r2
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7fe fd07 	bl	800dfe6 <USBD_LL_IsoOUTIncomplete>
}
 800f5d8:	bf00      	nop
 800f5da:	3708      	adds	r7, #8
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5f2:	78fa      	ldrb	r2, [r7, #3]
 800f5f4:	4611      	mov	r1, r2
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7fe fcc3 	bl	800df82 <USBD_LL_IsoINIncomplete>
}
 800f5fc:	bf00      	nop
 800f5fe:	3708      	adds	r7, #8
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f612:	4618      	mov	r0, r3
 800f614:	f7fe fd19 	bl	800e04a <USBD_LL_DevConnected>
}
 800f618:	bf00      	nop
 800f61a:	3708      	adds	r7, #8
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fe fd16 	bl	800e060 <USBD_LL_DevDisconnected>
}
 800f634:	bf00      	nop
 800f636:	3708      	adds	r7, #8
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d13e      	bne.n	800f6ca <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f64c:	4a21      	ldr	r2, [pc, #132]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4a1f      	ldr	r2, [pc, #124]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f658:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f65c:	4b1d      	ldr	r3, [pc, #116]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f65e:	4a1e      	ldr	r2, [pc, #120]	; (800f6d8 <USBD_LL_Init+0x9c>)
 800f660:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f662:	4b1c      	ldr	r3, [pc, #112]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f664:	2209      	movs	r2, #9
 800f666:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f668:	4b1a      	ldr	r3, [pc, #104]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f66a:	2202      	movs	r2, #2
 800f66c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f66e:	4b19      	ldr	r3, [pc, #100]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f670:	2200      	movs	r2, #0
 800f672:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f674:	4b17      	ldr	r3, [pc, #92]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f676:	2202      	movs	r2, #2
 800f678:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f67a:	4b16      	ldr	r3, [pc, #88]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f67c:	2200      	movs	r2, #0
 800f67e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f680:	4b14      	ldr	r3, [pc, #80]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f682:	2200      	movs	r2, #0
 800f684:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f686:	4b13      	ldr	r3, [pc, #76]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f688:	2200      	movs	r2, #0
 800f68a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f68c:	4b11      	ldr	r3, [pc, #68]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f68e:	2200      	movs	r2, #0
 800f690:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f692:	4b10      	ldr	r3, [pc, #64]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f694:	2200      	movs	r2, #0
 800f696:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f698:	4b0e      	ldr	r3, [pc, #56]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f69a:	2200      	movs	r2, #0
 800f69c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f69e:	480d      	ldr	r0, [pc, #52]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f6a0:	f7f5 fc0c 	bl	8004ebc <HAL_PCD_Init>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d001      	beq.n	800f6ae <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f6aa:	f7f1 ff25 	bl	80014f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f6ae:	2180      	movs	r1, #128	; 0x80
 800f6b0:	4808      	ldr	r0, [pc, #32]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f6b2:	f7f6 fe7c 	bl	80063ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f6b6:	2240      	movs	r2, #64	; 0x40
 800f6b8:	2100      	movs	r1, #0
 800f6ba:	4806      	ldr	r0, [pc, #24]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f6bc:	f7f6 fe30 	bl	8006320 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f6c0:	2280      	movs	r2, #128	; 0x80
 800f6c2:	2101      	movs	r1, #1
 800f6c4:	4803      	ldr	r0, [pc, #12]	; (800f6d4 <USBD_LL_Init+0x98>)
 800f6c6:	f7f6 fe2b 	bl	8006320 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800f6ca:	2300      	movs	r3, #0
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3708      	adds	r7, #8
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}
 800f6d4:	24002588 	.word	0x24002588
 800f6d8:	40080000 	.word	0x40080000

0800f6dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b084      	sub	sp, #16
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7f5 fd06 	bl	8005104 <HAL_PCD_Start>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6fc:	7bfb      	ldrb	r3, [r7, #15]
 800f6fe:	4618      	mov	r0, r3
 800f700:	f000 f942 	bl	800f988 <USBD_Get_USB_Status>
 800f704:	4603      	mov	r3, r0
 800f706:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f708:	7bbb      	ldrb	r3, [r7, #14]
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}

0800f712 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f712:	b580      	push	{r7, lr}
 800f714:	b084      	sub	sp, #16
 800f716:	af00      	add	r7, sp, #0
 800f718:	6078      	str	r0, [r7, #4]
 800f71a:	4608      	mov	r0, r1
 800f71c:	4611      	mov	r1, r2
 800f71e:	461a      	mov	r2, r3
 800f720:	4603      	mov	r3, r0
 800f722:	70fb      	strb	r3, [r7, #3]
 800f724:	460b      	mov	r3, r1
 800f726:	70bb      	strb	r3, [r7, #2]
 800f728:	4613      	mov	r3, r2
 800f72a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f72c:	2300      	movs	r3, #0
 800f72e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f730:	2300      	movs	r3, #0
 800f732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f73a:	78bb      	ldrb	r3, [r7, #2]
 800f73c:	883a      	ldrh	r2, [r7, #0]
 800f73e:	78f9      	ldrb	r1, [r7, #3]
 800f740:	f7f6 fa06 	bl	8005b50 <HAL_PCD_EP_Open>
 800f744:	4603      	mov	r3, r0
 800f746:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f748:	7bfb      	ldrb	r3, [r7, #15]
 800f74a:	4618      	mov	r0, r3
 800f74c:	f000 f91c 	bl	800f988 <USBD_Get_USB_Status>
 800f750:	4603      	mov	r3, r0
 800f752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f754:	7bbb      	ldrb	r3, [r7, #14]
}
 800f756:	4618      	mov	r0, r3
 800f758:	3710      	adds	r7, #16
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}

0800f75e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f75e:	b580      	push	{r7, lr}
 800f760:	b084      	sub	sp, #16
 800f762:	af00      	add	r7, sp, #0
 800f764:	6078      	str	r0, [r7, #4]
 800f766:	460b      	mov	r3, r1
 800f768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f76a:	2300      	movs	r3, #0
 800f76c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f76e:	2300      	movs	r3, #0
 800f770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f778:	78fa      	ldrb	r2, [r7, #3]
 800f77a:	4611      	mov	r1, r2
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7f6 fa4f 	bl	8005c20 <HAL_PCD_EP_Close>
 800f782:	4603      	mov	r3, r0
 800f784:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f786:	7bfb      	ldrb	r3, [r7, #15]
 800f788:	4618      	mov	r0, r3
 800f78a:	f000 f8fd 	bl	800f988 <USBD_Get_USB_Status>
 800f78e:	4603      	mov	r3, r0
 800f790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f792:	7bbb      	ldrb	r3, [r7, #14]
}
 800f794:	4618      	mov	r0, r3
 800f796:	3710      	adds	r7, #16
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b084      	sub	sp, #16
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f7b6:	78fa      	ldrb	r2, [r7, #3]
 800f7b8:	4611      	mov	r1, r2
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7f6 fb09 	bl	8005dd2 <HAL_PCD_EP_SetStall>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7c4:	7bfb      	ldrb	r3, [r7, #15]
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f000 f8de 	bl	800f988 <USBD_Get_USB_Status>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3710      	adds	r7, #16
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b084      	sub	sp, #16
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]
 800f7e2:	460b      	mov	r3, r1
 800f7e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f7f4:	78fa      	ldrb	r2, [r7, #3]
 800f7f6:	4611      	mov	r1, r2
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f7f6 fb4e 	bl	8005e9a <HAL_PCD_EP_ClrStall>
 800f7fe:	4603      	mov	r3, r0
 800f800:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f802:	7bfb      	ldrb	r3, [r7, #15]
 800f804:	4618      	mov	r0, r3
 800f806:	f000 f8bf 	bl	800f988 <USBD_Get_USB_Status>
 800f80a:	4603      	mov	r3, r0
 800f80c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f80e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f810:	4618      	mov	r0, r3
 800f812:	3710      	adds	r7, #16
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}

0800f818 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f818:	b480      	push	{r7}
 800f81a:	b085      	sub	sp, #20
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	460b      	mov	r3, r1
 800f822:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f82a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f82c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f830:	2b00      	cmp	r3, #0
 800f832:	da0b      	bge.n	800f84c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f834:	78fb      	ldrb	r3, [r7, #3]
 800f836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f83a:	68f9      	ldr	r1, [r7, #12]
 800f83c:	4613      	mov	r3, r2
 800f83e:	00db      	lsls	r3, r3, #3
 800f840:	4413      	add	r3, r2
 800f842:	009b      	lsls	r3, r3, #2
 800f844:	440b      	add	r3, r1
 800f846:	333e      	adds	r3, #62	; 0x3e
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	e00b      	b.n	800f864 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f84c:	78fb      	ldrb	r3, [r7, #3]
 800f84e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f852:	68f9      	ldr	r1, [r7, #12]
 800f854:	4613      	mov	r3, r2
 800f856:	00db      	lsls	r3, r3, #3
 800f858:	4413      	add	r3, r2
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	440b      	add	r3, r1
 800f85e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f862:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f864:	4618      	mov	r0, r3
 800f866:	3714      	adds	r7, #20
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b084      	sub	sp, #16
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	460b      	mov	r3, r1
 800f87a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f87c:	2300      	movs	r3, #0
 800f87e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f880:	2300      	movs	r3, #0
 800f882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f88a:	78fa      	ldrb	r2, [r7, #3]
 800f88c:	4611      	mov	r1, r2
 800f88e:	4618      	mov	r0, r3
 800f890:	f7f6 f939 	bl	8005b06 <HAL_PCD_SetAddress>
 800f894:	4603      	mov	r3, r0
 800f896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f898:	7bfb      	ldrb	r3, [r7, #15]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f000 f874 	bl	800f988 <USBD_Get_USB_Status>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3710      	adds	r7, #16
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}

0800f8ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f8ae:	b580      	push	{r7, lr}
 800f8b0:	b086      	sub	sp, #24
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	60f8      	str	r0, [r7, #12]
 800f8b6:	607a      	str	r2, [r7, #4]
 800f8b8:	603b      	str	r3, [r7, #0]
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f8cc:	7af9      	ldrb	r1, [r7, #11]
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	687a      	ldr	r2, [r7, #4]
 800f8d2:	f7f6 fa43 	bl	8005d5c <HAL_PCD_EP_Transmit>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8da:	7dfb      	ldrb	r3, [r7, #23]
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f000 f853 	bl	800f988 <USBD_Get_USB_Status>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f8e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	3718      	adds	r7, #24
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd80      	pop	{r7, pc}

0800f8f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b086      	sub	sp, #24
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	60f8      	str	r0, [r7, #12]
 800f8f8:	607a      	str	r2, [r7, #4]
 800f8fa:	603b      	str	r3, [r7, #0]
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f900:	2300      	movs	r3, #0
 800f902:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f904:	2300      	movs	r3, #0
 800f906:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f90e:	7af9      	ldrb	r1, [r7, #11]
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	f7f6 f9ce 	bl	8005cb4 <HAL_PCD_EP_Receive>
 800f918:	4603      	mov	r3, r0
 800f91a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f91c:	7dfb      	ldrb	r3, [r7, #23]
 800f91e:	4618      	mov	r0, r3
 800f920:	f000 f832 	bl	800f988 <USBD_Get_USB_Status>
 800f924:	4603      	mov	r3, r0
 800f926:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f928:	7dbb      	ldrb	r3, [r7, #22]
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3718      	adds	r7, #24
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}

0800f932 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f932:	b580      	push	{r7, lr}
 800f934:	b082      	sub	sp, #8
 800f936:	af00      	add	r7, sp, #0
 800f938:	6078      	str	r0, [r7, #4]
 800f93a:	460b      	mov	r3, r1
 800f93c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f944:	78fa      	ldrb	r2, [r7, #3]
 800f946:	4611      	mov	r1, r2
 800f948:	4618      	mov	r0, r3
 800f94a:	f7f6 f9ef 	bl	8005d2c <HAL_PCD_EP_GetRxCount>
 800f94e:	4603      	mov	r3, r0
}
 800f950:	4618      	mov	r0, r3
 800f952:	3708      	adds	r7, #8
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}

0800f958 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f958:	b480      	push	{r7}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f960:	4b03      	ldr	r3, [pc, #12]	; (800f970 <USBD_static_malloc+0x18>)
}
 800f962:	4618      	mov	r0, r3
 800f964:	370c      	adds	r7, #12
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr
 800f96e:	bf00      	nop
 800f970:	24002a94 	.word	0x24002a94

0800f974 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800f97c:	bf00      	nop
 800f97e:	370c      	adds	r7, #12
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr

0800f988 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f988:	b480      	push	{r7}
 800f98a:	b085      	sub	sp, #20
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	4603      	mov	r3, r0
 800f990:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f992:	2300      	movs	r3, #0
 800f994:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f996:	79fb      	ldrb	r3, [r7, #7]
 800f998:	2b03      	cmp	r3, #3
 800f99a:	d817      	bhi.n	800f9cc <USBD_Get_USB_Status+0x44>
 800f99c:	a201      	add	r2, pc, #4	; (adr r2, 800f9a4 <USBD_Get_USB_Status+0x1c>)
 800f99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a2:	bf00      	nop
 800f9a4:	0800f9b5 	.word	0x0800f9b5
 800f9a8:	0800f9bb 	.word	0x0800f9bb
 800f9ac:	0800f9c1 	.word	0x0800f9c1
 800f9b0:	0800f9c7 	.word	0x0800f9c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	73fb      	strb	r3, [r7, #15]
    break;
 800f9b8:	e00b      	b.n	800f9d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f9ba:	2303      	movs	r3, #3
 800f9bc:	73fb      	strb	r3, [r7, #15]
    break;
 800f9be:	e008      	b.n	800f9d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f9c4:	e005      	b.n	800f9d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f9c6:	2303      	movs	r3, #3
 800f9c8:	73fb      	strb	r3, [r7, #15]
    break;
 800f9ca:	e002      	b.n	800f9d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f9cc:	2303      	movs	r3, #3
 800f9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f9d0:	bf00      	nop
  }
  return usb_status;
 800f9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3714      	adds	r7, #20
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr

0800f9e0 <_ZN12G24_STM32HAL9CommonLib11DataConvert16encode_can_frameERKNS0_10DataPacketERNS0_8CanFrameE>:
#include "data_convert.hpp"

namespace G24_STM32HAL::CommonLib{
namespace DataConvert{

bool encode_can_frame(const DataPacket &data,CanFrame &can_frame){
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]

	can_frame.is_ext_id = true;
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	2201      	movs	r2, #1
 800f9ee:	741a      	strb	r2, [r3, #16]
	can_frame.is_remote = data.is_request;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	781a      	ldrb	r2, [r3, #0]
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	745a      	strb	r2, [r3, #17]

	can_frame.id = ((data.priority&0xF)<<PRIORITY_BIT) | (((uint8_t)data.data_type&0xF)<<DATA_TYPE_BIT)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	785b      	ldrb	r3, [r3, #1]
 800f9fc:	061b      	lsls	r3, r3, #24
 800f9fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	789b      	ldrb	r3, [r3, #2]
 800fa06:	051b      	lsls	r3, r3, #20
 800fa08:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800fa0c:	431a      	orrs	r2, r3
			| ((data.board_ID&0xF)<<BOARD_ID_BIT) | (data.register_ID&0xFFFF);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	78db      	ldrb	r3, [r3, #3]
 800fa12:	041b      	lsls	r3, r3, #16
 800fa14:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800fa18:	4313      	orrs	r3, r2
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	8892      	ldrh	r2, [r2, #4]
 800fa1e:	4313      	orrs	r3, r2
 800fa20:	461a      	mov	r2, r3
	can_frame.id = ((data.priority&0xF)<<PRIORITY_BIT) | (((uint8_t)data.data_type&0xF)<<DATA_TYPE_BIT)
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	60da      	str	r2, [r3, #12]

	can_frame.data_length = data.data_length;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	691a      	ldr	r2, [r3, #16]
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	609a      	str	r2, [r3, #8]
	memcpy(can_frame.data, data.data,data.data_length);
 800fa2e:	6838      	ldr	r0, [r7, #0]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	1d99      	adds	r1, r3, #6
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	691b      	ldr	r3, [r3, #16]
 800fa38:	461a      	mov	r2, r3
 800fa3a:	f001 fcd7 	bl	80113ec <memcpy>
	return true;
 800fa3e:	2301      	movs	r3, #1

}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <_ZN12G24_STM32HAL9CommonLib11DataConvert16decode_can_frameERKNS0_8CanFrameERNS0_10DataPacketE>:
bool decode_can_frame(const CanFrame &can_frame,DataPacket &data){
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	6039      	str	r1, [r7, #0]
	if(can_frame.is_ext_id){
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	7c1b      	ldrb	r3, [r3, #16]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d031      	beq.n	800fabe <_ZN12G24_STM32HAL9CommonLib11DataConvert16decode_can_frameERKNS0_8CanFrameERNS0_10DataPacketE+0x76>
		data.is_request = can_frame.is_remote;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	7c5a      	ldrb	r2, [r3, #17]
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	701a      	strb	r2, [r3, #0]
		data.priority = (can_frame.id>>PRIORITY_BIT)&0xF;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	68db      	ldr	r3, [r3, #12]
 800fa66:	0e1b      	lsrs	r3, r3, #24
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	f003 030f 	and.w	r3, r3, #15
 800fa6e:	b2da      	uxtb	r2, r3
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	705a      	strb	r2, [r3, #1]
		data.data_type = (DataType)((can_frame.id >> DATA_TYPE_BIT)&0xF);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	0d1b      	lsrs	r3, r3, #20
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	f003 030f 	and.w	r3, r3, #15
 800fa80:	b2da      	uxtb	r2, r3
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	709a      	strb	r2, [r3, #2]
		data.board_ID = (can_frame.id >> BOARD_ID_BIT)&0xF;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	68db      	ldr	r3, [r3, #12]
 800fa8a:	0c1b      	lsrs	r3, r3, #16
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	f003 030f 	and.w	r3, r3, #15
 800fa92:	b2da      	uxtb	r2, r3
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	70da      	strb	r2, [r3, #3]
		data.register_ID = can_frame.id & 0xFFFF;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	68db      	ldr	r3, [r3, #12]
 800fa9c:	b29a      	uxth	r2, r3
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	809a      	strh	r2, [r3, #4]

		memcpy(data.data, can_frame.data,can_frame.data_length);
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	1d98      	adds	r0, r3, #6
 800faa6:	6879      	ldr	r1, [r7, #4]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	461a      	mov	r2, r3
 800faae:	f001 fc9d 	bl	80113ec <memcpy>
		data.data_length = can_frame.data_length;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	689a      	ldr	r2, [r3, #8]
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	611a      	str	r2, [r3, #16]

		return true;
 800faba:	2301      	movs	r3, #1
 800fabc:	e000      	b.n	800fac0 <_ZN12G24_STM32HAL9CommonLib11DataConvert16decode_can_frameERKNS0_8CanFrameERNS0_10DataPacketE+0x78>
	}else{
		return false;
 800fabe:	2300      	movs	r3, #0
	}

}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj>:
	}else{
		return false;
	}
}

size_t can_to_slcan(const CanFrame &frame,char *str,const size_t str_max_size){
 800fac8:	b480      	push	{r7}
 800faca:	b087      	sub	sp, #28
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
	if(str_max_size < SLCAN_STR_MAX_SIZE){
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2b1b      	cmp	r3, #27
 800fad8:	d801      	bhi.n	800fade <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x16>
		return 0;
 800fada:	2300      	movs	r3, #0
 800fadc:	e139      	b.n	800fd52 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x28a>
	}
	size_t head = 0;
 800fade:	2300      	movs	r3, #0
 800fae0:	617b      	str	r3, [r7, #20]
	//frame type(0)
	if(frame.is_remote){
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	7c5b      	ldrb	r3, [r3, #17]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d00f      	beq.n	800fb0a <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x42>
		if(frame.is_ext_id){
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	7c1b      	ldrb	r3, [r3, #16]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d005      	beq.n	800fafe <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x36>
			str[head] = 'R';
 800faf2:	68ba      	ldr	r2, [r7, #8]
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	4413      	add	r3, r2
 800faf8:	2252      	movs	r2, #82	; 0x52
 800fafa:	701a      	strb	r2, [r3, #0]
 800fafc:	e014      	b.n	800fb28 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x60>
		}else{
			str[head] = 'r';
 800fafe:	68ba      	ldr	r2, [r7, #8]
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	4413      	add	r3, r2
 800fb04:	2272      	movs	r2, #114	; 0x72
 800fb06:	701a      	strb	r2, [r3, #0]
 800fb08:	e00e      	b.n	800fb28 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x60>
		}
	}else{
		if(frame.is_ext_id){
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	7c1b      	ldrb	r3, [r3, #16]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d005      	beq.n	800fb1e <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x56>
			str[head] = 'T';
 800fb12:	68ba      	ldr	r2, [r7, #8]
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	4413      	add	r3, r2
 800fb18:	2254      	movs	r2, #84	; 0x54
 800fb1a:	701a      	strb	r2, [r3, #0]
 800fb1c:	e004      	b.n	800fb28 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x60>
		}else{
			str[head] = 't';
 800fb1e:	68ba      	ldr	r2, [r7, #8]
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	4413      	add	r3, r2
 800fb24:	2274      	movs	r2, #116	; 0x74
 800fb26:	701a      	strb	r2, [r3, #0]
		}
	}

	//ID
	if(frame.is_ext_id){
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	7c1b      	ldrb	r3, [r3, #16]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d034      	beq.n	800fb9a <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0xd2>
		for(head = 1; head < 9; head++){
 800fb30:	2301      	movs	r3, #1
 800fb32:	617b      	str	r3, [r7, #20]
 800fb34:	e02d      	b.n	800fb92 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0xca>
			str[head] = (frame.id >> 4*(8-head)) & 0xF;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	68da      	ldr	r2, [r3, #12]
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	f1c3 0308 	rsb	r3, r3, #8
 800fb40:	009b      	lsls	r3, r3, #2
 800fb42:	fa22 f303 	lsr.w	r3, r2, r3
 800fb46:	b2da      	uxtb	r2, r3
 800fb48:	68b9      	ldr	r1, [r7, #8]
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	440b      	add	r3, r1
 800fb4e:	f002 020f 	and.w	r2, r2, #15
 800fb52:	b2d2      	uxtb	r2, r2
 800fb54:	701a      	strb	r2, [r3, #0]
			if(str[head] < 10){
 800fb56:	68ba      	ldr	r2, [r7, #8]
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	4413      	add	r3, r2
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	2b09      	cmp	r3, #9
 800fb60:	d80a      	bhi.n	800fb78 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0xb0>
				str[head] += '0';
 800fb62:	68ba      	ldr	r2, [r7, #8]
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	4413      	add	r3, r2
 800fb68:	781a      	ldrb	r2, [r3, #0]
 800fb6a:	68b9      	ldr	r1, [r7, #8]
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	440b      	add	r3, r1
 800fb70:	3230      	adds	r2, #48	; 0x30
 800fb72:	b2d2      	uxtb	r2, r2
 800fb74:	701a      	strb	r2, [r3, #0]
 800fb76:	e009      	b.n	800fb8c <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0xc4>
			}else{
				str[head] += 'A'-10;
 800fb78:	68ba      	ldr	r2, [r7, #8]
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	781a      	ldrb	r2, [r3, #0]
 800fb80:	68b9      	ldr	r1, [r7, #8]
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	440b      	add	r3, r1
 800fb86:	3237      	adds	r2, #55	; 0x37
 800fb88:	b2d2      	uxtb	r2, r2
 800fb8a:	701a      	strb	r2, [r3, #0]
		for(head = 1; head < 9; head++){
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	3301      	adds	r3, #1
 800fb90:	617b      	str	r3, [r7, #20]
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	2b08      	cmp	r3, #8
 800fb96:	d9ce      	bls.n	800fb36 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x6e>
 800fb98:	e033      	b.n	800fc02 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x13a>
			}
		}
	}else{
		for(head = 1; head < 4; head++){
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	617b      	str	r3, [r7, #20]
 800fb9e:	e02d      	b.n	800fbfc <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x134>
			str[head] = (frame.id >> 4*(3-head)) & 0xF;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	68da      	ldr	r2, [r3, #12]
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	f1c3 0303 	rsb	r3, r3, #3
 800fbaa:	009b      	lsls	r3, r3, #2
 800fbac:	fa22 f303 	lsr.w	r3, r2, r3
 800fbb0:	b2da      	uxtb	r2, r3
 800fbb2:	68b9      	ldr	r1, [r7, #8]
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	440b      	add	r3, r1
 800fbb8:	f002 020f 	and.w	r2, r2, #15
 800fbbc:	b2d2      	uxtb	r2, r2
 800fbbe:	701a      	strb	r2, [r3, #0]
			if(str[head] < 10){
 800fbc0:	68ba      	ldr	r2, [r7, #8]
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	2b09      	cmp	r3, #9
 800fbca:	d80a      	bhi.n	800fbe2 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x11a>
				str[head] += '0';
 800fbcc:	68ba      	ldr	r2, [r7, #8]
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	4413      	add	r3, r2
 800fbd2:	781a      	ldrb	r2, [r3, #0]
 800fbd4:	68b9      	ldr	r1, [r7, #8]
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	440b      	add	r3, r1
 800fbda:	3230      	adds	r2, #48	; 0x30
 800fbdc:	b2d2      	uxtb	r2, r2
 800fbde:	701a      	strb	r2, [r3, #0]
 800fbe0:	e009      	b.n	800fbf6 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x12e>
			}else{
				str[head] += 'A'-10;
 800fbe2:	68ba      	ldr	r2, [r7, #8]
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	4413      	add	r3, r2
 800fbe8:	781a      	ldrb	r2, [r3, #0]
 800fbea:	68b9      	ldr	r1, [r7, #8]
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	440b      	add	r3, r1
 800fbf0:	3237      	adds	r2, #55	; 0x37
 800fbf2:	b2d2      	uxtb	r2, r2
 800fbf4:	701a      	strb	r2, [r3, #0]
		for(head = 1; head < 4; head++){
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	617b      	str	r3, [r7, #20]
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	2b03      	cmp	r3, #3
 800fc00:	d9ce      	bls.n	800fba0 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0xd8>
			}
		}
	}

	//DLC
	str[head++] = frame.data_length + '0';
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	b2db      	uxtb	r3, r3
 800fc08:	3330      	adds	r3, #48	; 0x30
 800fc0a:	b2d8      	uxtb	r0, r3
 800fc0c:	68ba      	ldr	r2, [r7, #8]
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	1c59      	adds	r1, r3, #1
 800fc12:	6179      	str	r1, [r7, #20]
 800fc14:	4413      	add	r3, r2
 800fc16:	4602      	mov	r2, r0
 800fc18:	701a      	strb	r2, [r3, #0]

	if(frame.is_remote){
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	7c5b      	ldrb	r3, [r3, #17]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d008      	beq.n	800fc34 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x16c>
		str[++head] = '\r';
 800fc22:	68ba      	ldr	r2, [r7, #8]
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	3301      	adds	r3, #1
 800fc28:	617b      	str	r3, [r7, #20]
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	220d      	movs	r2, #13
 800fc30:	701a      	strb	r2, [r3, #0]
 800fc32:	e08a      	b.n	800fd4a <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x282>
	}else{
		for(size_t i = 0; i < frame.data_length; i++){
 800fc34:	2300      	movs	r3, #0
 800fc36:	613b      	str	r3, [r7, #16]
 800fc38:	e077      	b.n	800fd2a <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x262>
			str[i*2 + head] = (frame.data[i] >> 4)&0xF;
 800fc3a:	68fa      	ldr	r2, [r7, #12]
 800fc3c:	693b      	ldr	r3, [r7, #16]
 800fc3e:	4413      	add	r3, r2
 800fc40:	781a      	ldrb	r2, [r3, #0]
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	0059      	lsls	r1, r3, #1
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	440b      	add	r3, r1
 800fc4a:	68b9      	ldr	r1, [r7, #8]
 800fc4c:	440b      	add	r3, r1
 800fc4e:	0912      	lsrs	r2, r2, #4
 800fc50:	b2d2      	uxtb	r2, r2
 800fc52:	701a      	strb	r2, [r3, #0]

			if(str[i*2 + head] < 10){
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	005a      	lsls	r2, r3, #1
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	4413      	add	r3, r2
 800fc5c:	68ba      	ldr	r2, [r7, #8]
 800fc5e:	4413      	add	r3, r2
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	2b09      	cmp	r3, #9
 800fc64:	d810      	bhi.n	800fc88 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x1c0>
				str[i*2 + head] += '0';
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	005a      	lsls	r2, r3, #1
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	4413      	add	r3, r2
 800fc6e:	68ba      	ldr	r2, [r7, #8]
 800fc70:	4413      	add	r3, r2
 800fc72:	781a      	ldrb	r2, [r3, #0]
 800fc74:	693b      	ldr	r3, [r7, #16]
 800fc76:	0059      	lsls	r1, r3, #1
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	440b      	add	r3, r1
 800fc7c:	68b9      	ldr	r1, [r7, #8]
 800fc7e:	440b      	add	r3, r1
 800fc80:	3230      	adds	r2, #48	; 0x30
 800fc82:	b2d2      	uxtb	r2, r2
 800fc84:	701a      	strb	r2, [r3, #0]
 800fc86:	e00f      	b.n	800fca8 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x1e0>
			}else{
				str[i*2 + head] += 'A'-10;
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	005a      	lsls	r2, r3, #1
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	4413      	add	r3, r2
 800fc90:	68ba      	ldr	r2, [r7, #8]
 800fc92:	4413      	add	r3, r2
 800fc94:	781a      	ldrb	r2, [r3, #0]
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	0059      	lsls	r1, r3, #1
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	440b      	add	r3, r1
 800fc9e:	68b9      	ldr	r1, [r7, #8]
 800fca0:	440b      	add	r3, r1
 800fca2:	3237      	adds	r2, #55	; 0x37
 800fca4:	b2d2      	uxtb	r2, r2
 800fca6:	701a      	strb	r2, [r3, #0]
			}

			str[i*2 + head+1] = frame.data[i] & 0xF;
 800fca8:	68fa      	ldr	r2, [r7, #12]
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	4413      	add	r3, r2
 800fcae:	781a      	ldrb	r2, [r3, #0]
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	0059      	lsls	r1, r3, #1
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	440b      	add	r3, r1
 800fcb8:	3301      	adds	r3, #1
 800fcba:	68b9      	ldr	r1, [r7, #8]
 800fcbc:	440b      	add	r3, r1
 800fcbe:	f002 020f 	and.w	r2, r2, #15
 800fcc2:	b2d2      	uxtb	r2, r2
 800fcc4:	701a      	strb	r2, [r3, #0]
			if(str[i*2 + head+1] < 10){
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	005a      	lsls	r2, r3, #1
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	4413      	add	r3, r2
 800fcce:	3301      	adds	r3, #1
 800fcd0:	68ba      	ldr	r2, [r7, #8]
 800fcd2:	4413      	add	r3, r2
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	2b09      	cmp	r3, #9
 800fcd8:	d812      	bhi.n	800fd00 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x238>
				str[i*2 + head+1] += '0';
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	005a      	lsls	r2, r3, #1
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	4413      	add	r3, r2
 800fce2:	3301      	adds	r3, #1
 800fce4:	68ba      	ldr	r2, [r7, #8]
 800fce6:	4413      	add	r3, r2
 800fce8:	781a      	ldrb	r2, [r3, #0]
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	0059      	lsls	r1, r3, #1
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	440b      	add	r3, r1
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	68b9      	ldr	r1, [r7, #8]
 800fcf6:	440b      	add	r3, r1
 800fcf8:	3230      	adds	r2, #48	; 0x30
 800fcfa:	b2d2      	uxtb	r2, r2
 800fcfc:	701a      	strb	r2, [r3, #0]
 800fcfe:	e011      	b.n	800fd24 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x25c>
			}else{
				str[i*2 + head+1] += 'A'-10;
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	005a      	lsls	r2, r3, #1
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	4413      	add	r3, r2
 800fd08:	3301      	adds	r3, #1
 800fd0a:	68ba      	ldr	r2, [r7, #8]
 800fd0c:	4413      	add	r3, r2
 800fd0e:	781a      	ldrb	r2, [r3, #0]
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	0059      	lsls	r1, r3, #1
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	440b      	add	r3, r1
 800fd18:	3301      	adds	r3, #1
 800fd1a:	68b9      	ldr	r1, [r7, #8]
 800fd1c:	440b      	add	r3, r1
 800fd1e:	3237      	adds	r2, #55	; 0x37
 800fd20:	b2d2      	uxtb	r2, r2
 800fd22:	701a      	strb	r2, [r3, #0]
		for(size_t i = 0; i < frame.data_length; i++){
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	3301      	adds	r3, #1
 800fd28:	613b      	str	r3, [r7, #16]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	689b      	ldr	r3, [r3, #8]
 800fd2e:	693a      	ldr	r2, [r7, #16]
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d382      	bcc.n	800fc3a <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj+0x172>
			}
		}
		head += frame.data_length*2;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	689b      	ldr	r3, [r3, #8]
 800fd38:	005b      	lsls	r3, r3, #1
 800fd3a:	697a      	ldr	r2, [r7, #20]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	617b      	str	r3, [r7, #20]

		str[head] = '\r';
 800fd40:	68ba      	ldr	r2, [r7, #8]
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	4413      	add	r3, r2
 800fd46:	220d      	movs	r2, #13
 800fd48:	701a      	strb	r2, [r3, #0]
	}

	return ++head;
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	617b      	str	r3, [r7, #20]
 800fd50:	697b      	ldr	r3, [r7, #20]
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	371c      	adds	r7, #28
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr

0800fd5e <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE>:
bool slcan_to_can(const char *str, CanFrame &frame){
 800fd5e:	b480      	push	{r7}
 800fd60:	b089      	sub	sp, #36	; 0x24
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	6078      	str	r0, [r7, #4]
 800fd66:	6039      	str	r1, [r7, #0]
	int head = 0;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	61fb      	str	r3, [r7, #28]
	switch(str[head]){
 800fd6c:	69fb      	ldr	r3, [r7, #28]
 800fd6e:	687a      	ldr	r2, [r7, #4]
 800fd70:	4413      	add	r3, r2
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	2b74      	cmp	r3, #116	; 0x74
 800fd76:	d00a      	beq.n	800fd8e <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x30>
 800fd78:	2b74      	cmp	r3, #116	; 0x74
 800fd7a:	dc24      	bgt.n	800fdc6 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x68>
 800fd7c:	2b72      	cmp	r3, #114	; 0x72
 800fd7e:	d01b      	beq.n	800fdb8 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x5a>
 800fd80:	2b72      	cmp	r3, #114	; 0x72
 800fd82:	dc20      	bgt.n	800fdc6 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x68>
 800fd84:	2b52      	cmp	r3, #82	; 0x52
 800fd86:	d010      	beq.n	800fdaa <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x4c>
 800fd88:	2b54      	cmp	r3, #84	; 0x54
 800fd8a:	d007      	beq.n	800fd9c <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x3e>
 800fd8c:	e01b      	b.n	800fdc6 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x68>
	case 't':
		frame.is_ext_id = false;
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	2200      	movs	r2, #0
 800fd92:	741a      	strb	r2, [r3, #16]
		frame.is_remote = false;
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	2200      	movs	r2, #0
 800fd98:	745a      	strb	r2, [r3, #17]
		break;
 800fd9a:	e016      	b.n	800fdca <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x6c>
	case 'T':
		frame.is_ext_id = true;
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	2201      	movs	r2, #1
 800fda0:	741a      	strb	r2, [r3, #16]
		frame.is_remote = false;
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	2200      	movs	r2, #0
 800fda6:	745a      	strb	r2, [r3, #17]
		break;
 800fda8:	e00f      	b.n	800fdca <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x6c>
	case 'R':
		frame.is_remote = true;
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	2201      	movs	r2, #1
 800fdae:	745a      	strb	r2, [r3, #17]
		frame.is_ext_id = true;
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	2201      	movs	r2, #1
 800fdb4:	741a      	strb	r2, [r3, #16]
		break;
 800fdb6:	e008      	b.n	800fdca <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x6c>
	case 'r':
		frame.is_remote = true;
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	2201      	movs	r2, #1
 800fdbc:	745a      	strb	r2, [r3, #17]
		frame.is_ext_id= false;
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	741a      	strb	r2, [r3, #16]
		break;
 800fdc4:	e001      	b.n	800fdca <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x6c>
	default:
		return false;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	e0b6      	b.n	800ff38 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x1da>
		break;
	}
	//ID
	if(frame.is_ext_id){
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	7c1b      	ldrb	r3, [r3, #16]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d02d      	beq.n	800fe2e <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0xd0>
		for(head = 1; head < 9; head++){
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	61fb      	str	r3, [r7, #28]
 800fdd6:	e026      	b.n	800fe26 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0xc8>
			int tmp = 0;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	61bb      	str	r3, [r7, #24]
			if(str[head] >= 'A'){
 800fddc:	69fb      	ldr	r3, [r7, #28]
 800fdde:	687a      	ldr	r2, [r7, #4]
 800fde0:	4413      	add	r3, r2
 800fde2:	781b      	ldrb	r3, [r3, #0]
 800fde4:	2b40      	cmp	r3, #64	; 0x40
 800fde6:	d908      	bls.n	800fdfa <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x9c>
				tmp = (str[head] - 'A'+10) & 0xF;
 800fde8:	69fb      	ldr	r3, [r7, #28]
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	4413      	add	r3, r2
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	3b37      	subs	r3, #55	; 0x37
 800fdf2:	f003 030f 	and.w	r3, r3, #15
 800fdf6:	61bb      	str	r3, [r7, #24]
 800fdf8:	e006      	b.n	800fe08 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0xaa>
			}else{
				tmp = (str[head] - '0') & 0xF;
 800fdfa:	69fb      	ldr	r3, [r7, #28]
 800fdfc:	687a      	ldr	r2, [r7, #4]
 800fdfe:	4413      	add	r3, r2
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	f003 030f 	and.w	r3, r3, #15
 800fe06:	61bb      	str	r3, [r7, #24]
			}

			frame.id |= tmp << 4*(8-head);
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	69fa      	ldr	r2, [r7, #28]
 800fe0e:	f1c2 0208 	rsb	r2, r2, #8
 800fe12:	0092      	lsls	r2, r2, #2
 800fe14:	69b9      	ldr	r1, [r7, #24]
 800fe16:	fa01 f202 	lsl.w	r2, r1, r2
 800fe1a:	431a      	orrs	r2, r3
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	60da      	str	r2, [r3, #12]
		for(head = 1; head < 9; head++){
 800fe20:	69fb      	ldr	r3, [r7, #28]
 800fe22:	3301      	adds	r3, #1
 800fe24:	61fb      	str	r3, [r7, #28]
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	2b08      	cmp	r3, #8
 800fe2a:	ddd5      	ble.n	800fdd8 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x7a>
 800fe2c:	e02c      	b.n	800fe88 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x12a>
		}
	}else{
		for(head = 1; head < 4; head++){
 800fe2e:	2301      	movs	r3, #1
 800fe30:	61fb      	str	r3, [r7, #28]
 800fe32:	e026      	b.n	800fe82 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x124>
			int tmp = 0;
 800fe34:	2300      	movs	r3, #0
 800fe36:	617b      	str	r3, [r7, #20]
			if(str[head] >= 'A'){
 800fe38:	69fb      	ldr	r3, [r7, #28]
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	2b40      	cmp	r3, #64	; 0x40
 800fe42:	d908      	bls.n	800fe56 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0xf8>
				tmp = (str[head] - 'A'+10) & 0xF;
 800fe44:	69fb      	ldr	r3, [r7, #28]
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	4413      	add	r3, r2
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	3b37      	subs	r3, #55	; 0x37
 800fe4e:	f003 030f 	and.w	r3, r3, #15
 800fe52:	617b      	str	r3, [r7, #20]
 800fe54:	e006      	b.n	800fe64 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x106>
			}else{
				tmp = (str[head] - '0') & 0xF;
 800fe56:	69fb      	ldr	r3, [r7, #28]
 800fe58:	687a      	ldr	r2, [r7, #4]
 800fe5a:	4413      	add	r3, r2
 800fe5c:	781b      	ldrb	r3, [r3, #0]
 800fe5e:	f003 030f 	and.w	r3, r3, #15
 800fe62:	617b      	str	r3, [r7, #20]
			}

			frame.id |= tmp << 4*(3-head);
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	69fa      	ldr	r2, [r7, #28]
 800fe6a:	f1c2 0203 	rsb	r2, r2, #3
 800fe6e:	0092      	lsls	r2, r2, #2
 800fe70:	6979      	ldr	r1, [r7, #20]
 800fe72:	fa01 f202 	lsl.w	r2, r1, r2
 800fe76:	431a      	orrs	r2, r3
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	60da      	str	r2, [r3, #12]
		for(head = 1; head < 4; head++){
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	3301      	adds	r3, #1
 800fe80:	61fb      	str	r3, [r7, #28]
 800fe82:	69fb      	ldr	r3, [r7, #28]
 800fe84:	2b03      	cmp	r3, #3
 800fe86:	ddd5      	ble.n	800fe34 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0xd6>
		}
	}

	//DLC
	frame.data_length = str[head++]&0xF;
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	69fb      	ldr	r3, [r7, #28]
 800fe8c:	1c59      	adds	r1, r3, #1
 800fe8e:	61f9      	str	r1, [r7, #28]
 800fe90:	4413      	add	r3, r2
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	f003 020f 	and.w	r2, r3, #15
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	609a      	str	r2, [r3, #8]
	if(frame.data_length > 8){
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	689b      	ldr	r3, [r3, #8]
 800fea0:	2b08      	cmp	r3, #8
 800fea2:	d901      	bls.n	800fea8 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x14a>
		return false;
 800fea4:	2300      	movs	r3, #0
 800fea6:	e047      	b.n	800ff38 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x1da>
	}

	//data
	if(frame.is_remote){
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	7c5b      	ldrb	r3, [r3, #17]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d142      	bne.n	800ff36 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x1d8>

	}else{
		for(size_t i = 0; i < frame.data_length; i ++){
 800feb0:	2300      	movs	r3, #0
 800feb2:	613b      	str	r3, [r7, #16]
 800feb4:	e03a      	b.n	800ff2c <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x1ce>
			int tmp1 = str[head + 2*i];
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	005a      	lsls	r2, r3, #1
 800feba:	69fb      	ldr	r3, [r7, #28]
 800febc:	4413      	add	r3, r2
 800febe:	687a      	ldr	r2, [r7, #4]
 800fec0:	4413      	add	r3, r2
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	60fb      	str	r3, [r7, #12]
			int tmp2 = str[head + 1 + 2*i];
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	005a      	lsls	r2, r3, #1
 800feca:	69fb      	ldr	r3, [r7, #28]
 800fecc:	4413      	add	r3, r2
 800fece:	3301      	adds	r3, #1
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	4413      	add	r3, r2
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	60bb      	str	r3, [r7, #8]
			if(tmp1 >= 'A'){
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	2b40      	cmp	r3, #64	; 0x40
 800fedc:	dd05      	ble.n	800feea <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x18c>
				tmp1 = (tmp1 - 'A'+10) & 0xF;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	3b37      	subs	r3, #55	; 0x37
 800fee2:	f003 030f 	and.w	r3, r3, #15
 800fee6:	60fb      	str	r3, [r7, #12]
 800fee8:	e003      	b.n	800fef2 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x194>
			}else{
				tmp1 = (tmp1 - '0') & 0xF;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f003 030f 	and.w	r3, r3, #15
 800fef0:	60fb      	str	r3, [r7, #12]
			}

			if(tmp2 >= 'A'){
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	2b40      	cmp	r3, #64	; 0x40
 800fef6:	dd05      	ble.n	800ff04 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x1a6>
				tmp2 = (tmp2 - 'A'+10) & 0xF;
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	3b37      	subs	r3, #55	; 0x37
 800fefc:	f003 030f 	and.w	r3, r3, #15
 800ff00:	60bb      	str	r3, [r7, #8]
 800ff02:	e003      	b.n	800ff0c <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x1ae>
			}else{
				tmp2 = (tmp2 - '0') & 0xF;
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	f003 030f 	and.w	r3, r3, #15
 800ff0a:	60bb      	str	r3, [r7, #8]
			}

			frame.data[i] = (tmp1 << 4) | tmp2;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	011b      	lsls	r3, r3, #4
 800ff10:	b25a      	sxtb	r2, r3
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	b25b      	sxtb	r3, r3
 800ff16:	4313      	orrs	r3, r2
 800ff18:	b25b      	sxtb	r3, r3
 800ff1a:	b2d9      	uxtb	r1, r3
 800ff1c:	683a      	ldr	r2, [r7, #0]
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	4413      	add	r3, r2
 800ff22:	460a      	mov	r2, r1
 800ff24:	701a      	strb	r2, [r3, #0]
		for(size_t i = 0; i < frame.data_length; i ++){
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	3301      	adds	r3, #1
 800ff2a:	613b      	str	r3, [r7, #16]
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	689b      	ldr	r3, [r3, #8]
 800ff30:	693a      	ldr	r2, [r7, #16]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d3bf      	bcc.n	800feb6 <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE+0x158>
		}
	}
	return true;
 800ff36:	2301      	movs	r3, #1
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3724      	adds	r7, #36	; 0x24
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf>:
#include "pwm.hpp"

namespace G24_STM32HAL::CommonLib{


void PWMHard::out(float val){
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	ed87 0a00 	vstr	s0, [r7]

	if(val < min || max < val)val  = 0;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	edd3 7a03 	vldr	s15, [r3, #12]
 800ff56:	ed97 7a00 	vldr	s14, [r7]
 800ff5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff62:	d409      	bmi.n	800ff78 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x34>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	edd3 7a04 	vldr	s15, [r3, #16]
 800ff6a:	ed97 7a00 	vldr	s14, [r7]
 800ff6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff76:	dd02      	ble.n	800ff7e <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x3a>
 800ff78:	f04f 0300 	mov.w	r3, #0
 800ff7c:	603b      	str	r3, [r7, #0]

	__HAL_TIM_SET_COMPARE(tim, ch, (val - min)*diff_inv*tim->Init.Period);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	689b      	ldr	r3, [r3, #8]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d11d      	bne.n	800ffc2 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x7e>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	edd3 7a03 	vldr	s15, [r3, #12]
 800ff8c:	ed97 7a00 	vldr	s14, [r7]
 800ff90:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	edd3 7a05 	vldr	s15, [r3, #20]
 800ff9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	ee07 3a90 	vmov	s15, r3
 800ffa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffba:	ee17 2a90 	vmov	r2, s15
 800ffbe:	635a      	str	r2, [r3, #52]	; 0x34
}
 800ffc0:	e0a4      	b.n	801010c <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x1c8>
	__HAL_TIM_SET_COMPARE(tim, ch, (val - min)*diff_inv*tim->Init.Period);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	689b      	ldr	r3, [r3, #8]
 800ffc6:	2b04      	cmp	r3, #4
 800ffc8:	d11d      	bne.n	8010006 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0xc2>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	edd3 7a03 	vldr	s15, [r3, #12]
 800ffd0:	ed97 7a00 	vldr	s14, [r7]
 800ffd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	edd3 7a05 	vldr	s15, [r3, #20]
 800ffde:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	ee07 3a90 	vmov	s15, r3
 800ffec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fffe:	ee17 2a90 	vmov	r2, s15
 8010002:	639a      	str	r2, [r3, #56]	; 0x38
}
 8010004:	e082      	b.n	801010c <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x1c8>
	__HAL_TIM_SET_COMPARE(tim, ch, (val - min)*diff_inv*tim->Init.Period);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	689b      	ldr	r3, [r3, #8]
 801000a:	2b08      	cmp	r3, #8
 801000c:	d11d      	bne.n	801004a <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x106>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	edd3 7a03 	vldr	s15, [r3, #12]
 8010014:	ed97 7a00 	vldr	s14, [r7]
 8010018:	ee37 7a67 	vsub.f32	s14, s14, s15
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	edd3 7a05 	vldr	s15, [r3, #20]
 8010022:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	68db      	ldr	r3, [r3, #12]
 801002c:	ee07 3a90 	vmov	s15, r3
 8010030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	685b      	ldr	r3, [r3, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010042:	ee17 2a90 	vmov	r2, s15
 8010046:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8010048:	e060      	b.n	801010c <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x1c8>
	__HAL_TIM_SET_COMPARE(tim, ch, (val - min)*diff_inv*tim->Init.Period);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	689b      	ldr	r3, [r3, #8]
 801004e:	2b0c      	cmp	r3, #12
 8010050:	d11d      	bne.n	801008e <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x14a>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	edd3 7a03 	vldr	s15, [r3, #12]
 8010058:	ed97 7a00 	vldr	s14, [r7]
 801005c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	edd3 7a05 	vldr	s15, [r3, #20]
 8010066:	ee27 7a27 	vmul.f32	s14, s14, s15
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	68db      	ldr	r3, [r3, #12]
 8010070:	ee07 3a90 	vmov	s15, r3
 8010074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010078:	ee67 7a27 	vmul.f32	s15, s14, s15
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	685b      	ldr	r3, [r3, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010086:	ee17 2a90 	vmov	r2, s15
 801008a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801008c:	e03e      	b.n	801010c <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x1c8>
	__HAL_TIM_SET_COMPARE(tim, ch, (val - min)*diff_inv*tim->Init.Period);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	689b      	ldr	r3, [r3, #8]
 8010092:	2b10      	cmp	r3, #16
 8010094:	d11d      	bne.n	80100d2 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x18e>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	edd3 7a03 	vldr	s15, [r3, #12]
 801009c:	ed97 7a00 	vldr	s14, [r7]
 80100a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80100aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	ee07 3a90 	vmov	s15, r3
 80100b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100ca:	ee17 2a90 	vmov	r2, s15
 80100ce:	659a      	str	r2, [r3, #88]	; 0x58
}
 80100d0:	e01c      	b.n	801010c <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf+0x1c8>
	__HAL_TIM_SET_COMPARE(tim, ch, (val - min)*diff_inv*tim->Init.Period);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80100d8:	ed97 7a00 	vldr	s14, [r7]
 80100dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80100e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	68db      	ldr	r3, [r3, #12]
 80100f0:	ee07 3a90 	vmov	s15, r3
 80100f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010106:	ee17 2a90 	vmov	r2, s15
 801010a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801010c:	bf00      	nop
 801010e:	370c      	adds	r7, #12
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr

08010118 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8010118:	b480      	push	{r7}
 801011a:	b083      	sub	sp, #12
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	6039      	str	r1, [r7, #0]
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	4618      	mov	r0, r3
 8010126:	370c      	adds	r7, #12
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr

08010130 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm5startEv>:
			 rx_fifo(_rx_fifo),
			 rx_filter_fifo(_rx_filter_fifo),
			 rx_fifo_it(_rx_fifo_it){
		}

		void start(void){
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
			HAL_FDCAN_Start(fdcan);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	685b      	ldr	r3, [r3, #4]
 801013c:	4618      	mov	r0, r3
 801013e:	f7f3 fda7 	bl	8003c90 <HAL_FDCAN_Start>
			HAL_FDCAN_ActivateNotification(fdcan, rx_fifo_it, 0);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6858      	ldr	r0, [r3, #4]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	691b      	ldr	r3, [r3, #16]
 801014a:	2200      	movs	r2, #0
 801014c:	4619      	mov	r1, r3
 801014e:	f7f3 ffa5 	bl	800409c <HAL_FDCAN_ActivateNotification>
			HAL_FDCAN_ActivateNotification(fdcan, FDCAN_IT_TX_COMPLETE, FDCAN_TX_BUFFER0 | FDCAN_TX_BUFFER1 | FDCAN_TX_BUFFER2);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	2207      	movs	r2, #7
 8010158:	f44f 7100 	mov.w	r1, #512	; 0x200
 801015c:	4618      	mov	r0, r3
 801015e:	f7f3 ff9d 	bl	800409c <HAL_FDCAN_ActivateNotification>
		}
 8010162:	bf00      	nop
 8010164:	3708      	adds	r7, #8
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm15set_filter_freeEm>:
		rx_frame.id = rx_header.Identifier;

		rx_buff->push(rx_frame);
	}

	inline void FdCanComm::set_filter_free(uint32_t filter_no){
 801016a:	b580      	push	{r7, lr}
 801016c:	b08a      	sub	sp, #40	; 0x28
 801016e:	af00      	add	r7, sp, #0
 8010170:	6078      	str	r0, [r7, #4]
 8010172:	6039      	str	r1, [r7, #0]
		FDCAN_FilterTypeDef  filter;
		filter.IdType = FDCAN_EXTENDED_ID;
 8010174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010178:	60bb      	str	r3, [r7, #8]
		filter.FilterIndex = filter_no;
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	60fb      	str	r3, [r7, #12]
		filter.FilterType = FDCAN_FILTER_MASK;
 801017e:	2302      	movs	r3, #2
 8010180:	613b      	str	r3, [r7, #16]
		filter.FilterConfig = rx_filter_fifo;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	68db      	ldr	r3, [r3, #12]
 8010186:	617b      	str	r3, [r7, #20]
		filter.FilterID1 = 0x000;
 8010188:	2300      	movs	r3, #0
 801018a:	61bb      	str	r3, [r7, #24]
		filter.FilterID2 = 0x000;
 801018c:	2300      	movs	r3, #0
 801018e:	61fb      	str	r3, [r7, #28]

		HAL_FDCAN_ConfigFilter(fdcan, &filter);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	f107 0208 	add.w	r2, r7, #8
 8010198:	4611      	mov	r1, r2
 801019a:	4618      	mov	r0, r3
 801019c:	f7f3 fd02 	bl	8003ba4 <HAL_FDCAN_ConfigFilter>
	}
 80101a0:	bf00      	nop
 80101a2:	3728      	adds	r7, #40	; 0x28
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <_ZN12G24_STM32HAL9CommonLib7PWMHard5startEv>:
	void out_as_gpio_toggle(void);

	uint32_t get_compare_val(void){
		return __HAL_TIM_GET_COMPARE(tim, ch);
	}
	void start(void){
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b082      	sub	sp, #8
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
		HAL_TIM_PWM_Start(tim, ch);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	685a      	ldr	r2, [r3, #4]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	689b      	ldr	r3, [r3, #8]
 80101b8:	4619      	mov	r1, r3
 80101ba:	4610      	mov	r0, r2
 80101bc:	f7f9 f8f4 	bl	80093a8 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(tim, ch,0);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	689b      	ldr	r3, [r3, #8]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d105      	bne.n	80101d4 <_ZN12G24_STM32HAL9CommonLib7PWMHard5startEv+0x2c>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	2200      	movs	r2, #0
 80101d0:	635a      	str	r2, [r3, #52]	; 0x34
	}
 80101d2:	e02c      	b.n	801022e <_ZN12G24_STM32HAL9CommonLib7PWMHard5startEv+0x86>
		__HAL_TIM_SET_COMPARE(tim, ch,0);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	689b      	ldr	r3, [r3, #8]
 80101d8:	2b04      	cmp	r3, #4
 80101da:	d105      	bne.n	80101e8 <_ZN12G24_STM32HAL9CommonLib7PWMHard5startEv+0x40>
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	685b      	ldr	r3, [r3, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	2200      	movs	r2, #0
 80101e4:	639a      	str	r2, [r3, #56]	; 0x38
	}
 80101e6:	e022      	b.n	801022e <_ZN12G24_STM32HAL9CommonLib7PWMHard5startEv+0x86>
		__HAL_TIM_SET_COMPARE(tim, ch,0);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	689b      	ldr	r3, [r3, #8]
 80101ec:	2b08      	cmp	r3, #8
 80101ee:	d105      	bne.n	80101fc <_ZN12G24_STM32HAL9CommonLib7PWMHard5startEv+0x54>
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	2200      	movs	r2, #0
 80101f8:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 80101fa:	e018      	b.n	801022e <_ZN12G24_STM32HAL9CommonLib7PWMHard5startEv+0x86>
		__HAL_TIM_SET_COMPARE(tim, ch,0);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	689b      	ldr	r3, [r3, #8]
 8010200:	2b0c      	cmp	r3, #12
 8010202:	d105      	bne.n	8010210 <_ZN12G24_STM32HAL9CommonLib7PWMHard5startEv+0x68>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	685b      	ldr	r3, [r3, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	2200      	movs	r2, #0
 801020c:	641a      	str	r2, [r3, #64]	; 0x40
	}
 801020e:	e00e      	b.n	801022e <_ZN12G24_STM32HAL9CommonLib7PWMHard5startEv+0x86>
		__HAL_TIM_SET_COMPARE(tim, ch,0);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	689b      	ldr	r3, [r3, #8]
 8010214:	2b10      	cmp	r3, #16
 8010216:	d105      	bne.n	8010224 <_ZN12G24_STM32HAL9CommonLib7PWMHard5startEv+0x7c>
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2200      	movs	r2, #0
 8010220:	659a      	str	r2, [r3, #88]	; 0x58
	}
 8010222:	e004      	b.n	801022e <_ZN12G24_STM32HAL9CommonLib7PWMHard5startEv+0x86>
		__HAL_TIM_SET_COMPARE(tim, ch,0);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	685b      	ldr	r3, [r3, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	2200      	movs	r2, #0
 801022c:	65da      	str	r2, [r3, #92]	; 0x5c
	}
 801022e:	bf00      	nop
 8010230:	3708      	adds	r7, #8
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}

08010236 <_ZN12G24_STM32HAL9CommonLib6LEDPwm5startEv>:

	public:
		LEDPwm(TIM_HandleTypeDef *tim,uint32_t ch):pwm(tim,ch){
		}

		void start(void){pwm.start();}
 8010236:	b580      	push	{r7, lr}
 8010238:	b082      	sub	sp, #8
 801023a:	af00      	add	r7, sp, #0
 801023c:	6078      	str	r0, [r7, #4]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	3304      	adds	r3, #4
 8010242:	4618      	mov	r0, r3
 8010244:	f7ff ffb0 	bl	80101a8 <_ZN12G24_STM32HAL9CommonLib7PWMHard5startEv>
 8010248:	bf00      	nop
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}

08010250 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv>:
			pwm.out(playing_pattern[pattern_count].state?duty:0.0f);
		}

		bool is_playing(void)override{return playing_pattern!=nullptr ? true:false;}

		void update(void){
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
			if(playing_pattern != nullptr){
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6a1b      	ldr	r3, [r3, #32]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d041      	beq.n	80102e4 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x94>
				length_count  --;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010264:	1e5a      	subs	r2, r3, #1
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	629a      	str	r2, [r3, #40]	; 0x28
				if(length_count <= 0){
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801026e:	2b00      	cmp	r3, #0
 8010270:	d138      	bne.n	80102e4 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x94>
					pattern_count ++;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010276:	1c5a      	adds	r2, r3, #1
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	625a      	str	r2, [r3, #36]	; 0x24

					if(playing_pattern[pattern_count].length == 0){
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6a1a      	ldr	r2, [r3, #32]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010284:	009b      	lsls	r3, r3, #2
 8010286:	4413      	add	r3, r2
 8010288:	885b      	ldrh	r3, [r3, #2]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d10a      	bne.n	80102a4 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x54>
						playing_pattern = nullptr;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2200      	movs	r2, #0
 8010292:	621a      	str	r2, [r3, #32]
						pwm.out(0.0f);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	3304      	adds	r3, #4
 8010298:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80102ec <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x9c>
 801029c:	4618      	mov	r0, r3
 801029e:	f7ff fe51 	bl	800ff44 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf>
						return;
 80102a2:	e01f      	b.n	80102e4 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x94>
					}
					length_count = playing_pattern[pattern_count].length;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6a1a      	ldr	r2, [r3, #32]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ac:	009b      	lsls	r3, r3, #2
 80102ae:	4413      	add	r3, r2
 80102b0:	885b      	ldrh	r3, [r3, #2]
 80102b2:	461a      	mov	r2, r3
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	629a      	str	r2, [r3, #40]	; 0x28
					pwm.out(playing_pattern[pattern_count].state?duty:0.0f);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	1d19      	adds	r1, r3, #4
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6a1a      	ldr	r2, [r3, #32]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	4413      	add	r3, r2
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d003      	beq.n	80102d6 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x86>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	edd3 7a07 	vldr	s15, [r3, #28]
 80102d4:	e001      	b.n	80102da <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x8a>
 80102d6:	eddf 7a05 	vldr	s15, [pc, #20]	; 80102ec <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv+0x9c>
 80102da:	eeb0 0a67 	vmov.f32	s0, s15
 80102de:	4608      	mov	r0, r1
 80102e0:	f7ff fe30 	bl	800ff44 <_ZN12G24_STM32HAL9CommonLib7PWMHard3outEf>
				}
			}else{

			}
		}
 80102e4:	3708      	adds	r7, #8
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	00000000 	.word	0x00000000

080102f0 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 80102f0:	b480      	push	{r7}
 80102f2:	b083      	sub	sp, #12
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	4618      	mov	r0, r3
 80102fc:	370c      	adds	r7, #12
 80102fe:	46bd      	mov	sp, r7
 8010300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010304:	4770      	bx	lr

08010306 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8010306:	b480      	push	{r7}
 8010308:	b083      	sub	sp, #12
 801030a:	af00      	add	r7, sp, #0
 801030c:	6078      	str	r0, [r7, #4]
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	4618      	mov	r0, r3
 8010312:	370c      	adds	r7, #12
 8010314:	46bd      	mov	sp, r7
 8010316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031a:	4770      	bx	lr

0801031c <_ZN12G24_STM32HAL11UsbCanBoard10DeviceList10has_deviceEm>:
	};

	struct DeviceList{
		std::array<uint32_t,32> list;
		size_t n = 0;
		bool has_device(uint32_t id){
 801031c:	b580      	push	{r7, lr}
 801031e:	b084      	sub	sp, #16
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	6039      	str	r1, [r7, #0]
			if(n!=0){
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801032c:	2b00      	cmp	r3, #0
 801032e:	d020      	beq.n	8010372 <_ZN12G24_STM32HAL11UsbCanBoard10DeviceList10has_deviceEm+0x56>
				for(size_t i = 0; i < n; i++){
 8010330:	2300      	movs	r3, #0
 8010332:	60fb      	str	r3, [r7, #12]
 8010334:	e015      	b.n	8010362 <_ZN12G24_STM32HAL11UsbCanBoard10DeviceList10has_deviceEm+0x46>
					if(list.at(i) == (id&0x00FF0000)){
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	68f9      	ldr	r1, [r7, #12]
 801033a:	4618      	mov	r0, r3
 801033c:	f000 fa84 	bl	8010848 <_ZNSt5arrayImLj32EE2atEj>
 8010340:	4603      	mov	r3, r0
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801034a:	429a      	cmp	r2, r3
 801034c:	bf0c      	ite	eq
 801034e:	2301      	moveq	r3, #1
 8010350:	2300      	movne	r3, #0
 8010352:	b2db      	uxtb	r3, r3
 8010354:	2b00      	cmp	r3, #0
 8010356:	d001      	beq.n	801035c <_ZN12G24_STM32HAL11UsbCanBoard10DeviceList10has_deviceEm+0x40>
						return true;
 8010358:	2301      	movs	r3, #1
 801035a:	e00b      	b.n	8010374 <_ZN12G24_STM32HAL11UsbCanBoard10DeviceList10has_deviceEm+0x58>
				for(size_t i = 0; i < n; i++){
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	3301      	adds	r3, #1
 8010360:	60fb      	str	r3, [r7, #12]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010368:	68fa      	ldr	r2, [r7, #12]
 801036a:	429a      	cmp	r2, r3
 801036c:	d3e3      	bcc.n	8010336 <_ZN12G24_STM32HAL11UsbCanBoard10DeviceList10has_deviceEm+0x1a>
					}
				}
				return false;
 801036e:	2300      	movs	r3, #0
 8010370:	e000      	b.n	8010374 <_ZN12G24_STM32HAL11UsbCanBoard10DeviceList10has_deviceEm+0x58>
			}else{
				return false;
 8010372:	2300      	movs	r3, #0
			}

		}
 8010374:	4618      	mov	r0, r3
 8010376:	3710      	adds	r7, #16
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <_ZZN12G24_STM32HAL11UsbCanBoard4initEvENKUlvE_clEv>:

#include "board_task.hpp"

namespace G24_STM32HAL::UsbCanBoard{
	void init(void){
		led_timer.set_task([](){
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
			LED1_R.update();
 8010384:	480a      	ldr	r0, [pc, #40]	; (80103b0 <_ZZN12G24_STM32HAL11UsbCanBoard4initEvENKUlvE_clEv+0x34>)
 8010386:	f7ff ff63 	bl	8010250 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv>
			LED1_G.update();
 801038a:	480a      	ldr	r0, [pc, #40]	; (80103b4 <_ZZN12G24_STM32HAL11UsbCanBoard4initEvENKUlvE_clEv+0x38>)
 801038c:	f7ff ff60 	bl	8010250 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv>
			LED1_B.update();
 8010390:	4809      	ldr	r0, [pc, #36]	; (80103b8 <_ZZN12G24_STM32HAL11UsbCanBoard4initEvENKUlvE_clEv+0x3c>)
 8010392:	f7ff ff5d 	bl	8010250 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv>
			LED2_R.update();
 8010396:	4809      	ldr	r0, [pc, #36]	; (80103bc <_ZZN12G24_STM32HAL11UsbCanBoard4initEvENKUlvE_clEv+0x40>)
 8010398:	f7ff ff5a 	bl	8010250 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv>
			LED2_G.update();
 801039c:	4808      	ldr	r0, [pc, #32]	; (80103c0 <_ZZN12G24_STM32HAL11UsbCanBoard4initEvENKUlvE_clEv+0x44>)
 801039e:	f7ff ff57 	bl	8010250 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv>
			LED2_B.update();
 80103a2:	4808      	ldr	r0, [pc, #32]	; (80103c4 <_ZZN12G24_STM32HAL11UsbCanBoard4initEvENKUlvE_clEv+0x48>)
 80103a4:	f7ff ff54 	bl	8010250 <_ZN12G24_STM32HAL9CommonLib6LEDPwm6updateEv>
		});
 80103a8:	bf00      	nop
 80103aa:	3708      	adds	r7, #8
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	240002d0 	.word	0x240002d0
 80103b4:	240002fc 	.word	0x240002fc
 80103b8:	24000328 	.word	0x24000328
 80103bc:	24000354 	.word	0x24000354
 80103c0:	24000380 	.word	0x24000380
 80103c4:	240003ac 	.word	0x240003ac

080103c8 <_ZN12G24_STM32HAL11UsbCanBoard4initEv>:
	void init(void){
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b086      	sub	sp, #24
 80103cc:	af00      	add	r7, sp, #0
		led_timer.set_task([](){
 80103ce:	f107 0214 	add.w	r2, r7, #20
 80103d2:	1d3b      	adds	r3, r7, #4
 80103d4:	4611      	mov	r1, r2
 80103d6:	4618      	mov	r0, r3
 80103d8:	f000 fa50 	bl	801087c <_ZNSt8functionIFvvEEC1IZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_vEEOT_>
 80103dc:	1d3b      	adds	r3, r7, #4
 80103de:	4619      	mov	r1, r3
 80103e0:	4823      	ldr	r0, [pc, #140]	; (8010470 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xa8>)
 80103e2:	f7f0 fe61 	bl	80010a8 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard8set_taskESt8functionIFvvEE>
 80103e6:	1d3b      	adds	r3, r7, #4
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7f0 fdca 	bl	8000f82 <_ZNSt8functionIFvvEED1Ev>
		led_timer.set_and_start(1000);
 80103ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80103f2:	481f      	ldr	r0, [pc, #124]	; (8010470 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xa8>)
 80103f4:	f7f0 fe02 	bl	8000ffc <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHard13set_and_startEt>

		can1.set_filter_free(0);
 80103f8:	2100      	movs	r1, #0
 80103fa:	481e      	ldr	r0, [pc, #120]	; (8010474 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xac>)
 80103fc:	f7ff feb5 	bl	801016a <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm15set_filter_freeEm>
		can2.set_filter_free(0);
 8010400:	2100      	movs	r1, #0
 8010402:	481d      	ldr	r0, [pc, #116]	; (8010478 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xb0>)
 8010404:	f7ff feb1 	bl	801016a <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm15set_filter_freeEm>
		can1.start();
 8010408:	481a      	ldr	r0, [pc, #104]	; (8010474 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xac>)
 801040a:	f7ff fe91 	bl	8010130 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm5startEv>
		can2.start();
 801040e:	481a      	ldr	r0, [pc, #104]	; (8010478 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xb0>)
 8010410:	f7ff fe8e 	bl	8010130 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm5startEv>

		LED1_R.start();
 8010414:	4819      	ldr	r0, [pc, #100]	; (801047c <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xb4>)
 8010416:	f7ff ff0e 	bl	8010236 <_ZN12G24_STM32HAL9CommonLib6LEDPwm5startEv>
		LED1_G.start();
 801041a:	4819      	ldr	r0, [pc, #100]	; (8010480 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xb8>)
 801041c:	f7ff ff0b 	bl	8010236 <_ZN12G24_STM32HAL9CommonLib6LEDPwm5startEv>
		LED1_B.start();
 8010420:	4818      	ldr	r0, [pc, #96]	; (8010484 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xbc>)
 8010422:	f7ff ff08 	bl	8010236 <_ZN12G24_STM32HAL9CommonLib6LEDPwm5startEv>
		LED2_R.start();
 8010426:	4818      	ldr	r0, [pc, #96]	; (8010488 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xc0>)
 8010428:	f7ff ff05 	bl	8010236 <_ZN12G24_STM32HAL9CommonLib6LEDPwm5startEv>
		LED2_G.start();
 801042c:	4817      	ldr	r0, [pc, #92]	; (801048c <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xc4>)
 801042e:	f7ff ff02 	bl	8010236 <_ZN12G24_STM32HAL9CommonLib6LEDPwm5startEv>
		LED2_B.start();
 8010432:	4817      	ldr	r0, [pc, #92]	; (8010490 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xc8>)
 8010434:	f7ff feff 	bl	8010236 <_ZN12G24_STM32HAL9CommonLib6LEDPwm5startEv>

		LED1_R.play(UsbCanLib::ok);
 8010438:	4916      	ldr	r1, [pc, #88]	; (8010494 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xcc>)
 801043a:	4810      	ldr	r0, [pc, #64]	; (801047c <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xb4>)
 801043c:	f7f0 fd38 	bl	8000eb0 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
		LED1_G.play(UsbCanLib::ok);
 8010440:	4914      	ldr	r1, [pc, #80]	; (8010494 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xcc>)
 8010442:	480f      	ldr	r0, [pc, #60]	; (8010480 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xb8>)
 8010444:	f7f0 fd34 	bl	8000eb0 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
		LED1_B.play(UsbCanLib::ok);
 8010448:	4912      	ldr	r1, [pc, #72]	; (8010494 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xcc>)
 801044a:	480e      	ldr	r0, [pc, #56]	; (8010484 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xbc>)
 801044c:	f7f0 fd30 	bl	8000eb0 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
		LED2_R.play(UsbCanLib::ok);
 8010450:	4910      	ldr	r1, [pc, #64]	; (8010494 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xcc>)
 8010452:	480d      	ldr	r0, [pc, #52]	; (8010488 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xc0>)
 8010454:	f7f0 fd2c 	bl	8000eb0 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
		LED2_G.play(UsbCanLib::ok);
 8010458:	490e      	ldr	r1, [pc, #56]	; (8010494 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xcc>)
 801045a:	480c      	ldr	r0, [pc, #48]	; (801048c <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xc4>)
 801045c:	f7f0 fd28 	bl	8000eb0 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
		LED2_B.play(UsbCanLib::ok);
 8010460:	490c      	ldr	r1, [pc, #48]	; (8010494 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xcc>)
 8010462:	480b      	ldr	r0, [pc, #44]	; (8010490 <_ZN12G24_STM32HAL11UsbCanBoard4initEv+0xc8>)
 8010464:	f7f0 fd24 	bl	8000eb0 <_ZN12G24_STM32HAL9CommonLib6LEDPwm4playEPKNS0_8LEDStateE>
	}
 8010468:	bf00      	nop
 801046a:	3718      	adds	r7, #24
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}
 8010470:	240002b4 	.word	0x240002b4
 8010474:	240003d8 	.word	0x240003d8
 8010478:	240003f4 	.word	0x240003f4
 801047c:	240002d0 	.word	0x240002d0
 8010480:	240002fc 	.word	0x240002fc
 8010484:	24000328 	.word	0x24000328
 8010488:	24000354 	.word	0x24000354
 801048c:	24000380 	.word	0x24000380
 8010490:	240003ac 	.word	0x240003ac
 8010494:	08011600 	.word	0x08011600

08010498 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv>:

	void usb_to_can_task(void){
 8010498:	b5b0      	push	{r4, r5, r7, lr}
 801049a:	b0ba      	sub	sp, #232	; 0xe8
 801049c:	af00      	add	r7, sp, #0
		if(usb.rx_available()){
 801049e:	484c      	ldr	r0, [pc, #304]	; (80105d0 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x138>)
 80104a0:	f7f2 f8dd 	bl	800265e <_ZNK12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE12rx_availableEv>
 80104a4:	4603      	mov	r3, r0
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	bf14      	ite	ne
 80104aa:	2301      	movne	r3, #1
 80104ac:	2300      	moveq	r3, #0
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	f000 8088 	beq.w	80105c6 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x12e>
			CommonLib::SerialData serial_data;
 80104b6:	4a47      	ldr	r2, [pc, #284]	; (80105d4 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x13c>)
 80104b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80104bc:	4611      	mov	r1, r2
 80104be:	2244      	movs	r2, #68	; 0x44
 80104c0:	4618      	mov	r0, r3
 80104c2:	f000 ff93 	bl	80113ec <memcpy>
			CommonLib::CanFrame frame;
 80104c6:	4b44      	ldr	r3, [pc, #272]	; (80105d8 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x140>)
 80104c8:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 80104cc:	461d      	mov	r5, r3
 80104ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80104d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80104d2:	682b      	ldr	r3, [r5, #0]
 80104d4:	6023      	str	r3, [r4, #0]

			UsbCanBoard::usb.rx(serial_data);
 80104d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80104da:	4619      	mov	r1, r3
 80104dc:	483c      	ldr	r0, [pc, #240]	; (80105d0 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x138>)
 80104de:	f7f2 f8ad 	bl	800263c <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE2rxERNS0_10SerialDataE>
			switch(serial_data.data[0]){
 80104e2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80104e6:	2b43      	cmp	r3, #67	; 0x43
 80104e8:	d01d      	beq.n	8010526 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x8e>
 80104ea:	2b4f      	cmp	r3, #79	; 0x4f
 80104ec:	d11f      	bne.n	801052e <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x96>
			case 'O':
				bus1_list = bus_device_check(can1);
 80104ee:	4c3b      	ldr	r4, [pc, #236]	; (80105dc <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x144>)
 80104f0:	463b      	mov	r3, r7
 80104f2:	493b      	ldr	r1, [pc, #236]	; (80105e0 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x148>)
 80104f4:	4618      	mov	r0, r3
 80104f6:	f000 f901 	bl	80106fc <_ZN12G24_STM32HAL11UsbCanBoard16bus_device_checkERNS_9UsbCanLib9FdCanCommE>
 80104fa:	4620      	mov	r0, r4
 80104fc:	463b      	mov	r3, r7
 80104fe:	2284      	movs	r2, #132	; 0x84
 8010500:	4619      	mov	r1, r3
 8010502:	f000 ff73 	bl	80113ec <memcpy>
				bus2_list = bus_device_check(can2);
 8010506:	4c37      	ldr	r4, [pc, #220]	; (80105e4 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x14c>)
 8010508:	463b      	mov	r3, r7
 801050a:	4937      	ldr	r1, [pc, #220]	; (80105e8 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x150>)
 801050c:	4618      	mov	r0, r3
 801050e:	f000 f8f5 	bl	80106fc <_ZN12G24_STM32HAL11UsbCanBoard16bus_device_checkERNS_9UsbCanLib9FdCanCommE>
 8010512:	4620      	mov	r0, r4
 8010514:	463b      	mov	r3, r7
 8010516:	2284      	movs	r2, #132	; 0x84
 8010518:	4619      	mov	r1, r3
 801051a:	f000 ff67 	bl	80113ec <memcpy>

				bus_is_open = true;
 801051e:	4b33      	ldr	r3, [pc, #204]	; (80105ec <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x154>)
 8010520:	2201      	movs	r2, #1
 8010522:	701a      	strb	r2, [r3, #0]
				break;
 8010524:	e04f      	b.n	80105c6 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x12e>
			case 'C':
				bus_is_open = false;
 8010526:	4b31      	ldr	r3, [pc, #196]	; (80105ec <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x154>)
 8010528:	2200      	movs	r2, #0
 801052a:	701a      	strb	r2, [r3, #0]
				break;
 801052c:	e04b      	b.n	80105c6 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x12e>
			default:
				if(CommonLib::DataConvert::slcan_to_can((char*)serial_data.data, frame)){
 801052e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8010532:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010536:	4611      	mov	r1, r2
 8010538:	4618      	mov	r0, r3
 801053a:	f7ff fc10 	bl	800fd5e <_ZN12G24_STM32HAL9CommonLib11DataConvert12slcan_to_canEPKcRNS0_8CanFrameE>
 801053e:	4603      	mov	r3, r0
 8010540:	2b00      	cmp	r3, #0
 8010542:	d040      	beq.n	80105c6 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x12e>
					bool bus1_has_device = bus1_list.has_device(frame.id);
 8010544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010548:	4619      	mov	r1, r3
 801054a:	4824      	ldr	r0, [pc, #144]	; (80105dc <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x144>)
 801054c:	f7ff fee6 	bl	801031c <_ZN12G24_STM32HAL11UsbCanBoard10DeviceList10has_deviceEm>
 8010550:	4603      	mov	r3, r0
 8010552:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
					bool bus2_has_device = bus2_list.has_device(frame.id);
 8010556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801055a:	4619      	mov	r1, r3
 801055c:	4821      	ldr	r0, [pc, #132]	; (80105e4 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x14c>)
 801055e:	f7ff fedd 	bl	801031c <_ZN12G24_STM32HAL11UsbCanBoard10DeviceList10has_deviceEm>
 8010562:	4603      	mov	r3, r0
 8010564:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6

					if(bus1_has_device){
 8010568:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 801056c:	2b00      	cmp	r3, #0
 801056e:	d005      	beq.n	801057c <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0xe4>
						can1.tx(frame);
 8010570:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010574:	4619      	mov	r1, r3
 8010576:	481a      	ldr	r0, [pc, #104]	; (80105e0 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x148>)
 8010578:	f7f0 fafa 	bl	8000b70 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE>
					}
					if(bus2_has_device){
 801057c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8010580:	2b00      	cmp	r3, #0
 8010582:	d005      	beq.n	8010590 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0xf8>
						can2.tx(frame);
 8010584:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010588:	4619      	mov	r1, r3
 801058a:	4817      	ldr	r0, [pc, #92]	; (80105e8 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x150>)
 801058c:	f7f0 faf0 	bl	8000b70 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE>
					}
					if(!bus1_has_device && !bus2_has_device){
 8010590:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8010594:	f083 0301 	eor.w	r3, r3, #1
 8010598:	b2db      	uxtb	r3, r3
 801059a:	2b00      	cmp	r3, #0
 801059c:	d013      	beq.n	80105c6 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x12e>
 801059e:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80105a2:	f083 0301 	eor.w	r3, r3, #1
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d00c      	beq.n	80105c6 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x12e>
						can1.tx(frame);
 80105ac:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80105b0:	4619      	mov	r1, r3
 80105b2:	480b      	ldr	r0, [pc, #44]	; (80105e0 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x148>)
 80105b4:	f7f0 fadc 	bl	8000b70 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE>
						can2.tx(frame);
 80105b8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80105bc:	4619      	mov	r1, r3
 80105be:	480a      	ldr	r0, [pc, #40]	; (80105e8 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x150>)
 80105c0:	f7f0 fad6 	bl	8000b70 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE>
					}
				}
			}
		}
	}
 80105c4:	e7ff      	b.n	80105c6 <_ZN12G24_STM32HAL11UsbCanBoard15usb_to_can_taskEv+0x12e>
 80105c6:	bf00      	nop
 80105c8:	37e8      	adds	r7, #232	; 0xe8
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bdb0      	pop	{r4, r5, r7, pc}
 80105ce:	bf00      	nop
 80105d0:	24000410 	.word	0x24000410
 80105d4:	08011560 	.word	0x08011560
 80105d8:	080115a4 	.word	0x080115a4
 80105dc:	24000d10 	.word	0x24000d10
 80105e0:	240003d8 	.word	0x240003d8
 80105e4:	24000d94 	.word	0x24000d94
 80105e8:	240003f4 	.word	0x240003f4
 80105ec:	24000d0c 	.word	0x24000d0c

080105f0 <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv>:

	void can_to_usb_task(void){
 80105f0:	b5b0      	push	{r4, r5, r7, lr}
 80105f2:	b09c      	sub	sp, #112	; 0x70
 80105f4:	af00      	add	r7, sp, #0
		if(can1.rx_available()){
 80105f6:	483c      	ldr	r0, [pc, #240]	; (80106e8 <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0xf8>)
 80105f8:	f7f0 fa9a 	bl	8000b30 <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm12rx_availableEv>
 80105fc:	4603      	mov	r3, r0
 80105fe:	2b00      	cmp	r3, #0
 8010600:	bf14      	ite	ne
 8010602:	2301      	movne	r3, #1
 8010604:	2300      	moveq	r3, #0
 8010606:	b2db      	uxtb	r3, r3
 8010608:	2b00      	cmp	r3, #0
 801060a:	d02e      	beq.n	801066a <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0x7a>
			CommonLib::SerialData serial_data;
 801060c:	4a37      	ldr	r2, [pc, #220]	; (80106ec <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0xfc>)
 801060e:	1d3b      	adds	r3, r7, #4
 8010610:	4611      	mov	r1, r2
 8010612:	2244      	movs	r2, #68	; 0x44
 8010614:	4618      	mov	r0, r3
 8010616:	f000 fee9 	bl	80113ec <memcpy>
			CommonLib::CanFrame frame;
 801061a:	4b35      	ldr	r3, [pc, #212]	; (80106f0 <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0x100>)
 801061c:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8010620:	461d      	mov	r5, r3
 8010622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010626:	682b      	ldr	r3, [r5, #0]
 8010628:	6023      	str	r3, [r4, #0]

			can1.rx(frame);
 801062a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801062e:	4619      	mov	r1, r3
 8010630:	482d      	ldr	r0, [pc, #180]	; (80106e8 <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0xf8>)
 8010632:	f7f0 fb61 	bl	8000cf8 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2rxERNS_9CommonLib8CanFrameE>

			serial_data.size = CommonLib::DataConvert::can_to_slcan(frame,(char*)serial_data.data,serial_data.max_size);
 8010636:	1d39      	adds	r1, r7, #4
 8010638:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801063c:	2240      	movs	r2, #64	; 0x40
 801063e:	4618      	mov	r0, r3
 8010640:	f7ff fa42 	bl	800fac8 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj>
 8010644:	4603      	mov	r3, r0
 8010646:	647b      	str	r3, [r7, #68]	; 0x44
			usb.tx(serial_data);
 8010648:	1d3b      	adds	r3, r7, #4
 801064a:	4619      	mov	r1, r3
 801064c:	4829      	ldr	r0, [pc, #164]	; (80106f4 <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0x104>)
 801064e:	f7f1 ffaf 	bl	80025b0 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE2txERKNS0_10SerialDataE>

			if((frame.id & 0x00F00000) == 0x00F00000){
 8010652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010654:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8010658:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 801065c:	d105      	bne.n	801066a <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0x7a>
				can2.tx(frame);
 801065e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010662:	4619      	mov	r1, r3
 8010664:	4824      	ldr	r0, [pc, #144]	; (80106f8 <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0x108>)
 8010666:	f7f0 fa83 	bl	8000b70 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE>
			}
		}

		if(can2.rx_available()){
 801066a:	4823      	ldr	r0, [pc, #140]	; (80106f8 <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0x108>)
 801066c:	f7f0 fa60 	bl	8000b30 <_ZNK12G24_STM32HAL9UsbCanLib9FdCanComm12rx_availableEv>
 8010670:	4603      	mov	r3, r0
 8010672:	2b00      	cmp	r3, #0
 8010674:	bf14      	ite	ne
 8010676:	2301      	movne	r3, #1
 8010678:	2300      	moveq	r3, #0
 801067a:	b2db      	uxtb	r3, r3
 801067c:	2b00      	cmp	r3, #0
 801067e:	d02e      	beq.n	80106de <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0xee>
			CommonLib::SerialData serial_data;
 8010680:	4a1a      	ldr	r2, [pc, #104]	; (80106ec <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0xfc>)
 8010682:	1d3b      	adds	r3, r7, #4
 8010684:	4611      	mov	r1, r2
 8010686:	2244      	movs	r2, #68	; 0x44
 8010688:	4618      	mov	r0, r3
 801068a:	f000 feaf 	bl	80113ec <memcpy>
			CommonLib::CanFrame frame;
 801068e:	4b18      	ldr	r3, [pc, #96]	; (80106f0 <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0x100>)
 8010690:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8010694:	461d      	mov	r5, r3
 8010696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801069a:	682b      	ldr	r3, [r5, #0]
 801069c:	6023      	str	r3, [r4, #0]

			can2.rx(frame);
 801069e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80106a2:	4619      	mov	r1, r3
 80106a4:	4814      	ldr	r0, [pc, #80]	; (80106f8 <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0x108>)
 80106a6:	f7f0 fb27 	bl	8000cf8 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2rxERNS_9CommonLib8CanFrameE>

			serial_data.size = CommonLib::DataConvert::can_to_slcan(frame,(char*)serial_data.data,serial_data.max_size);
 80106aa:	1d39      	adds	r1, r7, #4
 80106ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80106b0:	2240      	movs	r2, #64	; 0x40
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7ff fa08 	bl	800fac8 <_ZN12G24_STM32HAL9CommonLib11DataConvert12can_to_slcanERKNS0_8CanFrameEPcj>
 80106b8:	4603      	mov	r3, r0
 80106ba:	647b      	str	r3, [r7, #68]	; 0x44
			usb.tx(serial_data);
 80106bc:	1d3b      	adds	r3, r7, #4
 80106be:	4619      	mov	r1, r3
 80106c0:	480c      	ldr	r0, [pc, #48]	; (80106f4 <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0x104>)
 80106c2:	f7f1 ff75 	bl	80025b0 <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EE2txERKNS0_10SerialDataE>

			if((frame.id & 0x00F00000) == 0x00F00000){
 80106c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106c8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80106cc:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 80106d0:	d105      	bne.n	80106de <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0xee>
				can1.tx(frame);
 80106d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80106d6:	4619      	mov	r1, r3
 80106d8:	4803      	ldr	r0, [pc, #12]	; (80106e8 <_ZN12G24_STM32HAL11UsbCanBoard15can_to_usb_taskEv+0xf8>)
 80106da:	f7f0 fa49 	bl	8000b70 <_ZN12G24_STM32HAL9UsbCanLib9FdCanComm2txERKNS_9CommonLib8CanFrameE>
			}
		}
	}
 80106de:	bf00      	nop
 80106e0:	3770      	adds	r7, #112	; 0x70
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bdb0      	pop	{r4, r5, r7, pc}
 80106e6:	bf00      	nop
 80106e8:	240003d8 	.word	0x240003d8
 80106ec:	08011560 	.word	0x08011560
 80106f0:	080115a4 	.word	0x080115a4
 80106f4:	24000410 	.word	0x24000410
 80106f8:	240003f4 	.word	0x240003f4

080106fc <_ZN12G24_STM32HAL11UsbCanBoard16bus_device_checkERNS_9UsbCanLib9FdCanCommE>:

	DeviceList bus_device_check(UsbCanLib::FdCanComm &can){
 80106fc:	b5b0      	push	{r4, r5, r7, lr}
 80106fe:	b096      	sub	sp, #88	; 0x58
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
		CommonLib::DataPacket test_data;
 8010706:	4b4e      	ldr	r3, [pc, #312]	; (8010840 <_ZN12G24_STM32HAL11UsbCanBoard16bus_device_checkERNS_9UsbCanLib9FdCanCommE+0x144>)
 8010708:	f107 0444 	add.w	r4, r7, #68	; 0x44
 801070c:	461d      	mov	r5, r3
 801070e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010712:	682b      	ldr	r3, [r5, #0]
 8010714:	6023      	str	r3, [r4, #0]
		test_data.priority = 0;
 8010716:	2300      	movs	r3, #0
 8010718:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		test_data.data_type = CommonLib::DataType::COMMON_DATA_ENFORCE;
 801071c:	230f      	movs	r3, #15
 801071e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		test_data.register_ID = (uint16_t)CommonReg::ID_REQEST;
 8010722:	2301      	movs	r3, #1
 8010724:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		test_data.is_request = true;
 8010728:	2301      	movs	r3, #1
 801072a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

		CommonLib::CanFrame test_frame;
 801072e:	4b45      	ldr	r3, [pc, #276]	; (8010844 <_ZN12G24_STM32HAL11UsbCanBoard16bus_device_checkERNS_9UsbCanLib9FdCanCommE+0x148>)
 8010730:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8010734:	461d      	mov	r5, r3
 8010736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801073a:	682b      	ldr	r3, [r5, #0]
 801073c:	6023      	str	r3, [r4, #0]
		CommonLib::DataConvert::encode_can_frame(test_data, test_frame);
 801073e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010742:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010746:	4611      	mov	r1, r2
 8010748:	4618      	mov	r0, r3
 801074a:	f7ff f949 	bl	800f9e0 <_ZN12G24_STM32HAL9CommonLib11DataConvert16encode_can_frameERKNS0_10DataPacketERNS0_8CanFrameE>

		can.tx(test_frame);
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	3304      	adds	r3, #4
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801075a:	4611      	mov	r1, r2
 801075c:	6838      	ldr	r0, [r7, #0]
 801075e:	4798      	blx	r3

		HAL_Delay(100);
 8010760:	2064      	movs	r0, #100	; 0x64
 8010762:	f7f2 ff01 	bl	8003568 <HAL_Delay>

		DeviceList list;
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f7f0 fd16 	bl	8001198 <_ZN12G24_STM32HAL11UsbCanBoard10DeviceListC1Ev>
		while(can.rx_available()){
 801076c:	e055      	b.n	801081a <_ZN12G24_STM32HAL11UsbCanBoard16bus_device_checkERNS_9UsbCanLib9FdCanCommE+0x11e>
			CommonLib::CanFrame rx_frame;
 801076e:	4b35      	ldr	r3, [pc, #212]	; (8010844 <_ZN12G24_STM32HAL11UsbCanBoard16bus_device_checkERNS_9UsbCanLib9FdCanCommE+0x148>)
 8010770:	f107 041c 	add.w	r4, r7, #28
 8010774:	461d      	mov	r5, r3
 8010776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801077a:	682b      	ldr	r3, [r5, #0]
 801077c:	6023      	str	r3, [r4, #0]
			CommonLib::DataPacket rx_data;
 801077e:	4b30      	ldr	r3, [pc, #192]	; (8010840 <_ZN12G24_STM32HAL11UsbCanBoard16bus_device_checkERNS_9UsbCanLib9FdCanCommE+0x144>)
 8010780:	f107 0408 	add.w	r4, r7, #8
 8010784:	461d      	mov	r5, r3
 8010786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801078a:	682b      	ldr	r3, [r5, #0]
 801078c:	6023      	str	r3, [r4, #0]
			can.rx(rx_frame);
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	330c      	adds	r3, #12
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	f107 021c 	add.w	r2, r7, #28
 801079a:	4611      	mov	r1, r2
 801079c:	6838      	ldr	r0, [r7, #0]
 801079e:	4798      	blx	r3
			if(CommonLib::DataConvert::decode_can_frame(rx_frame, rx_data)){
 80107a0:	f107 0208 	add.w	r2, r7, #8
 80107a4:	f107 031c 	add.w	r3, r7, #28
 80107a8:	4611      	mov	r1, r2
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7ff f94c 	bl	800fa48 <_ZN12G24_STM32HAL9CommonLib11DataConvert16decode_can_frameERKNS0_8CanFrameERNS0_10DataPacketE>
 80107b0:	4603      	mov	r3, r0
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d031      	beq.n	801081a <_ZN12G24_STM32HAL11UsbCanBoard16bus_device_checkERNS_9UsbCanLib9FdCanCommE+0x11e>
				if((!rx_data.is_request) && (rx_data.data_type == CommonLib::DataType::COMMON_DATA) && ((uint16_t)CommonReg::ID_REQEST)){
 80107b6:	7a3b      	ldrb	r3, [r7, #8]
 80107b8:	f083 0301 	eor.w	r3, r3, #1
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d01b      	beq.n	80107fa <_ZN12G24_STM32HAL11UsbCanBoard16bus_device_checkERNS_9UsbCanLib9FdCanCommE+0xfe>
 80107c2:	7abb      	ldrb	r3, [r7, #10]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d118      	bne.n	80107fa <_ZN12G24_STM32HAL11UsbCanBoard16bus_device_checkERNS_9UsbCanLib9FdCanCommE+0xfe>
					list.list.at(list.n) = (rx_frame.id&0x000F0000) | ((rx_frame.data[0]&0xF)<<20);
 80107c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ca:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80107ce:	7f3b      	ldrb	r3, [r7, #28]
 80107d0:	051b      	lsls	r3, r3, #20
 80107d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80107d6:	ea42 0403 	orr.w	r4, r2, r3
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107e0:	4619      	mov	r1, r3
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f000 f830 	bl	8010848 <_ZNSt5arrayImLj32EE2atEj>
 80107e8:	4603      	mov	r3, r0
 80107ea:	601c      	str	r4, [r3, #0]
					list.n ++;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107f2:	1c5a      	adds	r2, r3, #1
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				}
				if(list.n >= list.list.size()){
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f000 f86b 	bl	80108dc <_ZNKSt5arrayImLj32EE4sizeEv>
 8010806:	4603      	mov	r3, r0
 8010808:	429c      	cmp	r4, r3
 801080a:	bf2c      	ite	cs
 801080c:	2301      	movcs	r3, #1
 801080e:	2300      	movcc	r3, #0
 8010810:	b2db      	uxtb	r3, r3
 8010812:	2b00      	cmp	r3, #0
 8010814:	d001      	beq.n	801081a <_ZN12G24_STM32HAL11UsbCanBoard16bus_device_checkERNS_9UsbCanLib9FdCanCommE+0x11e>
					break;
 8010816:	bf00      	nop
				}
			}
		}
		return list;
 8010818:	e00d      	b.n	8010836 <_ZN12G24_STM32HAL11UsbCanBoard16bus_device_checkERNS_9UsbCanLib9FdCanCommE+0x13a>
		while(can.rx_available()){
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	3308      	adds	r3, #8
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	6838      	ldr	r0, [r7, #0]
 8010824:	4798      	blx	r3
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	bf14      	ite	ne
 801082c:	2301      	movne	r3, #1
 801082e:	2300      	moveq	r3, #0
 8010830:	b2db      	uxtb	r3, r3
 8010832:	2b00      	cmp	r3, #0
 8010834:	d19b      	bne.n	801076e <_ZN12G24_STM32HAL11UsbCanBoard16bus_device_checkERNS_9UsbCanLib9FdCanCommE+0x72>
		return list;
 8010836:	bf00      	nop
	}
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	3758      	adds	r7, #88	; 0x58
 801083c:	46bd      	mov	sp, r7
 801083e:	bdb0      	pop	{r4, r5, r7, pc}
 8010840:	080115b8 	.word	0x080115b8
 8010844:	080115a4 	.word	0x080115a4

08010848 <_ZNSt5arrayImLj32EE2atEj>:
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
      }

      _GLIBCXX17_CONSTEXPR reference
      at(size_type __n)
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	6039      	str	r1, [r7, #0]
      {
	if (__n >= _Nm)
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	2b1f      	cmp	r3, #31
 8010856:	d904      	bls.n	8010862 <_ZNSt5arrayImLj32EE2atEj+0x1a>
	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 8010858:	2220      	movs	r2, #32
 801085a:	6839      	ldr	r1, [r7, #0]
 801085c:	4806      	ldr	r0, [pc, #24]	; (8010878 <_ZNSt5arrayImLj32EE2atEj+0x30>)
 801085e:	f000 fbbb 	bl	8010fd8 <_ZSt24__throw_out_of_range_fmtPKcz>
					    ">= _Nm (which is %zu)"),
					__n, _Nm);
	return _AT_Type::_S_ref(_M_elems, __n);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6839      	ldr	r1, [r7, #0]
 8010866:	4618      	mov	r0, r3
 8010868:	f000 f843 	bl	80108f2 <_ZNSt14__array_traitsImLj32EE6_S_refERA32_Kmj>
 801086c:	4603      	mov	r3, r0
      }
 801086e:	4618      	mov	r0, r3
 8010870:	3708      	adds	r7, #8
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop
 8010878:	080115cc 	.word	0x080115cc

0801087c <_ZNSt8functionIFvvEEC1IZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_vEEOT_>:
	function(_Functor&& __f)
 801087c:	b590      	push	{r4, r7, lr}
 801087e:	b083      	sub	sp, #12
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	461a      	mov	r2, r3
 801088a:	2300      	movs	r3, #0
 801088c:	6013      	str	r3, [r2, #0]
 801088e:	6053      	str	r3, [r2, #4]
 8010890:	6093      	str	r3, [r2, #8]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	4618      	mov	r0, r3
 8010896:	f7f0 fea9 	bl	80015ec <_ZNSt14_Function_baseC1Ev>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2200      	movs	r2, #0
 801089e:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80108a0:	6838      	ldr	r0, [r7, #0]
 80108a2:	f000 f835 	bl	8010910 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E21_M_not_empty_functionIS3_EEbRKT_>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d00e      	beq.n	80108ca <_ZNSt8functionIFvvEEC1IZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80108ac:	687c      	ldr	r4, [r7, #4]
 80108ae:	6838      	ldr	r0, [r7, #0]
 80108b0:	f000 f839 	bl	8010926 <_ZSt7forwardIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 80108b4:	4603      	mov	r3, r0
 80108b6:	4619      	mov	r1, r3
 80108b8:	4620      	mov	r0, r4
 80108ba:	f000 f83f 	bl	801093c <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	4a04      	ldr	r2, [pc, #16]	; (80108d4 <_ZNSt8functionIFvvEEC1IZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_vEEOT_+0x58>)
 80108c2:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	4a04      	ldr	r2, [pc, #16]	; (80108d8 <_ZNSt8functionIFvvEEC1IZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_vEEOT_+0x5c>)
 80108c8:	609a      	str	r2, [r3, #8]
	}
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4618      	mov	r0, r3
 80108ce:	370c      	adds	r7, #12
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd90      	pop	{r4, r7, pc}
 80108d4:	08010961 	.word	0x08010961
 80108d8:	0801097f 	.word	0x0801097f

080108dc <_ZNKSt5arrayImLj32EE4sizeEv>:
      size() const noexcept { return _Nm; }
 80108dc:	b480      	push	{r7}
 80108de:	b083      	sub	sp, #12
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	2320      	movs	r3, #32
 80108e6:	4618      	mov	r0, r3
 80108e8:	370c      	adds	r7, #12
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr

080108f2 <_ZNSt14__array_traitsImLj32EE6_S_refERA32_Kmj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80108f2:	b480      	push	{r7}
 80108f4:	b083      	sub	sp, #12
 80108f6:	af00      	add	r7, sp, #0
 80108f8:	6078      	str	r0, [r7, #4]
 80108fa:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	009b      	lsls	r3, r3, #2
 8010900:	687a      	ldr	r2, [r7, #4]
 8010902:	4413      	add	r3, r2
 8010904:	4618      	mov	r0, r3
 8010906:	370c      	adds	r7, #12
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr

08010910 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8010910:	b480      	push	{r7}
 8010912:	b083      	sub	sp, #12
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
	  { return true; }
 8010918:	2301      	movs	r3, #1
 801091a:	4618      	mov	r0, r3
 801091c:	370c      	adds	r7, #12
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr

08010926 <_ZSt7forwardIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010926:	b480      	push	{r7}
 8010928:	b083      	sub	sp, #12
 801092a:	af00      	add	r7, sp, #0
 801092c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	4618      	mov	r0, r3
 8010932:	370c      	adds	r7, #12
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr

0801093c <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 801093c:	b590      	push	{r4, r7, lr}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8010946:	6838      	ldr	r0, [r7, #0]
 8010948:	f7ff ffed 	bl	8010926 <_ZSt7forwardIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 801094c:	4603      	mov	r3, r0
 801094e:	4622      	mov	r2, r4
 8010950:	4619      	mov	r1, r3
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f000 f832 	bl	80109bc <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8010958:	bf00      	nop
 801095a:	370c      	adds	r7, #12
 801095c:	46bd      	mov	sp, r7
 801095e:	bd90      	pop	{r4, r7, pc}

08010960 <_ZNSt17_Function_handlerIFvvEZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f000 f83c 	bl	80109e6 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 801096e:	4603      	mov	r3, r0
 8010970:	4618      	mov	r0, r3
 8010972:	f000 f848 	bl	8010a06 <_ZSt10__invoke_rIvRZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES5_E4typeEOS6_DpOS7_>
				     std::forward<_ArgTypes>(__args)...);
 8010976:	bf00      	nop
      }
 8010978:	3708      	adds	r7, #8
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}

0801097e <_ZNSt17_Function_handlerIFvvEZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 801097e:	b590      	push	{r4, r7, lr}
 8010980:	b085      	sub	sp, #20
 8010982:	af00      	add	r7, sp, #0
 8010984:	60f8      	str	r0, [r7, #12]
 8010986:	60b9      	str	r1, [r7, #8]
 8010988:	4613      	mov	r3, r2
 801098a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 801098c:	79fb      	ldrb	r3, [r7, #7]
 801098e:	2b01      	cmp	r3, #1
 8010990:	d109      	bne.n	80109a6 <_ZNSt17_Function_handlerIFvvEZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8010992:	68b8      	ldr	r0, [r7, #8]
 8010994:	f000 f827 	bl	80109e6 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010998:	4604      	mov	r4, r0
 801099a:	68f8      	ldr	r0, [r7, #12]
 801099c:	f000 f843 	bl	8010a26 <_ZNSt9_Any_data9_M_accessIPZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EERT_v>
 80109a0:	4603      	mov	r3, r0
 80109a2:	601c      	str	r4, [r3, #0]
	    break;
 80109a4:	e005      	b.n	80109b2 <_ZNSt17_Function_handlerIFvvEZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80109a6:	79fb      	ldrb	r3, [r7, #7]
 80109a8:	461a      	mov	r2, r3
 80109aa:	68b9      	ldr	r1, [r7, #8]
 80109ac:	68f8      	ldr	r0, [r7, #12]
 80109ae:	f000 f847 	bl	8010a40 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 80109b2:	2300      	movs	r3, #0
      }
 80109b4:	4618      	mov	r0, r3
 80109b6:	3714      	adds	r7, #20
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd90      	pop	{r4, r7, pc}

080109bc <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80109bc:	b580      	push	{r7, lr}
 80109be:	b084      	sub	sp, #16
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	60f8      	str	r0, [r7, #12]
 80109c4:	60b9      	str	r1, [r7, #8]
 80109c6:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80109c8:	68b8      	ldr	r0, [r7, #8]
 80109ca:	f7ff ffac 	bl	8010926 <_ZSt7forwardIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 80109ce:	68f8      	ldr	r0, [r7, #12]
 80109d0:	f7ff fc8e 	bl	80102f0 <_ZNSt9_Any_data9_M_accessEv>
 80109d4:	4603      	mov	r3, r0
 80109d6:	4619      	mov	r1, r3
 80109d8:	2001      	movs	r0, #1
 80109da:	f7ff fb9d 	bl	8010118 <_ZnwjPv>
	  }
 80109de:	bf00      	nop
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}

080109e6 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80109e6:	b580      	push	{r7, lr}
 80109e8:	b084      	sub	sp, #16
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f000 f860 	bl	8010ab4 <_ZNKSt9_Any_data9_M_accessIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EERKT_v>
 80109f4:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80109f6:	68f8      	ldr	r0, [r7, #12]
 80109f8:	f000 f868 	bl	8010acc <_ZSt11__addressofIKZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EPT_RS4_>
 80109fc:	4603      	mov	r3, r0
	}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3710      	adds	r7, #16
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}

08010a06 <_ZSt10__invoke_rIvRZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES5_E4typeEOS6_DpOS7_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8010a06:	b590      	push	{r4, r7, lr}
 8010a08:	b083      	sub	sp, #12
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f000 f867 	bl	8010ae2 <_ZSt7forwardIRZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8010a14:	4603      	mov	r3, r0
 8010a16:	4619      	mov	r1, r3
 8010a18:	4620      	mov	r0, r4
 8010a1a:	f000 f86d 	bl	8010af8 <_ZSt13__invoke_implIvRZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8010a1e:	bf00      	nop
 8010a20:	370c      	adds	r7, #12
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd90      	pop	{r4, r7, pc}

08010a26 <_ZNSt9_Any_data9_M_accessIPZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EERT_v>:
      _M_access()
 8010a26:	b580      	push	{r7, lr}
 8010a28:	b082      	sub	sp, #8
 8010a2a:	af00      	add	r7, sp, #0
 8010a2c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f7ff fc5e 	bl	80102f0 <_ZNSt9_Any_data9_M_accessEv>
 8010a34:	4603      	mov	r3, r0
 8010a36:	4618      	mov	r0, r3
 8010a38:	3708      	adds	r7, #8
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
	...

08010a40 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8010a40:	b590      	push	{r4, r7, lr}
 8010a42:	b085      	sub	sp, #20
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	4613      	mov	r3, r2
 8010a4c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8010a4e:	79fb      	ldrb	r3, [r7, #7]
 8010a50:	2b03      	cmp	r3, #3
 8010a52:	d82a      	bhi.n	8010aaa <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 8010a54:	a201      	add	r2, pc, #4	; (adr r2, 8010a5c <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 8010a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a5a:	bf00      	nop
 8010a5c:	08010a6d 	.word	0x08010a6d
 8010a60:	08010a7b 	.word	0x08010a7b
 8010a64:	08010a8f 	.word	0x08010a8f
 8010a68:	08010aa1 	.word	0x08010aa1
	      __dest._M_access<const type_info*>() = nullptr;
 8010a6c:	68f8      	ldr	r0, [r7, #12]
 8010a6e:	f000 f853 	bl	8010b18 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2200      	movs	r2, #0
 8010a76:	601a      	str	r2, [r3, #0]
	      break;
 8010a78:	e017      	b.n	8010aaa <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8010a7a:	68b8      	ldr	r0, [r7, #8]
 8010a7c:	f7ff ffb3 	bl	80109e6 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010a80:	4604      	mov	r4, r0
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f7ff ffcf 	bl	8010a26 <_ZNSt9_Any_data9_M_accessIPZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EERT_v>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	601c      	str	r4, [r3, #0]
	      break;
 8010a8c:	e00d      	b.n	8010aaa <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8010a8e:	68b8      	ldr	r0, [r7, #8]
 8010a90:	f7ff ffa9 	bl	80109e6 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010a94:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8010a96:	4619      	mov	r1, r3
 8010a98:	68f8      	ldr	r0, [r7, #12]
 8010a9a:	f000 f849 	bl	8010b30 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 8010a9e:	e004      	b.n	8010aaa <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8010aa0:	4621      	mov	r1, r4
 8010aa2:	68f8      	ldr	r0, [r7, #12]
 8010aa4:	f000 f856 	bl	8010b54 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8010aa8:	bf00      	nop
	  return false;
 8010aaa:	2300      	movs	r3, #0
	}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3714      	adds	r7, #20
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd90      	pop	{r4, r7, pc}

08010ab4 <_ZNKSt9_Any_data9_M_accessIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EERKT_v>:
      _M_access() const
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f7ff fc22 	bl	8010306 <_ZNKSt9_Any_data9_M_accessEv>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3708      	adds	r7, #8
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}

08010acc <_ZSt11__addressofIKZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010acc:	b480      	push	{r7}
 8010ace:	b083      	sub	sp, #12
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	370c      	adds	r7, #12
 8010ada:	46bd      	mov	sp, r7
 8010adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae0:	4770      	bx	lr

08010ae2 <_ZSt7forwardIRZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010ae2:	b480      	push	{r7}
 8010ae4:	b083      	sub	sp, #12
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	4618      	mov	r0, r3
 8010aee:	370c      	adds	r7, #12
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <_ZSt13__invoke_implIvRZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	7138      	strb	r0, [r7, #4]
 8010b00:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8010b02:	6838      	ldr	r0, [r7, #0]
 8010b04:	f7ff ffed 	bl	8010ae2 <_ZSt7forwardIRZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7ff fc36 	bl	801037c <_ZZN12G24_STM32HAL11UsbCanBoard4initEvENKUlvE_clEv>
 8010b10:	bf00      	nop
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f7ff fbe5 	bl	80102f0 <_ZNSt9_Any_data9_M_accessEv>
 8010b26:	4603      	mov	r3, r0
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3708      	adds	r7, #8
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8010b30:	b590      	push	{r4, r7, lr}
 8010b32:	b083      	sub	sp, #12
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8010b3a:	6838      	ldr	r0, [r7, #0]
 8010b3c:	f000 f816 	bl	8010b6c <_ZSt7forwardIRKZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8010b40:	4603      	mov	r3, r0
 8010b42:	4622      	mov	r2, r4
 8010b44:	4619      	mov	r1, r3
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f000 f81b 	bl	8010b82 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8010b4c:	bf00      	nop
 8010b4e:	370c      	adds	r7, #12
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd90      	pop	{r4, r7, pc}

08010b54 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f000 f824 	bl	8010bac <_ZNSt9_Any_data9_M_accessIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EERT_v>
	}
 8010b64:	bf00      	nop
 8010b66:	3708      	adds	r7, #8
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}

08010b6c <_ZSt7forwardIRKZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010b6c:	b480      	push	{r7}
 8010b6e:	b083      	sub	sp, #12
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	4618      	mov	r0, r3
 8010b78:	370c      	adds	r7, #12
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr

08010b82 <_ZNSt14_Function_base13_Base_managerIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8010b82:	b580      	push	{r7, lr}
 8010b84:	b084      	sub	sp, #16
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	60f8      	str	r0, [r7, #12]
 8010b8a:	60b9      	str	r1, [r7, #8]
 8010b8c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8010b8e:	68b8      	ldr	r0, [r7, #8]
 8010b90:	f7ff ffec 	bl	8010b6c <_ZSt7forwardIRKZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8010b94:	68f8      	ldr	r0, [r7, #12]
 8010b96:	f7ff fbab 	bl	80102f0 <_ZNSt9_Any_data9_M_accessEv>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	2001      	movs	r0, #1
 8010ba0:	f7ff faba 	bl	8010118 <_ZnwjPv>
	  }
 8010ba4:	bf00      	nop
 8010ba6:	3710      	adds	r7, #16
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}

08010bac <_ZNSt9_Any_data9_M_accessIZN12G24_STM32HAL11UsbCanBoard4initEvEUlvE_EERT_v>:
      _M_access()
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f7ff fb9b 	bl	80102f0 <_ZNSt9_Any_data9_M_accessEv>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <_Z41__static_initialization_and_destruction_0ii>:
}
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b08e      	sub	sp, #56	; 0x38
 8010bc8:	af04      	add	r7, sp, #16
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	6039      	str	r1, [r7, #0]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	f040 818f 	bne.w	8010ef4 <_Z41__static_initialization_and_destruction_0ii+0x330>
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	f040 8189 	bne.w	8010ef4 <_Z41__static_initialization_and_destruction_0ii+0x330>
	inline auto led_timer = CommonLib::InterruptionTimerHard(&htim17);
 8010be2:	4ba6      	ldr	r3, [pc, #664]	; (8010e7c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	3301      	adds	r3, #1
 8010be8:	4aa4      	ldr	r2, [pc, #656]	; (8010e7c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8010bea:	6013      	str	r3, [r2, #0]
 8010bec:	4ba3      	ldr	r3, [pc, #652]	; (8010e7c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	bf0c      	ite	eq
 8010bf4:	2301      	moveq	r3, #1
 8010bf6:	2300      	movne	r3, #0
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d003      	beq.n	8010c06 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8010bfe:	49a0      	ldr	r1, [pc, #640]	; (8010e80 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8010c00:	48a0      	ldr	r0, [pc, #640]	; (8010e84 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8010c02:	f7f0 f9db 	bl	8000fbc <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardC1EP17TIM_HandleTypeDef>
	inline auto LED1_R = CommonLib::LEDPwm{&htim1,TIM_CHANNEL_1};
 8010c06:	4ba0      	ldr	r3, [pc, #640]	; (8010e88 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	4a9e      	ldr	r2, [pc, #632]	; (8010e88 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8010c0e:	6013      	str	r3, [r2, #0]
 8010c10:	4b9d      	ldr	r3, [pc, #628]	; (8010e88 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2b01      	cmp	r3, #1
 8010c16:	bf0c      	ite	eq
 8010c18:	2301      	moveq	r3, #1
 8010c1a:	2300      	movne	r3, #0
 8010c1c:	b2db      	uxtb	r3, r3
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d004      	beq.n	8010c2c <_Z41__static_initialization_and_destruction_0ii+0x68>
 8010c22:	2200      	movs	r2, #0
 8010c24:	4999      	ldr	r1, [pc, #612]	; (8010e8c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8010c26:	489a      	ldr	r0, [pc, #616]	; (8010e90 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8010c28:	f7f0 f914 	bl	8000e54 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED1_G = CommonLib::LEDPwm{&htim1,TIM_CHANNEL_2};
 8010c2c:	4b99      	ldr	r3, [pc, #612]	; (8010e94 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	3301      	adds	r3, #1
 8010c32:	4a98      	ldr	r2, [pc, #608]	; (8010e94 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8010c34:	6013      	str	r3, [r2, #0]
 8010c36:	4b97      	ldr	r3, [pc, #604]	; (8010e94 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	2b01      	cmp	r3, #1
 8010c3c:	bf0c      	ite	eq
 8010c3e:	2301      	moveq	r3, #1
 8010c40:	2300      	movne	r3, #0
 8010c42:	b2db      	uxtb	r3, r3
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d004      	beq.n	8010c52 <_Z41__static_initialization_and_destruction_0ii+0x8e>
 8010c48:	2204      	movs	r2, #4
 8010c4a:	4990      	ldr	r1, [pc, #576]	; (8010e8c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8010c4c:	4892      	ldr	r0, [pc, #584]	; (8010e98 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8010c4e:	f7f0 f901 	bl	8000e54 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED1_B = CommonLib::LEDPwm{&htim1,TIM_CHANNEL_4};
 8010c52:	4b92      	ldr	r3, [pc, #584]	; (8010e9c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	3301      	adds	r3, #1
 8010c58:	4a90      	ldr	r2, [pc, #576]	; (8010e9c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8010c5a:	6013      	str	r3, [r2, #0]
 8010c5c:	4b8f      	ldr	r3, [pc, #572]	; (8010e9c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	2b01      	cmp	r3, #1
 8010c62:	bf0c      	ite	eq
 8010c64:	2301      	moveq	r3, #1
 8010c66:	2300      	movne	r3, #0
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d004      	beq.n	8010c78 <_Z41__static_initialization_and_destruction_0ii+0xb4>
 8010c6e:	220c      	movs	r2, #12
 8010c70:	4986      	ldr	r1, [pc, #536]	; (8010e8c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8010c72:	488b      	ldr	r0, [pc, #556]	; (8010ea0 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8010c74:	f7f0 f8ee 	bl	8000e54 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED2_R = CommonLib::LEDPwm{&htim3,TIM_CHANNEL_1};
 8010c78:	4b8a      	ldr	r3, [pc, #552]	; (8010ea4 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	3301      	adds	r3, #1
 8010c7e:	4a89      	ldr	r2, [pc, #548]	; (8010ea4 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8010c80:	6013      	str	r3, [r2, #0]
 8010c82:	4b88      	ldr	r3, [pc, #544]	; (8010ea4 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	bf0c      	ite	eq
 8010c8a:	2301      	moveq	r3, #1
 8010c8c:	2300      	movne	r3, #0
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d004      	beq.n	8010c9e <_Z41__static_initialization_and_destruction_0ii+0xda>
 8010c94:	2200      	movs	r2, #0
 8010c96:	4984      	ldr	r1, [pc, #528]	; (8010ea8 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8010c98:	4884      	ldr	r0, [pc, #528]	; (8010eac <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8010c9a:	f7f0 f8db 	bl	8000e54 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED2_G = CommonLib::LEDPwm{&htim3,TIM_CHANNEL_2};
 8010c9e:	4b84      	ldr	r3, [pc, #528]	; (8010eb0 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	4a82      	ldr	r2, [pc, #520]	; (8010eb0 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8010ca6:	6013      	str	r3, [r2, #0]
 8010ca8:	4b81      	ldr	r3, [pc, #516]	; (8010eb0 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	bf0c      	ite	eq
 8010cb0:	2301      	moveq	r3, #1
 8010cb2:	2300      	movne	r3, #0
 8010cb4:	b2db      	uxtb	r3, r3
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d004      	beq.n	8010cc4 <_Z41__static_initialization_and_destruction_0ii+0x100>
 8010cba:	2204      	movs	r2, #4
 8010cbc:	497a      	ldr	r1, [pc, #488]	; (8010ea8 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8010cbe:	487d      	ldr	r0, [pc, #500]	; (8010eb4 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8010cc0:	f7f0 f8c8 	bl	8000e54 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto LED2_B = CommonLib::LEDPwm{&htim3,TIM_CHANNEL_3};
 8010cc4:	4b7c      	ldr	r3, [pc, #496]	; (8010eb8 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	3301      	adds	r3, #1
 8010cca:	4a7b      	ldr	r2, [pc, #492]	; (8010eb8 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8010ccc:	6013      	str	r3, [r2, #0]
 8010cce:	4b7a      	ldr	r3, [pc, #488]	; (8010eb8 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	2b01      	cmp	r3, #1
 8010cd4:	bf0c      	ite	eq
 8010cd6:	2301      	moveq	r3, #1
 8010cd8:	2300      	movne	r3, #0
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d004      	beq.n	8010cea <_Z41__static_initialization_and_destruction_0ii+0x126>
 8010ce0:	2208      	movs	r2, #8
 8010ce2:	4971      	ldr	r1, [pc, #452]	; (8010ea8 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8010ce4:	4875      	ldr	r0, [pc, #468]	; (8010ebc <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8010ce6:	f7f0 f8b5 	bl	8000e54 <_ZN12G24_STM32HAL9CommonLib6LEDPwmC1EP17TIM_HandleTypeDefm>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 8010cea:	4b75      	ldr	r3, [pc, #468]	; (8010ec0 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	3301      	adds	r3, #1
 8010cf0:	4a73      	ldr	r2, [pc, #460]	; (8010ec0 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8010cf2:	6013      	str	r3, [r2, #0]
 8010cf4:	4b72      	ldr	r3, [pc, #456]	; (8010ec0 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2b01      	cmp	r3, #1
 8010cfa:	bf0c      	ite	eq
 8010cfc:	2301      	moveq	r3, #1
 8010cfe:	2300      	movne	r3, #0
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d03b      	beq.n	8010d7e <_Z41__static_initialization_and_destruction_0ii+0x1ba>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8010d06:	f107 030c 	add.w	r3, r7, #12
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f7f0 fd12 	bl	8001734 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 8010d10:	f107 020c 	add.w	r2, r7, #12
 8010d14:	f107 0308 	add.w	r3, r7, #8
 8010d18:	4611      	mov	r1, r2
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7f0 fd59 	bl	80017d2 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8010d20:	f107 0314 	add.w	r3, r7, #20
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7f0 fd05 	bl	8001734 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 8010d2a:	f107 0214 	add.w	r2, r7, #20
 8010d2e:	f107 0310 	add.w	r3, r7, #16
 8010d32:	4611      	mov	r1, r2
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7f0 fd4c 	bl	80017d2 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
 8010d3a:	f107 0310 	add.w	r3, r7, #16
 8010d3e:	f107 0208 	add.w	r2, r7, #8
 8010d42:	2101      	movs	r1, #1
 8010d44:	9102      	str	r1, [sp, #8]
 8010d46:	2101      	movs	r1, #1
 8010d48:	9101      	str	r1, [sp, #4]
 8010d4a:	2140      	movs	r1, #64	; 0x40
 8010d4c:	9100      	str	r1, [sp, #0]
 8010d4e:	495d      	ldr	r1, [pc, #372]	; (8010ec4 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8010d50:	485d      	ldr	r0, [pc, #372]	; (8010ec8 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8010d52:	f7ef fea1 	bl	8000a98 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommC1EP19FDCAN_HandleTypeDefSt10unique_ptrINS_9CommonLib11IRingBufferINS5_8CanFrameEEESt14default_deleteIS8_EEOSB_mmm>
 8010d56:	f107 0310 	add.w	r3, r7, #16
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f7f0 fc18 	bl	8001590 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8010d60:	f107 0314 	add.w	r3, r7, #20
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7f0 fd01 	bl	800176c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 8010d6a:	f107 0308 	add.w	r3, r7, #8
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7f0 fc0e 	bl	8001590 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8010d74:	f107 030c 	add.w	r3, r7, #12
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7f0 fcf7 	bl	800176c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 8010d7e:	4b53      	ldr	r3, [pc, #332]	; (8010ecc <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	3301      	adds	r3, #1
 8010d84:	4a51      	ldr	r2, [pc, #324]	; (8010ecc <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8010d86:	6013      	str	r3, [r2, #0]
 8010d88:	4b50      	ldr	r3, [pc, #320]	; (8010ecc <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	2b01      	cmp	r3, #1
 8010d8e:	bf0c      	ite	eq
 8010d90:	2301      	moveq	r3, #1
 8010d92:	2300      	movne	r3, #0
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d03b      	beq.n	8010e12 <_Z41__static_initialization_and_destruction_0ii+0x24e>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8010d9a:	f107 031c 	add.w	r3, r7, #28
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7f0 fcc8 	bl	8001734 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 8010da4:	f107 021c 	add.w	r2, r7, #28
 8010da8:	f107 0318 	add.w	r3, r7, #24
 8010dac:	4611      	mov	r1, r2
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7f0 fd0f 	bl	80017d2 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8010db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7f0 fcbb 	bl	8001734 <_ZSt11make_uniqueIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 8010dbe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010dc2:	f107 0320 	add.w	r3, r7, #32
 8010dc6:	4611      	mov	r1, r2
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7f0 fd02 	bl	80017d2 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EEC1INS1_10RingBufferIS3_Lj5EEES5_ISA_EvEEOS_IT_T0_E>
 8010dce:	f107 0320 	add.w	r3, r7, #32
 8010dd2:	f107 0218 	add.w	r2, r7, #24
 8010dd6:	2110      	movs	r1, #16
 8010dd8:	9102      	str	r1, [sp, #8]
 8010dda:	2102      	movs	r1, #2
 8010ddc:	9101      	str	r1, [sp, #4]
 8010dde:	2141      	movs	r1, #65	; 0x41
 8010de0:	9100      	str	r1, [sp, #0]
 8010de2:	493b      	ldr	r1, [pc, #236]	; (8010ed0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8010de4:	483b      	ldr	r0, [pc, #236]	; (8010ed4 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8010de6:	f7ef fe57 	bl	8000a98 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommC1EP19FDCAN_HandleTypeDefSt10unique_ptrINS_9CommonLib11IRingBufferINS5_8CanFrameEEESt14default_deleteIS8_EEOSB_mmm>
 8010dea:	f107 0320 	add.w	r3, r7, #32
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7f0 fbce 	bl	8001590 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8010df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f7f0 fcb7 	bl	800176c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 8010dfe:	f107 0318 	add.w	r3, r7, #24
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7f0 fbc4 	bl	8001590 <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib11IRingBufferINS1_8CanFrameEEESt14default_deleteIS4_EED1Ev>
			std::make_unique<CommonLib::RingBuffer<CommonLib::CanFrame,5> >(),
 8010e08:	f107 031c 	add.w	r3, r7, #28
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7f0 fcad 	bl	800176c <_ZNSt10unique_ptrIN12G24_STM32HAL9CommonLib10RingBufferINS1_8CanFrameELj5EEESt14default_deleteIS4_EED1Ev>
	inline auto usb = CommonLib::UsbCdcComm<4,4>{&hUsbDeviceFS};
 8010e12:	4b31      	ldr	r3, [pc, #196]	; (8010ed8 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	3301      	adds	r3, #1
 8010e18:	4a2f      	ldr	r2, [pc, #188]	; (8010ed8 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8010e1a:	6013      	str	r3, [r2, #0]
 8010e1c:	4b2e      	ldr	r3, [pc, #184]	; (8010ed8 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	2b01      	cmp	r3, #1
 8010e22:	bf0c      	ite	eq
 8010e24:	2301      	moveq	r3, #1
 8010e26:	2300      	movne	r3, #0
 8010e28:	b2db      	uxtb	r3, r3
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d003      	beq.n	8010e36 <_Z41__static_initialization_and_destruction_0ii+0x272>
 8010e2e:	492b      	ldr	r1, [pc, #172]	; (8010edc <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8010e30:	482b      	ldr	r0, [pc, #172]	; (8010ee0 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8010e32:	f7f0 fd4b 	bl	80018cc <_ZN12G24_STM32HAL9CommonLib10UsbCdcCommILj4ELj4EEC1EP19_USBD_HandleTypeDef>
	};

	inline bool bus_is_open = false;
	inline DeviceList bus1_list;
 8010e36:	4b2b      	ldr	r3, [pc, #172]	; (8010ee4 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	3301      	adds	r3, #1
 8010e3c:	4a29      	ldr	r2, [pc, #164]	; (8010ee4 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8010e3e:	6013      	str	r3, [r2, #0]
 8010e40:	4b28      	ldr	r3, [pc, #160]	; (8010ee4 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	2b01      	cmp	r3, #1
 8010e46:	bf0c      	ite	eq
 8010e48:	2301      	moveq	r3, #1
 8010e4a:	2300      	movne	r3, #0
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d002      	beq.n	8010e58 <_Z41__static_initialization_and_destruction_0ii+0x294>
 8010e52:	4825      	ldr	r0, [pc, #148]	; (8010ee8 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8010e54:	f7f0 f9a0 	bl	8001198 <_ZN12G24_STM32HAL11UsbCanBoard10DeviceListC1Ev>
	inline DeviceList bus2_list;
 8010e58:	4b24      	ldr	r3, [pc, #144]	; (8010eec <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	4a23      	ldr	r2, [pc, #140]	; (8010eec <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8010e60:	6013      	str	r3, [r2, #0]
 8010e62:	4b22      	ldr	r3, [pc, #136]	; (8010eec <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	2b01      	cmp	r3, #1
 8010e68:	bf0c      	ite	eq
 8010e6a:	2301      	moveq	r3, #1
 8010e6c:	2300      	movne	r3, #0
 8010e6e:	b2db      	uxtb	r3, r3
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d03f      	beq.n	8010ef4 <_Z41__static_initialization_and_destruction_0ii+0x330>
 8010e74:	481e      	ldr	r0, [pc, #120]	; (8010ef0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8010e76:	f7f0 f98f 	bl	8001198 <_ZN12G24_STM32HAL11UsbCanBoard10DeviceListC1Ev>
 8010e7a:	e03b      	b.n	8010ef4 <_Z41__static_initialization_and_destruction_0ii+0x330>
 8010e7c:	24000e18 	.word	0x24000e18
 8010e80:	24000f30 	.word	0x24000f30
 8010e84:	240002b4 	.word	0x240002b4
 8010e88:	24000e1c 	.word	0x24000e1c
 8010e8c:	24000e4c 	.word	0x24000e4c
 8010e90:	240002d0 	.word	0x240002d0
 8010e94:	24000e20 	.word	0x24000e20
 8010e98:	240002fc 	.word	0x240002fc
 8010e9c:	24000e24 	.word	0x24000e24
 8010ea0:	24000328 	.word	0x24000328
 8010ea4:	24000e28 	.word	0x24000e28
 8010ea8:	24000ee4 	.word	0x24000ee4
 8010eac:	24000354 	.word	0x24000354
 8010eb0:	24000e2c 	.word	0x24000e2c
 8010eb4:	24000380 	.word	0x24000380
 8010eb8:	24000e30 	.word	0x24000e30
 8010ebc:	240003ac 	.word	0x240003ac
 8010ec0:	24000e34 	.word	0x24000e34
 8010ec4:	24000170 	.word	0x24000170
 8010ec8:	240003d8 	.word	0x240003d8
 8010ecc:	24000e38 	.word	0x24000e38
 8010ed0:	24000210 	.word	0x24000210
 8010ed4:	240003f4 	.word	0x240003f4
 8010ed8:	24000e3c 	.word	0x24000e3c
 8010edc:	240010ac 	.word	0x240010ac
 8010ee0:	24000410 	.word	0x24000410
 8010ee4:	24000e40 	.word	0x24000e40
 8010ee8:	24000d10 	.word	0x24000d10
 8010eec:	24000e44 	.word	0x24000e44
 8010ef0:	24000d94 	.word	0x24000d94
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d137      	bne.n	8010f6a <_Z41__static_initialization_and_destruction_0ii+0x3a6>
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f00:	4293      	cmp	r3, r2
 8010f02:	d132      	bne.n	8010f6a <_Z41__static_initialization_and_destruction_0ii+0x3a6>
	inline auto can2 = UsbCanLib::FdCanComm{&hfdcan2,
 8010f04:	4b1b      	ldr	r3, [pc, #108]	; (8010f74 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	3b01      	subs	r3, #1
 8010f0a:	4a1a      	ldr	r2, [pc, #104]	; (8010f74 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8010f0c:	6013      	str	r3, [r2, #0]
 8010f0e:	4b19      	ldr	r3, [pc, #100]	; (8010f74 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	bf0c      	ite	eq
 8010f16:	2301      	moveq	r3, #1
 8010f18:	2300      	movne	r3, #0
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d002      	beq.n	8010f26 <_Z41__static_initialization_and_destruction_0ii+0x362>
 8010f20:	4815      	ldr	r0, [pc, #84]	; (8010f78 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8010f22:	f7f0 f921 	bl	8001168 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommD1Ev>
	inline auto can1 = UsbCanLib::FdCanComm{&hfdcan1,
 8010f26:	4b15      	ldr	r3, [pc, #84]	; (8010f7c <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	3b01      	subs	r3, #1
 8010f2c:	4a13      	ldr	r2, [pc, #76]	; (8010f7c <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8010f2e:	6013      	str	r3, [r2, #0]
 8010f30:	4b12      	ldr	r3, [pc, #72]	; (8010f7c <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	bf0c      	ite	eq
 8010f38:	2301      	moveq	r3, #1
 8010f3a:	2300      	movne	r3, #0
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d002      	beq.n	8010f48 <_Z41__static_initialization_and_destruction_0ii+0x384>
 8010f42:	480f      	ldr	r0, [pc, #60]	; (8010f80 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8010f44:	f7f0 f910 	bl	8001168 <_ZN12G24_STM32HAL9UsbCanLib9FdCanCommD1Ev>
	inline auto led_timer = CommonLib::InterruptionTimerHard(&htim17);
 8010f48:	4b0e      	ldr	r3, [pc, #56]	; (8010f84 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	3b01      	subs	r3, #1
 8010f4e:	4a0d      	ldr	r2, [pc, #52]	; (8010f84 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8010f50:	6013      	str	r3, [r2, #0]
 8010f52:	4b0c      	ldr	r3, [pc, #48]	; (8010f84 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	bf0c      	ite	eq
 8010f5a:	2301      	moveq	r3, #1
 8010f5c:	2300      	movne	r3, #0
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d002      	beq.n	8010f6a <_Z41__static_initialization_and_destruction_0ii+0x3a6>
 8010f64:	4808      	ldr	r0, [pc, #32]	; (8010f88 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8010f66:	f7f0 f8eb 	bl	8001140 <_ZN12G24_STM32HAL9CommonLib21InterruptionTimerHardD1Ev>
 8010f6a:	bf00      	nop
 8010f6c:	3728      	adds	r7, #40	; 0x28
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	24000e38 	.word	0x24000e38
 8010f78:	240003f4 	.word	0x240003f4
 8010f7c:	24000e34 	.word	0x24000e34
 8010f80:	240003d8 	.word	0x240003d8
 8010f84:	24000e18 	.word	0x24000e18
 8010f88:	240002b4 	.word	0x240002b4

08010f8c <_GLOBAL__sub_I__ZN12G24_STM32HAL11UsbCanBoard4initEv>:
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010f94:	2001      	movs	r0, #1
 8010f96:	f7ff fe15 	bl	8010bc4 <_Z41__static_initialization_and_destruction_0ii>
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <_GLOBAL__sub_D__ZN12G24_STM32HAL11UsbCanBoard4initEv>:
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	f7ff fe0d 	bl	8010bc4 <_Z41__static_initialization_and_destruction_0ii>
 8010faa:	bd80      	pop	{r7, pc}

08010fac <_ZdlPvj>:
 8010fac:	f000 b8c7 	b.w	801113e <_ZdlPv>

08010fb0 <_Znwj>:
 8010fb0:	2801      	cmp	r0, #1
 8010fb2:	bf38      	it	cc
 8010fb4:	2001      	movcc	r0, #1
 8010fb6:	b510      	push	{r4, lr}
 8010fb8:	4604      	mov	r4, r0
 8010fba:	4620      	mov	r0, r4
 8010fbc:	f000 f8d2 	bl	8011164 <malloc>
 8010fc0:	b100      	cbz	r0, 8010fc4 <_Znwj+0x14>
 8010fc2:	bd10      	pop	{r4, pc}
 8010fc4:	f000 f8be 	bl	8011144 <_ZSt15get_new_handlerv>
 8010fc8:	b908      	cbnz	r0, 8010fce <_Znwj+0x1e>
 8010fca:	f000 f8c3 	bl	8011154 <abort>
 8010fce:	4780      	blx	r0
 8010fd0:	e7f3      	b.n	8010fba <_Znwj+0xa>

08010fd2 <_ZSt19__throw_logic_errorPKc>:
 8010fd2:	b508      	push	{r3, lr}
 8010fd4:	f000 f8be 	bl	8011154 <abort>

08010fd8 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8010fd8:	b40f      	push	{r0, r1, r2, r3}
 8010fda:	b580      	push	{r7, lr}
 8010fdc:	b084      	sub	sp, #16
 8010fde:	af00      	add	r7, sp, #0
 8010fe0:	f107 0418 	add.w	r4, r7, #24
 8010fe4:	f854 2b04 	ldr.w	r2, [r4], #4
 8010fe8:	607a      	str	r2, [r7, #4]
 8010fea:	4610      	mov	r0, r2
 8010fec:	f7ef f974 	bl	80002d8 <strlen>
 8010ff0:	f200 2307 	addw	r3, r0, #519	; 0x207
 8010ff4:	f023 0307 	bic.w	r3, r3, #7
 8010ff8:	ebad 0d03 	sub.w	sp, sp, r3
 8010ffc:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8011000:	687a      	ldr	r2, [r7, #4]
 8011002:	60fc      	str	r4, [r7, #12]
 8011004:	4623      	mov	r3, r4
 8011006:	4668      	mov	r0, sp
 8011008:	f000 f858 	bl	80110bc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 801100c:	f000 f8a2 	bl	8011154 <abort>

08011010 <_ZSt25__throw_bad_function_callv>:
 8011010:	b508      	push	{r3, lr}
 8011012:	f000 f89f 	bl	8011154 <abort>
	...

08011018 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8011018:	b580      	push	{r7, lr}
 801101a:	b09c      	sub	sp, #112	; 0x70
 801101c:	4606      	mov	r6, r0
 801101e:	af00      	add	r7, sp, #0
 8011020:	460c      	mov	r4, r1
 8011022:	1ba4      	subs	r4, r4, r6
 8011024:	490e      	ldr	r1, [pc, #56]	; (8011060 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8011026:	2269      	movs	r2, #105	; 0x69
 8011028:	1d38      	adds	r0, r7, #4
 801102a:	f000 f9df 	bl	80113ec <memcpy>
 801102e:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8011032:	f023 0307 	bic.w	r3, r3, #7
 8011036:	ebad 0d03 	sub.w	sp, sp, r3
 801103a:	466d      	mov	r5, sp
 801103c:	2268      	movs	r2, #104	; 0x68
 801103e:	1d39      	adds	r1, r7, #4
 8011040:	4628      	mov	r0, r5
 8011042:	f000 f9d3 	bl	80113ec <memcpy>
 8011046:	4622      	mov	r2, r4
 8011048:	4631      	mov	r1, r6
 801104a:	f105 0068 	add.w	r0, r5, #104	; 0x68
 801104e:	442c      	add	r4, r5
 8011050:	f000 f9cc 	bl	80113ec <memcpy>
 8011054:	2300      	movs	r3, #0
 8011056:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 801105a:	4628      	mov	r0, r5
 801105c:	f7ff ffb9 	bl	8010fd2 <_ZSt19__throw_logic_errorPKc>
 8011060:	0801178c 	.word	0x0801178c

08011064 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8011064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011068:	af00      	add	r7, sp, #0
 801106a:	b084      	sub	sp, #16
 801106c:	466d      	mov	r5, sp
 801106e:	f105 040c 	add.w	r4, r5, #12
 8011072:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80110b8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8011076:	4623      	mov	r3, r4
 8011078:	f04f 0c0a 	mov.w	ip, #10
 801107c:	fbb2 f6fc 	udiv	r6, r2, ip
 8011080:	fb0c 2e16 	mls	lr, ip, r6, r2
 8011084:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8011088:	f803 ed01 	strb.w	lr, [r3, #-1]!
 801108c:	4696      	mov	lr, r2
 801108e:	f1be 0f09 	cmp.w	lr, #9
 8011092:	4632      	mov	r2, r6
 8011094:	d8f2      	bhi.n	801107c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8011096:	1ae4      	subs	r4, r4, r3
 8011098:	428c      	cmp	r4, r1
 801109a:	d809      	bhi.n	80110b0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 801109c:	f1c4 010c 	rsb	r1, r4, #12
 80110a0:	4622      	mov	r2, r4
 80110a2:	4429      	add	r1, r5
 80110a4:	f000 f9a2 	bl	80113ec <memcpy>
 80110a8:	4620      	mov	r0, r4
 80110aa:	46bd      	mov	sp, r7
 80110ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110b0:	f04f 34ff 	mov.w	r4, #4294967295
 80110b4:	e7f8      	b.n	80110a8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80110b6:	bf00      	nop
 80110b8:	080117f5 	.word	0x080117f5

080110bc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80110bc:	3901      	subs	r1, #1
 80110be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110c2:	4607      	mov	r7, r0
 80110c4:	4615      	mov	r5, r2
 80110c6:	eb00 0801 	add.w	r8, r0, r1
 80110ca:	4604      	mov	r4, r0
 80110cc:	782a      	ldrb	r2, [r5, #0]
 80110ce:	b392      	cbz	r2, 8011136 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80110d0:	4544      	cmp	r4, r8
 80110d2:	d216      	bcs.n	8011102 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 80110d4:	2a25      	cmp	r2, #37	; 0x25
 80110d6:	d107      	bne.n	80110e8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80110d8:	786a      	ldrb	r2, [r5, #1]
 80110da:	2a73      	cmp	r2, #115	; 0x73
 80110dc:	d009      	beq.n	80110f2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80110de:	2a7a      	cmp	r2, #122	; 0x7a
 80110e0:	d016      	beq.n	8011110 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x54>
 80110e2:	2a25      	cmp	r2, #37	; 0x25
 80110e4:	d100      	bne.n	80110e8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80110e6:	3501      	adds	r5, #1
 80110e8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80110ec:	f804 2b01 	strb.w	r2, [r4], #1
 80110f0:	e7ec      	b.n	80110cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80110f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80110f6:	3a01      	subs	r2, #1
 80110f8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80110fc:	b1c9      	cbz	r1, 8011132 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80110fe:	4544      	cmp	r4, r8
 8011100:	d103      	bne.n	801110a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4e>
 8011102:	4621      	mov	r1, r4
 8011104:	4638      	mov	r0, r7
 8011106:	f7ff ff87 	bl	8011018 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801110a:	f804 1b01 	strb.w	r1, [r4], #1
 801110e:	e7f3      	b.n	80110f8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8011110:	78aa      	ldrb	r2, [r5, #2]
 8011112:	2a75      	cmp	r2, #117	; 0x75
 8011114:	d1e8      	bne.n	80110e8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8011116:	461e      	mov	r6, r3
 8011118:	eba8 0104 	sub.w	r1, r8, r4
 801111c:	f856 2b04 	ldr.w	r2, [r6], #4
 8011120:	4620      	mov	r0, r4
 8011122:	f7ff ff9f 	bl	8011064 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8011126:	2800      	cmp	r0, #0
 8011128:	ddeb      	ble.n	8011102 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 801112a:	4404      	add	r4, r0
 801112c:	3503      	adds	r5, #3
 801112e:	4633      	mov	r3, r6
 8011130:	e7cc      	b.n	80110cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8011132:	3502      	adds	r5, #2
 8011134:	e7ca      	b.n	80110cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8011136:	7022      	strb	r2, [r4, #0]
 8011138:	1be0      	subs	r0, r4, r7
 801113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801113e <_ZdlPv>:
 801113e:	f000 b819 	b.w	8011174 <free>
	...

08011144 <_ZSt15get_new_handlerv>:
 8011144:	4b02      	ldr	r3, [pc, #8]	; (8011150 <_ZSt15get_new_handlerv+0xc>)
 8011146:	6818      	ldr	r0, [r3, #0]
 8011148:	f3bf 8f5b 	dmb	ish
 801114c:	4770      	bx	lr
 801114e:	bf00      	nop
 8011150:	24002cb4 	.word	0x24002cb4

08011154 <abort>:
 8011154:	b508      	push	{r3, lr}
 8011156:	2006      	movs	r0, #6
 8011158:	f000 f8f0 	bl	801133c <raise>
 801115c:	2001      	movs	r0, #1
 801115e:	f7f1 fc25 	bl	80029ac <_exit>
	...

08011164 <malloc>:
 8011164:	4b02      	ldr	r3, [pc, #8]	; (8011170 <malloc+0xc>)
 8011166:	4601      	mov	r1, r0
 8011168:	6818      	ldr	r0, [r3, #0]
 801116a:	f000 b82b 	b.w	80111c4 <_malloc_r>
 801116e:	bf00      	nop
 8011170:	24000150 	.word	0x24000150

08011174 <free>:
 8011174:	4b02      	ldr	r3, [pc, #8]	; (8011180 <free+0xc>)
 8011176:	4601      	mov	r1, r0
 8011178:	6818      	ldr	r0, [r3, #0]
 801117a:	f000 b945 	b.w	8011408 <_free_r>
 801117e:	bf00      	nop
 8011180:	24000150 	.word	0x24000150

08011184 <sbrk_aligned>:
 8011184:	b570      	push	{r4, r5, r6, lr}
 8011186:	4e0e      	ldr	r6, [pc, #56]	; (80111c0 <sbrk_aligned+0x3c>)
 8011188:	460c      	mov	r4, r1
 801118a:	6831      	ldr	r1, [r6, #0]
 801118c:	4605      	mov	r5, r0
 801118e:	b911      	cbnz	r1, 8011196 <sbrk_aligned+0x12>
 8011190:	f000 f8f0 	bl	8011374 <_sbrk_r>
 8011194:	6030      	str	r0, [r6, #0]
 8011196:	4621      	mov	r1, r4
 8011198:	4628      	mov	r0, r5
 801119a:	f000 f8eb 	bl	8011374 <_sbrk_r>
 801119e:	1c43      	adds	r3, r0, #1
 80111a0:	d00a      	beq.n	80111b8 <sbrk_aligned+0x34>
 80111a2:	1cc4      	adds	r4, r0, #3
 80111a4:	f024 0403 	bic.w	r4, r4, #3
 80111a8:	42a0      	cmp	r0, r4
 80111aa:	d007      	beq.n	80111bc <sbrk_aligned+0x38>
 80111ac:	1a21      	subs	r1, r4, r0
 80111ae:	4628      	mov	r0, r5
 80111b0:	f000 f8e0 	bl	8011374 <_sbrk_r>
 80111b4:	3001      	adds	r0, #1
 80111b6:	d101      	bne.n	80111bc <sbrk_aligned+0x38>
 80111b8:	f04f 34ff 	mov.w	r4, #4294967295
 80111bc:	4620      	mov	r0, r4
 80111be:	bd70      	pop	{r4, r5, r6, pc}
 80111c0:	24002cbc 	.word	0x24002cbc

080111c4 <_malloc_r>:
 80111c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111c8:	1ccd      	adds	r5, r1, #3
 80111ca:	f025 0503 	bic.w	r5, r5, #3
 80111ce:	3508      	adds	r5, #8
 80111d0:	2d0c      	cmp	r5, #12
 80111d2:	bf38      	it	cc
 80111d4:	250c      	movcc	r5, #12
 80111d6:	2d00      	cmp	r5, #0
 80111d8:	4607      	mov	r7, r0
 80111da:	db01      	blt.n	80111e0 <_malloc_r+0x1c>
 80111dc:	42a9      	cmp	r1, r5
 80111de:	d905      	bls.n	80111ec <_malloc_r+0x28>
 80111e0:	230c      	movs	r3, #12
 80111e2:	603b      	str	r3, [r7, #0]
 80111e4:	2600      	movs	r6, #0
 80111e6:	4630      	mov	r0, r6
 80111e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80112c0 <_malloc_r+0xfc>
 80111f0:	f000 f868 	bl	80112c4 <__malloc_lock>
 80111f4:	f8d8 3000 	ldr.w	r3, [r8]
 80111f8:	461c      	mov	r4, r3
 80111fa:	bb5c      	cbnz	r4, 8011254 <_malloc_r+0x90>
 80111fc:	4629      	mov	r1, r5
 80111fe:	4638      	mov	r0, r7
 8011200:	f7ff ffc0 	bl	8011184 <sbrk_aligned>
 8011204:	1c43      	adds	r3, r0, #1
 8011206:	4604      	mov	r4, r0
 8011208:	d155      	bne.n	80112b6 <_malloc_r+0xf2>
 801120a:	f8d8 4000 	ldr.w	r4, [r8]
 801120e:	4626      	mov	r6, r4
 8011210:	2e00      	cmp	r6, #0
 8011212:	d145      	bne.n	80112a0 <_malloc_r+0xdc>
 8011214:	2c00      	cmp	r4, #0
 8011216:	d048      	beq.n	80112aa <_malloc_r+0xe6>
 8011218:	6823      	ldr	r3, [r4, #0]
 801121a:	4631      	mov	r1, r6
 801121c:	4638      	mov	r0, r7
 801121e:	eb04 0903 	add.w	r9, r4, r3
 8011222:	f000 f8a7 	bl	8011374 <_sbrk_r>
 8011226:	4581      	cmp	r9, r0
 8011228:	d13f      	bne.n	80112aa <_malloc_r+0xe6>
 801122a:	6821      	ldr	r1, [r4, #0]
 801122c:	1a6d      	subs	r5, r5, r1
 801122e:	4629      	mov	r1, r5
 8011230:	4638      	mov	r0, r7
 8011232:	f7ff ffa7 	bl	8011184 <sbrk_aligned>
 8011236:	3001      	adds	r0, #1
 8011238:	d037      	beq.n	80112aa <_malloc_r+0xe6>
 801123a:	6823      	ldr	r3, [r4, #0]
 801123c:	442b      	add	r3, r5
 801123e:	6023      	str	r3, [r4, #0]
 8011240:	f8d8 3000 	ldr.w	r3, [r8]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d038      	beq.n	80112ba <_malloc_r+0xf6>
 8011248:	685a      	ldr	r2, [r3, #4]
 801124a:	42a2      	cmp	r2, r4
 801124c:	d12b      	bne.n	80112a6 <_malloc_r+0xe2>
 801124e:	2200      	movs	r2, #0
 8011250:	605a      	str	r2, [r3, #4]
 8011252:	e00f      	b.n	8011274 <_malloc_r+0xb0>
 8011254:	6822      	ldr	r2, [r4, #0]
 8011256:	1b52      	subs	r2, r2, r5
 8011258:	d41f      	bmi.n	801129a <_malloc_r+0xd6>
 801125a:	2a0b      	cmp	r2, #11
 801125c:	d917      	bls.n	801128e <_malloc_r+0xca>
 801125e:	1961      	adds	r1, r4, r5
 8011260:	42a3      	cmp	r3, r4
 8011262:	6025      	str	r5, [r4, #0]
 8011264:	bf18      	it	ne
 8011266:	6059      	strne	r1, [r3, #4]
 8011268:	6863      	ldr	r3, [r4, #4]
 801126a:	bf08      	it	eq
 801126c:	f8c8 1000 	streq.w	r1, [r8]
 8011270:	5162      	str	r2, [r4, r5]
 8011272:	604b      	str	r3, [r1, #4]
 8011274:	4638      	mov	r0, r7
 8011276:	f104 060b 	add.w	r6, r4, #11
 801127a:	f000 f829 	bl	80112d0 <__malloc_unlock>
 801127e:	f026 0607 	bic.w	r6, r6, #7
 8011282:	1d23      	adds	r3, r4, #4
 8011284:	1af2      	subs	r2, r6, r3
 8011286:	d0ae      	beq.n	80111e6 <_malloc_r+0x22>
 8011288:	1b9b      	subs	r3, r3, r6
 801128a:	50a3      	str	r3, [r4, r2]
 801128c:	e7ab      	b.n	80111e6 <_malloc_r+0x22>
 801128e:	42a3      	cmp	r3, r4
 8011290:	6862      	ldr	r2, [r4, #4]
 8011292:	d1dd      	bne.n	8011250 <_malloc_r+0x8c>
 8011294:	f8c8 2000 	str.w	r2, [r8]
 8011298:	e7ec      	b.n	8011274 <_malloc_r+0xb0>
 801129a:	4623      	mov	r3, r4
 801129c:	6864      	ldr	r4, [r4, #4]
 801129e:	e7ac      	b.n	80111fa <_malloc_r+0x36>
 80112a0:	4634      	mov	r4, r6
 80112a2:	6876      	ldr	r6, [r6, #4]
 80112a4:	e7b4      	b.n	8011210 <_malloc_r+0x4c>
 80112a6:	4613      	mov	r3, r2
 80112a8:	e7cc      	b.n	8011244 <_malloc_r+0x80>
 80112aa:	230c      	movs	r3, #12
 80112ac:	603b      	str	r3, [r7, #0]
 80112ae:	4638      	mov	r0, r7
 80112b0:	f000 f80e 	bl	80112d0 <__malloc_unlock>
 80112b4:	e797      	b.n	80111e6 <_malloc_r+0x22>
 80112b6:	6025      	str	r5, [r4, #0]
 80112b8:	e7dc      	b.n	8011274 <_malloc_r+0xb0>
 80112ba:	605b      	str	r3, [r3, #4]
 80112bc:	deff      	udf	#255	; 0xff
 80112be:	bf00      	nop
 80112c0:	24002cb8 	.word	0x24002cb8

080112c4 <__malloc_lock>:
 80112c4:	4801      	ldr	r0, [pc, #4]	; (80112cc <__malloc_lock+0x8>)
 80112c6:	f000 b88f 	b.w	80113e8 <__retarget_lock_acquire_recursive>
 80112ca:	bf00      	nop
 80112cc:	24002dfc 	.word	0x24002dfc

080112d0 <__malloc_unlock>:
 80112d0:	4801      	ldr	r0, [pc, #4]	; (80112d8 <__malloc_unlock+0x8>)
 80112d2:	f000 b88a 	b.w	80113ea <__retarget_lock_release_recursive>
 80112d6:	bf00      	nop
 80112d8:	24002dfc 	.word	0x24002dfc

080112dc <memset>:
 80112dc:	4402      	add	r2, r0
 80112de:	4603      	mov	r3, r0
 80112e0:	4293      	cmp	r3, r2
 80112e2:	d100      	bne.n	80112e6 <memset+0xa>
 80112e4:	4770      	bx	lr
 80112e6:	f803 1b01 	strb.w	r1, [r3], #1
 80112ea:	e7f9      	b.n	80112e0 <memset+0x4>

080112ec <_raise_r>:
 80112ec:	291f      	cmp	r1, #31
 80112ee:	b538      	push	{r3, r4, r5, lr}
 80112f0:	4604      	mov	r4, r0
 80112f2:	460d      	mov	r5, r1
 80112f4:	d904      	bls.n	8011300 <_raise_r+0x14>
 80112f6:	2316      	movs	r3, #22
 80112f8:	6003      	str	r3, [r0, #0]
 80112fa:	f04f 30ff 	mov.w	r0, #4294967295
 80112fe:	bd38      	pop	{r3, r4, r5, pc}
 8011300:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011302:	b112      	cbz	r2, 801130a <_raise_r+0x1e>
 8011304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011308:	b94b      	cbnz	r3, 801131e <_raise_r+0x32>
 801130a:	4620      	mov	r0, r4
 801130c:	f000 f830 	bl	8011370 <_getpid_r>
 8011310:	462a      	mov	r2, r5
 8011312:	4601      	mov	r1, r0
 8011314:	4620      	mov	r0, r4
 8011316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801131a:	f000 b817 	b.w	801134c <_kill_r>
 801131e:	2b01      	cmp	r3, #1
 8011320:	d00a      	beq.n	8011338 <_raise_r+0x4c>
 8011322:	1c59      	adds	r1, r3, #1
 8011324:	d103      	bne.n	801132e <_raise_r+0x42>
 8011326:	2316      	movs	r3, #22
 8011328:	6003      	str	r3, [r0, #0]
 801132a:	2001      	movs	r0, #1
 801132c:	e7e7      	b.n	80112fe <_raise_r+0x12>
 801132e:	2400      	movs	r4, #0
 8011330:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011334:	4628      	mov	r0, r5
 8011336:	4798      	blx	r3
 8011338:	2000      	movs	r0, #0
 801133a:	e7e0      	b.n	80112fe <_raise_r+0x12>

0801133c <raise>:
 801133c:	4b02      	ldr	r3, [pc, #8]	; (8011348 <raise+0xc>)
 801133e:	4601      	mov	r1, r0
 8011340:	6818      	ldr	r0, [r3, #0]
 8011342:	f7ff bfd3 	b.w	80112ec <_raise_r>
 8011346:	bf00      	nop
 8011348:	24000150 	.word	0x24000150

0801134c <_kill_r>:
 801134c:	b538      	push	{r3, r4, r5, lr}
 801134e:	4d07      	ldr	r5, [pc, #28]	; (801136c <_kill_r+0x20>)
 8011350:	2300      	movs	r3, #0
 8011352:	4604      	mov	r4, r0
 8011354:	4608      	mov	r0, r1
 8011356:	4611      	mov	r1, r2
 8011358:	602b      	str	r3, [r5, #0]
 801135a:	f7f1 fb17 	bl	800298c <_kill>
 801135e:	1c43      	adds	r3, r0, #1
 8011360:	d102      	bne.n	8011368 <_kill_r+0x1c>
 8011362:	682b      	ldr	r3, [r5, #0]
 8011364:	b103      	cbz	r3, 8011368 <_kill_r+0x1c>
 8011366:	6023      	str	r3, [r4, #0]
 8011368:	bd38      	pop	{r3, r4, r5, pc}
 801136a:	bf00      	nop
 801136c:	24002df8 	.word	0x24002df8

08011370 <_getpid_r>:
 8011370:	f7f1 bb04 	b.w	800297c <_getpid>

08011374 <_sbrk_r>:
 8011374:	b538      	push	{r3, r4, r5, lr}
 8011376:	4d06      	ldr	r5, [pc, #24]	; (8011390 <_sbrk_r+0x1c>)
 8011378:	2300      	movs	r3, #0
 801137a:	4604      	mov	r4, r0
 801137c:	4608      	mov	r0, r1
 801137e:	602b      	str	r3, [r5, #0]
 8011380:	f7f1 fb1e 	bl	80029c0 <_sbrk>
 8011384:	1c43      	adds	r3, r0, #1
 8011386:	d102      	bne.n	801138e <_sbrk_r+0x1a>
 8011388:	682b      	ldr	r3, [r5, #0]
 801138a:	b103      	cbz	r3, 801138e <_sbrk_r+0x1a>
 801138c:	6023      	str	r3, [r4, #0]
 801138e:	bd38      	pop	{r3, r4, r5, pc}
 8011390:	24002df8 	.word	0x24002df8

08011394 <__errno>:
 8011394:	4b01      	ldr	r3, [pc, #4]	; (801139c <__errno+0x8>)
 8011396:	6818      	ldr	r0, [r3, #0]
 8011398:	4770      	bx	lr
 801139a:	bf00      	nop
 801139c:	24000150 	.word	0x24000150

080113a0 <__libc_init_array>:
 80113a0:	b570      	push	{r4, r5, r6, lr}
 80113a2:	4d0d      	ldr	r5, [pc, #52]	; (80113d8 <__libc_init_array+0x38>)
 80113a4:	4c0d      	ldr	r4, [pc, #52]	; (80113dc <__libc_init_array+0x3c>)
 80113a6:	1b64      	subs	r4, r4, r5
 80113a8:	10a4      	asrs	r4, r4, #2
 80113aa:	2600      	movs	r6, #0
 80113ac:	42a6      	cmp	r6, r4
 80113ae:	d109      	bne.n	80113c4 <__libc_init_array+0x24>
 80113b0:	4d0b      	ldr	r5, [pc, #44]	; (80113e0 <__libc_init_array+0x40>)
 80113b2:	4c0c      	ldr	r4, [pc, #48]	; (80113e4 <__libc_init_array+0x44>)
 80113b4:	f000 f874 	bl	80114a0 <_init>
 80113b8:	1b64      	subs	r4, r4, r5
 80113ba:	10a4      	asrs	r4, r4, #2
 80113bc:	2600      	movs	r6, #0
 80113be:	42a6      	cmp	r6, r4
 80113c0:	d105      	bne.n	80113ce <__libc_init_array+0x2e>
 80113c2:	bd70      	pop	{r4, r5, r6, pc}
 80113c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80113c8:	4798      	blx	r3
 80113ca:	3601      	adds	r6, #1
 80113cc:	e7ee      	b.n	80113ac <__libc_init_array+0xc>
 80113ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80113d2:	4798      	blx	r3
 80113d4:	3601      	adds	r6, #1
 80113d6:	e7f2      	b.n	80113be <__libc_init_array+0x1e>
 80113d8:	08011808 	.word	0x08011808
 80113dc:	08011808 	.word	0x08011808
 80113e0:	08011808 	.word	0x08011808
 80113e4:	08011814 	.word	0x08011814

080113e8 <__retarget_lock_acquire_recursive>:
 80113e8:	4770      	bx	lr

080113ea <__retarget_lock_release_recursive>:
 80113ea:	4770      	bx	lr

080113ec <memcpy>:
 80113ec:	440a      	add	r2, r1
 80113ee:	4291      	cmp	r1, r2
 80113f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80113f4:	d100      	bne.n	80113f8 <memcpy+0xc>
 80113f6:	4770      	bx	lr
 80113f8:	b510      	push	{r4, lr}
 80113fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80113fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011402:	4291      	cmp	r1, r2
 8011404:	d1f9      	bne.n	80113fa <memcpy+0xe>
 8011406:	bd10      	pop	{r4, pc}

08011408 <_free_r>:
 8011408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801140a:	2900      	cmp	r1, #0
 801140c:	d044      	beq.n	8011498 <_free_r+0x90>
 801140e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011412:	9001      	str	r0, [sp, #4]
 8011414:	2b00      	cmp	r3, #0
 8011416:	f1a1 0404 	sub.w	r4, r1, #4
 801141a:	bfb8      	it	lt
 801141c:	18e4      	addlt	r4, r4, r3
 801141e:	f7ff ff51 	bl	80112c4 <__malloc_lock>
 8011422:	4a1e      	ldr	r2, [pc, #120]	; (801149c <_free_r+0x94>)
 8011424:	9801      	ldr	r0, [sp, #4]
 8011426:	6813      	ldr	r3, [r2, #0]
 8011428:	b933      	cbnz	r3, 8011438 <_free_r+0x30>
 801142a:	6063      	str	r3, [r4, #4]
 801142c:	6014      	str	r4, [r2, #0]
 801142e:	b003      	add	sp, #12
 8011430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011434:	f7ff bf4c 	b.w	80112d0 <__malloc_unlock>
 8011438:	42a3      	cmp	r3, r4
 801143a:	d908      	bls.n	801144e <_free_r+0x46>
 801143c:	6825      	ldr	r5, [r4, #0]
 801143e:	1961      	adds	r1, r4, r5
 8011440:	428b      	cmp	r3, r1
 8011442:	bf01      	itttt	eq
 8011444:	6819      	ldreq	r1, [r3, #0]
 8011446:	685b      	ldreq	r3, [r3, #4]
 8011448:	1949      	addeq	r1, r1, r5
 801144a:	6021      	streq	r1, [r4, #0]
 801144c:	e7ed      	b.n	801142a <_free_r+0x22>
 801144e:	461a      	mov	r2, r3
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	b10b      	cbz	r3, 8011458 <_free_r+0x50>
 8011454:	42a3      	cmp	r3, r4
 8011456:	d9fa      	bls.n	801144e <_free_r+0x46>
 8011458:	6811      	ldr	r1, [r2, #0]
 801145a:	1855      	adds	r5, r2, r1
 801145c:	42a5      	cmp	r5, r4
 801145e:	d10b      	bne.n	8011478 <_free_r+0x70>
 8011460:	6824      	ldr	r4, [r4, #0]
 8011462:	4421      	add	r1, r4
 8011464:	1854      	adds	r4, r2, r1
 8011466:	42a3      	cmp	r3, r4
 8011468:	6011      	str	r1, [r2, #0]
 801146a:	d1e0      	bne.n	801142e <_free_r+0x26>
 801146c:	681c      	ldr	r4, [r3, #0]
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	6053      	str	r3, [r2, #4]
 8011472:	440c      	add	r4, r1
 8011474:	6014      	str	r4, [r2, #0]
 8011476:	e7da      	b.n	801142e <_free_r+0x26>
 8011478:	d902      	bls.n	8011480 <_free_r+0x78>
 801147a:	230c      	movs	r3, #12
 801147c:	6003      	str	r3, [r0, #0]
 801147e:	e7d6      	b.n	801142e <_free_r+0x26>
 8011480:	6825      	ldr	r5, [r4, #0]
 8011482:	1961      	adds	r1, r4, r5
 8011484:	428b      	cmp	r3, r1
 8011486:	bf04      	itt	eq
 8011488:	6819      	ldreq	r1, [r3, #0]
 801148a:	685b      	ldreq	r3, [r3, #4]
 801148c:	6063      	str	r3, [r4, #4]
 801148e:	bf04      	itt	eq
 8011490:	1949      	addeq	r1, r1, r5
 8011492:	6021      	streq	r1, [r4, #0]
 8011494:	6054      	str	r4, [r2, #4]
 8011496:	e7ca      	b.n	801142e <_free_r+0x26>
 8011498:	b003      	add	sp, #12
 801149a:	bd30      	pop	{r4, r5, pc}
 801149c:	24002cb8 	.word	0x24002cb8

080114a0 <_init>:
 80114a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114a2:	bf00      	nop
 80114a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114a6:	bc08      	pop	{r3}
 80114a8:	469e      	mov	lr, r3
 80114aa:	4770      	bx	lr

080114ac <_fini>:
 80114ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ae:	bf00      	nop
 80114b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114b2:	bc08      	pop	{r3}
 80114b4:	469e      	mov	lr, r3
 80114b6:	4770      	bx	lr
